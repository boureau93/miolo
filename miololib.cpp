/* Generated by Cython 3.0.10 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "/Users/emiliobergamim/Library/Python/3.9/lib/python/site-packages/numpy/_core/include/numpy/arrayobject.h",
            "/Users/emiliobergamim/Library/Python/3.9/lib/python/site-packages/numpy/_core/include/numpy/arrayscalars.h",
            "/Users/emiliobergamim/Library/Python/3.9/lib/python/site-packages/numpy/_core/include/numpy/ndarrayobject.h",
            "/Users/emiliobergamim/Library/Python/3.9/lib/python/site-packages/numpy/_core/include/numpy/ndarraytypes.h",
            "/Users/emiliobergamim/Library/Python/3.9/lib/python/site-packages/numpy/_core/include/numpy/ufuncobject.h",
            "cpp/aux.h",
            "cpp/diagonal.h",
            "cpp/digraph.h",
            "cpp/euclidean.h",
            "cpp/graph.h",
            "cpp/lorentz.h",
            "cpp/mtx.h",
            "cpp/other_functions.h",
            "cpp/poincare.h",
            "cpp/sphere.h",
            "cpp/ufunctions.h"
        ],
        "include_dirs": [
            "/Users/emiliobergamim/Library/Python/3.9/lib/python/site-packages/numpy/_core/include"
        ],
        "language": "c++",
        "name": "miolo",
        "sources": [
            "miololib.pyx"
        ]
    },
    "module_name": "miolo"
}
END: Cython Metadata */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#if defined(CYTHON_LIMITED_API) && 0
  #ifndef Py_LIMITED_API
    #if CYTHON_LIMITED_API+0 > 0x03030000
      #define Py_LIMITED_API CYTHON_LIMITED_API
    #else
      #define Py_LIMITED_API 0x03030000
    #endif
  #endif
#endif

#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02070000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.7+ or Python 3.3+.
#else
#if defined(CYTHON_LIMITED_API) && CYTHON_LIMITED_API
#define __PYX_EXTRA_ABI_MODULE_NAME "limited"
#else
#define __PYX_EXTRA_ABI_MODULE_NAME ""
#endif
#define CYTHON_ABI "3_0_10" __PYX_EXTRA_ABI_MODULE_NAME
#define __PYX_ABI_MODULE_NAME "_cython_" CYTHON_ABI
#define __PYX_TYPE_MODULE_PREFIX __PYX_ABI_MODULE_NAME "."
#define CYTHON_HEX_VERSION 0x03000AF0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(_WIN32) && !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #define HAVE_LONG_LONG
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#define __PYX_LIMITED_VERSION_HEX PY_VERSION_HEX
#if defined(GRAALVM_PYTHON)
  /* For very preliminary testing purposes. Most variables are set the same as PyPy.
     The existence of this section does not imply that anything works or is even tested */
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 1
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS (PY_MAJOR_VERSION >= 3)
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
  #undef CYTHON_USE_FREELISTS
  #define CYTHON_USE_FREELISTS 0
#elif defined(PYPY_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS (PY_MAJOR_VERSION >= 3)
  #endif
  #if PY_VERSION_HEX < 0x03090000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1 && PYPY_VERSION_NUM >= 0x07030C00)
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
  #undef CYTHON_USE_FREELISTS
  #define CYTHON_USE_FREELISTS 0
#elif defined(CYTHON_LIMITED_API)
  #ifdef Py_LIMITED_API
    #undef __PYX_LIMITED_VERSION_HEX
    #define __PYX_LIMITED_VERSION_HEX Py_LIMITED_API
  #endif
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 1
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_CLINE_IN_TRACEBACK
  #define CYTHON_CLINE_IN_TRACEBACK 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 1
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #endif
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 1
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 0
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
  #undef CYTHON_USE_FREELISTS
  #define CYTHON_USE_FREELISTS 0
#elif defined(Py_GIL_DISABLED) || defined(Py_NOGIL)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #ifndef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #ifndef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #ifndef CYTHON_METH_FASTCALL
    #define CYTHON_METH_FASTCALL 1
  #endif
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_MODULE_STATE
    #define CYTHON_USE_MODULE_STATE 0
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
  #ifndef CYTHON_USE_FREELISTS
    #define CYTHON_USE_FREELISTS 0
  #endif
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #ifndef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #ifndef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0 || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_GIL
    #define CYTHON_FAST_GIL (PY_MAJOR_VERSION < 3 || PY_VERSION_HEX >= 0x03060000 && PY_VERSION_HEX < 0x030C00A6)
  #endif
  #ifndef CYTHON_METH_FASTCALL
    #define CYTHON_METH_FASTCALL (PY_VERSION_HEX >= 0x030700A1)
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_MODULE_STATE
    #define CYTHON_USE_MODULE_STATE 0
  #endif
  #if PY_VERSION_HEX < 0x030400a1
    #undef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 0
  #elif !defined(CYTHON_USE_TP_FINALIZE)
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #if PY_VERSION_HEX < 0x030600B1
    #undef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS 0
  #elif !defined(CYTHON_USE_DICT_VERSIONS)
    #define CYTHON_USE_DICT_VERSIONS  (PY_VERSION_HEX < 0x030C00A5)
  #endif
  #if PY_VERSION_HEX < 0x030700A3
    #undef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK 0
  #elif !defined(CYTHON_USE_EXC_INFO_STACK)
    #define CYTHON_USE_EXC_INFO_STACK 1
  #endif
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
  #ifndef CYTHON_USE_FREELISTS
    #define CYTHON_USE_FREELISTS 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if !defined(CYTHON_VECTORCALL)
#define CYTHON_VECTORCALL  (CYTHON_FAST_PYCCALL && PY_VERSION_HEX >= 0x030800B1)
#endif
#define CYTHON_BACKPORT_VECTORCALL (CYTHON_METH_FASTCALL && PY_VERSION_HEX < 0x030800B1)
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_MAJOR_VERSION < 3
    #include "longintrepr.h"
  #endif
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
  #if defined(__cplusplus)
    /* for clang __has_cpp_attribute(maybe_unused) is true even before C++17
     * but leads to warnings with -pedantic, since it is a C++17 feature */
    #if ((defined(_MSVC_LANG) && _MSVC_LANG >= 201703L) || __cplusplus >= 201703L)
      #if __has_cpp_attribute(maybe_unused)
        #define CYTHON_UNUSED [[maybe_unused]]
      #endif
    #endif
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
  #define CYTHON_MAYBE_UNUSED_VAR(x) CYTHON_UNUSED_VAR(x)
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_USE_CPP_STD_MOVE
  #if defined(__cplusplus) && (\
    __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600))
    #define CYTHON_USE_CPP_STD_MOVE 1
  #else
    #define CYTHON_USE_CPP_STD_MOVE 0
  #endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
            typedef unsigned char     uint8_t;
            typedef unsigned short    uint16_t;
            typedef unsigned int      uint32_t;
        #else
            typedef unsigned __int8   uint8_t;
            typedef unsigned __int16  uint16_t;
            typedef unsigned __int32  uint32_t;
        #endif
    #endif
    #if _MSC_VER < 1300
        #ifdef _WIN64
            typedef unsigned long long  __pyx_uintptr_t;
        #else
            typedef unsigned int        __pyx_uintptr_t;
        #endif
    #else
        #ifdef _WIN64
            typedef unsigned __int64    __pyx_uintptr_t;
        #else
            typedef unsigned __int32    __pyx_uintptr_t;
        #endif
    #endif
#else
    #include <stdint.h>
    typedef uintptr_t  __pyx_uintptr_t;
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus)
    /* for clang __has_cpp_attribute(fallthrough) is true even before C++17
     * but leads to warnings with -pedantic, since it is a C++17 feature */
    #if ((defined(_MSVC_LANG) && _MSVC_LANG >= 201703L) || __cplusplus >= 201703L)
      #if __has_cpp_attribute(fallthrough)
        #define CYTHON_FALLTHROUGH [[fallthrough]]
      #endif
    #endif
    #ifndef CYTHON_FALLTHROUGH
      #if __has_cpp_attribute(clang::fallthrough)
        #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
      #elif __has_cpp_attribute(gnu::fallthrough)
        #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
      #endif
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif
#ifdef __cplusplus
  template <typename T>
  struct __PYX_IS_UNSIGNED_IMPL {static const bool value = T(0) < T(-1);};
  #define __PYX_IS_UNSIGNED(type) (__PYX_IS_UNSIGNED_IMPL<type>::value)
#else
  #define __PYX_IS_UNSIGNED(type) (((type)-1) > 0)
#endif
#if CYTHON_COMPILING_IN_PYPY == 1
  #define __PYX_NEED_TP_PRINT_SLOT  (PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x030A0000)
#else
  #define __PYX_NEED_TP_PRINT_SLOT  (PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000)
#endif
#define __PYX_REINTERPRET_FUNCION(func_pointer, other_pointer) ((func_pointer)(void(*)(void))(other_pointer))

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(const U& other) const { return *ptr == other; }
    template<typename U> bool operator !=(const U& other) const { return *ptr != other; }
    template<typename U> bool operator==(const __Pyx_FakeReference<U>& other) const { return *ptr == *other.ptr; }
    template<typename U> bool operator!=(const __Pyx_FakeReference<U>& other) const { return *ptr != *other.ptr; }
  private:
    T *ptr;
};

#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_DefaultClassType PyClass_Type
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if CYTHON_COMPILING_IN_LIMITED_API
    static CYTHON_INLINE PyObject* __Pyx_PyCode_New(int a, int p, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
        PyObject *exception_table = NULL;
        PyObject *types_module=NULL, *code_type=NULL, *result=NULL;
        #if __PYX_LIMITED_VERSION_HEX < 0x030B0000
        PyObject *version_info;
        PyObject *py_minor_version = NULL;
        #endif
        long minor_version = 0;
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        #if __PYX_LIMITED_VERSION_HEX >= 0x030B0000
        minor_version = 11;
        #else
        if (!(version_info = PySys_GetObject("version_info"))) goto end;
        if (!(py_minor_version = PySequence_GetItem(version_info, 1))) goto end;
        minor_version = PyLong_AsLong(py_minor_version);
        Py_DECREF(py_minor_version);
        if (minor_version == -1 && PyErr_Occurred()) goto end;
        #endif
        if (!(types_module = PyImport_ImportModule("types"))) goto end;
        if (!(code_type = PyObject_GetAttrString(types_module, "CodeType"))) goto end;
        if (minor_version <= 7) {
            (void)p;
            result = PyObject_CallFunction(code_type, "iiiiiOOOOOOiOO", a, k, l, s, f, code,
                          c, n, v, fn, name, fline, lnos, fv, cell);
        } else if (minor_version <= 10) {
            result = PyObject_CallFunction(code_type, "iiiiiiOOOOOOiOO", a,p, k, l, s, f, code,
                          c, n, v, fn, name, fline, lnos, fv, cell);
        } else {
            if (!(exception_table = PyBytes_FromStringAndSize(NULL, 0))) goto end;
            result = PyObject_CallFunction(code_type, "iiiiiiOOOOOOOiOO", a,p, k, l, s, f, code,
                          c, n, v, fn, name, name, fline, lnos, exception_table, fv, cell);
        }
    end:
        Py_XDECREF(code_type);
        Py_XDECREF(exception_table);
        Py_XDECREF(types_module);
        if (type) {
            PyErr_Restore(type, value, traceback);
        }
        return result;
    }
    #ifndef CO_OPTIMIZED
    #define CO_OPTIMIZED 0x0001
    #endif
    #ifndef CO_NEWLOCALS
    #define CO_NEWLOCALS 0x0002
    #endif
    #ifndef CO_VARARGS
    #define CO_VARARGS 0x0004
    #endif
    #ifndef CO_VARKEYWORDS
    #define CO_VARKEYWORDS 0x0008
    #endif
    #ifndef CO_ASYNC_GENERATOR
    #define CO_ASYNC_GENERATOR 0x0200
    #endif
    #ifndef CO_GENERATOR
    #define CO_GENERATOR 0x0020
    #endif
    #ifndef CO_COROUTINE
    #define CO_COROUTINE 0x0080
    #endif
#elif PY_VERSION_HEX >= 0x030B0000
  static CYTHON_INLINE PyCodeObject* __Pyx_PyCode_New(int a, int p, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
    PyCodeObject *result;
    PyObject *empty_bytes = PyBytes_FromStringAndSize("", 0);
    if (!empty_bytes) return NULL;
    result =
      #if PY_VERSION_HEX >= 0x030C0000
        PyUnstable_Code_NewWithPosOnlyArgs
      #else
        PyCode_NewWithPosOnlyArgs
      #endif
        (a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, name, fline, lnos, empty_bytes);
    Py_DECREF(empty_bytes);
    return result;
  }
#elif PY_VERSION_HEX >= 0x030800B2 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_NewWithPosOnlyArgs(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
#endif
#if PY_VERSION_HEX >= 0x030900A4 || defined(Py_IS_TYPE)
  #define __Pyx_IS_TYPE(ob, type) Py_IS_TYPE(ob, type)
#else
  #define __Pyx_IS_TYPE(ob, type) (((const PyObject*)ob)->ob_type == (type))
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_Is)
  #define __Pyx_Py_Is(x, y)  Py_Is(x, y)
#else
  #define __Pyx_Py_Is(x, y) ((x) == (y))
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsNone)
  #define __Pyx_Py_IsNone(ob) Py_IsNone(ob)
#else
  #define __Pyx_Py_IsNone(ob) __Pyx_Py_Is((ob), Py_None)
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsTrue)
  #define __Pyx_Py_IsTrue(ob) Py_IsTrue(ob)
#else
  #define __Pyx_Py_IsTrue(ob) __Pyx_Py_Is((ob), Py_True)
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsFalse)
  #define __Pyx_Py_IsFalse(ob) Py_IsFalse(ob)
#else
  #define __Pyx_Py_IsFalse(ob) __Pyx_Py_Is((ob), Py_False)
#endif
#define __Pyx_NoneAsNull(obj)  (__Pyx_Py_IsNone(obj) ? NULL : (obj))
#if PY_VERSION_HEX >= 0x030900F0 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyObject_GC_IsFinalized(o) PyObject_GC_IsFinalized(o)
#else
  #define __Pyx_PyObject_GC_IsFinalized(o) _PyGC_FINALIZED(o)
#endif
#ifndef CO_COROUTINE
  #define CO_COROUTINE 0x80
#endif
#ifndef CO_ASYNC_GENERATOR
  #define CO_ASYNC_GENERATOR 0x200
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef Py_TPFLAGS_SEQUENCE
  #define Py_TPFLAGS_SEQUENCE 0
#endif
#ifndef Py_TPFLAGS_MAPPING
  #define Py_TPFLAGS_MAPPING 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #if PY_VERSION_HEX >= 0x030d00A4
  #  define __Pyx_PyCFunctionFast PyCFunctionFast
  #  define __Pyx_PyCFunctionFastWithKeywords PyCFunctionFastWithKeywords
  #else
  #  define __Pyx_PyCFunctionFast _PyCFunctionFast
  #  define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
  #endif
#endif
#if CYTHON_METH_FASTCALL
  #define __Pyx_METH_FASTCALL METH_FASTCALL
  #define __Pyx_PyCFunction_FastCall __Pyx_PyCFunctionFast
  #define __Pyx_PyCFunction_FastCallWithKeywords __Pyx_PyCFunctionFastWithKeywords
#else
  #define __Pyx_METH_FASTCALL METH_VARARGS
  #define __Pyx_PyCFunction_FastCall PyCFunction
  #define __Pyx_PyCFunction_FastCallWithKeywords PyCFunctionWithKeywords
#endif
#if CYTHON_VECTORCALL
  #define __pyx_vectorcallfunc vectorcallfunc
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  PY_VECTORCALL_ARGUMENTS_OFFSET
  #define __Pyx_PyVectorcall_NARGS(n)  PyVectorcall_NARGS((size_t)(n))
#elif CYTHON_BACKPORT_VECTORCALL
  typedef PyObject *(*__pyx_vectorcallfunc)(PyObject *callable, PyObject *const *args,
                                            size_t nargsf, PyObject *kwnames);
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  ((size_t)1 << (8 * sizeof(size_t) - 1))
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(((size_t)(n)) & ~__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET))
#else
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  0
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(n))
#endif
#if PY_MAJOR_VERSION >= 0x030900B1
#define __Pyx_PyCFunction_CheckExact(func)  PyCFunction_CheckExact(func)
#else
#define __Pyx_PyCFunction_CheckExact(func)  PyCFunction_Check(func)
#endif
#define __Pyx_CyOrPyCFunction_Check(func)  PyCFunction_Check(func)
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CyOrPyCFunction_GET_FUNCTION(func)  (((PyCFunctionObject*)(func))->m_ml->ml_meth)
#elif !CYTHON_COMPILING_IN_LIMITED_API
#define __Pyx_CyOrPyCFunction_GET_FUNCTION(func)  PyCFunction_GET_FUNCTION(func)
#endif
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CyOrPyCFunction_GET_FLAGS(func)  (((PyCFunctionObject*)(func))->m_ml->ml_flags)
static CYTHON_INLINE PyObject* __Pyx_CyOrPyCFunction_GET_SELF(PyObject *func) {
    return (__Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_STATIC) ? NULL : ((PyCFunctionObject*)func)->m_self;
}
#endif
static CYTHON_INLINE int __Pyx__IsSameCFunction(PyObject *func, void *cfunc) {
#if CYTHON_COMPILING_IN_LIMITED_API
    return PyCFunction_Check(func) && PyCFunction_GetFunction(func) == (PyCFunction) cfunc;
#else
    return PyCFunction_Check(func) && PyCFunction_GET_FUNCTION(func) == (PyCFunction) cfunc;
#endif
}
#define __Pyx_IsSameCFunction(func, cfunc)   __Pyx__IsSameCFunction(func, cfunc)
#if __PYX_LIMITED_VERSION_HEX < 0x030900B1
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  ((void)m, PyType_FromSpecWithBases(s, b))
  typedef PyObject *(*__Pyx_PyCMethod)(PyObject *, PyTypeObject *, PyObject *const *, size_t, PyObject *);
#else
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  PyType_FromModuleAndSpec(m, s, b)
  #define __Pyx_PyCMethod  PyCMethod
#endif
#ifndef METH_METHOD
  #define METH_METHOD 0x200
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyThreadState_Current PyThreadState_Get()
#elif !CYTHON_FAST_THREAD_STATE
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x030d00A1
  #define __Pyx_PyThreadState_Current PyThreadState_GetUnchecked()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE void *__Pyx_PyModule_GetState(PyObject *op)
{
    void *result;
    result = PyModule_GetState(op);
    if (!result)
        Py_FatalError("Couldn't find the module state");
    return result;
}
#endif
#define __Pyx_PyObject_GetSlot(obj, name, func_ctype)  __Pyx_PyType_GetSlot(Py_TYPE(obj), name, func_ctype)
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((func_ctype) PyType_GetSlot((type), Py_##name))
#else
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((type)->name)
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if PY_MAJOR_VERSION < 3
    #if CYTHON_COMPILING_IN_PYPY
        #if PYPY_VERSION_NUM < 0x07030600
            #if defined(__cplusplus) && __cplusplus >= 201402L
                [[deprecated("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6")]]
            #elif defined(__GNUC__) || defined(__clang__)
                __attribute__ ((__deprecated__("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6")))
            #elif defined(_MSC_VER)
                __declspec(deprecated("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6"))
            #endif
            static CYTHON_INLINE int PyGILState_Check(void) {
                return 0;
            }
        #else  // PYPY_VERSION_NUM < 0x07030600
        #endif  // PYPY_VERSION_NUM < 0x07030600
    #else
        static CYTHON_INLINE int PyGILState_Check(void) {
            PyThreadState * tstate = _PyThreadState_Current;
            return tstate && (tstate == PyGILState_GetThisThreadState());
        }
    #endif
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030d0000 || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX > 0x030600B4 && PY_VERSION_HEX < 0x030d0000 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStrWithError(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStr(PyObject *dict, PyObject *name) {
    PyObject *res = __Pyx_PyDict_GetItemStrWithError(dict, name);
    if (res == NULL) PyErr_Clear();
    return res;
}
#elif PY_MAJOR_VERSION >= 3 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07020000)
#define __Pyx_PyDict_GetItemStrWithError  PyDict_GetItemWithError
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#else
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStrWithError(PyObject *dict, PyObject *name) {
#if CYTHON_COMPILING_IN_PYPY
    return PyDict_GetItem(dict, name);
#else
    PyDictEntry *ep;
    PyDictObject *mp = (PyDictObject*) dict;
    long hash = ((PyStringObject *) name)->ob_shash;
    assert(hash != -1);
    ep = (mp->ma_lookup)(mp, name, hash);
    if (ep == NULL) {
        return NULL;
    }
    return ep->me_value;
#endif
}
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#endif
#if CYTHON_USE_TYPE_SLOTS
  #define __Pyx_PyType_GetFlags(tp)   (((PyTypeObject *)tp)->tp_flags)
  #define __Pyx_PyType_HasFeature(type, feature)  ((__Pyx_PyType_GetFlags(type) & (feature)) != 0)
  #define __Pyx_PyObject_GetIterNextFunc(obj)  (Py_TYPE(obj)->tp_iternext)
#else
  #define __Pyx_PyType_GetFlags(tp)   (PyType_GetFlags((PyTypeObject *)tp))
  #define __Pyx_PyType_HasFeature(type, feature)  PyType_HasFeature(type, feature)
  #define __Pyx_PyObject_GetIterNextFunc(obj)  PyIter_Next
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_SetItemOnTypeDict(tp, k, v) PyObject_GenericSetAttr((PyObject*)tp, k, v)
#else
  #define __Pyx_SetItemOnTypeDict(tp, k, v) PyDict_SetItem(tp->tp_dict, k, v)
#endif
#if CYTHON_USE_TYPE_SPECS && PY_VERSION_HEX >= 0x03080000
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  {\
    PyTypeObject *type = Py_TYPE((PyObject*)obj);\
    assert(__Pyx_PyType_HasFeature(type, Py_TPFLAGS_HEAPTYPE));\
    PyObject_GC_Del(obj);\
    Py_DECREF(type);\
}
#else
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  PyObject_GC_Del(obj)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GetLength(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_ReadChar(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((void)u, 1114111U)
  #define __Pyx_PyUnicode_KIND(u)         ((void)u, (0))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)u)
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)k, PyUnicode_ReadChar((PyObject*)(d), i))
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GetLength(u))
#elif PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_READY(op)       (0)
  #else
    #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                                0 : _PyUnicode_Ready((PyObject *)(op)))
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         ((int)PyUnicode_KIND(u))
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, (Py_UCS4) ch)
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #else
    #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
    #else
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
    #endif
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535U : 1114111U)
  #define __Pyx_PyUnicode_KIND(u)         ((int)sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = (Py_UNICODE) ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #if !defined(PyUnicode_DecodeUnicodeEscape)
    #define PyUnicode_DecodeUnicodeEscape(s, size, errors)  PyUnicode_Decode(s, size, "unicode_escape", errors)
  #endif
  #if !defined(PyUnicode_Contains) || (PY_MAJOR_VERSION == 2 && PYPY_VERSION_NUM < 0x07030500)
    #undef PyUnicode_Contains
    #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
  #endif
  #if !defined(PyByteArray_Check)
    #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
  #endif
  #if !defined(PyObject_Format)
    #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
  #endif
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#if CYTHON_COMPILING_IN_CPYTHON
  #define __Pyx_PySequence_ListKeepNew(obj)\
    (likely(PyList_CheckExact(obj) && Py_REFCNT(obj) == 1) ? __Pyx_NewRef(obj) : PySequence_List(obj))
#else
  #define __Pyx_PySequence_ListKeepNew(obj)  PySequence_List(obj)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        __Pyx_IS_TYPE(obj, &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_ITEM(o, i) PySequence_ITEM(o, i)
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
  #define __Pyx_PyTuple_SET_ITEM(o, i, v) (PyTuple_SET_ITEM(o, i, v), (0))
  #define __Pyx_PyList_SET_ITEM(o, i, v) (PyList_SET_ITEM(o, i, v), (0))
  #define __Pyx_PyTuple_GET_SIZE(o) PyTuple_GET_SIZE(o)
  #define __Pyx_PyList_GET_SIZE(o) PyList_GET_SIZE(o)
  #define __Pyx_PySet_GET_SIZE(o) PySet_GET_SIZE(o)
  #define __Pyx_PyBytes_GET_SIZE(o) PyBytes_GET_SIZE(o)
  #define __Pyx_PyByteArray_GET_SIZE(o) PyByteArray_GET_SIZE(o)
#else
  #define __Pyx_PySequence_ITEM(o, i) PySequence_GetItem(o, i)
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
  #define __Pyx_PyTuple_SET_ITEM(o, i, v) PyTuple_SetItem(o, i, v)
  #define __Pyx_PyList_SET_ITEM(o, i, v) PyList_SetItem(o, i, v)
  #define __Pyx_PyTuple_GET_SIZE(o) PyTuple_Size(o)
  #define __Pyx_PyList_GET_SIZE(o) PyList_Size(o)
  #define __Pyx_PySet_GET_SIZE(o) PySet_Size(o)
  #define __Pyx_PyBytes_GET_SIZE(o) PyBytes_Size(o)
  #define __Pyx_PyByteArray_GET_SIZE(o) PyByteArray_Size(o)
#endif
#if __PYX_LIMITED_VERSION_HEX >= 0x030d00A1
  #define __Pyx_PyImport_AddModuleRef(name) PyImport_AddModuleRef(name)
#else
  static CYTHON_INLINE PyObject *__Pyx_PyImport_AddModuleRef(const char *name) {
      PyObject *module = PyImport_AddModule(name);
      Py_XINCREF(module);
      return module;
  }
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define __Pyx_Py3Int_Check(op)       PyLong_Check(op)
  #define __Pyx_Py3Int_CheckExact(op)  PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#else
  #define __Pyx_Py3Int_Check(op)       (PyLong_Check(op) || PyInt_Check(op))
  #define __Pyx_Py3Int_CheckExact(op)  (PyLong_CheckExact(op) || PyInt_CheckExact(op))
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)
  #if !defined(_USE_MATH_DEFINES)
    #define _USE_MATH_DEFINES
  #endif
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__;  (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifdef CYTHON_EXTERN_C
    #undef __PYX_EXTERN_C
    #define __PYX_EXTERN_C CYTHON_EXTERN_C
#elif defined(__PYX_EXTERN_C)
    #ifdef _MSC_VER
    #pragma message ("Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.")
    #else
    #warning Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.
    #endif
#else
    #define __PYX_EXTERN_C extern "C++"
#endif

#define __PYX_HAVE__miolo
#define __PYX_HAVE_API__miolo
/* Early includes */
#include <new>
#include <vector>
#include <algorithm>
#include "cpp/aux.h"
#include <cmath>
#include "cpp/mtx.h"
#include "cpp/graph.h"
#include "cpp/digraph.h"
#include "cpp/diagonal.h"
#include "cpp/euclidean.h"
#include "cpp/sphere.h"
#include "cpp/poincare.h"
#include "cpp/lorentz.h"
#include "cpp/ufunctions.h"
#include "cpp/other_functions.h"
#include <string.h>
#include <stdio.h>

    /* Using NumPy API declarations from "numpy/__init__.cython-30.pxd" */
    
#include "numpy/arrayobject.h"
#include "numpy/ndarrayobject.h"
#include "numpy/ndarraytypes.h"
#include "numpy/arrayscalars.h"
#include "numpy/ufuncobject.h"
#include "pythread.h"
#include <stdlib.h>
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE Py_ssize_t __Pyx_ssize_strlen(const char *s);
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
static CYTHON_INLINE PyObject* __Pyx_PyByteArray_FromString(const char*);
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#define __Pyx_PyUnicode_FromOrdinal(o)       PyUnicode_FromOrdinal((int)o)
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_VERSION_HEX >= 0x030C00A7
  #ifndef _PyLong_SIGN_MASK
    #define _PyLong_SIGN_MASK 3
  #endif
  #ifndef _PyLong_NON_SIZE_BITS
    #define _PyLong_NON_SIZE_BITS 3
  #endif
  #define __Pyx_PyLong_Sign(x)  (((PyLongObject*)x)->long_value.lv_tag & _PyLong_SIGN_MASK)
  #define __Pyx_PyLong_IsNeg(x)  ((__Pyx_PyLong_Sign(x) & 2) != 0)
  #define __Pyx_PyLong_IsNonNeg(x)  (!__Pyx_PyLong_IsNeg(x))
  #define __Pyx_PyLong_IsZero(x)  (__Pyx_PyLong_Sign(x) & 1)
  #define __Pyx_PyLong_IsPos(x)  (__Pyx_PyLong_Sign(x) == 0)
  #define __Pyx_PyLong_CompactValueUnsigned(x)  (__Pyx_PyLong_Digits(x)[0])
  #define __Pyx_PyLong_DigitCount(x)  ((Py_ssize_t) (((PyLongObject*)x)->long_value.lv_tag >> _PyLong_NON_SIZE_BITS))
  #define __Pyx_PyLong_SignedDigitCount(x)\
        ((1 - (Py_ssize_t) __Pyx_PyLong_Sign(x)) * __Pyx_PyLong_DigitCount(x))
  #if defined(PyUnstable_Long_IsCompact) && defined(PyUnstable_Long_CompactValue)
    #define __Pyx_PyLong_IsCompact(x)     PyUnstable_Long_IsCompact((PyLongObject*) x)
    #define __Pyx_PyLong_CompactValue(x)  PyUnstable_Long_CompactValue((PyLongObject*) x)
  #else
    #define __Pyx_PyLong_IsCompact(x)     (((PyLongObject*)x)->long_value.lv_tag < (2 << _PyLong_NON_SIZE_BITS))
    #define __Pyx_PyLong_CompactValue(x)  ((1 - (Py_ssize_t) __Pyx_PyLong_Sign(x)) * (Py_ssize_t) __Pyx_PyLong_Digits(x)[0])
  #endif
  typedef Py_ssize_t  __Pyx_compact_pylong;
  typedef size_t  __Pyx_compact_upylong;
  #else
  #define __Pyx_PyLong_IsNeg(x)  (Py_SIZE(x) < 0)
  #define __Pyx_PyLong_IsNonNeg(x)  (Py_SIZE(x) >= 0)
  #define __Pyx_PyLong_IsZero(x)  (Py_SIZE(x) == 0)
  #define __Pyx_PyLong_IsPos(x)  (Py_SIZE(x) > 0)
  #define __Pyx_PyLong_CompactValueUnsigned(x)  ((Py_SIZE(x) == 0) ? 0 : __Pyx_PyLong_Digits(x)[0])
  #define __Pyx_PyLong_DigitCount(x)  __Pyx_sst_abs(Py_SIZE(x))
  #define __Pyx_PyLong_SignedDigitCount(x)  Py_SIZE(x)
  #define __Pyx_PyLong_IsCompact(x)  (Py_SIZE(x) == 0 || Py_SIZE(x) == 1 || Py_SIZE(x) == -1)
  #define __Pyx_PyLong_CompactValue(x)\
        ((Py_SIZE(x) == 0) ? (sdigit) 0 : ((Py_SIZE(x) < 0) ? -(sdigit)__Pyx_PyLong_Digits(x)[0] : (sdigit)__Pyx_PyLong_Digits(x)[0]))
  typedef sdigit  __Pyx_compact_pylong;
  typedef digit  __Pyx_compact_upylong;
  #endif
  #if PY_VERSION_HEX >= 0x030C00A5
  #define __Pyx_PyLong_Digits(x)  (((PyLongObject*)x)->long_value.ob_digit)
  #else
  #define __Pyx_PyLong_Digits(x)  (((PyLongObject*)x)->ob_digit)
  #endif
#endif
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
#include <string.h>
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = (char) c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#include <string.h>
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

#if !CYTHON_USE_MODULE_STATE
static PyObject *__pyx_m = NULL;
#endif
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm = __FILE__;
static const char *__pyx_filename;

/* Header.proto */
#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif (defined(_Complex_I) && !defined(_MSC_VER)) || ((defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L) && !defined(__STDC_NO_COMPLEX__) && !defined(_MSC_VER))
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif

/* #### Code section: filename_table ### */

static const char *__pyx_f[] = {
  "<stringsource>",
  "miololib.pyx",
  "__init__.cython-30.pxd",
  "type.pxd",
};
/* #### Code section: utility_code_proto_before_types ### */
/* ForceInitThreads.proto */
#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

/* NoFastGil.proto */
#define __Pyx_PyGILState_Ensure PyGILState_Ensure
#define __Pyx_PyGILState_Release PyGILState_Release
#define __Pyx_FastGIL_Remember()
#define __Pyx_FastGIL_Forget()
#define __Pyx_FastGilFuncInit()

/* BufferFormatStructs.proto */
struct __Pyx_StructField_;
#define __PYX_BUF_FLAGS_PACKED_STRUCT (1 << 0)
typedef struct {
  const char* name;
  struct __Pyx_StructField_* fields;
  size_t size;
  size_t arraysize[8];
  int ndim;
  char typegroup;
  char is_unsigned;
  int flags;
} __Pyx_TypeInfo;
typedef struct __Pyx_StructField_ {
  __Pyx_TypeInfo* type;
  const char* name;
  size_t offset;
} __Pyx_StructField;
typedef struct {
  __Pyx_StructField* field;
  size_t parent_offset;
} __Pyx_BufFmt_StackElem;
typedef struct {
  __Pyx_StructField root;
  __Pyx_BufFmt_StackElem* head;
  size_t fmt_offset;
  size_t new_count, enc_count;
  size_t struct_alignment;
  int is_complex;
  char enc_type;
  char new_packmode;
  char enc_packmode;
  char is_valid_array;
} __Pyx_BufFmt_Context;

/* Atomics.proto */
#include <pythread.h>
#ifndef CYTHON_ATOMICS
    #define CYTHON_ATOMICS 1
#endif
#define __PYX_CYTHON_ATOMICS_ENABLED() CYTHON_ATOMICS
#define __pyx_atomic_int_type int
#define __pyx_nonatomic_int_type int
#if CYTHON_ATOMICS && (defined(__STDC_VERSION__) &&\
                        (__STDC_VERSION__ >= 201112L) &&\
                        !defined(__STDC_NO_ATOMICS__))
    #include <stdatomic.h>
#elif CYTHON_ATOMICS && (defined(__cplusplus) && (\
                    (__cplusplus >= 201103L) ||\
                    (defined(_MSC_VER) && _MSC_VER >= 1700)))
    #include <atomic>
#endif
#if CYTHON_ATOMICS && (defined(__STDC_VERSION__) &&\
                        (__STDC_VERSION__ >= 201112L) &&\
                        !defined(__STDC_NO_ATOMICS__) &&\
                       ATOMIC_INT_LOCK_FREE == 2)
    #undef __pyx_atomic_int_type
    #define __pyx_atomic_int_type atomic_int
    #define __pyx_atomic_incr_aligned(value) atomic_fetch_add_explicit(value, 1, memory_order_relaxed)
    #define __pyx_atomic_decr_aligned(value) atomic_fetch_sub_explicit(value, 1, memory_order_acq_rel)
    #if defined(__PYX_DEBUG_ATOMICS) && defined(_MSC_VER)
        #pragma message ("Using standard C atomics")
    #elif defined(__PYX_DEBUG_ATOMICS)
        #warning "Using standard C atomics"
    #endif
#elif CYTHON_ATOMICS && (defined(__cplusplus) && (\
                    (__cplusplus >= 201103L) ||\
\
                    (defined(_MSC_VER) && _MSC_VER >= 1700)) &&\
                    ATOMIC_INT_LOCK_FREE == 2)
    #undef __pyx_atomic_int_type
    #define __pyx_atomic_int_type std::atomic_int
    #define __pyx_atomic_incr_aligned(value) std::atomic_fetch_add_explicit(value, 1, std::memory_order_relaxed)
    #define __pyx_atomic_decr_aligned(value) std::atomic_fetch_sub_explicit(value, 1, std::memory_order_acq_rel)
    #if defined(__PYX_DEBUG_ATOMICS) && defined(_MSC_VER)
        #pragma message ("Using standard C++ atomics")
    #elif defined(__PYX_DEBUG_ATOMICS)
        #warning "Using standard C++ atomics"
    #endif
#elif CYTHON_ATOMICS && (__GNUC__ >= 5 || (__GNUC__ == 4 &&\
                    (__GNUC_MINOR__ > 1 ||\
                    (__GNUC_MINOR__ == 1 && __GNUC_PATCHLEVEL__ >= 2))))
    #define __pyx_atomic_incr_aligned(value) __sync_fetch_and_add(value, 1)
    #define __pyx_atomic_decr_aligned(value) __sync_fetch_and_sub(value, 1)
    #ifdef __PYX_DEBUG_ATOMICS
        #warning "Using GNU atomics"
    #endif
#elif CYTHON_ATOMICS && defined(_MSC_VER)
    #include <intrin.h>
    #undef __pyx_atomic_int_type
    #define __pyx_atomic_int_type long
    #undef __pyx_nonatomic_int_type
    #define __pyx_nonatomic_int_type long
    #pragma intrinsic (_InterlockedExchangeAdd)
    #define __pyx_atomic_incr_aligned(value) _InterlockedExchangeAdd(value, 1)
    #define __pyx_atomic_decr_aligned(value) _InterlockedExchangeAdd(value, -1)
    #ifdef __PYX_DEBUG_ATOMICS
        #pragma message ("Using MSVC atomics")
    #endif
#else
    #undef CYTHON_ATOMICS
    #define CYTHON_ATOMICS 0
    #ifdef __PYX_DEBUG_ATOMICS
        #warning "Not using atomics"
    #endif
#endif
#if CYTHON_ATOMICS
    #define __pyx_add_acquisition_count(memview)\
             __pyx_atomic_incr_aligned(__pyx_get_slice_count_pointer(memview))
    #define __pyx_sub_acquisition_count(memview)\
            __pyx_atomic_decr_aligned(__pyx_get_slice_count_pointer(memview))
#else
    #define __pyx_add_acquisition_count(memview)\
            __pyx_add_acquisition_count_locked(__pyx_get_slice_count_pointer(memview), memview->lock)
    #define __pyx_sub_acquisition_count(memview)\
            __pyx_sub_acquisition_count_locked(__pyx_get_slice_count_pointer(memview), memview->lock)
#endif

/* MemviewSliceStruct.proto */
struct __pyx_memoryview_obj;
typedef struct {
  struct __pyx_memoryview_obj *memview;
  char *data;
  Py_ssize_t shape[8];
  Py_ssize_t strides[8];
  Py_ssize_t suboffsets[8];
} __Pyx_memviewslice;
#define __Pyx_MemoryView_Len(m)  (m.shape[0])

/* #### Code section: numeric_typedefs ### */

/* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":770
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":771
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":772
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":773
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":777
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":778
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":779
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":780
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":784
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":785
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":792
 * ctypedef double complex complex128_t
 * 
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":793
 * 
 * ctypedef npy_longlong   longlong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":795
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":796
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":798
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */
typedef npy_double __pyx_t_5numpy_float_t;

/* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":799
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */
typedef npy_double __pyx_t_5numpy_double_t;

/* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":800
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef float complex       cfloat_t
 */
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;
/* #### Code section: complex_type_declarations ### */
/* Declarations.proto */
#if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif
static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

/* Declarations.proto */
#if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif
static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);

/* Declarations.proto */
#if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
  #ifdef __cplusplus
    typedef ::std::complex< long double > __pyx_t_long_double_complex;
  #else
    typedef long double _Complex __pyx_t_long_double_complex;
  #endif
#else
    typedef struct { long double real, imag; } __pyx_t_long_double_complex;
#endif
static CYTHON_INLINE __pyx_t_long_double_complex __pyx_t_long_double_complex_from_parts(long double, long double);

/* #### Code section: type_declarations ### */

/*--- Type declarations ---*/
struct __pyx_obj_5miolo_mioloObject;
struct __pyx_obj_5miolo_Matrix;
struct __pyx_obj_5miolo_Graph;
struct __pyx_obj_5miolo_Digraph;
struct __pyx_obj_5miolo_Diagonal;
struct __pyx_obj_5miolo_Manifold;
struct __pyx_obj_5miolo_Euclidean;
struct __pyx_obj_5miolo_Sphere;
struct __pyx_obj_5miolo_Poincare;
struct __pyx_obj_5miolo_Lorentz;
struct __pyx_obj_5miolo_ufunction;
struct __pyx_obj_5miolo_sin;
struct __pyx_obj_5miolo_cos;
struct __pyx_obj_5miolo_tan;
struct __pyx_obj_5miolo_asin;
struct __pyx_obj_5miolo_acos;
struct __pyx_obj_5miolo_atan;
struct __pyx_obj_5miolo_cosh;
struct __pyx_obj_5miolo_sinh;
struct __pyx_obj_5miolo_tanh;
struct __pyx_obj_5miolo_acosh;
struct __pyx_obj_5miolo_asinh;
struct __pyx_obj_5miolo_atanh;
struct __pyx_obj_5miolo_exp;
struct __pyx_obj_5miolo_log;
struct __pyx_obj_5miolo_fabs;
struct __pyx_obj_5miolo_sqrt;
struct __pyx_obj_5miolo_recp;
struct __pyx_obj_5miolo_classSeparation;
struct __pyx_obj_5miolo_weightedSquareDistance;
struct __pyx_obj_5miolo_weightedDotProduct;
struct __pyx_obj_5miolo_pottsEnergy;
struct __pyx_array_obj;
struct __pyx_MemviewEnum_obj;
struct __pyx_memoryview_obj;
struct __pyx_memoryviewslice_obj;

/* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":1096
 * 
 * # Iterator API added in v1.6
 * ctypedef int (*NpyIter_IterNextFunc)(NpyIter* it) noexcept nogil             # <<<<<<<<<<<<<<
 * ctypedef void (*NpyIter_GetMultiIndexFunc)(NpyIter* it, npy_intp* outcoords) noexcept nogil
 * 
 */
typedef int (*__pyx_t_5numpy_NpyIter_IterNextFunc)(NpyIter *);

/* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":1097
 * # Iterator API added in v1.6
 * ctypedef int (*NpyIter_IterNextFunc)(NpyIter* it) noexcept nogil
 * ctypedef void (*NpyIter_GetMultiIndexFunc)(NpyIter* it, npy_intp* outcoords) noexcept nogil             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "numpy/arrayobject.h":
 */
typedef void (*__pyx_t_5numpy_NpyIter_GetMultiIndexFunc)(NpyIter *, npy_intp *);
struct __pyx_defaults;
typedef struct __pyx_defaults __pyx_defaults;
struct __pyx_defaults1;
typedef struct __pyx_defaults1 __pyx_defaults1;
struct __pyx_defaults {
  PyObject *__pyx_arg_ctype;
};
struct __pyx_defaults1 {
  PyObject *__pyx_arg_ctype;
};

/* "miololib.pyx":16
 * #-------------------------------------------------------------------------------
 * 
 * cdef class mioloObject:             # <<<<<<<<<<<<<<
 *     """
 *         A container object for four objects in the miolo library. This is usually
 */
struct __pyx_obj_5miolo_mioloObject {
  PyObject_HEAD
  mtx<int>  *mtxInt;
  mtx<float>  *mtxFloat;
  mtx<double>  *mtxDouble;
  graph<int>  *graphInt;
  graph<float>  *graphFloat;
  graph<double>  *graphDouble;
  digraph<int>  *digraphInt;
  digraph<float>  *digraphFloat;
  digraph<double>  *digraphDouble;
  diagonal<int>  *diagonalInt;
  diagonal<float>  *diagonalFloat;
  diagonal<double>  *diagonalDouble;
};


/* "miololib.pyx":110
 * #-------------------------------------------------------------------------------
 * 
 * cdef class Matrix(mioloObject):             # <<<<<<<<<<<<<<
 * 
 *     """
 */
struct __pyx_obj_5miolo_Matrix {
  struct __pyx_obj_5miolo_mioloObject __pyx_base;
  PyObject *cType;
};


/* "miololib.pyx":702
 * #-------------------------------------------------------------------------------
 * 
 * cdef class Graph(mioloObject):             # <<<<<<<<<<<<<<
 * 
 *     """
 */
struct __pyx_obj_5miolo_Graph {
  struct __pyx_obj_5miolo_mioloObject __pyx_base;
  PyObject *cType;
};


/* "miololib.pyx":1176
 * #-------------------------------------------------------------------------------
 * 
 * cdef class Digraph(mioloObject):             # <<<<<<<<<<<<<<
 * 
 *     """
 */
struct __pyx_obj_5miolo_Digraph {
  struct __pyx_obj_5miolo_mioloObject __pyx_base;
  PyObject *cType;
};


/* "miololib.pyx":1486
 * #-------------------------------------------------------------------------------
 * 
 * cdef class Diagonal(mioloObject):             # <<<<<<<<<<<<<<
 * 
 *     """
 */
struct __pyx_obj_5miolo_Diagonal {
  struct __pyx_obj_5miolo_mioloObject __pyx_base;
  PyObject *cType;
};


/* "miololib.pyx":1749
 * #-------------------------------------------------------------------------------
 * 
 * cdef class Manifold:             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_5miolo_Manifold {
  PyObject_HEAD
};


/* "miololib.pyx":1752
 *     pass
 * 
 * cdef class Euclidean(Manifold):             # <<<<<<<<<<<<<<
 * 
 *     cdef mld.euclidean view
 */
struct __pyx_obj_5miolo_Euclidean {
  struct __pyx_obj_5miolo_Manifold __pyx_base;
  euclidean view;
};


/* "miololib.pyx":1883
 *         return out
 * 
 * cdef class Sphere(Manifold):             # <<<<<<<<<<<<<<
 * 
 *     """
 */
struct __pyx_obj_5miolo_Sphere {
  struct __pyx_obj_5miolo_Manifold __pyx_base;
  sphere view;
};


/* "miololib.pyx":2058
 *         return out
 * 
 * cdef class Poincare(Manifold):             # <<<<<<<<<<<<<<
 * 
 *     """
 */
struct __pyx_obj_5miolo_Poincare {
  struct __pyx_obj_5miolo_Manifold __pyx_base;
  poincare view;
};


/* "miololib.pyx":2195
 *             return self.view.hyperbolicity(drf(M.mtxDouble))
 * 
 * cdef class Lorentz(Manifold):             # <<<<<<<<<<<<<<
 * 
 *     """
 */
struct __pyx_obj_5miolo_Lorentz {
  struct __pyx_obj_5miolo_Manifold __pyx_base;
  lorentz view;
};


/* "miololib.pyx":2395
 * #-------------------------------------------------------------------------------
 * 
 * cdef class ufunction:             # <<<<<<<<<<<<<<
 * 
 *     """
 */
struct __pyx_obj_5miolo_ufunction {
  PyObject_HEAD
  ufunction view;
};


/* "miololib.pyx":2436
 *             return out
 * 
 * cdef class sin(ufunction):             # <<<<<<<<<<<<<<
 *     def __init__(self):
 *         self.view.f = mld.sin
 */
struct __pyx_obj_5miolo_sin {
  struct __pyx_obj_5miolo_ufunction __pyx_base;
};


/* "miololib.pyx":2439
 *     def __init__(self):
 *         self.view.f = mld.sin
 * cdef class cos(ufunction):             # <<<<<<<<<<<<<<
 *     def __init__(self):
 *         self.view.f = mld.cos
 */
struct __pyx_obj_5miolo_cos {
  struct __pyx_obj_5miolo_ufunction __pyx_base;
};


/* "miololib.pyx":2442
 *     def __init__(self):
 *         self.view.f = mld.cos
 * cdef class tan(ufunction):             # <<<<<<<<<<<<<<
 *     def __init__(self):
 *         self.view.f = mld.tan
 */
struct __pyx_obj_5miolo_tan {
  struct __pyx_obj_5miolo_ufunction __pyx_base;
};


/* "miololib.pyx":2446
 *         self.view.f = mld.tan
 * 
 * cdef class asin(ufunction):             # <<<<<<<<<<<<<<
 *     def __init__(self):
 *         self.view.f = mld.asin
 */
struct __pyx_obj_5miolo_asin {
  struct __pyx_obj_5miolo_ufunction __pyx_base;
};


/* "miololib.pyx":2449
 *     def __init__(self):
 *         self.view.f = mld.asin
 * cdef class acos(ufunction):             # <<<<<<<<<<<<<<
 *     def __init__(self):
 *         self.view.f = mld.acos
 */
struct __pyx_obj_5miolo_acos {
  struct __pyx_obj_5miolo_ufunction __pyx_base;
};


/* "miololib.pyx":2452
 *     def __init__(self):
 *         self.view.f = mld.acos
 * cdef class atan(ufunction):             # <<<<<<<<<<<<<<
 *     def __init__(self):
 *         self.view.f = mld.atan
 */
struct __pyx_obj_5miolo_atan {
  struct __pyx_obj_5miolo_ufunction __pyx_base;
};


/* "miololib.pyx":2456
 *         self.view.f = mld.atan
 * 
 * cdef class cosh(ufunction):             # <<<<<<<<<<<<<<
 *     def __init__(self):
 *         self.view.f = mld.cosh
 */
struct __pyx_obj_5miolo_cosh {
  struct __pyx_obj_5miolo_ufunction __pyx_base;
};


/* "miololib.pyx":2459
 *     def __init__(self):
 *         self.view.f = mld.cosh
 * cdef class sinh(ufunction):             # <<<<<<<<<<<<<<
 *     def __init__(self):
 *         self.view.f = mld.sinh
 */
struct __pyx_obj_5miolo_sinh {
  struct __pyx_obj_5miolo_ufunction __pyx_base;
};


/* "miololib.pyx":2462
 *     def __init__(self):
 *         self.view.f = mld.sinh
 * cdef class tanh(ufunction):             # <<<<<<<<<<<<<<
 *     def __init__(self):
 *         self.view.f = mld.tanh
 */
struct __pyx_obj_5miolo_tanh {
  struct __pyx_obj_5miolo_ufunction __pyx_base;
};


/* "miololib.pyx":2466
 *         self.view.f = mld.tanh
 * 
 * cdef class acosh(ufunction):             # <<<<<<<<<<<<<<
 *     def __init__(self):
 *         self.view.f = mld.acosh
 */
struct __pyx_obj_5miolo_acosh {
  struct __pyx_obj_5miolo_ufunction __pyx_base;
};


/* "miololib.pyx":2469
 *     def __init__(self):
 *         self.view.f = mld.acosh
 * cdef class asinh(ufunction):             # <<<<<<<<<<<<<<
 *     def __init__(self):
 *         self.view.f = mld.asinh
 */
struct __pyx_obj_5miolo_asinh {
  struct __pyx_obj_5miolo_ufunction __pyx_base;
};


/* "miololib.pyx":2472
 *     def __init__(self):
 *         self.view.f = mld.asinh
 * cdef class atanh(ufunction):             # <<<<<<<<<<<<<<
 *     def __init__(self):
 *         self.view.f = mld.atanh
 */
struct __pyx_obj_5miolo_atanh {
  struct __pyx_obj_5miolo_ufunction __pyx_base;
};


/* "miololib.pyx":2476
 *         self.view.f = mld.atanh
 * 
 * cdef class exp(ufunction):             # <<<<<<<<<<<<<<
 *     def __init__(self):
 *         super().__init__()
 */
struct __pyx_obj_5miolo_exp {
  struct __pyx_obj_5miolo_ufunction __pyx_base;
};


/* "miololib.pyx":2480
 *         super().__init__()
 *         self.view.f = mld.exp
 * cdef class log(ufunction):             # <<<<<<<<<<<<<<
 *     def __init__(self):
 *         self.view.f = mld.log
 */
struct __pyx_obj_5miolo_log {
  struct __pyx_obj_5miolo_ufunction __pyx_base;
};


/* "miololib.pyx":2484
 *         self.view.f = mld.log
 * 
 * cdef class fabs(ufunction):             # <<<<<<<<<<<<<<
 *     def __init__(self):
 *         self.view.f = mld.fabs
 */
struct __pyx_obj_5miolo_fabs {
  struct __pyx_obj_5miolo_ufunction __pyx_base;
};


/* "miololib.pyx":2487
 *     def __init__(self):
 *         self.view.f = mld.fabs
 * cdef class sqrt(ufunction):             # <<<<<<<<<<<<<<
 *     def __init__(self):
 *         self.view.f = mld.sqrt
 */
struct __pyx_obj_5miolo_sqrt {
  struct __pyx_obj_5miolo_ufunction __pyx_base;
};


/* "miololib.pyx":2490
 *     def __init__(self):
 *         self.view.f = mld.sqrt
 * cdef class recp(ufunction):             # <<<<<<<<<<<<<<
 *     def __init__(self):
 *         self.view.f = mld.reciprocal
 */
struct __pyx_obj_5miolo_recp {
  struct __pyx_obj_5miolo_ufunction __pyx_base;
};


/* "miololib.pyx":2500
 * #-------------------------------------------------------------------------------
 * 
 * cdef class classSeparation:             # <<<<<<<<<<<<<<
 * 
 *     cdef mld.classSeparation view
 */
struct __pyx_obj_5miolo_classSeparation {
  PyObject_HEAD
  classSeparation view;
};


/* "miololib.pyx":2558
 *                 return self.view(drf(O.graphDouble),&labels[0],False)
 * 
 * cdef class weightedSquareDistance:             # <<<<<<<<<<<<<<
 * 
 *     cdef mld.weightedSquareDistance view
 */
struct __pyx_obj_5miolo_weightedSquareDistance {
  PyObject_HEAD
  weightedSquareDistance view;
};


/* "miololib.pyx":2592
 *                 return self.view(drf(M.mtxDouble),drf(Weights.graphDouble))
 * 
 * cdef class weightedDotProduct:             # <<<<<<<<<<<<<<
 * 
 *     cdef mld.weightedDot view
 */
struct __pyx_obj_5miolo_weightedDotProduct {
  PyObject_HEAD
  weightedDot view;
};


/* "miololib.pyx":2626
 *                 return self.view(drf(M.mtxDouble),drf(Weights.graphDouble))
 * 
 * cdef class pottsEnergy:             # <<<<<<<<<<<<<<
 * 
 *     cdef mld.pottsEnergy view
 */
struct __pyx_obj_5miolo_pottsEnergy {
  PyObject_HEAD
  pottsEnergy view;
};


/* "View.MemoryView":114
 * @cython.collection_type("sequence")
 * @cname("__pyx_array")
 * cdef class array:             # <<<<<<<<<<<<<<
 * 
 *     cdef:
 */
struct __pyx_array_obj {
  PyObject_HEAD
  struct __pyx_vtabstruct_array *__pyx_vtab;
  char *data;
  Py_ssize_t len;
  char *format;
  int ndim;
  Py_ssize_t *_shape;
  Py_ssize_t *_strides;
  Py_ssize_t itemsize;
  PyObject *mode;
  PyObject *_format;
  void (*callback_free_data)(void *);
  int free_data;
  int dtype_is_object;
};


/* "View.MemoryView":302
 * 
 * @cname('__pyx_MemviewEnum')
 * cdef class Enum(object):             # <<<<<<<<<<<<<<
 *     cdef object name
 *     def __init__(self, name):
 */
struct __pyx_MemviewEnum_obj {
  PyObject_HEAD
  PyObject *name;
};


/* "View.MemoryView":337
 * 
 * @cname('__pyx_memoryview')
 * cdef class memoryview:             # <<<<<<<<<<<<<<
 * 
 *     cdef object obj
 */
struct __pyx_memoryview_obj {
  PyObject_HEAD
  struct __pyx_vtabstruct_memoryview *__pyx_vtab;
  PyObject *obj;
  PyObject *_size;
  PyObject *_array_interface;
  PyThread_type_lock lock;
  __pyx_atomic_int_type acquisition_count;
  Py_buffer view;
  int flags;
  int dtype_is_object;
  __Pyx_TypeInfo *typeinfo;
};


/* "View.MemoryView":952
 * @cython.collection_type("sequence")
 * @cname('__pyx_memoryviewslice')
 * cdef class _memoryviewslice(memoryview):             # <<<<<<<<<<<<<<
 *     "Internal class for passing memoryview slices to Python"
 * 
 */
struct __pyx_memoryviewslice_obj {
  struct __pyx_memoryview_obj __pyx_base;
  __Pyx_memviewslice from_slice;
  PyObject *from_object;
  PyObject *(*to_object_func)(char *);
  int (*to_dtype_func)(char *, PyObject *);
};



/* "View.MemoryView":114
 * @cython.collection_type("sequence")
 * @cname("__pyx_array")
 * cdef class array:             # <<<<<<<<<<<<<<
 * 
 *     cdef:
 */

struct __pyx_vtabstruct_array {
  PyObject *(*get_memview)(struct __pyx_array_obj *);
};
static struct __pyx_vtabstruct_array *__pyx_vtabptr_array;


/* "View.MemoryView":337
 * 
 * @cname('__pyx_memoryview')
 * cdef class memoryview:             # <<<<<<<<<<<<<<
 * 
 *     cdef object obj
 */

struct __pyx_vtabstruct_memoryview {
  char *(*get_item_pointer)(struct __pyx_memoryview_obj *, PyObject *);
  PyObject *(*is_slice)(struct __pyx_memoryview_obj *, PyObject *);
  PyObject *(*setitem_slice_assignment)(struct __pyx_memoryview_obj *, PyObject *, PyObject *);
  PyObject *(*setitem_slice_assign_scalar)(struct __pyx_memoryview_obj *, struct __pyx_memoryview_obj *, PyObject *);
  PyObject *(*setitem_indexed)(struct __pyx_memoryview_obj *, PyObject *, PyObject *);
  PyObject *(*convert_item_to_object)(struct __pyx_memoryview_obj *, char *);
  PyObject *(*assign_item_from_object)(struct __pyx_memoryview_obj *, char *, PyObject *);
  PyObject *(*_get_base)(struct __pyx_memoryview_obj *);
};
static struct __pyx_vtabstruct_memoryview *__pyx_vtabptr_memoryview;


/* "View.MemoryView":952
 * @cython.collection_type("sequence")
 * @cname('__pyx_memoryviewslice')
 * cdef class _memoryviewslice(memoryview):             # <<<<<<<<<<<<<<
 *     "Internal class for passing memoryview slices to Python"
 * 
 */

struct __pyx_vtabstruct__memoryviewslice {
  struct __pyx_vtabstruct_memoryview __pyx_base;
};
static struct __pyx_vtabstruct__memoryviewslice *__pyx_vtabptr__memoryviewslice;
/* #### Code section: utility_code_proto ### */

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, Py_ssize_t);
    void (*DECREF)(void*, PyObject*, Py_ssize_t);
    void (*GOTREF)(void*, PyObject*, Py_ssize_t);
    void (*GIVEREF)(void*, PyObject*, Py_ssize_t);
    void* (*SetupContext)(const char*, Py_ssize_t, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
          }
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__))
  #define __Pyx_RefNannyFinishContextNogil() __Pyx_RefNannyFinishContext()
#endif
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_XINCREF(r)  do { if((r) == NULL); else {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) == NULL); else {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) == NULL); else {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) == NULL); else {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContextNogil()
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_Py_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; Py_XDECREF(tmp);\
    } while (0)
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#if PY_VERSION_HEX >= 0x030C00A6
#define __Pyx_PyErr_Occurred()  (__pyx_tstate->current_exception != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  (__pyx_tstate->current_exception ? (PyObject*) Py_TYPE(__pyx_tstate->current_exception) : (PyObject*) NULL)
#else
#define __Pyx_PyErr_Occurred()  (__pyx_tstate->curexc_type != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  (__pyx_tstate->curexc_type)
#endif
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  (PyErr_Occurred() != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A6
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* TupleAndListFromArray.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n);
static CYTHON_INLINE PyObject* __Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n);
#endif

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* fastcall.proto */
#if CYTHON_AVOID_BORROWED_REFS
    #define __Pyx_Arg_VARARGS(args, i) PySequence_GetItem(args, i)
#elif CYTHON_ASSUME_SAFE_MACROS
    #define __Pyx_Arg_VARARGS(args, i) PyTuple_GET_ITEM(args, i)
#else
    #define __Pyx_Arg_VARARGS(args, i) PyTuple_GetItem(args, i)
#endif
#if CYTHON_AVOID_BORROWED_REFS
    #define __Pyx_Arg_NewRef_VARARGS(arg) __Pyx_NewRef(arg)
    #define __Pyx_Arg_XDECREF_VARARGS(arg) Py_XDECREF(arg)
#else
    #define __Pyx_Arg_NewRef_VARARGS(arg) arg
    #define __Pyx_Arg_XDECREF_VARARGS(arg)
#endif
#define __Pyx_NumKwargs_VARARGS(kwds) PyDict_Size(kwds)
#define __Pyx_KwValues_VARARGS(args, nargs) NULL
#define __Pyx_GetKwValue_VARARGS(kw, kwvalues, s) __Pyx_PyDict_GetItemStrWithError(kw, s)
#define __Pyx_KwargsAsDict_VARARGS(kw, kwvalues) PyDict_Copy(kw)
#if CYTHON_METH_FASTCALL
    #define __Pyx_Arg_FASTCALL(args, i) args[i]
    #define __Pyx_NumKwargs_FASTCALL(kwds) PyTuple_GET_SIZE(kwds)
    #define __Pyx_KwValues_FASTCALL(args, nargs) ((args) + (nargs))
    static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000
    CYTHON_UNUSED static PyObject *__Pyx_KwargsAsDict_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues);
  #else
    #define __Pyx_KwargsAsDict_FASTCALL(kw, kwvalues) _PyStack_AsDict(kwvalues, kw)
  #endif
    #define __Pyx_Arg_NewRef_FASTCALL(arg) arg  /* no-op, __Pyx_Arg_FASTCALL is direct and this needs
                                                   to have the same reference counting */
    #define __Pyx_Arg_XDECREF_FASTCALL(arg)
#else
    #define __Pyx_Arg_FASTCALL __Pyx_Arg_VARARGS
    #define __Pyx_NumKwargs_FASTCALL __Pyx_NumKwargs_VARARGS
    #define __Pyx_KwValues_FASTCALL __Pyx_KwValues_VARARGS
    #define __Pyx_GetKwValue_FASTCALL __Pyx_GetKwValue_VARARGS
    #define __Pyx_KwargsAsDict_FASTCALL __Pyx_KwargsAsDict_VARARGS
    #define __Pyx_Arg_NewRef_FASTCALL(arg) __Pyx_Arg_NewRef_VARARGS(arg)
    #define __Pyx_Arg_XDECREF_FASTCALL(arg) __Pyx_Arg_XDECREF_VARARGS(arg)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) __Pyx_PyTuple_FromArray(&__Pyx_Arg_VARARGS(args, start), stop - start)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) __Pyx_PyTuple_FromArray(&__Pyx_Arg_FASTCALL(args, start), stop - start)
#else
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) PyTuple_GetSlice(args, start, stop)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) PyTuple_GetSlice(args, start, stop)
#endif

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject *const *kwvalues,
    PyObject **argnames[],
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,
    const char* function_name);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely(__Pyx_IS_TYPE(obj, type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#if !CYTHON_VECTORCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
#if !CYTHON_VECTORCALL
#if PY_VERSION_HEX >= 0x03080000
  #include "frameobject.h"
#if PY_VERSION_HEX >= 0x030b00a6 && !CYTHON_COMPILING_IN_LIMITED_API
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
  #define __Pxy_PyFrame_Initialize_Offsets()
  #define __Pyx_PyFrame_GetLocalsplus(frame)  ((frame)->f_localsplus)
#else
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif
#endif
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectFastCall.proto */
#define __Pyx_PyObject_FastCall(func, args, nargs)  __Pyx_PyObject_FastCallDict(func, args, (size_t)(nargs), NULL)
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject **args, size_t nargs, PyObject *kwargs);

/* RaiseUnexpectedTypeError.proto */
static int __Pyx_RaiseUnexpectedTypeError(const char *expected, PyObject *obj);

/* GCCDiagnostics.proto */
#if !defined(__INTEL_COMPILER) && defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* BuildPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_BuildFromAscii(Py_ssize_t ulength, char* chars, int clength,
                                                int prepend_sign, char padding_char);

/* CIntToPyUnicode.proto */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_int(int value, Py_ssize_t width, char padding_char, char format_char);

/* CIntToPyUnicode.proto */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_Py_ssize_t(Py_ssize_t value, Py_ssize_t width, char padding_char, char format_char);

/* JoinPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      Py_UCS4 max_char);

/* StrEquals.proto */
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

/* PyObjectFormatSimple.proto */
#if CYTHON_COMPILING_IN_PYPY
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#elif PY_MAJOR_VERSION < 3
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyString_CheckExact(s)) ? PyUnicode_FromEncodedObject(s, NULL, "strict") :\
        PyObject_Format(s, f))
#elif CYTHON_USE_TYPE_SLOTS
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyLong_CheckExact(s)) ? PyLong_Type.tp_repr(s) :\
        likely(PyFloat_CheckExact(s)) ? PyFloat_Type.tp_repr(s) :\
        PyObject_Format(s, f))
#else
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#endif

CYTHON_UNUSED static int __pyx_array_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static PyObject *__pyx_array_get_memview(struct __pyx_array_obj *); /*proto*/
/* GetAttr.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject *key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kw, const char* function_name, int kw_allowed);

/* DivInt[Py_ssize_t].proto */
static CYTHON_INLINE Py_ssize_t __Pyx_div_Py_ssize_t(Py_ssize_t, Py_ssize_t);

/* UnaryNegOverflows.proto */
#define __Pyx_UNARY_NEG_WOULD_OVERFLOW(x)\
        (((x) < 0) & ((unsigned long)(x) == 0-(unsigned long)(x)))

/* GetAttr3.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *, PyObject *, PyObject *);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  do {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  do {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* AssertionsEnabled.proto */
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define __Pyx_init_assertions_enabled()  (0)
  #define __pyx_assertions_enabled()  (1)
#elif CYTHON_COMPILING_IN_LIMITED_API  ||  (CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030C0000)
  static int __pyx_assertions_enabled_flag;
  #define __pyx_assertions_enabled() (__pyx_assertions_enabled_flag)
  static int __Pyx_init_assertions_enabled(void) {
    PyObject *builtins, *debug, *debug_str;
    int flag;
    builtins = PyEval_GetBuiltins();
    if (!builtins) goto bad;
    debug_str = PyUnicode_FromStringAndSize("__debug__", 9);
    if (!debug_str) goto bad;
    debug = PyObject_GetItem(builtins, debug_str);
    Py_DECREF(debug_str);
    if (!debug) goto bad;
    flag = PyObject_IsTrue(debug);
    Py_DECREF(debug);
    if (flag == -1) goto bad;
    __pyx_assertions_enabled_flag = flag;
    return 0;
  bad:
    __pyx_assertions_enabled_flag = 1;
    return -1;
  }
#else
  #define __Pyx_init_assertions_enabled()  (0)
  #define __pyx_assertions_enabled()  (!Py_OptimizeFlag)
#endif

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK && CYTHON_FAST_THREAD_STATE
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportDottedModule.proto */
static PyObject *__Pyx_ImportDottedModule(PyObject *name, PyObject *parts_tuple);
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_ImportDottedModule_WalkParts(PyObject *module, PyObject *name, PyObject *parts_tuple);
#endif

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) __Pyx_IsAnySubtype2(Py_TYPE(obj), (PyTypeObject *)type1, (PyTypeObject *)type2)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) (PyObject_TypeCheck(obj, (PyTypeObject *)type1) || PyObject_TypeCheck(obj, (PyTypeObject *)type2))
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyErr_ExceptionMatches2(err1, err2)  __Pyx_PyErr_GivenExceptionMatches2(__Pyx_PyErr_CurrentExceptionType(), err1, err2)
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

CYTHON_UNUSED static int __pyx_memoryview_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000
        L->ob_item[len] = x;
        #else
        PyList_SET_ITEM(list, len, x);
        #endif
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* PySequenceMultiply.proto */
#define __Pyx_PySequence_Multiply_Left(mul, seq)  __Pyx_PySequence_Multiply(seq, mul)
static CYTHON_INLINE PyObject* __Pyx_PySequence_Multiply(PyObject *seq, Py_ssize_t mul);

/* SetItemInt.proto */
#define __Pyx_SetItemInt(o, i, v, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_SetItemInt_Fast(o, (Py_ssize_t)i, v, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list assignment index out of range"), -1) :\
               __Pyx_SetItemInt_Generic(o, to_py_func(i), v)))
static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v);
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v,
                                               int is_list, int wraparound, int boundscheck);

/* RaiseUnboundLocalError.proto */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);

/* DivInt[long].proto */
static CYTHON_INLINE long __Pyx_div_long(long, long);

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* HasAttr.proto */
#if __PYX_LIMITED_VERSION_HEX >= 0x030d00A1
#define __Pyx_HasAttr(o, n)  PyObject_HasAttrWithError(o, n)
#else
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *, PyObject *);
#endif

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* PyObject_Str.proto */
#define __Pyx_PyObject_Str(obj)\
    (likely(PyString_CheckExact(obj)) ? __Pyx_NewRef(obj) : PyObject_Str(obj))

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* PyIntCompare.proto */
static CYTHON_INLINE int __Pyx_PyInt_BoolEqObjC(PyObject *op1, PyObject *op2, long intval, long inplace);

/* PyFloatBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyFloat_TrueDivideCObj(PyObject *op1, PyObject *op2, double floatval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyFloat_TrueDivideCObj(op1, op2, floatval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceTrueDivide(op1, op2) : PyNumber_TrueDivide(op1, op2))
#endif

/* PyObjectCallNoArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_TrueDivideObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_TrueDivideObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceTrueDivide(op1, op2) : PyNumber_TrueDivide(op1, op2))
#endif

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o, n, NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value);
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* SliceObject.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(
        PyObject* obj, Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** py_start, PyObject** py_stop, PyObject** py_slice,
        int has_cstart, int has_cstop, int wraparound);

/* PyIntCompare.proto */
static CYTHON_INLINE int __Pyx_PyInt_BoolNeObjC(PyObject *op1, PyObject *op2, long intval, long inplace);

/* CallNextTpTraverse.proto */
static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse);

/* CallNextTpClear.proto */
static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_clear);

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* IncludeStructmemberH.proto */
#include <structmember.h>

/* FixUpExtensionType.proto */
#if CYTHON_USE_TYPE_SPECS
static int __Pyx_fix_up_extension_type_from_spec(PyType_Spec *spec, PyTypeObject *type);
#endif

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod0.proto */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

/* ValidateBasesTuple.proto */
#if CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API || CYTHON_USE_TYPE_SPECS
static int __Pyx_validate_bases_tuple(const char *type_name, Py_ssize_t dictoffset, PyObject *bases);
#endif

/* PyType_Ready.proto */
CYTHON_UNUSED static int __Pyx_PyType_Ready(PyTypeObject *t);

/* SetupReduce.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_setup_reduce(PyObject* type_obj);
#endif

/* SetVTable.proto */
static int __Pyx_SetVtable(PyTypeObject* typeptr , void* vtable);

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyTypeObject *type);

/* MergeVTables.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_MergeVtables(PyTypeObject *type);
#endif

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto_3_0_10
#define __PYX_HAVE_RT_ImportType_proto_3_0_10
#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L
#include <stdalign.h>
#endif
#if (defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L) || __cplusplus >= 201103L
#define __PYX_GET_STRUCT_ALIGNMENT_3_0_10(s) alignof(s)
#else
#define __PYX_GET_STRUCT_ALIGNMENT_3_0_10(s) sizeof(void*)
#endif
enum __Pyx_ImportType_CheckSize_3_0_10 {
   __Pyx_ImportType_CheckSize_Error_3_0_10 = 0,
   __Pyx_ImportType_CheckSize_Warn_3_0_10 = 1,
   __Pyx_ImportType_CheckSize_Ignore_3_0_10 = 2
};
static PyTypeObject *__Pyx_ImportType_3_0_10(PyObject* module, const char *module_name, const char *class_name, size_t size, size_t alignment, enum __Pyx_ImportType_CheckSize_3_0_10 check_size);
#endif

/* FetchSharedCythonModule.proto */
static PyObject *__Pyx_FetchSharedCythonABIModule(void);

/* FetchCommonType.proto */
#if !CYTHON_USE_TYPE_SPECS
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);
#else
static PyTypeObject* __Pyx_FetchCommonTypeFromSpec(PyObject *module, PyType_Spec *spec, PyObject *bases);
#endif

/* PyMethodNew.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ) {
    PyObject *typesModule=NULL, *methodType=NULL, *result=NULL;
    CYTHON_UNUSED_VAR(typ);
    if (!self)
        return __Pyx_NewRef(func);
    typesModule = PyImport_ImportModule("types");
    if (!typesModule) return NULL;
    methodType = PyObject_GetAttrString(typesModule, "MethodType");
    Py_DECREF(typesModule);
    if (!methodType) return NULL;
    result = PyObject_CallFunctionObjArgs(methodType, func, self, NULL);
    Py_DECREF(methodType);
    return result;
}
#elif PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ) {
    CYTHON_UNUSED_VAR(typ);
    if (!self)
        return __Pyx_NewRef(func);
    return PyMethod_New(func, self);
}
#else
    #define __Pyx_PyMethod_New PyMethod_New
#endif

/* PyVectorcallFastCallDict.proto */
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw);
#endif

/* CythonFunctionShared.proto */
#define __Pyx_CyFunction_USED
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CYFUNCTION_COROUTINE     0x08
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_CyFunction_GetClassObj(f)\
      (((__pyx_CyFunctionObject *) (f))->func_classobj)
#else
  #define __Pyx_CyFunction_GetClassObj(f)\
      ((PyObject*) ((PyCMethodObject *) (f))->mm_class)
#endif
#define __Pyx_CyFunction_SetClassObj(f, classobj)\
    __Pyx__CyFunction_SetClassObj((__pyx_CyFunctionObject *) (f), (classobj))
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject_HEAD
    PyObject *func;
#elif PY_VERSION_HEX < 0x030900B1
    PyCFunctionObject func;
#else
    PyCMethodObject func;
#endif
#if CYTHON_BACKPORT_VECTORCALL
    __pyx_vectorcallfunc func_vectorcall;
#endif
#if PY_VERSION_HEX < 0x030500A0 || CYTHON_COMPILING_IN_LIMITED_API
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    PyObject *func_classobj;
#endif
    void *defaults;
    int defaults_pyobjects;
    size_t defaults_size;
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
    PyObject *func_is_coroutine;
} __pyx_CyFunctionObject;
#undef __Pyx_CyOrPyCFunction_Check
#define __Pyx_CyFunction_Check(obj)  __Pyx_TypeCheck(obj, __pyx_CyFunctionType)
#define __Pyx_CyOrPyCFunction_Check(obj)  __Pyx_TypeCheck2(obj, __pyx_CyFunctionType, &PyCFunction_Type)
#define __Pyx_CyFunction_CheckExact(obj)  __Pyx_IS_TYPE(obj, __pyx_CyFunctionType)
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void *cfunc);
#undef __Pyx_IsSameCFunction
#define __Pyx_IsSameCFunction(func, cfunc)   __Pyx__IsSameCyOrCFunction(func, cfunc)
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject* op, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void __Pyx__CyFunction_SetClassObj(__pyx_CyFunctionObject* f, PyObject* classobj);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(PyObject *module);
#if CYTHON_METH_FASTCALL
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
#if CYTHON_BACKPORT_VECTORCALL
#define __Pyx_CyFunction_func_vectorcall(f) (((__pyx_CyFunctionObject*)f)->func_vectorcall)
#else
#define __Pyx_CyFunction_func_vectorcall(f) (((PyCFunctionObject*)f)->vectorcall)
#endif
#endif

/* CythonFunction.proto */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);
#endif

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

#if PY_MAJOR_VERSION < 3
    static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags);
    static void __Pyx_ReleaseBuffer(Py_buffer *view);
#else
    #define __Pyx_GetBuffer PyObject_GetBuffer
    #define __Pyx_ReleaseBuffer PyBuffer_Release
#endif


/* BufferStructDeclare.proto */
typedef struct {
  Py_ssize_t shape, strides, suboffsets;
} __Pyx_Buf_DimInfo;
typedef struct {
  size_t refcount;
  Py_buffer pybuffer;
} __Pyx_Buffer;
typedef struct {
  __Pyx_Buffer *rcbuffer;
  char *data;
  __Pyx_Buf_DimInfo diminfo[8];
} __Pyx_LocalBuf_ND;

/* MemviewSliceIsContig.proto */
static int __pyx_memviewslice_is_contig(const __Pyx_memviewslice mvs, char order, int ndim);

/* OverlappingSlices.proto */
static int __pyx_slices_overlap(__Pyx_memviewslice *slice1,
                                __Pyx_memviewslice *slice2,
                                int ndim, size_t itemsize);

/* None.proto */
#include <new>

/* IsLittleEndian.proto */
static CYTHON_INLINE int __Pyx_Is_Little_Endian(void);

/* BufferFormatCheck.proto */
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts);
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type);

/* TypeInfoCompare.proto */
static int __pyx_typeinfo_cmp(__Pyx_TypeInfo *a, __Pyx_TypeInfo *b);

/* MemviewSliceValidateAndInit.proto */
static int __Pyx_ValidateAndInit_memviewslice(
                int *axes_specs,
                int c_or_f_flag,
                int buf_flags,
                int ndim,
                __Pyx_TypeInfo *dtype,
                __Pyx_BufFmt_StackElem stack[],
                __Pyx_memviewslice *memviewslice,
                PyObject *original_obj);

/* ObjectToMemviewSlice.proto */
static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_ds_unsigned_long(PyObject *, int writable_flag);

/* MemviewDtypeToObject.proto */
static CYTHON_INLINE PyObject *__pyx_memview_get_unsigned_long(const char *itemp);
static CYTHON_INLINE int __pyx_memview_set_unsigned_long(const char *itemp, PyObject *obj);

/* ObjectToMemviewSlice.proto */
static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_ds_int(PyObject *, int writable_flag);

/* ObjectToMemviewSlice.proto */
static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_ds_nn_bool(PyObject *, int writable_flag);

/* MemviewDtypeToObject.proto */
static CYTHON_INLINE PyObject *__pyx_memview_get_nn_bool(const char *itemp);
static CYTHON_INLINE int __pyx_memview_set_nn_bool(const char *itemp, PyObject *obj);

/* MemviewDtypeToObject.proto */
static CYTHON_INLINE PyObject *__pyx_memview_get_int(const char *itemp);
static CYTHON_INLINE int __pyx_memview_set_int(const char *itemp, PyObject *obj);

/* RealImag.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if defined(__cplusplus) && CYTHON_CCOMPLEX\
        && (defined(_WIN32) || defined(__clang__) || (defined(__GNUC__) && (__GNUC__ >= 5 || __GNUC__ == 4 && __GNUC_MINOR__ >= 4 )) || __cplusplus >= 201103)
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
    #define __Pyx_c_eq_float(a, b)   ((a)==(b))
    #define __Pyx_c_sum_float(a, b)  ((a)+(b))
    #define __Pyx_c_diff_float(a, b) ((a)-(b))
    #define __Pyx_c_prod_float(a, b) ((a)*(b))
    #define __Pyx_c_quot_float(a, b) ((a)/(b))
    #define __Pyx_c_neg_float(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_float(z) ((z)==(float)0)
    #define __Pyx_c_conj_float(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (::std::abs(z))
        #define __Pyx_c_pow_float(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_float(z) ((z)==0)
    #define __Pyx_c_conj_float(z)    (conjf(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (cabsf(z))
        #define __Pyx_c_pow_float(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
    #define __Pyx_c_eq_double(a, b)   ((a)==(b))
    #define __Pyx_c_sum_double(a, b)  ((a)+(b))
    #define __Pyx_c_diff_double(a, b) ((a)-(b))
    #define __Pyx_c_prod_double(a, b) ((a)*(b))
    #define __Pyx_c_quot_double(a, b) ((a)/(b))
    #define __Pyx_c_neg_double(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_double(z) ((z)==(double)0)
    #define __Pyx_c_conj_double(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (::std::abs(z))
        #define __Pyx_c_pow_double(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_double(z) ((z)==0)
    #define __Pyx_c_conj_double(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (cabs(z))
        #define __Pyx_c_pow_double(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
    #define __Pyx_c_eq_long__double(a, b)   ((a)==(b))
    #define __Pyx_c_sum_long__double(a, b)  ((a)+(b))
    #define __Pyx_c_diff_long__double(a, b) ((a)-(b))
    #define __Pyx_c_prod_long__double(a, b) ((a)*(b))
    #define __Pyx_c_quot_long__double(a, b) ((a)/(b))
    #define __Pyx_c_neg_long__double(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_long__double(z) ((z)==(long double)0)
    #define __Pyx_c_conj_long__double(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_long__double(z)     (::std::abs(z))
        #define __Pyx_c_pow_long__double(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_long__double(z) ((z)==0)
    #define __Pyx_c_conj_long__double(z)    (conjl(z))
    #if 1
        #define __Pyx_c_abs_long__double(z)     (cabsl(z))
        #define __Pyx_c_pow_long__double(a, b)  (cpowl(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_long__double(__pyx_t_long_double_complex, __pyx_t_long_double_complex);
    static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_sum_long__double(__pyx_t_long_double_complex, __pyx_t_long_double_complex);
    static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_diff_long__double(__pyx_t_long_double_complex, __pyx_t_long_double_complex);
    static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_prod_long__double(__pyx_t_long_double_complex, __pyx_t_long_double_complex);
    static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_quot_long__double(__pyx_t_long_double_complex, __pyx_t_long_double_complex);
    static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_neg_long__double(__pyx_t_long_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_long__double(__pyx_t_long_double_complex);
    static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_conj_long__double(__pyx_t_long_double_complex);
    #if 1
        static CYTHON_INLINE long double __Pyx_c_abs_long__double(__pyx_t_long_double_complex);
        static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_pow_long__double(__pyx_t_long_double_complex, __pyx_t_long_double_complex);
    #endif
#endif

/* MemviewSliceCopyTemplate.proto */
static __Pyx_memviewslice
__pyx_memoryview_copy_new_contig(const __Pyx_memviewslice *from_mvs,
                                 const char *mode, int ndim,
                                 size_t sizeof_dtype, int contig_flag,
                                 int dtype_is_object);

/* MemviewSliceInit.proto */
#define __Pyx_BUF_MAX_NDIMS %(BUF_MAX_NDIMS)d
#define __Pyx_MEMVIEW_DIRECT   1
#define __Pyx_MEMVIEW_PTR      2
#define __Pyx_MEMVIEW_FULL     4
#define __Pyx_MEMVIEW_CONTIG   8
#define __Pyx_MEMVIEW_STRIDED  16
#define __Pyx_MEMVIEW_FOLLOW   32
#define __Pyx_IS_C_CONTIG 1
#define __Pyx_IS_F_CONTIG 2
static int __Pyx_init_memviewslice(
                struct __pyx_memoryview_obj *memview,
                int ndim,
                __Pyx_memviewslice *memviewslice,
                int memview_is_new_reference);
static CYTHON_INLINE int __pyx_add_acquisition_count_locked(
    __pyx_atomic_int_type *acquisition_count, PyThread_type_lock lock);
static CYTHON_INLINE int __pyx_sub_acquisition_count_locked(
    __pyx_atomic_int_type *acquisition_count, PyThread_type_lock lock);
#define __pyx_get_slice_count_pointer(memview) (&memview->acquisition_count)
#define __PYX_INC_MEMVIEW(slice, have_gil) __Pyx_INC_MEMVIEW(slice, have_gil, __LINE__)
#define __PYX_XCLEAR_MEMVIEW(slice, have_gil) __Pyx_XCLEAR_MEMVIEW(slice, have_gil, __LINE__)
static CYTHON_INLINE void __Pyx_INC_MEMVIEW(__Pyx_memviewslice *, int, int);
static CYTHON_INLINE void __Pyx_XCLEAR_MEMVIEW(__Pyx_memviewslice *, int, int);

/* CIntFromPy.proto */
static CYTHON_INLINE unsigned long __Pyx_PyInt_As_unsigned_long(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_long(unsigned long value);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE char __Pyx_PyInt_As_char(PyObject *);

/* FormatTypeName.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
typedef PyObject *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%U"
static __Pyx_TypeName __Pyx_PyType_GetName(PyTypeObject* tp);
#define __Pyx_DECREF_TypeName(obj) Py_XDECREF(obj)
#else
typedef const char *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%.200s"
#define __Pyx_PyType_GetName(tp) ((tp)->tp_name)
#define __Pyx_DECREF_TypeName(obj)
#endif

/* CheckBinaryVersion.proto */
static unsigned long __Pyx_get_runtime_version(void);
static int __Pyx_check_binary_version(unsigned long ct_version, unsigned long rt_version, int allow_newer);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

/* #### Code section: module_declarations ### */
static PyObject *__pyx_array_get_memview(struct __pyx_array_obj *__pyx_v_self); /* proto*/
static char *__pyx_memoryview_get_item_pointer(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index); /* proto*/
static PyObject *__pyx_memoryview_is_slice(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj); /* proto*/
static PyObject *__pyx_memoryview_setitem_slice_assignment(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_dst, PyObject *__pyx_v_src); /* proto*/
static PyObject *__pyx_memoryview_setitem_slice_assign_scalar(struct __pyx_memoryview_obj *__pyx_v_self, struct __pyx_memoryview_obj *__pyx_v_dst, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_memoryview_setitem_indexed(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_memoryview_convert_item_to_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp); /* proto*/
static PyObject *__pyx_memoryview_assign_item_from_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_memoryview__get_base(struct __pyx_memoryview_obj *__pyx_v_self); /* proto*/
static PyObject *__pyx_memoryviewslice_convert_item_to_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp); /* proto*/
static PyObject *__pyx_memoryviewslice_assign_item_from_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_memoryviewslice__get_base(struct __pyx_memoryviewslice_obj *__pyx_v_self); /* proto*/
static CYTHON_INLINE npy_intp __pyx_f_5numpy_5dtype_8itemsize_itemsize(PyArray_Descr *__pyx_v_self); /* proto*/
static CYTHON_INLINE npy_intp __pyx_f_5numpy_5dtype_9alignment_alignment(PyArray_Descr *__pyx_v_self); /* proto*/
static CYTHON_INLINE PyObject *__pyx_f_5numpy_5dtype_6fields_fields(PyArray_Descr *__pyx_v_self); /* proto*/
static CYTHON_INLINE PyObject *__pyx_f_5numpy_5dtype_5names_names(PyArray_Descr *__pyx_v_self); /* proto*/
static CYTHON_INLINE PyArray_ArrayDescr *__pyx_f_5numpy_5dtype_8subarray_subarray(PyArray_Descr *__pyx_v_self); /* proto*/
static CYTHON_INLINE npy_uint64 __pyx_f_5numpy_5dtype_5flags_flags(PyArray_Descr *__pyx_v_self); /* proto*/
static CYTHON_INLINE int __pyx_f_5numpy_9broadcast_7numiter_numiter(PyArrayMultiIterObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE npy_intp __pyx_f_5numpy_9broadcast_4size_size(PyArrayMultiIterObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE npy_intp __pyx_f_5numpy_9broadcast_5index_index(PyArrayMultiIterObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE int __pyx_f_5numpy_9broadcast_2nd_nd(PyArrayMultiIterObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE npy_intp *__pyx_f_5numpy_9broadcast_10dimensions_dimensions(PyArrayMultiIterObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE void **__pyx_f_5numpy_9broadcast_5iters_iters(PyArrayMultiIterObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE PyObject *__pyx_f_5numpy_7ndarray_4base_base(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE PyArray_Descr *__pyx_f_5numpy_7ndarray_5descr_descr(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE int __pyx_f_5numpy_7ndarray_4ndim_ndim(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE npy_intp *__pyx_f_5numpy_7ndarray_5shape_shape(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE npy_intp *__pyx_f_5numpy_7ndarray_7strides_strides(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE npy_intp __pyx_f_5numpy_7ndarray_4size_size(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE char *__pyx_f_5numpy_7ndarray_4data_data(PyArrayObject *__pyx_v_self); /* proto*/

/* Module declarations from "miolodecl" */

/* Module declarations from "libc.string" */

/* Module declarations from "libc.stdio" */

/* Module declarations from "__builtin__" */

/* Module declarations from "cpython.type" */

/* Module declarations from "cpython" */

/* Module declarations from "cpython.object" */

/* Module declarations from "cpython.ref" */

/* Module declarations from "numpy" */

/* Module declarations from "numpy" */

/* Module declarations from "libcpp" */

/* Module declarations from "miolo" */
static PyObject *__pyx_collections_abc_Sequence = 0;
static PyObject *generic = 0;
static PyObject *strided = 0;
static PyObject *indirect = 0;
static PyObject *contiguous = 0;
static PyObject *indirect_contiguous = 0;
static int __pyx_memoryview_thread_locks_used;
static PyThread_type_lock __pyx_memoryview_thread_locks[8];
static PyObject *__pyx_f_5miolo___pyx_unpickle_Manifold__set_state(struct __pyx_obj_5miolo_Manifold *, PyObject *); /*proto*/
static int __pyx_array_allocate_buffer(struct __pyx_array_obj *); /*proto*/
static struct __pyx_array_obj *__pyx_array_new(PyObject *, Py_ssize_t, char *, char *, char *); /*proto*/
static PyObject *__pyx_memoryview_new(PyObject *, int, int, __Pyx_TypeInfo *); /*proto*/
static CYTHON_INLINE int __pyx_memoryview_check(PyObject *); /*proto*/
static PyObject *_unellipsify(PyObject *, int); /*proto*/
static int assert_direct_dimensions(Py_ssize_t *, int); /*proto*/
static struct __pyx_memoryview_obj *__pyx_memview_slice(struct __pyx_memoryview_obj *, PyObject *); /*proto*/
static int __pyx_memoryview_slice_memviewslice(__Pyx_memviewslice *, Py_ssize_t, Py_ssize_t, Py_ssize_t, int, int, int *, Py_ssize_t, Py_ssize_t, Py_ssize_t, int, int, int, int); /*proto*/
static char *__pyx_pybuffer_index(Py_buffer *, char *, Py_ssize_t, Py_ssize_t); /*proto*/
static int __pyx_memslice_transpose(__Pyx_memviewslice *); /*proto*/
static PyObject *__pyx_memoryview_fromslice(__Pyx_memviewslice, int, PyObject *(*)(char *), int (*)(char *, PyObject *), int); /*proto*/
static __Pyx_memviewslice *__pyx_memoryview_get_slice_from_memoryview(struct __pyx_memoryview_obj *, __Pyx_memviewslice *); /*proto*/
static void __pyx_memoryview_slice_copy(struct __pyx_memoryview_obj *, __Pyx_memviewslice *); /*proto*/
static PyObject *__pyx_memoryview_copy_object(struct __pyx_memoryview_obj *); /*proto*/
static PyObject *__pyx_memoryview_copy_object_from_slice(struct __pyx_memoryview_obj *, __Pyx_memviewslice *); /*proto*/
static Py_ssize_t abs_py_ssize_t(Py_ssize_t); /*proto*/
static char __pyx_get_best_slice_order(__Pyx_memviewslice *, int); /*proto*/
static void _copy_strided_to_strided(char *, Py_ssize_t *, char *, Py_ssize_t *, Py_ssize_t *, Py_ssize_t *, int, size_t); /*proto*/
static void copy_strided_to_strided(__Pyx_memviewslice *, __Pyx_memviewslice *, int, size_t); /*proto*/
static Py_ssize_t __pyx_memoryview_slice_get_size(__Pyx_memviewslice *, int); /*proto*/
static Py_ssize_t __pyx_fill_contig_strides_array(Py_ssize_t *, Py_ssize_t *, Py_ssize_t, int, char); /*proto*/
static void *__pyx_memoryview_copy_data_to_temp(__Pyx_memviewslice *, __Pyx_memviewslice *, char, int); /*proto*/
static int __pyx_memoryview_err_extents(int, Py_ssize_t, Py_ssize_t); /*proto*/
static int __pyx_memoryview_err_dim(PyObject *, PyObject *, int); /*proto*/
static int __pyx_memoryview_err(PyObject *, PyObject *); /*proto*/
static int __pyx_memoryview_err_no_memory(void); /*proto*/
static int __pyx_memoryview_copy_contents(__Pyx_memviewslice, __Pyx_memviewslice, int, int, int); /*proto*/
static void __pyx_memoryview_broadcast_leading(__Pyx_memviewslice *, int, int); /*proto*/
static void __pyx_memoryview_refcount_copying(__Pyx_memviewslice *, int, int, int); /*proto*/
static void __pyx_memoryview_refcount_objects_in_slice_with_gil(char *, Py_ssize_t *, Py_ssize_t *, int, int); /*proto*/
static void __pyx_memoryview_refcount_objects_in_slice(char *, Py_ssize_t *, Py_ssize_t *, int, int); /*proto*/
static void __pyx_memoryview_slice_assign_scalar(__Pyx_memviewslice *, int, size_t, void *, int); /*proto*/
static void __pyx_memoryview__slice_assign_scalar(char *, Py_ssize_t *, Py_ssize_t *, int, size_t, void *); /*proto*/
static PyObject *__pyx_unpickle_Enum__set_state(struct __pyx_MemviewEnum_obj *, PyObject *); /*proto*/
/* #### Code section: typeinfo ### */
static __Pyx_TypeInfo __Pyx_TypeInfo_unsigned_long = { "unsigned long", NULL, sizeof(unsigned long), { 0 }, 0, __PYX_IS_UNSIGNED(unsigned long) ? 'U' : 'I', __PYX_IS_UNSIGNED(unsigned long), 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_int = { "int", NULL, sizeof(int), { 0 }, 0, __PYX_IS_UNSIGNED(int) ? 'U' : 'I', __PYX_IS_UNSIGNED(int), 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_nn_bool = { "bool", NULL, sizeof(bool), { 0 }, 0, __PYX_IS_UNSIGNED(bool) ? 'U' : 'I', __PYX_IS_UNSIGNED(bool), 0 };
/* #### Code section: before_global_var ### */
#define __Pyx_MODULE_NAME "miolo"
extern int __pyx_module_is_main_miolo;
int __pyx_module_is_main_miolo = 0;

/* Implementation of "miolo" */
/* #### Code section: global_var ### */
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_max;
static PyObject *__pyx_builtin_super;
static PyObject *__pyx_builtin___import__;
static PyObject *__pyx_builtin_MemoryError;
static PyObject *__pyx_builtin_enumerate;
static PyObject *__pyx_builtin_AssertionError;
static PyObject *__pyx_builtin_Ellipsis;
static PyObject *__pyx_builtin_id;
static PyObject *__pyx_builtin_IndexError;
static PyObject *__pyx_builtin_ImportError;
/* #### Code section: string_decls ### */
static const char __pyx_k_[] = ": ";
static const char __pyx_k_A[] = "A";
static const char __pyx_k_B[] = "B";
static const char __pyx_k_E[] = "E";
static const char __pyx_k_G[] = "G";
static const char __pyx_k_H[] = "H";
static const char __pyx_k_M[] = "M";
static const char __pyx_k_N[] = "N";
static const char __pyx_k_O[] = "O";
static const char __pyx_k_X[] = "X";
static const char __pyx_k_c[] = "c";
static const char __pyx_k_g[] = "g";
static const char __pyx_k_i[] = "i";
static const char __pyx_k_j[] = "j";
static const char __pyx_k_k[] = "k";
static const char __pyx_k_m[] = "m";
static const char __pyx_k_n[] = "n";
static const char __pyx_k__2[] = ".";
static const char __pyx_k__3[] = "*";
static const char __pyx_k__6[] = "'";
static const char __pyx_k__7[] = ")";
static const char __pyx_k_at[] = "at";
static const char __pyx_k_gc[] = "gc";
static const char __pyx_k_id[] = "id";
static const char __pyx_k_np[] = "np";
static const char __pyx_k_MST[] = "MST";
static const char __pyx_k_abc[] = "abc";
static const char __pyx_k_add[] = "add";
static const char __pyx_k_and[] = " and ";
static const char __pyx_k_aux[] = "aux";
static const char __pyx_k_cos[] = "cos";
static const char __pyx_k_cut[] = "cut";
static const char __pyx_k_dim[] = "dim";
static const char __pyx_k_dot[] = "dot";
static const char __pyx_k_end[] = "end";
static const char __pyx_k_exp[] = "exp";
static const char __pyx_k_got[] = " (got ";
static const char __pyx_k_int[] = "int";
static const char __pyx_k_log[] = "log";
static const char __pyx_k_max[] = "max";
static const char __pyx_k_min[] = "min";
static const char __pyx_k_new[] = "__new__";
static const char __pyx_k_obj[] = "obj";
static const char __pyx_k_out[] = "out";
static const char __pyx_k_sin[] = "sin";
static const char __pyx_k_sys[] = "sys";
static const char __pyx_k_tan[] = "tan";
static const char __pyx_k__300[] = "?";
static const char __pyx_k_acos[] = "acos";
static const char __pyx_k_asin[] = "asin";
static const char __pyx_k_atan[] = "atan";
static const char __pyx_k_base[] = "base";
static const char __pyx_k_beta[] = "beta";
static const char __pyx_k_cols[] = "cols";
static const char __pyx_k_copy[] = "copy";
static const char __pyx_k_cosh[] = "cosh";
static const char __pyx_k_dict[] = "__dict__";
static const char __pyx_k_fabs[] = "fabs";
static const char __pyx_k_init[] = "init";
static const char __pyx_k_isIn[] = "isIn";
static const char __pyx_k_kmpp[] = "kmpp";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_mean[] = "mean";
static const char __pyx_k_mode[] = "mode";
static const char __pyx_k_name[] = "name";
static const char __pyx_k_ndim[] = "ndim";
static const char __pyx_k_null[] = "null";
static const char __pyx_k_only[] = "only";
static const char __pyx_k_pack[] = "pack";
static const char __pyx_k_recp[] = "recp";
static const char __pyx_k_rows[] = "rows";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_sinh[] = "sinh";
static const char __pyx_k_size[] = "size";
static const char __pyx_k_spec[] = "__spec__";
static const char __pyx_k_sqrt[] = "sqrt";
static const char __pyx_k_step[] = "step";
static const char __pyx_k_stop[] = "stop";
static const char __pyx_k_tanh[] = "tanh";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_view[] = "view";
static const char __pyx_k_ASCII[] = "ASCII";
static const char __pyx_k_Graph[] = "Graph";
static const char __pyx_k_acosh[] = "acosh";
static const char __pyx_k_asinh[] = "asinh";
static const char __pyx_k_atanh[] = "atanh";
static const char __pyx_k_class[] = "__class__";
static const char __pyx_k_count[] = "count";
static const char __pyx_k_ctype[] = "ctype";
static const char __pyx_k_dtype[] = "dtype";
static const char __pyx_k_edges[] = "edges";
static const char __pyx_k_empty[] = "empty";
static const char __pyx_k_error[] = "error";
static const char __pyx_k_extra[] = "extra";
static const char __pyx_k_flags[] = "flags";
static const char __pyx_k_float[] = "float";
static const char __pyx_k_index[] = "index";
static const char __pyx_k_intra[] = "intra";
static const char __pyx_k_max_0[] = "max_0";
static const char __pyx_k_max_1[] = "max_1";
static const char __pyx_k_miolo[] = "miolo";
static const char __pyx_k_nodes[] = "nodes";
static const char __pyx_k_numpy[] = "numpy";
static const char __pyx_k_print[] = "print";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_shape[] = "shape";
static const char __pyx_k_start[] = "start";
static const char __pyx_k_state[] = "state";
static const char __pyx_k_super[] = "super";
static const char __pyx_k_trace[] = "trace";
static const char __pyx_k_ulong[] = "ulong";
static const char __pyx_k_value[] = "value";
static const char __pyx_k_whole[] = "whole";
static const char __pyx_k_Matrix[] = "Matrix";
static const char __pyx_k_Sphere[] = "Sphere";
static const char __pyx_k_argmax[] = "argmax";
static const char __pyx_k_argmin[] = "argmin";
static const char __pyx_k_ashape[] = "ashape";
static const char __pyx_k_center[] = "center";
static const char __pyx_k_colMax[] = "colMax";
static const char __pyx_k_colMin[] = "colMin";
static const char __pyx_k_concat[] = "concat";
static const char __pyx_k_ctypes[] = "ctypes";
static const char __pyx_k_degree[] = "degree";
static const char __pyx_k_dict_2[] = "_dict";
static const char __pyx_k_double[] = "double";
static const char __pyx_k_enable[] = "enable";
static const char __pyx_k_encode[] = "encode";
static const char __pyx_k_format[] = "format";
static const char __pyx_k_gshape[] = "gshape";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_init_2[] = "__init__";
static const char __pyx_k_labels[] = "labels";
static const char __pyx_k_name_2[] = "__name__";
static const char __pyx_k_output[] = "output";
static const char __pyx_k_pickle[] = "pickle";
static const char __pyx_k_radius[] = "radius";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_rowMax[] = "rowMax";
static const char __pyx_k_rowMin[] = "rowMin";
static const char __pyx_k_single[] = "single";
static const char __pyx_k_struct[] = "struct";
static const char __pyx_k_sumAll[] = "sumAll";
static const char __pyx_k_unpack[] = "unpack";
static const char __pyx_k_update[] = "update";
static const char __pyx_k_Digraph[] = "Digraph";
static const char __pyx_k_Lorentz[] = "Lorentz";
static const char __pyx_k_Weights[] = "Weights";
static const char __pyx_k_argkmax[] = "argkmax";
static const char __pyx_k_argkmin[] = "argkmin";
static const char __pyx_k_azimuth[] = "azimuth";
static const char __pyx_k_clamped[] = "clamped";
static const char __pyx_k_connect[] = "connect";
static const char __pyx_k_disable[] = "disable";
static const char __pyx_k_flatten[] = "flatten";
static const char __pyx_k_fortran[] = "fortran";
static const char __pyx_k_isGraph[] = "isGraph";
static const char __pyx_k_loadtxt[] = "loadtxt";
static const char __pyx_k_memview[] = "memview";
static const char __pyx_k_reshape[] = "reshape";
static const char __pyx_k_tangent[] = "tangent";
static const char __pyx_k_toGraph[] = "toGraph";
static const char __pyx_k_weights[] = "weights";
static const char __pyx_k_Diagonal[] = "Diagonal";
static const char __pyx_k_Ellipsis[] = "Ellipsis";
static const char __pyx_k_Manifold[] = "Manifold";
static const char __pyx_k_Poincare[] = "Poincare";
static const char __pyx_k_Sequence[] = "Sequence";
static const char __pyx_k_distance[] = "distance";
static const char __pyx_k_filename[] = "filename";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_hadamard[] = "hadamard";
static const char __pyx_k_isMatrix[] = "isMatrix";
static const char __pyx_k_itemsize[] = "itemsize";
static const char __pyx_k_pyx_type[] = "__pyx_type";
static const char __pyx_k_register[] = "register";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_toMatrix[] = "toMatrix";
static const char __pyx_k_txtGraph[] = "txtGraph";
static const char __pyx_k_variance[] = "variance";
static const char __pyx_k_Euclidean[] = "Euclidean";
static const char __pyx_k_Graph_max[] = "Graph.max";
static const char __pyx_k_Graph_min[] = "Graph.min";
static const char __pyx_k_Neighbors[] = "Neighbors";
static const char __pyx_k_Threshold[] = "Threshold";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_curvature[] = "curvature";
static const char __pyx_k_enumerate[] = "enumerate";
static const char __pyx_k_isDigraph[] = "isDigraph";
static const char __pyx_k_isTangent[] = "isTangent";
static const char __pyx_k_isenabled[] = "isenabled";
static const char __pyx_k_laplacian[] = "laplacian";
static const char __pyx_k_normalize[] = "normalize";
static const char __pyx_k_partition[] = "partition";
static const char __pyx_k_propagate[] = "propagate";
static const char __pyx_k_pyx_state[] = "__pyx_state";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_sameShape[] = "sameShape";
static const char __pyx_k_structure[] = "structure";
static const char __pyx_k_toDigraph[] = "toDigraph";
static const char __pyx_k_tolerance[] = "tolerance";
static const char __pyx_k_transpose[] = "transpose";
static const char __pyx_k_txtMatrix[] = "txtMatrix";
static const char __pyx_k_ufunction[] = "ufunction";
static const char __pyx_k_IndexError[] = "IndexError";
static const char __pyx_k_Matrix_cut[] = "Matrix.cut";
static const char __pyx_k_Matrix_max[] = "Matrix.max";
static const char __pyx_k_Matrix_min[] = "Matrix.min";
static const char __pyx_k_Sphere_exp[] = "Sphere.exp";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_isDiagonal[] = "isDiagonal";
static const char __pyx_k_pyx_result[] = "__pyx_result";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_str_memory[] = "str_memory";
static const char __pyx_k_symmetrize[] = "symmetrize";
static const char __pyx_k_Graph_print[] = "Graph.print";
static const char __pyx_k_ImportError[] = "ImportError";
static const char __pyx_k_Lorentz_dot[] = "Lorentz.dot";
static const char __pyx_k_Lorentz_exp[] = "Lorentz.exp";
static const char __pyx_k_Matrix_copy[] = "Matrix.copy";
static const char __pyx_k_MemoryError[] = "MemoryError";
static const char __pyx_k_PickleError[] = "PickleError";
static const char __pyx_k_Sphere_isIn[] = "Sphere.isIn";
static const char __pyx_k_collections[] = "collections";
static const char __pyx_k_mioloObject[] = "mioloObject";
static const char __pyx_k_pottsEnergy[] = "pottsEnergy";
static const char __pyx_k_rowDistance[] = "rowDistance";
static const char __pyx_k_sparsifyKNN[] = "sparsifyKNN";
static const char __pyx_k_targetLabel[] = "targetLabel";
static const char __pyx_k_toEuclidean[] = "toEuclidean";
static const char __pyx_k_Digraph_copy[] = "Digraph.copy";
static const char __pyx_k_Graph_degree[] = "Graph.degree";
static const char __pyx_k_Lorentz_isIn[] = "Lorentz.isIn";
static const char __pyx_k_Lorentz_mean[] = "Lorentz.mean";
static const char __pyx_k_Matrix_print[] = "Matrix.print";
static const char __pyx_k_Matrix_trace[] = "Matrix.trace";
static const char __pyx_k_Poincare_add[] = "Poincare.add";
static const char __pyx_k_Poincare_exp[] = "Poincare.exp";
static const char __pyx_k_Poincare_log[] = "Poincare.log";
static const char __pyx_k_global_ctype[] = "global_ctype";
static const char __pyx_k_initializing[] = "_initializing";
static const char __pyx_k_is_coroutine[] = "_is_coroutine";
static const char __pyx_k_miololib_pyx[] = "miololib.pyx";
static const char __pyx_k_pyx_checksum[] = "__pyx_checksum";
static const char __pyx_k_rowNormalize[] = "rowNormalize";
static const char __pyx_k_stringsource[] = "<stringsource>";
static const char __pyx_k_use_setstate[] = "use_setstate";
static const char __pyx_k_version_info[] = "version_info";
static const char __pyx_k_Digraph_shape[] = "Digraph.shape";
static const char __pyx_k_Euclidean_dot[] = "Euclidean.dot";
static const char __pyx_k_Matrix_argmax[] = "Matrix.argmax";
static const char __pyx_k_Matrix_argmin[] = "Matrix.argmin";
static const char __pyx_k_Matrix_sumAll[] = "Matrix.sumAll";
static const char __pyx_k_Poincare_isIn[] = "Poincare.isIn";
static const char __pyx_k_Poincare_mean[] = "Poincare.mean";
static const char __pyx_k_Unknown_ctype[] = "Unknown ctype.";
static const char __pyx_k_class_getitem[] = "__class_getitem__";
static const char __pyx_k_fromEuclidean[] = "fromEuclidean";
static const char __pyx_k_gaussianScale[] = "gaussianScale";
static const char __pyx_k_hyperbolicity[] = "hyperbolicity";
static const char __pyx_k_isolatedNodes[] = "isolatedNodes";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_AssertionError[] = "AssertionError";
static const char __pyx_k_Euclidean_kmpp[] = "Euclidean.kmpp";
static const char __pyx_k_Euclidean_mean[] = "Euclidean.mean";
static const char __pyx_k_Graph_toMatrix[] = "Graph.toMatrix";
static const char __pyx_k_Matrix_argkmax[] = "Matrix.argkmax";
static const char __pyx_k_Matrix_argkmin[] = "Matrix.argkmin";
static const char __pyx_k_Matrix_flatten[] = "Matrix.flatten";
static const char __pyx_k_Matrix_reshape[] = "Matrix.reshape";
static const char __pyx_k_connectRegular[] = "connectRegular";
static const char __pyx_k_metricDistance[] = "metricDistance";
static const char __pyx_k_Digraph_connect[] = "Digraph.connect";
static const char __pyx_k_Digraph_toGraph[] = "Digraph.toGraph";
static const char __pyx_k_Graph_laplacian[] = "Graph.laplacian";
static const char __pyx_k_Graph_normalize[] = "Graph.normalize";
static const char __pyx_k_Graph_propagate[] = "Graph.propagate";
static const char __pyx_k_Graph_toDigraph[] = "Graph.toDigraph";
static const char __pyx_k_Sphere_distance[] = "Sphere.distance";
static const char __pyx_k_View_MemoryView[] = "View.MemoryView";
static const char __pyx_k_allocate_buffer[] = "allocate_buffer";
static const char __pyx_k_classSeparation[] = "classSeparation";
static const char __pyx_k_collections_abc[] = "collections.abc";
static const char __pyx_k_coordinateReady[] = "coordinateReady";
static const char __pyx_k_dtype_is_object[] = "dtype_is_object";
static const char __pyx_k_lorentzDistance[] = "lorentzDistance";
static const char __pyx_k_minmaxNormalize[] = "minmaxNormalize";
static const char __pyx_k_pyx_PickleError[] = "__pyx_PickleError";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_Matrix_normalize[] = "Matrix.normalize";
static const char __pyx_k_Matrix_partition[] = "Matrix.partition";
static const char __pyx_k_Matrix_transpose[] = "Matrix.transpose";
static const char __pyx_k_Sphere_isTangent[] = "Sphere.isTangent";
static const char __pyx_k_centroidDistance[] = "centroidDistance";
static const char __pyx_k_Digraph_normalize[] = "Digraph.normalize";
static const char __pyx_k_Digraph_sameShape[] = "Digraph.sameShape";
static const char __pyx_k_Digraph_transpose[] = "Digraph.transpose";
static const char __pyx_k_Invalid_new_shape[] = "Invalid new shape.";
static const char __pyx_k_Poincare_distance[] = "Poincare.distance";
static const char __pyx_k_gaussianNormalize[] = "gaussianNormalize";
static const char __pyx_k_pyx_unpickle_Enum[] = "__pyx_unpickle_Enum";
static const char __pyx_k_sparsifyThreshold[] = "sparsifyThreshold";
static const char __pyx_k_tangentProjection[] = "tangentProjection";
static const char __pyx_k_Digraph_symmetrize[] = "Digraph.symmetrize";
static const char __pyx_k_Euclidean_distance[] = "Euclidean.distance";
static const char __pyx_k_Euclidean_variance[] = "Euclidean.variance";
static const char __pyx_k_Matrix_rowDistance[] = "Matrix.rowDistance";
static const char __pyx_k_Matrix_sparsifyKNN[] = "Matrix.sparsifyKNN";
static const char __pyx_k_Sphere_toEuclidean[] = "Sphere.toEuclidean";
static const char __pyx_k_asyncio_coroutines[] = "asyncio.coroutines";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_strided_and_direct[] = "<strided and direct>";
static const char __pyx_k_weightedDotProduct[] = "weightedDotProduct";
static const char __pyx_k_Graph_gaussianScale[] = "Graph.gaussianScale";
static const char __pyx_k_Graph_isolatedNodes[] = "Graph.isolatedNodes";
static const char __pyx_k_Lorentz_toEuclidean[] = "Lorentz.toEuclidean";
static const char __pyx_k_cos___reduce_cython[] = "cos.__reduce_cython__";
static const char __pyx_k_exp___reduce_cython[] = "exp.__reduce_cython__";
static const char __pyx_k_log___reduce_cython[] = "log.__reduce_cython__";
static const char __pyx_k_mioloObject_isGraph[] = "mioloObject.isGraph";
static const char __pyx_k_sin___reduce_cython[] = "sin.__reduce_cython__";
static const char __pyx_k_tan___reduce_cython[] = "tan.__reduce_cython__";
static const char __pyx_k_Invalid_shape_for_at[] = "Invalid shape for at.";
static const char __pyx_k_Sphere_fromEuclidean[] = "Sphere.fromEuclidean";
static const char __pyx_k_acos___reduce_cython[] = "acos.__reduce_cython__";
static const char __pyx_k_asin___reduce_cython[] = "asin.__reduce_cython__";
static const char __pyx_k_atan___reduce_cython[] = "atan.__reduce_cython__";
static const char __pyx_k_cosh___reduce_cython[] = "cosh.__reduce_cython__";
static const char __pyx_k_fabs___reduce_cython[] = "fabs.__reduce_cython__";
static const char __pyx_k_mioloObject_isMatrix[] = "mioloObject.isMatrix";
static const char __pyx_k_recp___reduce_cython[] = "recp.__reduce_cython__";
static const char __pyx_k_sinh___reduce_cython[] = "sinh.__reduce_cython__";
static const char __pyx_k_sqrt___reduce_cython[] = "sqrt.__reduce_cython__";
static const char __pyx_k_strided_and_indirect[] = "<strided and indirect>";
static const char __pyx_k_tanh___reduce_cython[] = "tanh.__reduce_cython__";
static const char __pyx_k_Cannot_divide_by_zero[] = "Cannot divide by zero.";
static const char __pyx_k_Digraph_gaussianScale[] = "Digraph.gaussianScale";
static const char __pyx_k_Graph___reduce_cython[] = "Graph.__reduce_cython__";
static const char __pyx_k_Invalid_shape_in_axis[] = "Invalid shape in axis ";
static const char __pyx_k_Lorentz_fromEuclidean[] = "Lorentz.fromEuclidean";
static const char __pyx_k_Matrix_must_be_square[] = "Matrix must be square.";
static const char __pyx_k_acosh___reduce_cython[] = "acosh.__reduce_cython__";
static const char __pyx_k_asinh___reduce_cython[] = "asinh.__reduce_cython__";
static const char __pyx_k_atanh___reduce_cython[] = "atanh.__reduce_cython__";
static const char __pyx_k_classSeparation_extra[] = "classSeparation.extra";
static const char __pyx_k_classSeparation_intra[] = "classSeparation.intra";
static const char __pyx_k_contiguous_and_direct[] = "<contiguous and direct>";
static const char __pyx_k_cos___setstate_cython[] = "cos.__setstate_cython__";
static const char __pyx_k_exp___setstate_cython[] = "exp.__setstate_cython__";
static const char __pyx_k_log___setstate_cython[] = "log.__setstate_cython__";
static const char __pyx_k_mioloObject_isDigraph[] = "mioloObject.isDigraph";
static const char __pyx_k_pyx_unpickle_Manifold[] = "__pyx_unpickle_Manifold";
static const char __pyx_k_sin___setstate_cython[] = "sin.__setstate_cython__";
static const char __pyx_k_tan___setstate_cython[] = "tan.__setstate_cython__";
static const char __pyx_k_Cannot_index_with_type[] = "Cannot index with type '";
static const char __pyx_k_Digraph_connectRegular[] = "Digraph.connectRegular";
static const char __pyx_k_Euclidean_rowNormalize[] = "Euclidean.rowNormalize";
static const char __pyx_k_Index_is_out_of_bounds[] = "Index is out of bounds.";
static const char __pyx_k_Lorentz_metricDistance[] = "Lorentz.metricDistance";
static const char __pyx_k_Matrix___reduce_cython[] = "Matrix.__reduce_cython__";
static const char __pyx_k_MemoryView_of_r_object[] = "<MemoryView of %r object>";
static const char __pyx_k_Poincare_hyperbolicity[] = "Poincare.hyperbolicity";
static const char __pyx_k_Sphere___reduce_cython[] = "Sphere.__reduce_cython__";
static const char __pyx_k_Sphere_coordinateReady[] = "Sphere.coordinateReady";
static const char __pyx_k_acos___setstate_cython[] = "acos.__setstate_cython__";
static const char __pyx_k_asin___setstate_cython[] = "asin.__setstate_cython__";
static const char __pyx_k_atan___setstate_cython[] = "atan.__setstate_cython__";
static const char __pyx_k_cosh___setstate_cython[] = "cosh.__setstate_cython__";
static const char __pyx_k_fabs___setstate_cython[] = "fabs.__setstate_cython__";
static const char __pyx_k_mioloObject_isDiagonal[] = "mioloObject.isDiagonal";
static const char __pyx_k_recp___setstate_cython[] = "recp.__setstate_cython__";
static const char __pyx_k_sinh___setstate_cython[] = "sinh.__setstate_cython__";
static const char __pyx_k_sqrt___setstate_cython[] = "sqrt.__setstate_cython__";
static const char __pyx_k_tanh___setstate_cython[] = "tanh.__setstate_cython__";
static const char __pyx_k_weightedSquareDistance[] = "weightedSquareDistance";
static const char __pyx_k_Digraph___reduce_cython[] = "Digraph.__reduce_cython__";
static const char __pyx_k_Graph___setstate_cython[] = "Graph.__setstate_cython__";
static const char __pyx_k_Lorentz___reduce_cython[] = "Lorentz.__reduce_cython__";
static const char __pyx_k_Lorentz_lorentzDistance[] = "Lorentz.lorentzDistance";
static const char __pyx_k_MemoryView_of_r_at_0x_x[] = "<MemoryView of %r at 0x%x>";
static const char __pyx_k_Sphere_centroidDistance[] = "Sphere.centroidDistance";
static const char __pyx_k_acosh___setstate_cython[] = "acosh.__setstate_cython__";
static const char __pyx_k_asinh___setstate_cython[] = "asinh.__setstate_cython__";
static const char __pyx_k_atanh___setstate_cython[] = "atanh.__setstate_cython__";
static const char __pyx_k_contiguous_and_indirect[] = "<contiguous and indirect>";
static const char __pyx_k_stereographicProjection[] = "stereographicProjection";
static const char __pyx_k_Diagonal___reduce_cython[] = "Diagonal.__reduce_cython__";
static const char __pyx_k_Index_k_is_out_of_bounds[] = "Index k is out of bounds.";
static const char __pyx_k_Lorentz_centroidDistance[] = "Lorentz.centroidDistance";
static const char __pyx_k_Manifold___reduce_cython[] = "Manifold.__reduce_cython__";
static const char __pyx_k_Matrix___setstate_cython[] = "Matrix.__setstate_cython__";
static const char __pyx_k_Matrix_sparsifyThreshold[] = "Matrix.sparsifyThreshold";
static const char __pyx_k_Poincare___reduce_cython[] = "Poincare.__reduce_cython__";
static const char __pyx_k_Sphere___setstate_cython[] = "Sphere.__setstate_cython__";
static const char __pyx_k_Avoiding_division_by_zero[] = "Avoiding division by zero.";
static const char __pyx_k_Digraph___setstate_cython[] = "Digraph.__setstate_cython__";
static const char __pyx_k_Dimension_d_is_not_direct[] = "Dimension %d is not direct";
static const char __pyx_k_Euclidean___reduce_cython[] = "Euclidean.__reduce_cython__";
static const char __pyx_k_Euclidean_minmaxNormalize[] = "Euclidean.minmaxNormalize";
static const char __pyx_k_Failed_to_allocate_memory[] = "Failed to allocate memory.";
static const char __pyx_k_Lorentz___setstate_cython[] = "Lorentz.__setstate_cython__";
static const char __pyx_k_Lorentz_tangentProjection[] = "Lorentz.tangentProjection";
static const char __pyx_k_Poincare_centroidDistance[] = "Poincare.centroidDistance";
static const char __pyx_k_ufunction___reduce_cython[] = "ufunction.__reduce_cython__";
static const char __pyx_k_Col_range_is_out_of_bounds[] = "Col range is out of bounds.";
static const char __pyx_k_Diagonal___setstate_cython[] = "Diagonal.__setstate_cython__";
static const char __pyx_k_Euclidean_centroidDistance[] = "Euclidean.centroidDistance";
static const char __pyx_k_Index_out_of_bounds_axis_d[] = "Index out of bounds (axis %d)";
static const char __pyx_k_Manifold___setstate_cython[] = "Manifold.__setstate_cython__";
static const char __pyx_k_Poincare___setstate_cython[] = "Poincare.__setstate_cython__";
static const char __pyx_k_Row_range_is_out_of_bounds[] = "Row range is out of bounds.";
static const char __pyx_k_Attempting_division_by_zero[] = "Attempting division by zero.";
static const char __pyx_k_Euclidean___setstate_cython[] = "Euclidean.__setstate_cython__";
static const char __pyx_k_Euclidean_gaussianNormalize[] = "Euclidean.gaussianNormalize";
static const char __pyx_k_Step_may_not_be_zero_axis_d[] = "Step may not be zero (axis %d)";
static const char __pyx_k_itemsize_0_for_cython_array[] = "itemsize <= 0 for cython.array";
static const char __pyx_k_mioloObject___reduce_cython[] = "mioloObject.__reduce_cython__";
static const char __pyx_k_pottsEnergy___reduce_cython[] = "pottsEnergy.__reduce_cython__";
static const char __pyx_k_ufunction___setstate_cython[] = "ufunction.__setstate_cython__";
static const char __pyx_k_A_and_B_must_have_same_ctype[] = "A and B must have same ctype.";
static const char __pyx_k_Graphs_must_share_same_ctype[] = "Graphs must share same ctype.";
static const char __pyx_k_Matrices_must_have_same_ctype[] = "Matrices must have same ctype.";
static const char __pyx_k_Matrices_must_have_same_shape[] = "Matrices must have same shape.";
static const char __pyx_k_Neighbors_must_have_int_ctype[] = "Neighbors must have int ctype.";
static const char __pyx_k_Objects_must_share_same_ctype[] = "Objects must share same ctype.";
static const char __pyx_k_at_and_M_must_have_same_ctype[] = "at and M must have same ctype.";
static const char __pyx_k_at_and_M_must_have_same_shape[] = "at and M must have same shape.";
static const char __pyx_k_mioloObject___setstate_cython[] = "mioloObject.__setstate_cython__";
static const char __pyx_k_pottsEnergy___setstate_cython[] = "pottsEnergy.__setstate_cython__";
static const char __pyx_k_unable_to_allocate_array_data[] = "unable to allocate array data.";
static const char __pyx_k_Diagonals_must_have_same_ctype[] = "Diagonals must have same ctype";
static const char __pyx_k_Digraphs_must_have_same_shapes[] = "Digraphs must have same shapes.";
static const char __pyx_k_Digraphs_must_share_same_ctype[] = "Digraphs must share same ctype.";
static const char __pyx_k_Incompatible_shape_for_product[] = "Incompatible shape for product.";
static const char __pyx_k_Matrices_must_share_same_ctype[] = "Matrices must share same ctype.";
static const char __pyx_k_Sphere_stereographicProjection[] = "Sphere.stereographicProjection";
static const char __pyx_k_strided_and_direct_or_indirect[] = "<strided and direct or indirect>";
static const char __pyx_k_Graph_Matrix_operations_require[] = "Graph-Matrix operations require same ctype.";
static const char __pyx_k_Graph_and_Matrix_must_have_same[] = "Graph and Matrix must have same ctype.";
static const char __pyx_k_Graphs_must_have_same_number_of[] = "Graphs must have same number of edges";
static const char __pyx_k_Incompatible_shape_for_Hadamard[] = "Incompatible shape for Hadamard product.";
static const char __pyx_k_Neighbors_and_Weights_must_have[] = "Neighbors and Weights must have rows equals to self.nodes.";
static const char __pyx_k_Number_of_rows_must_be_equal_to[] = "Number of rows must be equal to Diagonal.cols";
static const char __pyx_k_Only_square_weight_matrices_are[] = "Only square weight matrices are allowed.";
static const char __pyx_k_Size_of_labels_must_be_equal_to[] = "Size of labels must be equal to Weights.rows.";
static const char __pyx_k_Weights_and_self_must_have_same[] = "Weights and self must have same ctype.";
static const char __pyx_k_Weights_must_be_a_square_Matrix[] = "Weights must be a square Matrix.";
static const char __pyx_k_classSeparation___reduce_cython[] = "classSeparation.__reduce_cython__";
static const char __pyx_k_weightedSquareDistance___reduce[] = "weightedSquareDistance.__reduce_cython__";
static const char __pyx_k_A_and_B_must_have_same_number_of[] = "A and B must have same number of columns.";
static const char __pyx_k_All_dimensions_preceding_dimensi[] = "All dimensions preceding dimension %d must be indexed and not sliced";
static const char __pyx_k_Buffer_view_does_not_expose_stri[] = "Buffer view does not expose strides";
static const char __pyx_k_Can_only_create_a_buffer_that_is[] = "Can only create a buffer that is contiguous in memory.";
static const char __pyx_k_Cannot_assign_to_read_only_memor[] = "Cannot assign to read-only memoryview";
static const char __pyx_k_Cannot_create_writable_memory_vi[] = "Cannot create writable memory view from read-only memoryview";
static const char __pyx_k_Cannot_transpose_memoryview_with[] = "Cannot transpose memoryview with indirect dimensions";
static const char __pyx_k_Digraph_and_Matrix_must_share_sa[] = "Digraph and Matrix must share same ctype.";
static const char __pyx_k_Dimension_of_diagonals_must_be_e[] = "Dimension of diagonals must be equal.";
static const char __pyx_k_Dist_rows_must_be_equal_to_label[] = "Dist.rows must be equal to labels length.";
static const char __pyx_k_Empty_shape_tuple_for_cython_arr[] = "Empty shape tuple for cython.array";
static const char __pyx_k_Entries_of_only_exceed_self_rows[] = "Entries of only exceed self.rows.";
static const char __pyx_k_Incompatible_checksums_0x_x_vs_0[] = "Incompatible checksums (0x%x vs (0x82a3537, 0x6ae9995, 0xb068931) = (name))";
static const char __pyx_k_Incompatible_shape_for_Graph_dat[] = "Incompatible shape for Graph data.";
static const char __pyx_k_Incompatible_shape_for_Matrix_ad[] = "Incompatible shape for Matrix addition.";
static const char __pyx_k_Incompatible_shape_for_Matrix_pr[] = "Incompatible shape for Matrix product.";
static const char __pyx_k_Incompatible_shape_for_Matrix_su[] = "Incompatible shape for Matrix subtraction.";
static const char __pyx_k_Incompatible_shape_for_matrix_mu[] = "Incompatible shape for matrix multiplication.";
static const char __pyx_k_Incompatible_shape_for_miolo_Mat[] = "Incompatible shape for miolo.Matrix data.";
static const char __pyx_k_Incompatible_shapes_for_addition[] = "Incompatible shapes for addition";
static const char __pyx_k_Incompatible_shapes_for_subtract[] = "Incompatible shapes for subtraction";
static const char __pyx_k_Indirect_dimensions_not_supporte[] = "Indirect dimensions not supported";
static const char __pyx_k_Invalid_mode_expected_c_or_fortr[] = "Invalid mode, expected 'c' or 'fortran', got ";
static const char __pyx_k_M_and_Weights_must_have_same_cty[] = "M and Weights must have same ctype.";
static const char __pyx_k_M_and_Weights_must_have_same_num[] = "M and Weights must have same number of rows.";
static const char __pyx_k_M_and_center_must_have_same_ctyp[] = "M and center must have same ctype.";
static const char __pyx_k_M_cols_must_be_equal_to_center_c[] = "M.cols must be equal to center.cols.";
static const char __pyx_k_Matrices_must_have_the_same_ctyp[] = "Matrices must have the same ctype.";
static const char __pyx_k_Matrix_operations_require_same_c[] = "Matrix operations require same ctype.";
static const char __pyx_k_Number_of_Matrix_rows_must_be_eq[] = "Number of Matrix rows must be equal to number of nodes.";
static const char __pyx_k_Number_of_cols_must_be_greater_t[] = "Number of cols must be greater than 1.";
static const char __pyx_k_Number_of_nodes_must_be_equal_to[] = "Number of nodes must be equal to Diagonal.cols";
static const char __pyx_k_Only_square_matrices_are_allowed[] = "Only square matrices are allowed.";
static const char __pyx_k_Only_square_matrices_can_be_spar[] = "Only square matrices can be sparsified.";
static const char __pyx_k_Out_of_bounds_on_buffer_access_a[] = "Out of bounds on buffer access (axis ";
static const char __pyx_k_Sphere_radius_must_be_greater_th[] = "Sphere radius must be greater than 0.";
static const char __pyx_k_Unable_to_convert_item_to_object[] = "Unable to convert item to object";
static const char __pyx_k_Weights_nodes_must_be_equal_to_M[] = "Weights.nodes must be equal to M.rows.";
static const char __pyx_k_at_and_M_must_have_same_number_o[] = "at and M must have same number of cols.";
static const char __pyx_k_at_and_tangent_must_have_same_nu[] = "at and tangent must have same number of cols.";
static const char __pyx_k_at_and_tanget_must_have_same_cty[] = "at and tanget must have same ctype.";
static const char __pyx_k_azimuth_must_be_smaller_than_M_c[] = "azimuth must be smaller than M.cols.";
static const char __pyx_k_clamped_must_have_length_equal_t[] = "clamped must have length equal to Matrix rows.";
static const char __pyx_k_classSeparation___setstate_cytho[] = "classSeparation.__setstate_cython__";
static const char __pyx_k_got_differing_extents_in_dimensi[] = "got differing extents in dimension ";
static const char __pyx_k_i_is_not_a_valid_index_for_Digra[] = "i is not a valid index for Digraph.";
static const char __pyx_k_j_is_not_a_valid_index_for_Digra[] = "j is not a valid index for Digraph.";
static const char __pyx_k_labels_must_have_size_equal_to_s[] = "labels must have size equal to self.rows.";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static const char __pyx_k_numpy__core_multiarray_failed_to[] = "numpy._core.multiarray failed to import";
static const char __pyx_k_numpy__core_umath_failed_to_impo[] = "numpy._core.umath failed to import";
static const char __pyx_k_self_diagonalDouble_self_diagona[] = "self.diagonalDouble,self.diagonalFloat,self.diagonalInt,self.digraphDouble,self.digraphFloat,self.digraphInt,self.graphDouble,self.graphFloat,self.graphInt,self.mtxDouble,self.mtxFloat,self.mtxInt cannot be converted to a Python object for pickling";
static const char __pyx_k_self_view_cannot_be_converted_to[] = "self.view cannot be converted to a Python object for pickling";
static const char __pyx_k_unable_to_allocate_shape_and_str[] = "unable to allocate shape and strides.";
static const char __pyx_k_weightedDotProduct___reduce_cyth[] = "weightedDotProduct.__reduce_cython__";
static const char __pyx_k_weightedDotProduct___setstate_cy[] = "weightedDotProduct.__setstate_cython__";
static const char __pyx_k_weightedSquareDistance___setstat[] = "weightedSquareDistance.__setstate_cython__";
static const char __pyx_k_Size_of_labels_must_be_equal_to_2[] = "Size of labels must be equal to Weights.nodes";
static const char __pyx_k_Incompatible_checksums_0x_x_vs_0_2[] = "Incompatible checksums (0x%x vs (0xe3b0c44, 0xda39a3e, 0xd41d8cd) = ())";
static const char __pyx_k_at_and_M_must_have_same_number_o_2[] = "at and M must have same number of rows.";
/* #### Code section: decls ### */
static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_shape, Py_ssize_t __pyx_v_itemsize, PyObject *__pyx_v_format, PyObject *__pyx_v_mode, int __pyx_v_allocate_buffer); /* proto */
static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__(struct __pyx_array_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static void __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__(struct __pyx_array_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_5array_7memview___get__(struct __pyx_array_obj *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_array___pyx_pf_15View_dot_MemoryView_5array_6__len__(struct __pyx_array_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getattr__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_attr); /* proto */
static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_10__getitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item); /* proto */
static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_12__setitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf___pyx_array___reduce_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_array_2__setstate_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum___init__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum_2__repr__(struct __pyx_MemviewEnum_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_MemviewEnum___reduce_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_MemviewEnum_2__setstate_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview___cinit__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj, int __pyx_v_flags, int __pyx_v_dtype_is_object); /* proto */
static void __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_4__getitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index); /* proto */
static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /* proto */
static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__(struct __pyx_memoryview_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4base___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4ndim___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_8itemsize___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_10__len__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_12__repr__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_14__str__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_16is_c_contig(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_18is_f_contig(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_20copy(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_22copy_fortran(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryview___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryview_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static void __pyx_memoryviewslice___pyx_pf_15View_dot_MemoryView_16_memoryviewslice___dealloc__(struct __pyx_memoryviewslice_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryviewslice___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryviewslice_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_5miolo_11mioloObject_isMatrix(struct __pyx_obj_5miolo_mioloObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_11mioloObject_2isGraph(struct __pyx_obj_5miolo_mioloObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_11mioloObject_4isDigraph(struct __pyx_obj_5miolo_mioloObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_11mioloObject_6isDiagonal(struct __pyx_obj_5miolo_mioloObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_11mioloObject_5ctype___get__(CYTHON_UNUSED struct __pyx_obj_5miolo_mioloObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_11mioloObject_4rows___get__(CYTHON_UNUSED struct __pyx_obj_5miolo_mioloObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_11mioloObject_4cols___get__(CYTHON_UNUSED struct __pyx_obj_5miolo_mioloObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_11mioloObject_5nodes___get__(CYTHON_UNUSED struct __pyx_obj_5miolo_mioloObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_11mioloObject_3dim___get__(CYTHON_UNUSED struct __pyx_obj_5miolo_mioloObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_11mioloObject_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_mioloObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_11mioloObject_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_mioloObject *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5miolo_6Matrix___cinit__(struct __pyx_obj_5miolo_Matrix *__pyx_v_self, unsigned long __pyx_v_rows, unsigned long __pyx_v_cols, PyObject *__pyx_v_init, PyObject *__pyx_v_ctype); /* proto */
static void __pyx_pf_5miolo_6Matrix_2__dealloc__(struct __pyx_obj_5miolo_Matrix *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_6Matrix_4null___get__(struct __pyx_obj_5miolo_Matrix *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_6Matrix_5ctype___get__(struct __pyx_obj_5miolo_Matrix *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_6Matrix_4rows___get__(struct __pyx_obj_5miolo_Matrix *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_6Matrix_4cols___get__(struct __pyx_obj_5miolo_Matrix *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_6Matrix_5numpy___get__(struct __pyx_obj_5miolo_Matrix *__pyx_v_self); /* proto */
static int __pyx_pf_5miolo_6Matrix_5numpy_2__set__(struct __pyx_obj_5miolo_Matrix *__pyx_v_self, PyObject *__pyx_v_data); /* proto */
static Py_ssize_t __pyx_pf_5miolo_6Matrix_4__len__(struct __pyx_obj_5miolo_Matrix *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_6Matrix_6__getitem__(struct __pyx_obj_5miolo_Matrix *__pyx_v_self, unsigned long __pyx_v_k); /* proto */
static int __pyx_pf_5miolo_6Matrix_8__setitem__(struct __pyx_obj_5miolo_Matrix *__pyx_v_self, unsigned long __pyx_v_k, double __pyx_v_value); /* proto */
static PyObject *__pyx_pf_5miolo_6Matrix_10copy(struct __pyx_obj_5miolo_Matrix *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_M, __Pyx_memviewslice __pyx_v_only); /* proto */
static PyObject *__pyx_pf_5miolo_6Matrix_12print(struct __pyx_obj_5miolo_Matrix *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_6Matrix_14cut(struct __pyx_obj_5miolo_Matrix *__pyx_v_self, PyObject *__pyx_v_rowMin, PyObject *__pyx_v_rowMax, PyObject *__pyx_v_colMin, PyObject *__pyx_v_colMax); /* proto */
static PyObject *__pyx_pf_5miolo_6Matrix_16max(struct __pyx_obj_5miolo_Matrix *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_6Matrix_18min(struct __pyx_obj_5miolo_Matrix *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_6Matrix_20argkmax(struct __pyx_obj_5miolo_Matrix *__pyx_v_self, PyObject *__pyx_v_k); /* proto */
static PyObject *__pyx_pf_5miolo_6Matrix_22argkmin(struct __pyx_obj_5miolo_Matrix *__pyx_v_self, PyObject *__pyx_v_k); /* proto */
static PyObject *__pyx_pf_5miolo_6Matrix_24normalize(struct __pyx_obj_5miolo_Matrix *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_6Matrix_26transpose(struct __pyx_obj_5miolo_Matrix *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_6Matrix_28flatten(struct __pyx_obj_5miolo_Matrix *__pyx_v_self, bool __pyx_v_rows); /* proto */
static PyObject *__pyx_pf_5miolo_6Matrix_30reshape(struct __pyx_obj_5miolo_Matrix *__pyx_v_self, unsigned long __pyx_v_rows, unsigned long __pyx_v_cols); /* proto */
static PyObject *__pyx_pf_5miolo_6Matrix_32sparsifyThreshold(struct __pyx_obj_5miolo_Matrix *__pyx_v_self, PyObject *__pyx_v_Threshold, PyObject *__pyx_v_output); /* proto */
static PyObject *__pyx_pf_5miolo_6Matrix_34sparsifyKNN(struct __pyx_obj_5miolo_Matrix *__pyx_v_self, PyObject *__pyx_v_k, PyObject *__pyx_v_output); /* proto */
static PyObject *__pyx_pf_5miolo_6Matrix_36__add__(struct __pyx_obj_5miolo_Matrix *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_A); /* proto */
static PyObject *__pyx_pf_5miolo_6Matrix_38__sub__(struct __pyx_obj_5miolo_Matrix *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_A); /* proto */
static PyObject *__pyx_pf_5miolo_6Matrix_40__mul__(struct __pyx_obj_5miolo_Matrix *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5miolo_6Matrix_42__rmul__(struct __pyx_obj_5miolo_Matrix *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5miolo_6Matrix_44__truediv__(struct __pyx_obj_5miolo_Matrix *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5miolo_6Matrix_46__and__(struct __pyx_obj_5miolo_Matrix *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_A); /* proto */
static PyObject *__pyx_pf_5miolo_6Matrix_48__mod__(struct __pyx_obj_5miolo_Matrix *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_A); /* proto */
static PyObject *__pyx_pf_5miolo_6Matrix_50__abs__(struct __pyx_obj_5miolo_Matrix *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_6Matrix_52argmax(struct __pyx_obj_5miolo_Matrix *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_6Matrix_54argmin(struct __pyx_obj_5miolo_Matrix *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_6Matrix_56rowDistance(struct __pyx_obj_5miolo_Matrix *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_6Matrix_58sumAll(struct __pyx_obj_5miolo_Matrix *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_6Matrix_60partition(struct __pyx_obj_5miolo_Matrix *__pyx_v_self, __Pyx_memviewslice __pyx_v_labels, int __pyx_v_targetLabel); /* proto */
static PyObject *__pyx_pf_5miolo_6Matrix_62trace(struct __pyx_obj_5miolo_Matrix *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_6Matrix_64__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_Matrix *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_6Matrix_66__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_Matrix *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_5miolo_dot(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_A, struct __pyx_obj_5miolo_Matrix *__pyx_v_B); /* proto */
static PyObject *__pyx_pf_5miolo_2concat(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_A, struct __pyx_obj_5miolo_Matrix *__pyx_v_B); /* proto */
static int __pyx_pf_5miolo_5Graph___cinit__(struct __pyx_obj_5miolo_Graph *__pyx_v_self, unsigned long __pyx_v_nodes, unsigned long __pyx_v_edges, PyObject *__pyx_v_ctype); /* proto */
static void __pyx_pf_5miolo_5Graph_2__dealloc__(struct __pyx_obj_5miolo_Graph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_5Graph_5ctype___get__(struct __pyx_obj_5miolo_Graph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_5Graph_4null___get__(struct __pyx_obj_5miolo_Graph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_5Graph_5nodes___get__(struct __pyx_obj_5miolo_Graph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_5Graph_5edges___get__(struct __pyx_obj_5miolo_Graph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_5Graph_9structure___get__(struct __pyx_obj_5miolo_Graph *__pyx_v_self); /* proto */
static int __pyx_pf_5miolo_5Graph_9structure_2__set__(struct __pyx_obj_5miolo_Graph *__pyx_v_self, PyObject *__pyx_v_data); /* proto */
static PyObject *__pyx_pf_5miolo_5Graph_7weights___get__(struct __pyx_obj_5miolo_Graph *__pyx_v_self); /* proto */
static int __pyx_pf_5miolo_5Graph_7weights_2__set__(struct __pyx_obj_5miolo_Graph *__pyx_v_self, PyObject *__pyx_v_data); /* proto */
static Py_ssize_t __pyx_pf_5miolo_5Graph_4__len__(struct __pyx_obj_5miolo_Graph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_5Graph_6__getitem__(struct __pyx_obj_5miolo_Graph *__pyx_v_self, unsigned long __pyx_v_k); /* proto */
static PyObject *__pyx_pf_5miolo_5Graph_8isolatedNodes(struct __pyx_obj_5miolo_Graph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_5Graph_10print(struct __pyx_obj_5miolo_Graph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_5Graph_12propagate(struct __pyx_obj_5miolo_Graph *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_M, __Pyx_memviewslice __pyx_v_clamped); /* proto */
static PyObject *__pyx_pf_5miolo_5Graph_14__add__(struct __pyx_obj_5miolo_Graph *__pyx_v_self, struct __pyx_obj_5miolo_Graph *__pyx_v_G); /* proto */
static PyObject *__pyx_pf_5miolo_5Graph_16__sub__(struct __pyx_obj_5miolo_Graph *__pyx_v_self, struct __pyx_obj_5miolo_Graph *__pyx_v_G); /* proto */
static PyObject *__pyx_pf_5miolo_5Graph_18__mul__(struct __pyx_obj_5miolo_Graph *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5miolo_5Graph_20__rmul__(struct __pyx_obj_5miolo_Graph *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5miolo_5Graph_22__truediv__(struct __pyx_obj_5miolo_Graph *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5miolo_5Graph_24__and__(struct __pyx_obj_5miolo_Graph *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_A); /* proto */
static PyObject *__pyx_pf_5miolo_5Graph_26__rand__(struct __pyx_obj_5miolo_Graph *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_A); /* proto */
static PyObject *__pyx_pf_5miolo_5Graph_28normalize(struct __pyx_obj_5miolo_Graph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_5Graph_30degree(struct __pyx_obj_5miolo_Graph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_5Graph_32laplacian(struct __pyx_obj_5miolo_Graph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_5Graph_34toMatrix(struct __pyx_obj_5miolo_Graph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_5Graph_36toDigraph(struct __pyx_obj_5miolo_Graph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_5Graph_38max(struct __pyx_obj_5miolo_Graph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_5Graph_40min(struct __pyx_obj_5miolo_Graph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_5Graph_42gaussianScale(struct __pyx_obj_5miolo_Graph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_5Graph_44toDigraph(struct __pyx_obj_5miolo_Graph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_5Graph_46__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_Graph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_5Graph_48__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_Graph *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_5miolo_4hadamard(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_5miolo_Graph *__pyx_v_G, struct __pyx_obj_5miolo_Graph *__pyx_v_H); /* proto */
static PyObject *__pyx_pf_5miolo_6MST(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_5miolo_mioloObject *__pyx_v_O, PyObject *__pyx_v_symmetrize); /* proto */
static int __pyx_pf_5miolo_7Digraph___cinit__(struct __pyx_obj_5miolo_Digraph *__pyx_v_self, unsigned long __pyx_v_nodes, PyObject *__pyx_v_ctype); /* proto */
static void __pyx_pf_5miolo_7Digraph_2__dealloc__(struct __pyx_obj_5miolo_Digraph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_7Digraph_5ctype___get__(struct __pyx_obj_5miolo_Digraph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_7Digraph_5nodes___get__(struct __pyx_obj_5miolo_Digraph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_7Digraph_4null___get__(struct __pyx_obj_5miolo_Digraph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_7Digraph_4connect(struct __pyx_obj_5miolo_Digraph *__pyx_v_self, PyObject *__pyx_v_i, PyObject *__pyx_v_j, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5miolo_7Digraph_6connectRegular(struct __pyx_obj_5miolo_Digraph *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_Neighbors, struct __pyx_obj_5miolo_Matrix *__pyx_v_Weights); /* proto */
static PyObject *__pyx_pf_5miolo_7Digraph_8normalize(struct __pyx_obj_5miolo_Digraph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_7Digraph_10copy(struct __pyx_obj_5miolo_Digraph *__pyx_v_self, PyObject *__pyx_v_mode); /* proto */
static PyObject *__pyx_pf_5miolo_7Digraph_12shape(struct __pyx_obj_5miolo_Digraph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_7Digraph_14transpose(struct __pyx_obj_5miolo_Digraph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_7Digraph_16sameShape(struct __pyx_obj_5miolo_Digraph *__pyx_v_self, struct __pyx_obj_5miolo_Digraph *__pyx_v_G); /* proto */
static PyObject *__pyx_pf_5miolo_7Digraph_18symmetrize(struct __pyx_obj_5miolo_Digraph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_7Digraph_20gaussianScale(struct __pyx_obj_5miolo_Digraph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_7Digraph_22__add__(struct __pyx_obj_5miolo_Digraph *__pyx_v_self, struct __pyx_obj_5miolo_Digraph *__pyx_v_G); /* proto */
static PyObject *__pyx_pf_5miolo_7Digraph_24__sub__(struct __pyx_obj_5miolo_Digraph *__pyx_v_self, struct __pyx_obj_5miolo_Digraph *__pyx_v_G); /* proto */
static PyObject *__pyx_pf_5miolo_7Digraph_26__mul__(struct __pyx_obj_5miolo_Digraph *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5miolo_7Digraph_28__truediv__(struct __pyx_obj_5miolo_Digraph *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5miolo_7Digraph_30__and__(struct __pyx_obj_5miolo_Digraph *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_M); /* proto */
static PyObject *__pyx_pf_5miolo_7Digraph_32__rand__(struct __pyx_obj_5miolo_Digraph *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_M); /* proto */
static PyObject *__pyx_pf_5miolo_7Digraph_34toGraph(struct __pyx_obj_5miolo_Digraph *__pyx_v_self, PyObject *__pyx_v_symmetrize); /* proto */
static PyObject *__pyx_pf_5miolo_7Digraph_36__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_Digraph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_7Digraph_38__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_Digraph *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5miolo_8Diagonal___cinit__(struct __pyx_obj_5miolo_Diagonal *__pyx_v_self, unsigned long __pyx_v_dim, PyObject *__pyx_v_init, PyObject *__pyx_v_ctype); /* proto */
static void __pyx_pf_5miolo_8Diagonal_2__dealloc__(struct __pyx_obj_5miolo_Diagonal *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_8Diagonal_5ctype___get__(struct __pyx_obj_5miolo_Diagonal *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_8Diagonal_4rows___get__(struct __pyx_obj_5miolo_Diagonal *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_8Diagonal_4cols___get__(struct __pyx_obj_5miolo_Diagonal *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_pf_5miolo_8Diagonal_4__len__(struct __pyx_obj_5miolo_Diagonal *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_8Diagonal_6__getitem__(struct __pyx_obj_5miolo_Diagonal *__pyx_v_self, unsigned long __pyx_v_k); /* proto */
static int __pyx_pf_5miolo_8Diagonal_8__setitem__(struct __pyx_obj_5miolo_Diagonal *__pyx_v_self, unsigned long __pyx_v_k, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5miolo_8Diagonal_10__add__(struct __pyx_obj_5miolo_Diagonal *__pyx_v_self, struct __pyx_obj_5miolo_Diagonal *__pyx_v_D); /* proto */
static PyObject *__pyx_pf_5miolo_8Diagonal_12__sub__(struct __pyx_obj_5miolo_Diagonal *__pyx_v_self, struct __pyx_obj_5miolo_Diagonal *__pyx_v_D); /* proto */
static PyObject *__pyx_pf_5miolo_8Diagonal_14__and__(struct __pyx_obj_5miolo_Diagonal *__pyx_v_self, struct __pyx_obj_5miolo_mioloObject *__pyx_v_D); /* proto */
static PyObject *__pyx_pf_5miolo_8Diagonal_16__rand__(struct __pyx_obj_5miolo_Diagonal *__pyx_v_self, struct __pyx_obj_5miolo_mioloObject *__pyx_v_D); /* proto */
static PyObject *__pyx_pf_5miolo_8Diagonal_18__mul__(struct __pyx_obj_5miolo_Diagonal *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5miolo_8Diagonal_20__truediv__(struct __pyx_obj_5miolo_Diagonal *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5miolo_8Diagonal_22__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_Diagonal *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_8Diagonal_24__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_Diagonal *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_5miolo_14__defaults__(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5miolo_8txtMatrix(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_ctype); /* proto */
static PyObject *__pyx_pf_5miolo_16__defaults__(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5miolo_10txtGraph(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_ctype); /* proto */
static PyObject *__pyx_pf_5miolo_8Manifold___reduce_cython__(struct __pyx_obj_5miolo_Manifold *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_8Manifold_2__setstate_cython__(struct __pyx_obj_5miolo_Manifold *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5miolo_9Euclidean___init__(CYTHON_UNUSED struct __pyx_obj_5miolo_Euclidean *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_9Euclidean_2dot(struct __pyx_obj_5miolo_Euclidean *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_A); /* proto */
static PyObject *__pyx_pf_5miolo_9Euclidean_4distance(struct __pyx_obj_5miolo_Euclidean *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_A); /* proto */
static PyObject *__pyx_pf_5miolo_9Euclidean_6mean(struct __pyx_obj_5miolo_Euclidean *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_A); /* proto */
static PyObject *__pyx_pf_5miolo_9Euclidean_8variance(struct __pyx_obj_5miolo_Euclidean *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_A); /* proto */
static PyObject *__pyx_pf_5miolo_9Euclidean_10minmaxNormalize(struct __pyx_obj_5miolo_Euclidean *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_A); /* proto */
static PyObject *__pyx_pf_5miolo_9Euclidean_12rowNormalize(struct __pyx_obj_5miolo_Euclidean *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_A); /* proto */
static PyObject *__pyx_pf_5miolo_9Euclidean_14gaussianNormalize(struct __pyx_obj_5miolo_Euclidean *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_A); /* proto */
static PyObject *__pyx_pf_5miolo_9Euclidean_16centroidDistance(struct __pyx_obj_5miolo_Euclidean *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_M, struct __pyx_obj_5miolo_Matrix *__pyx_v_center); /* proto */
static PyObject *__pyx_pf_5miolo_9Euclidean_18kmpp(struct __pyx_obj_5miolo_Euclidean *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_M, int __pyx_v_k); /* proto */
static PyObject *__pyx_pf_5miolo_9Euclidean_20__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_Euclidean *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_9Euclidean_22__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_Euclidean *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5miolo_6Sphere___init__(struct __pyx_obj_5miolo_Sphere *__pyx_v_self, PyObject *__pyx_v_radius); /* proto */
static PyObject *__pyx_pf_5miolo_6Sphere_6radius___get__(struct __pyx_obj_5miolo_Sphere *__pyx_v_self); /* proto */
static int __pyx_pf_5miolo_6Sphere_6radius_2__set__(struct __pyx_obj_5miolo_Sphere *__pyx_v_self, PyObject *__pyx_v_r); /* proto */
static PyObject *__pyx_pf_5miolo_6Sphere_2stereographicProjection(struct __pyx_obj_5miolo_Sphere *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_M); /* proto */
static PyObject *__pyx_pf_5miolo_6Sphere_4fromEuclidean(struct __pyx_obj_5miolo_Sphere *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_M); /* proto */
static PyObject *__pyx_pf_5miolo_6Sphere_6toEuclidean(struct __pyx_obj_5miolo_Sphere *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_M); /* proto */
static PyObject *__pyx_pf_5miolo_6Sphere_8coordinateReady(struct __pyx_obj_5miolo_Sphere *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_M, unsigned long __pyx_v_azimuth); /* proto */
static PyObject *__pyx_pf_5miolo_6Sphere_10distance(struct __pyx_obj_5miolo_Sphere *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_M); /* proto */
static PyObject *__pyx_pf_5miolo_6Sphere_12isIn(struct __pyx_obj_5miolo_Sphere *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_M, double __pyx_v_tolerance); /* proto */
static PyObject *__pyx_pf_5miolo_6Sphere_14isTangent(struct __pyx_obj_5miolo_Sphere *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_at, struct __pyx_obj_5miolo_Matrix *__pyx_v_M, double __pyx_v_tolerance); /* proto */
static PyObject *__pyx_pf_5miolo_6Sphere_16exp(struct __pyx_obj_5miolo_Sphere *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_at, struct __pyx_obj_5miolo_Matrix *__pyx_v_tangent); /* proto */
static PyObject *__pyx_pf_5miolo_6Sphere_18centroidDistance(struct __pyx_obj_5miolo_Sphere *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_M, struct __pyx_obj_5miolo_Matrix *__pyx_v_center); /* proto */
static PyObject *__pyx_pf_5miolo_6Sphere_20__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_Sphere *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_6Sphere_22__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_Sphere *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5miolo_8Poincare___init__(struct __pyx_obj_5miolo_Poincare *__pyx_v_self, PyObject *__pyx_v_curvature); /* proto */
static PyObject *__pyx_pf_5miolo_8Poincare_9curvature___get__(struct __pyx_obj_5miolo_Poincare *__pyx_v_self); /* proto */
static int __pyx_pf_5miolo_8Poincare_9curvature_2__set__(struct __pyx_obj_5miolo_Poincare *__pyx_v_self, PyObject *__pyx_v_curv); /* proto */
static PyObject *__pyx_pf_5miolo_8Poincare_2distance(struct __pyx_obj_5miolo_Poincare *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_M); /* proto */
static PyObject *__pyx_pf_5miolo_8Poincare_4isIn(struct __pyx_obj_5miolo_Poincare *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_M); /* proto */
static PyObject *__pyx_pf_5miolo_8Poincare_6add(struct __pyx_obj_5miolo_Poincare *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_A, struct __pyx_obj_5miolo_Matrix *__pyx_v_B); /* proto */
static PyObject *__pyx_pf_5miolo_8Poincare_8exp(struct __pyx_obj_5miolo_Poincare *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_at, struct __pyx_obj_5miolo_Matrix *__pyx_v_M); /* proto */
static PyObject *__pyx_pf_5miolo_8Poincare_10log(struct __pyx_obj_5miolo_Poincare *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_start, struct __pyx_obj_5miolo_Matrix *__pyx_v_end); /* proto */
static PyObject *__pyx_pf_5miolo_8Poincare_12mean(struct __pyx_obj_5miolo_Poincare *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_M); /* proto */
static PyObject *__pyx_pf_5miolo_8Poincare_14centroidDistance(struct __pyx_obj_5miolo_Poincare *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_M, struct __pyx_obj_5miolo_Matrix *__pyx_v_center); /* proto */
static PyObject *__pyx_pf_5miolo_8Poincare_16hyperbolicity(struct __pyx_obj_5miolo_Poincare *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_M); /* proto */
static PyObject *__pyx_pf_5miolo_8Poincare_18__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_Poincare *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_8Poincare_20__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_Poincare *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5miolo_7Lorentz___init__(struct __pyx_obj_5miolo_Lorentz *__pyx_v_self, PyObject *__pyx_v_beta); /* proto */
static PyObject *__pyx_pf_5miolo_7Lorentz_4beta___get__(struct __pyx_obj_5miolo_Lorentz *__pyx_v_self); /* proto */
static int __pyx_pf_5miolo_7Lorentz_4beta_2__set__(struct __pyx_obj_5miolo_Lorentz *__pyx_v_self, PyObject *__pyx_v_b); /* proto */
static PyObject *__pyx_pf_5miolo_7Lorentz_2isIn(struct __pyx_obj_5miolo_Lorentz *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_M, PyObject *__pyx_v_tolerance); /* proto */
static PyObject *__pyx_pf_5miolo_7Lorentz_4dot(struct __pyx_obj_5miolo_Lorentz *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_M); /* proto */
static PyObject *__pyx_pf_5miolo_7Lorentz_6metricDistance(struct __pyx_obj_5miolo_Lorentz *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_M); /* proto */
static PyObject *__pyx_pf_5miolo_7Lorentz_8lorentzDistance(struct __pyx_obj_5miolo_Lorentz *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_M); /* proto */
static PyObject *__pyx_pf_5miolo_7Lorentz_10fromEuclidean(struct __pyx_obj_5miolo_Lorentz *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_M); /* proto */
static PyObject *__pyx_pf_5miolo_7Lorentz_12toEuclidean(struct __pyx_obj_5miolo_Lorentz *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_M); /* proto */
static PyObject *__pyx_pf_5miolo_7Lorentz_14exp(struct __pyx_obj_5miolo_Lorentz *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_at, struct __pyx_obj_5miolo_Matrix *__pyx_v_M); /* proto */
static PyObject *__pyx_pf_5miolo_7Lorentz_16tangentProjection(struct __pyx_obj_5miolo_Lorentz *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_at, struct __pyx_obj_5miolo_Matrix *__pyx_v_M); /* proto */
static PyObject *__pyx_pf_5miolo_7Lorentz_18centroidDistance(struct __pyx_obj_5miolo_Lorentz *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_M, struct __pyx_obj_5miolo_Matrix *__pyx_v_center); /* proto */
static PyObject *__pyx_pf_5miolo_7Lorentz_20mean(struct __pyx_obj_5miolo_Lorentz *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_M); /* proto */
static PyObject *__pyx_pf_5miolo_7Lorentz_22mean(struct __pyx_obj_5miolo_Lorentz *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_M); /* proto */
static PyObject *__pyx_pf_5miolo_7Lorentz_24__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_Lorentz *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_7Lorentz_26__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_Lorentz *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5miolo_9ufunction___init__(CYTHON_UNUSED struct __pyx_obj_5miolo_ufunction *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_9ufunction_2__call__(struct __pyx_obj_5miolo_ufunction *__pyx_v_self, struct __pyx_obj_5miolo_mioloObject *__pyx_v_X); /* proto */
static PyObject *__pyx_pf_5miolo_9ufunction_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_ufunction *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_9ufunction_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_ufunction *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5miolo_3sin___init__(struct __pyx_obj_5miolo_sin *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_3sin_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_sin *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_3sin_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_sin *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5miolo_3cos___init__(struct __pyx_obj_5miolo_cos *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_3cos_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_cos *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_3cos_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_cos *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5miolo_3tan___init__(struct __pyx_obj_5miolo_tan *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_3tan_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_tan *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_3tan_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_tan *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5miolo_4asin___init__(struct __pyx_obj_5miolo_asin *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_4asin_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_asin *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_4asin_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_asin *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5miolo_4acos___init__(struct __pyx_obj_5miolo_acos *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_4acos_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_acos *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_4acos_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_acos *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5miolo_4atan___init__(struct __pyx_obj_5miolo_atan *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_4atan_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_atan *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_4atan_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_atan *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5miolo_4cosh___init__(struct __pyx_obj_5miolo_cosh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_4cosh_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_cosh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_4cosh_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_cosh *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5miolo_4sinh___init__(struct __pyx_obj_5miolo_sinh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_4sinh_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_sinh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_4sinh_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_sinh *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5miolo_4tanh___init__(struct __pyx_obj_5miolo_tanh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_4tanh_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_tanh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_4tanh_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_tanh *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5miolo_5acosh___init__(struct __pyx_obj_5miolo_acosh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_5acosh_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_acosh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_5acosh_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_acosh *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5miolo_5asinh___init__(struct __pyx_obj_5miolo_asinh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_5asinh_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_asinh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_5asinh_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_asinh *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5miolo_5atanh___init__(struct __pyx_obj_5miolo_atanh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_5atanh_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_atanh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_5atanh_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_atanh *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5miolo_3exp___init__(struct __pyx_obj_5miolo_exp *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_3exp_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_exp *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_3exp_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_exp *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5miolo_3log___init__(struct __pyx_obj_5miolo_log *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_3log_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_log *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_3log_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_log *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5miolo_4fabs___init__(struct __pyx_obj_5miolo_fabs *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_4fabs_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_fabs *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_4fabs_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_fabs *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5miolo_4sqrt___init__(struct __pyx_obj_5miolo_sqrt *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_4sqrt_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_sqrt *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_4sqrt_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_sqrt *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5miolo_4recp___init__(struct __pyx_obj_5miolo_recp *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_4recp_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_recp *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_4recp_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_recp *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_5miolo_15classSeparation_intra(struct __pyx_obj_5miolo_classSeparation *__pyx_v_self, struct __pyx_obj_5miolo_mioloObject *__pyx_v_O, __Pyx_memviewslice __pyx_v_labels); /* proto */
static PyObject *__pyx_pf_5miolo_15classSeparation_2extra(struct __pyx_obj_5miolo_classSeparation *__pyx_v_self, struct __pyx_obj_5miolo_mioloObject *__pyx_v_O, __Pyx_memviewslice __pyx_v_labels); /* proto */
static PyObject *__pyx_pf_5miolo_15classSeparation_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_classSeparation *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_15classSeparation_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_classSeparation *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_5miolo_22weightedSquareDistance___call__(struct __pyx_obj_5miolo_weightedSquareDistance *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_M, struct __pyx_obj_5miolo_mioloObject *__pyx_v_Weights); /* proto */
static PyObject *__pyx_pf_5miolo_22weightedSquareDistance_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_weightedSquareDistance *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_22weightedSquareDistance_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_weightedSquareDistance *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_5miolo_18weightedDotProduct___call__(struct __pyx_obj_5miolo_weightedDotProduct *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_M, struct __pyx_obj_5miolo_mioloObject *__pyx_v_Weights); /* proto */
static PyObject *__pyx_pf_5miolo_18weightedDotProduct_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_weightedDotProduct *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_18weightedDotProduct_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_weightedDotProduct *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_5miolo_11pottsEnergy___call__(struct __pyx_obj_5miolo_pottsEnergy *__pyx_v_self, struct __pyx_obj_5miolo_mioloObject *__pyx_v_Weights, __Pyx_memviewslice __pyx_v_labels); /* proto */
static PyObject *__pyx_pf_5miolo_11pottsEnergy_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_pottsEnergy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5miolo_11pottsEnergy_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_pottsEnergy *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_5miolo_12__pyx_unpickle_Manifold(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_5miolo_mioloObject(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5miolo_Matrix(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5miolo_Graph(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5miolo_Digraph(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5miolo_Diagonal(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5miolo_Manifold(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5miolo_Euclidean(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5miolo_Sphere(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5miolo_Poincare(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5miolo_Lorentz(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5miolo_ufunction(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5miolo_classSeparation(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5miolo_weightedSquareDistance(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5miolo_weightedDotProduct(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5miolo_pottsEnergy(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_array(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_Enum(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_memoryview(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new__memoryviewslice(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
/* #### Code section: late_includes ### */
/* #### Code section: module_state ### */
typedef struct {
  PyObject *__pyx_d;
  PyObject *__pyx_b;
  PyObject *__pyx_cython_runtime;
  PyObject *__pyx_empty_tuple;
  PyObject *__pyx_empty_bytes;
  PyObject *__pyx_empty_unicode;
  #ifdef __Pyx_CyFunction_USED
  PyTypeObject *__pyx_CyFunctionType;
  #endif
  #ifdef __Pyx_FusedFunction_USED
  PyTypeObject *__pyx_FusedFunctionType;
  #endif
  #ifdef __Pyx_Generator_USED
  PyTypeObject *__pyx_GeneratorType;
  #endif
  #ifdef __Pyx_IterableCoroutine_USED
  PyTypeObject *__pyx_IterableCoroutineType;
  #endif
  #ifdef __Pyx_Coroutine_USED
  PyTypeObject *__pyx_CoroutineAwaitType;
  #endif
  #ifdef __Pyx_Coroutine_USED
  PyTypeObject *__pyx_CoroutineType;
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_7cpython_4type_type;
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_5numpy_dtype;
  PyTypeObject *__pyx_ptype_5numpy_flatiter;
  PyTypeObject *__pyx_ptype_5numpy_broadcast;
  PyTypeObject *__pyx_ptype_5numpy_ndarray;
  PyTypeObject *__pyx_ptype_5numpy_generic;
  PyTypeObject *__pyx_ptype_5numpy_number;
  PyTypeObject *__pyx_ptype_5numpy_integer;
  PyTypeObject *__pyx_ptype_5numpy_signedinteger;
  PyTypeObject *__pyx_ptype_5numpy_unsignedinteger;
  PyTypeObject *__pyx_ptype_5numpy_inexact;
  PyTypeObject *__pyx_ptype_5numpy_floating;
  PyTypeObject *__pyx_ptype_5numpy_complexfloating;
  PyTypeObject *__pyx_ptype_5numpy_flexible;
  PyTypeObject *__pyx_ptype_5numpy_character;
  PyTypeObject *__pyx_ptype_5numpy_ufunc;
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  PyObject *__pyx_type_5miolo_mioloObject;
  PyObject *__pyx_type_5miolo_Matrix;
  PyObject *__pyx_type_5miolo_Graph;
  PyObject *__pyx_type_5miolo_Digraph;
  PyObject *__pyx_type_5miolo_Diagonal;
  PyObject *__pyx_type_5miolo_Manifold;
  PyObject *__pyx_type_5miolo_Euclidean;
  PyObject *__pyx_type_5miolo_Sphere;
  PyObject *__pyx_type_5miolo_Poincare;
  PyObject *__pyx_type_5miolo_Lorentz;
  PyObject *__pyx_type_5miolo_ufunction;
  PyObject *__pyx_type_5miolo_sin;
  PyObject *__pyx_type_5miolo_cos;
  PyObject *__pyx_type_5miolo_tan;
  PyObject *__pyx_type_5miolo_asin;
  PyObject *__pyx_type_5miolo_acos;
  PyObject *__pyx_type_5miolo_atan;
  PyObject *__pyx_type_5miolo_cosh;
  PyObject *__pyx_type_5miolo_sinh;
  PyObject *__pyx_type_5miolo_tanh;
  PyObject *__pyx_type_5miolo_acosh;
  PyObject *__pyx_type_5miolo_asinh;
  PyObject *__pyx_type_5miolo_atanh;
  PyObject *__pyx_type_5miolo_exp;
  PyObject *__pyx_type_5miolo_log;
  PyObject *__pyx_type_5miolo_fabs;
  PyObject *__pyx_type_5miolo_sqrt;
  PyObject *__pyx_type_5miolo_recp;
  PyObject *__pyx_type_5miolo_classSeparation;
  PyObject *__pyx_type_5miolo_weightedSquareDistance;
  PyObject *__pyx_type_5miolo_weightedDotProduct;
  PyObject *__pyx_type_5miolo_pottsEnergy;
  PyObject *__pyx_type___pyx_array;
  PyObject *__pyx_type___pyx_MemviewEnum;
  PyObject *__pyx_type___pyx_memoryview;
  PyObject *__pyx_type___pyx_memoryviewslice;
  #endif
  PyTypeObject *__pyx_ptype_5miolo_mioloObject;
  PyTypeObject *__pyx_ptype_5miolo_Matrix;
  PyTypeObject *__pyx_ptype_5miolo_Graph;
  PyTypeObject *__pyx_ptype_5miolo_Digraph;
  PyTypeObject *__pyx_ptype_5miolo_Diagonal;
  PyTypeObject *__pyx_ptype_5miolo_Manifold;
  PyTypeObject *__pyx_ptype_5miolo_Euclidean;
  PyTypeObject *__pyx_ptype_5miolo_Sphere;
  PyTypeObject *__pyx_ptype_5miolo_Poincare;
  PyTypeObject *__pyx_ptype_5miolo_Lorentz;
  PyTypeObject *__pyx_ptype_5miolo_ufunction;
  PyTypeObject *__pyx_ptype_5miolo_sin;
  PyTypeObject *__pyx_ptype_5miolo_cos;
  PyTypeObject *__pyx_ptype_5miolo_tan;
  PyTypeObject *__pyx_ptype_5miolo_asin;
  PyTypeObject *__pyx_ptype_5miolo_acos;
  PyTypeObject *__pyx_ptype_5miolo_atan;
  PyTypeObject *__pyx_ptype_5miolo_cosh;
  PyTypeObject *__pyx_ptype_5miolo_sinh;
  PyTypeObject *__pyx_ptype_5miolo_tanh;
  PyTypeObject *__pyx_ptype_5miolo_acosh;
  PyTypeObject *__pyx_ptype_5miolo_asinh;
  PyTypeObject *__pyx_ptype_5miolo_atanh;
  PyTypeObject *__pyx_ptype_5miolo_exp;
  PyTypeObject *__pyx_ptype_5miolo_log;
  PyTypeObject *__pyx_ptype_5miolo_fabs;
  PyTypeObject *__pyx_ptype_5miolo_sqrt;
  PyTypeObject *__pyx_ptype_5miolo_recp;
  PyTypeObject *__pyx_ptype_5miolo_classSeparation;
  PyTypeObject *__pyx_ptype_5miolo_weightedSquareDistance;
  PyTypeObject *__pyx_ptype_5miolo_weightedDotProduct;
  PyTypeObject *__pyx_ptype_5miolo_pottsEnergy;
  PyTypeObject *__pyx_array_type;
  PyTypeObject *__pyx_MemviewEnum_type;
  PyTypeObject *__pyx_memoryview_type;
  PyTypeObject *__pyx_memoryviewslice_type;
  PyObject *__pyx_kp_u_;
  PyObject *__pyx_n_s_A;
  PyObject *__pyx_n_s_ASCII;
  PyObject *__pyx_kp_s_A_and_B_must_have_same_ctype;
  PyObject *__pyx_kp_s_A_and_B_must_have_same_number_of;
  PyObject *__pyx_kp_s_All_dimensions_preceding_dimensi;
  PyObject *__pyx_n_s_AssertionError;
  PyObject *__pyx_kp_s_Attempting_division_by_zero;
  PyObject *__pyx_kp_s_Avoiding_division_by_zero;
  PyObject *__pyx_n_s_B;
  PyObject *__pyx_kp_s_Buffer_view_does_not_expose_stri;
  PyObject *__pyx_kp_s_Can_only_create_a_buffer_that_is;
  PyObject *__pyx_kp_s_Cannot_assign_to_read_only_memor;
  PyObject *__pyx_kp_s_Cannot_create_writable_memory_vi;
  PyObject *__pyx_kp_s_Cannot_divide_by_zero;
  PyObject *__pyx_kp_u_Cannot_index_with_type;
  PyObject *__pyx_kp_s_Cannot_transpose_memoryview_with;
  PyObject *__pyx_kp_s_Col_range_is_out_of_bounds;
  PyObject *__pyx_n_s_Diagonal;
  PyObject *__pyx_n_s_Diagonal___reduce_cython;
  PyObject *__pyx_n_s_Diagonal___setstate_cython;
  PyObject *__pyx_kp_s_Diagonals_must_have_same_ctype;
  PyObject *__pyx_n_s_Digraph;
  PyObject *__pyx_n_s_Digraph___reduce_cython;
  PyObject *__pyx_n_s_Digraph___setstate_cython;
  PyObject *__pyx_kp_s_Digraph_and_Matrix_must_share_sa;
  PyObject *__pyx_n_s_Digraph_connect;
  PyObject *__pyx_n_s_Digraph_connectRegular;
  PyObject *__pyx_n_s_Digraph_copy;
  PyObject *__pyx_n_s_Digraph_gaussianScale;
  PyObject *__pyx_n_s_Digraph_normalize;
  PyObject *__pyx_n_s_Digraph_sameShape;
  PyObject *__pyx_n_s_Digraph_shape;
  PyObject *__pyx_n_s_Digraph_symmetrize;
  PyObject *__pyx_n_s_Digraph_toGraph;
  PyObject *__pyx_n_s_Digraph_transpose;
  PyObject *__pyx_kp_s_Digraphs_must_have_same_shapes;
  PyObject *__pyx_kp_s_Digraphs_must_share_same_ctype;
  PyObject *__pyx_kp_s_Dimension_d_is_not_direct;
  PyObject *__pyx_kp_s_Dimension_of_diagonals_must_be_e;
  PyObject *__pyx_kp_s_Dist_rows_must_be_equal_to_label;
  PyObject *__pyx_n_s_E;
  PyObject *__pyx_n_s_Ellipsis;
  PyObject *__pyx_kp_s_Empty_shape_tuple_for_cython_arr;
  PyObject *__pyx_kp_s_Entries_of_only_exceed_self_rows;
  PyObject *__pyx_n_s_Euclidean;
  PyObject *__pyx_n_s_Euclidean___reduce_cython;
  PyObject *__pyx_n_s_Euclidean___setstate_cython;
  PyObject *__pyx_n_s_Euclidean_centroidDistance;
  PyObject *__pyx_n_s_Euclidean_distance;
  PyObject *__pyx_n_s_Euclidean_dot;
  PyObject *__pyx_n_s_Euclidean_gaussianNormalize;
  PyObject *__pyx_n_s_Euclidean_kmpp;
  PyObject *__pyx_n_s_Euclidean_mean;
  PyObject *__pyx_n_s_Euclidean_minmaxNormalize;
  PyObject *__pyx_n_s_Euclidean_rowNormalize;
  PyObject *__pyx_n_s_Euclidean_variance;
  PyObject *__pyx_kp_s_Failed_to_allocate_memory;
  PyObject *__pyx_n_s_G;
  PyObject *__pyx_n_s_Graph;
  PyObject *__pyx_kp_s_Graph_Matrix_operations_require;
  PyObject *__pyx_n_s_Graph___reduce_cython;
  PyObject *__pyx_n_s_Graph___setstate_cython;
  PyObject *__pyx_kp_s_Graph_and_Matrix_must_have_same;
  PyObject *__pyx_n_s_Graph_degree;
  PyObject *__pyx_n_s_Graph_gaussianScale;
  PyObject *__pyx_n_s_Graph_isolatedNodes;
  PyObject *__pyx_n_s_Graph_laplacian;
  PyObject *__pyx_n_s_Graph_max;
  PyObject *__pyx_n_s_Graph_min;
  PyObject *__pyx_n_s_Graph_normalize;
  PyObject *__pyx_n_s_Graph_print;
  PyObject *__pyx_n_s_Graph_propagate;
  PyObject *__pyx_n_s_Graph_toDigraph;
  PyObject *__pyx_n_s_Graph_toMatrix;
  PyObject *__pyx_kp_s_Graphs_must_have_same_number_of;
  PyObject *__pyx_kp_s_Graphs_must_share_same_ctype;
  PyObject *__pyx_n_s_H;
  PyObject *__pyx_n_s_ImportError;
  PyObject *__pyx_kp_s_Incompatible_checksums_0x_x_vs_0;
  PyObject *__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_2;
  PyObject *__pyx_kp_s_Incompatible_shape_for_Graph_dat;
  PyObject *__pyx_kp_s_Incompatible_shape_for_Hadamard;
  PyObject *__pyx_kp_s_Incompatible_shape_for_Matrix_ad;
  PyObject *__pyx_kp_s_Incompatible_shape_for_Matrix_pr;
  PyObject *__pyx_kp_s_Incompatible_shape_for_Matrix_su;
  PyObject *__pyx_kp_s_Incompatible_shape_for_matrix_mu;
  PyObject *__pyx_kp_s_Incompatible_shape_for_miolo_Mat;
  PyObject *__pyx_kp_s_Incompatible_shape_for_product;
  PyObject *__pyx_kp_s_Incompatible_shapes_for_addition;
  PyObject *__pyx_kp_s_Incompatible_shapes_for_subtract;
  PyObject *__pyx_n_s_IndexError;
  PyObject *__pyx_kp_s_Index_is_out_of_bounds;
  PyObject *__pyx_kp_s_Index_k_is_out_of_bounds;
  PyObject *__pyx_kp_s_Index_out_of_bounds_axis_d;
  PyObject *__pyx_kp_s_Indirect_dimensions_not_supporte;
  PyObject *__pyx_kp_u_Invalid_mode_expected_c_or_fortr;
  PyObject *__pyx_kp_s_Invalid_new_shape;
  PyObject *__pyx_kp_s_Invalid_shape_for_at;
  PyObject *__pyx_kp_u_Invalid_shape_in_axis;
  PyObject *__pyx_n_s_Lorentz;
  PyObject *__pyx_n_s_Lorentz___reduce_cython;
  PyObject *__pyx_n_s_Lorentz___setstate_cython;
  PyObject *__pyx_n_s_Lorentz_centroidDistance;
  PyObject *__pyx_n_s_Lorentz_dot;
  PyObject *__pyx_n_s_Lorentz_exp;
  PyObject *__pyx_n_s_Lorentz_fromEuclidean;
  PyObject *__pyx_n_s_Lorentz_isIn;
  PyObject *__pyx_n_s_Lorentz_lorentzDistance;
  PyObject *__pyx_n_s_Lorentz_mean;
  PyObject *__pyx_n_s_Lorentz_metricDistance;
  PyObject *__pyx_n_s_Lorentz_tangentProjection;
  PyObject *__pyx_n_s_Lorentz_toEuclidean;
  PyObject *__pyx_n_s_M;
  PyObject *__pyx_n_s_MST;
  PyObject *__pyx_kp_s_M_and_Weights_must_have_same_cty;
  PyObject *__pyx_kp_s_M_and_Weights_must_have_same_num;
  PyObject *__pyx_kp_s_M_and_center_must_have_same_ctyp;
  PyObject *__pyx_kp_s_M_cols_must_be_equal_to_center_c;
  PyObject *__pyx_n_s_Manifold;
  PyObject *__pyx_n_s_Manifold___reduce_cython;
  PyObject *__pyx_n_s_Manifold___setstate_cython;
  PyObject *__pyx_kp_s_Matrices_must_have_same_ctype;
  PyObject *__pyx_kp_s_Matrices_must_have_same_shape;
  PyObject *__pyx_kp_s_Matrices_must_have_the_same_ctyp;
  PyObject *__pyx_kp_s_Matrices_must_share_same_ctype;
  PyObject *__pyx_n_s_Matrix;
  PyObject *__pyx_n_s_Matrix___reduce_cython;
  PyObject *__pyx_n_s_Matrix___setstate_cython;
  PyObject *__pyx_n_s_Matrix_argkmax;
  PyObject *__pyx_n_s_Matrix_argkmin;
  PyObject *__pyx_n_s_Matrix_argmax;
  PyObject *__pyx_n_s_Matrix_argmin;
  PyObject *__pyx_n_s_Matrix_copy;
  PyObject *__pyx_n_s_Matrix_cut;
  PyObject *__pyx_n_s_Matrix_flatten;
  PyObject *__pyx_n_s_Matrix_max;
  PyObject *__pyx_n_s_Matrix_min;
  PyObject *__pyx_kp_s_Matrix_must_be_square;
  PyObject *__pyx_n_s_Matrix_normalize;
  PyObject *__pyx_kp_s_Matrix_operations_require_same_c;
  PyObject *__pyx_n_s_Matrix_partition;
  PyObject *__pyx_n_s_Matrix_print;
  PyObject *__pyx_n_s_Matrix_reshape;
  PyObject *__pyx_n_s_Matrix_rowDistance;
  PyObject *__pyx_n_s_Matrix_sparsifyKNN;
  PyObject *__pyx_n_s_Matrix_sparsifyThreshold;
  PyObject *__pyx_n_s_Matrix_sumAll;
  PyObject *__pyx_n_s_Matrix_trace;
  PyObject *__pyx_n_s_Matrix_transpose;
  PyObject *__pyx_n_s_MemoryError;
  PyObject *__pyx_kp_s_MemoryView_of_r_at_0x_x;
  PyObject *__pyx_kp_s_MemoryView_of_r_object;
  PyObject *__pyx_n_s_N;
  PyObject *__pyx_n_s_Neighbors;
  PyObject *__pyx_kp_s_Neighbors_and_Weights_must_have;
  PyObject *__pyx_kp_s_Neighbors_must_have_int_ctype;
  PyObject *__pyx_kp_s_Number_of_Matrix_rows_must_be_eq;
  PyObject *__pyx_kp_s_Number_of_cols_must_be_greater_t;
  PyObject *__pyx_kp_s_Number_of_nodes_must_be_equal_to;
  PyObject *__pyx_kp_s_Number_of_rows_must_be_equal_to;
  PyObject *__pyx_n_b_O;
  PyObject *__pyx_n_s_O;
  PyObject *__pyx_kp_s_Objects_must_share_same_ctype;
  PyObject *__pyx_kp_s_Only_square_matrices_are_allowed;
  PyObject *__pyx_kp_s_Only_square_matrices_can_be_spar;
  PyObject *__pyx_kp_s_Only_square_weight_matrices_are;
  PyObject *__pyx_kp_u_Out_of_bounds_on_buffer_access_a;
  PyObject *__pyx_n_s_PickleError;
  PyObject *__pyx_n_s_Poincare;
  PyObject *__pyx_n_s_Poincare___reduce_cython;
  PyObject *__pyx_n_s_Poincare___setstate_cython;
  PyObject *__pyx_n_s_Poincare_add;
  PyObject *__pyx_n_s_Poincare_centroidDistance;
  PyObject *__pyx_n_s_Poincare_distance;
  PyObject *__pyx_n_s_Poincare_exp;
  PyObject *__pyx_n_s_Poincare_hyperbolicity;
  PyObject *__pyx_n_s_Poincare_isIn;
  PyObject *__pyx_n_s_Poincare_log;
  PyObject *__pyx_n_s_Poincare_mean;
  PyObject *__pyx_kp_s_Row_range_is_out_of_bounds;
  PyObject *__pyx_n_s_Sequence;
  PyObject *__pyx_kp_s_Size_of_labels_must_be_equal_to;
  PyObject *__pyx_kp_s_Size_of_labels_must_be_equal_to_2;
  PyObject *__pyx_n_s_Sphere;
  PyObject *__pyx_n_s_Sphere___reduce_cython;
  PyObject *__pyx_n_s_Sphere___setstate_cython;
  PyObject *__pyx_n_s_Sphere_centroidDistance;
  PyObject *__pyx_n_s_Sphere_coordinateReady;
  PyObject *__pyx_n_s_Sphere_distance;
  PyObject *__pyx_n_s_Sphere_exp;
  PyObject *__pyx_n_s_Sphere_fromEuclidean;
  PyObject *__pyx_n_s_Sphere_isIn;
  PyObject *__pyx_n_s_Sphere_isTangent;
  PyObject *__pyx_kp_s_Sphere_radius_must_be_greater_th;
  PyObject *__pyx_n_s_Sphere_stereographicProjection;
  PyObject *__pyx_n_s_Sphere_toEuclidean;
  PyObject *__pyx_kp_s_Step_may_not_be_zero_axis_d;
  PyObject *__pyx_n_s_Threshold;
  PyObject *__pyx_n_s_TypeError;
  PyObject *__pyx_kp_s_Unable_to_convert_item_to_object;
  PyObject *__pyx_kp_s_Unknown_ctype;
  PyObject *__pyx_n_s_ValueError;
  PyObject *__pyx_n_s_View_MemoryView;
  PyObject *__pyx_n_s_Weights;
  PyObject *__pyx_kp_s_Weights_and_self_must_have_same;
  PyObject *__pyx_kp_s_Weights_must_be_a_square_Matrix;
  PyObject *__pyx_kp_s_Weights_nodes_must_be_equal_to_M;
  PyObject *__pyx_n_s_X;
  PyObject *__pyx_kp_u__2;
  PyObject *__pyx_n_s__3;
  PyObject *__pyx_n_s__300;
  PyObject *__pyx_kp_u__6;
  PyObject *__pyx_kp_u__7;
  PyObject *__pyx_n_s_abc;
  PyObject *__pyx_n_s_acos;
  PyObject *__pyx_n_s_acos___reduce_cython;
  PyObject *__pyx_n_s_acos___setstate_cython;
  PyObject *__pyx_n_s_acosh;
  PyObject *__pyx_n_s_acosh___reduce_cython;
  PyObject *__pyx_n_s_acosh___setstate_cython;
  PyObject *__pyx_n_s_add;
  PyObject *__pyx_n_s_allocate_buffer;
  PyObject *__pyx_kp_u_and;
  PyObject *__pyx_n_s_argkmax;
  PyObject *__pyx_n_s_argkmin;
  PyObject *__pyx_n_s_argmax;
  PyObject *__pyx_n_s_argmin;
  PyObject *__pyx_n_s_ashape;
  PyObject *__pyx_n_s_asin;
  PyObject *__pyx_n_s_asin___reduce_cython;
  PyObject *__pyx_n_s_asin___setstate_cython;
  PyObject *__pyx_n_s_asinh;
  PyObject *__pyx_n_s_asinh___reduce_cython;
  PyObject *__pyx_n_s_asinh___setstate_cython;
  PyObject *__pyx_n_s_asyncio_coroutines;
  PyObject *__pyx_n_s_at;
  PyObject *__pyx_kp_s_at_and_M_must_have_same_ctype;
  PyObject *__pyx_kp_s_at_and_M_must_have_same_number_o;
  PyObject *__pyx_kp_s_at_and_M_must_have_same_number_o_2;
  PyObject *__pyx_kp_s_at_and_M_must_have_same_shape;
  PyObject *__pyx_kp_s_at_and_tangent_must_have_same_nu;
  PyObject *__pyx_kp_s_at_and_tanget_must_have_same_cty;
  PyObject *__pyx_n_s_atan;
  PyObject *__pyx_n_s_atan___reduce_cython;
  PyObject *__pyx_n_s_atan___setstate_cython;
  PyObject *__pyx_n_s_atanh;
  PyObject *__pyx_n_s_atanh___reduce_cython;
  PyObject *__pyx_n_s_atanh___setstate_cython;
  PyObject *__pyx_n_s_aux;
  PyObject *__pyx_n_s_azimuth;
  PyObject *__pyx_kp_s_azimuth_must_be_smaller_than_M_c;
  PyObject *__pyx_n_s_base;
  PyObject *__pyx_n_s_beta;
  PyObject *__pyx_n_s_c;
  PyObject *__pyx_n_u_c;
  PyObject *__pyx_n_s_center;
  PyObject *__pyx_n_s_centroidDistance;
  PyObject *__pyx_n_s_clamped;
  PyObject *__pyx_kp_s_clamped_must_have_length_equal_t;
  PyObject *__pyx_n_s_class;
  PyObject *__pyx_n_s_classSeparation;
  PyObject *__pyx_n_s_classSeparation___reduce_cython;
  PyObject *__pyx_n_s_classSeparation___setstate_cytho;
  PyObject *__pyx_n_s_classSeparation_extra;
  PyObject *__pyx_n_s_classSeparation_intra;
  PyObject *__pyx_n_s_class_getitem;
  PyObject *__pyx_n_s_cline_in_traceback;
  PyObject *__pyx_n_s_colMax;
  PyObject *__pyx_n_s_colMin;
  PyObject *__pyx_n_s_collections;
  PyObject *__pyx_kp_s_collections_abc;
  PyObject *__pyx_n_s_cols;
  PyObject *__pyx_n_s_concat;
  PyObject *__pyx_n_s_connect;
  PyObject *__pyx_n_s_connectRegular;
  PyObject *__pyx_kp_s_contiguous_and_direct;
  PyObject *__pyx_kp_s_contiguous_and_indirect;
  PyObject *__pyx_n_s_coordinateReady;
  PyObject *__pyx_n_s_copy;
  PyObject *__pyx_n_s_cos;
  PyObject *__pyx_n_s_cos___reduce_cython;
  PyObject *__pyx_n_s_cos___setstate_cython;
  PyObject *__pyx_n_s_cosh;
  PyObject *__pyx_n_s_cosh___reduce_cython;
  PyObject *__pyx_n_s_cosh___setstate_cython;
  PyObject *__pyx_n_s_count;
  PyObject *__pyx_n_s_ctype;
  PyObject *__pyx_n_s_ctypes;
  PyObject *__pyx_n_s_curvature;
  PyObject *__pyx_n_s_cut;
  PyObject *__pyx_n_s_degree;
  PyObject *__pyx_n_s_dict;
  PyObject *__pyx_n_s_dict_2;
  PyObject *__pyx_n_s_dim;
  PyObject *__pyx_kp_u_disable;
  PyObject *__pyx_n_s_distance;
  PyObject *__pyx_n_s_dot;
  PyObject *__pyx_n_s_double;
  PyObject *__pyx_n_s_dtype;
  PyObject *__pyx_n_s_dtype_is_object;
  PyObject *__pyx_n_s_edges;
  PyObject *__pyx_n_s_empty;
  PyObject *__pyx_kp_u_enable;
  PyObject *__pyx_n_s_encode;
  PyObject *__pyx_n_s_end;
  PyObject *__pyx_n_s_enumerate;
  PyObject *__pyx_n_s_error;
  PyObject *__pyx_n_s_exp;
  PyObject *__pyx_n_s_exp___reduce_cython;
  PyObject *__pyx_n_s_exp___setstate_cython;
  PyObject *__pyx_n_s_extra;
  PyObject *__pyx_n_s_fabs;
  PyObject *__pyx_n_s_fabs___reduce_cython;
  PyObject *__pyx_n_s_fabs___setstate_cython;
  PyObject *__pyx_n_s_filename;
  PyObject *__pyx_n_s_flags;
  PyObject *__pyx_n_s_flatten;
  PyObject *__pyx_n_s_float;
  PyObject *__pyx_n_s_format;
  PyObject *__pyx_n_s_fortran;
  PyObject *__pyx_n_u_fortran;
  PyObject *__pyx_n_s_fromEuclidean;
  PyObject *__pyx_n_s_g;
  PyObject *__pyx_n_s_gaussianNormalize;
  PyObject *__pyx_n_s_gaussianScale;
  PyObject *__pyx_kp_u_gc;
  PyObject *__pyx_n_s_getstate;
  PyObject *__pyx_n_s_global_ctype;
  PyObject *__pyx_kp_u_got;
  PyObject *__pyx_kp_u_got_differing_extents_in_dimensi;
  PyObject *__pyx_n_s_gshape;
  PyObject *__pyx_n_s_hadamard;
  PyObject *__pyx_n_s_hyperbolicity;
  PyObject *__pyx_n_s_i;
  PyObject *__pyx_kp_s_i_is_not_a_valid_index_for_Digra;
  PyObject *__pyx_n_s_id;
  PyObject *__pyx_n_s_import;
  PyObject *__pyx_n_s_index;
  PyObject *__pyx_n_s_init;
  PyObject *__pyx_n_s_init_2;
  PyObject *__pyx_n_s_initializing;
  PyObject *__pyx_n_s_int;
  PyObject *__pyx_n_s_intra;
  PyObject *__pyx_n_s_isDiagonal;
  PyObject *__pyx_n_s_isDigraph;
  PyObject *__pyx_n_s_isGraph;
  PyObject *__pyx_n_s_isIn;
  PyObject *__pyx_n_s_isMatrix;
  PyObject *__pyx_n_s_isTangent;
  PyObject *__pyx_n_s_is_coroutine;
  PyObject *__pyx_kp_u_isenabled;
  PyObject *__pyx_n_s_isolatedNodes;
  PyObject *__pyx_n_s_itemsize;
  PyObject *__pyx_kp_s_itemsize_0_for_cython_array;
  PyObject *__pyx_n_s_j;
  PyObject *__pyx_kp_s_j_is_not_a_valid_index_for_Digra;
  PyObject *__pyx_n_s_k;
  PyObject *__pyx_n_s_kmpp;
  PyObject *__pyx_n_s_labels;
  PyObject *__pyx_kp_s_labels_must_have_size_equal_to_s;
  PyObject *__pyx_n_s_laplacian;
  PyObject *__pyx_n_s_loadtxt;
  PyObject *__pyx_n_s_log;
  PyObject *__pyx_n_s_log___reduce_cython;
  PyObject *__pyx_n_s_log___setstate_cython;
  PyObject *__pyx_n_s_lorentzDistance;
  PyObject *__pyx_n_s_m;
  PyObject *__pyx_n_s_main;
  PyObject *__pyx_n_s_max;
  PyObject *__pyx_n_s_max_0;
  PyObject *__pyx_n_s_max_1;
  PyObject *__pyx_n_s_mean;
  PyObject *__pyx_n_s_memview;
  PyObject *__pyx_n_s_metricDistance;
  PyObject *__pyx_n_s_min;
  PyObject *__pyx_n_s_minmaxNormalize;
  PyObject *__pyx_n_s_miolo;
  PyObject *__pyx_n_s_mioloObject;
  PyObject *__pyx_n_s_mioloObject___reduce_cython;
  PyObject *__pyx_n_s_mioloObject___setstate_cython;
  PyObject *__pyx_n_s_mioloObject_isDiagonal;
  PyObject *__pyx_n_s_mioloObject_isDigraph;
  PyObject *__pyx_n_s_mioloObject_isGraph;
  PyObject *__pyx_n_s_mioloObject_isMatrix;
  PyObject *__pyx_kp_s_miololib_pyx;
  PyObject *__pyx_n_s_mode;
  PyObject *__pyx_n_s_n;
  PyObject *__pyx_n_s_name;
  PyObject *__pyx_n_s_name_2;
  PyObject *__pyx_n_s_ndim;
  PyObject *__pyx_n_s_new;
  PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
  PyObject *__pyx_n_s_nodes;
  PyObject *__pyx_n_s_normalize;
  PyObject *__pyx_n_s_np;
  PyObject *__pyx_n_s_null;
  PyObject *__pyx_n_s_numpy;
  PyObject *__pyx_kp_s_numpy__core_multiarray_failed_to;
  PyObject *__pyx_kp_s_numpy__core_umath_failed_to_impo;
  PyObject *__pyx_n_s_obj;
  PyObject *__pyx_n_s_only;
  PyObject *__pyx_n_s_out;
  PyObject *__pyx_n_s_output;
  PyObject *__pyx_n_s_pack;
  PyObject *__pyx_n_s_partition;
  PyObject *__pyx_n_s_pickle;
  PyObject *__pyx_n_s_pottsEnergy;
  PyObject *__pyx_n_s_pottsEnergy___reduce_cython;
  PyObject *__pyx_n_s_pottsEnergy___setstate_cython;
  PyObject *__pyx_n_s_print;
  PyObject *__pyx_n_s_propagate;
  PyObject *__pyx_n_s_pyx_PickleError;
  PyObject *__pyx_n_s_pyx_checksum;
  PyObject *__pyx_n_s_pyx_result;
  PyObject *__pyx_n_s_pyx_state;
  PyObject *__pyx_n_s_pyx_type;
  PyObject *__pyx_n_s_pyx_unpickle_Enum;
  PyObject *__pyx_n_s_pyx_unpickle_Manifold;
  PyObject *__pyx_n_s_pyx_vtable;
  PyObject *__pyx_n_s_radius;
  PyObject *__pyx_n_s_range;
  PyObject *__pyx_n_s_recp;
  PyObject *__pyx_n_s_recp___reduce_cython;
  PyObject *__pyx_n_s_recp___setstate_cython;
  PyObject *__pyx_n_s_reduce;
  PyObject *__pyx_n_s_reduce_cython;
  PyObject *__pyx_n_s_reduce_ex;
  PyObject *__pyx_n_s_register;
  PyObject *__pyx_n_s_reshape;
  PyObject *__pyx_n_s_rowDistance;
  PyObject *__pyx_n_s_rowMax;
  PyObject *__pyx_n_s_rowMin;
  PyObject *__pyx_n_s_rowNormalize;
  PyObject *__pyx_n_s_rows;
  PyObject *__pyx_n_s_sameShape;
  PyObject *__pyx_n_s_self;
  PyObject *__pyx_kp_s_self_diagonalDouble_self_diagona;
  PyObject *__pyx_kp_s_self_view_cannot_be_converted_to;
  PyObject *__pyx_n_s_setstate;
  PyObject *__pyx_n_s_setstate_cython;
  PyObject *__pyx_n_s_shape;
  PyObject *__pyx_n_s_sin;
  PyObject *__pyx_n_s_sin___reduce_cython;
  PyObject *__pyx_n_s_sin___setstate_cython;
  PyObject *__pyx_n_s_single;
  PyObject *__pyx_n_s_sinh;
  PyObject *__pyx_n_s_sinh___reduce_cython;
  PyObject *__pyx_n_s_sinh___setstate_cython;
  PyObject *__pyx_n_s_size;
  PyObject *__pyx_n_s_sparsifyKNN;
  PyObject *__pyx_n_s_sparsifyThreshold;
  PyObject *__pyx_n_s_spec;
  PyObject *__pyx_n_s_sqrt;
  PyObject *__pyx_n_s_sqrt___reduce_cython;
  PyObject *__pyx_n_s_sqrt___setstate_cython;
  PyObject *__pyx_n_s_start;
  PyObject *__pyx_n_s_state;
  PyObject *__pyx_n_s_step;
  PyObject *__pyx_n_s_stereographicProjection;
  PyObject *__pyx_n_s_stop;
  PyObject *__pyx_n_s_str_memory;
  PyObject *__pyx_kp_s_strided_and_direct;
  PyObject *__pyx_kp_s_strided_and_direct_or_indirect;
  PyObject *__pyx_kp_s_strided_and_indirect;
  PyObject *__pyx_kp_s_stringsource;
  PyObject *__pyx_n_s_struct;
  PyObject *__pyx_n_s_structure;
  PyObject *__pyx_n_s_sumAll;
  PyObject *__pyx_n_s_super;
  PyObject *__pyx_n_s_symmetrize;
  PyObject *__pyx_n_s_sys;
  PyObject *__pyx_n_s_tan;
  PyObject *__pyx_n_s_tan___reduce_cython;
  PyObject *__pyx_n_s_tan___setstate_cython;
  PyObject *__pyx_n_s_tangent;
  PyObject *__pyx_n_s_tangentProjection;
  PyObject *__pyx_n_s_tanh;
  PyObject *__pyx_n_s_tanh___reduce_cython;
  PyObject *__pyx_n_s_tanh___setstate_cython;
  PyObject *__pyx_n_s_targetLabel;
  PyObject *__pyx_n_s_test;
  PyObject *__pyx_n_s_toDigraph;
  PyObject *__pyx_n_s_toEuclidean;
  PyObject *__pyx_n_s_toGraph;
  PyObject *__pyx_n_s_toMatrix;
  PyObject *__pyx_n_s_tolerance;
  PyObject *__pyx_n_s_trace;
  PyObject *__pyx_n_s_transpose;
  PyObject *__pyx_n_s_txtGraph;
  PyObject *__pyx_n_s_txtMatrix;
  PyObject *__pyx_n_s_ufunction;
  PyObject *__pyx_n_s_ufunction___reduce_cython;
  PyObject *__pyx_n_s_ufunction___setstate_cython;
  PyObject *__pyx_n_s_ulong;
  PyObject *__pyx_kp_s_unable_to_allocate_array_data;
  PyObject *__pyx_kp_s_unable_to_allocate_shape_and_str;
  PyObject *__pyx_n_s_unpack;
  PyObject *__pyx_n_s_update;
  PyObject *__pyx_n_s_use_setstate;
  PyObject *__pyx_n_s_value;
  PyObject *__pyx_n_s_variance;
  PyObject *__pyx_n_s_version_info;
  PyObject *__pyx_n_s_view;
  PyObject *__pyx_n_s_weightedDotProduct;
  PyObject *__pyx_n_s_weightedDotProduct___reduce_cyth;
  PyObject *__pyx_n_s_weightedDotProduct___setstate_cy;
  PyObject *__pyx_n_s_weightedSquareDistance;
  PyObject *__pyx_n_s_weightedSquareDistance___reduce;
  PyObject *__pyx_n_s_weightedSquareDistance___setstat;
  PyObject *__pyx_n_s_weights;
  PyObject *__pyx_n_s_whole;
  PyObject *__pyx_float_1_;
  PyObject *__pyx_float_0_001;
  PyObject *__pyx_int_0;
  PyObject *__pyx_int_1;
  PyObject *__pyx_int_2;
  PyObject *__pyx_int_3;
  PyObject *__pyx_int_112105877;
  PyObject *__pyx_int_136983863;
  PyObject *__pyx_int_184977713;
  PyObject *__pyx_int_222419149;
  PyObject *__pyx_int_228825662;
  PyObject *__pyx_int_238750788;
  PyObject *__pyx_int_neg_1;
  PyObject *__pyx_k__11;
  __Pyx_memviewslice __pyx_k__15;
  PyObject *__pyx_k__33;
  __Pyx_memviewslice __pyx_k__36;
  PyObject *__pyx_k__45;
  PyObject *__pyx_k__57;
  PyObject *__pyx_slice__5;
  PyObject *__pyx_tuple__4;
  PyObject *__pyx_tuple__8;
  PyObject *__pyx_tuple__9;
  PyObject *__pyx_slice__66;
  PyObject *__pyx_tuple__10;
  PyObject *__pyx_tuple__12;
  PyObject *__pyx_tuple__13;
  PyObject *__pyx_tuple__14;
  PyObject *__pyx_tuple__16;
  PyObject *__pyx_tuple__17;
  PyObject *__pyx_tuple__18;
  PyObject *__pyx_tuple__19;
  PyObject *__pyx_tuple__20;
  PyObject *__pyx_tuple__21;
  PyObject *__pyx_tuple__22;
  PyObject *__pyx_tuple__23;
  PyObject *__pyx_tuple__24;
  PyObject *__pyx_tuple__25;
  PyObject *__pyx_tuple__26;
  PyObject *__pyx_tuple__27;
  PyObject *__pyx_tuple__28;
  PyObject *__pyx_tuple__29;
  PyObject *__pyx_tuple__30;
  PyObject *__pyx_tuple__31;
  PyObject *__pyx_tuple__32;
  PyObject *__pyx_tuple__34;
  PyObject *__pyx_tuple__35;
  PyObject *__pyx_tuple__37;
  PyObject *__pyx_tuple__38;
  PyObject *__pyx_tuple__39;
  PyObject *__pyx_tuple__40;
  PyObject *__pyx_tuple__41;
  PyObject *__pyx_tuple__42;
  PyObject *__pyx_tuple__43;
  PyObject *__pyx_tuple__44;
  PyObject *__pyx_tuple__46;
  PyObject *__pyx_tuple__47;
  PyObject *__pyx_tuple__48;
  PyObject *__pyx_tuple__49;
  PyObject *__pyx_tuple__50;
  PyObject *__pyx_tuple__51;
  PyObject *__pyx_tuple__52;
  PyObject *__pyx_tuple__53;
  PyObject *__pyx_tuple__54;
  PyObject *__pyx_tuple__55;
  PyObject *__pyx_tuple__56;
  PyObject *__pyx_tuple__58;
  PyObject *__pyx_tuple__59;
  PyObject *__pyx_tuple__60;
  PyObject *__pyx_tuple__61;
  PyObject *__pyx_tuple__62;
  PyObject *__pyx_tuple__63;
  PyObject *__pyx_tuple__64;
  PyObject *__pyx_tuple__65;
  PyObject *__pyx_tuple__67;
  PyObject *__pyx_tuple__68;
  PyObject *__pyx_tuple__69;
  PyObject *__pyx_tuple__70;
  PyObject *__pyx_tuple__71;
  PyObject *__pyx_tuple__72;
  PyObject *__pyx_tuple__73;
  PyObject *__pyx_tuple__74;
  PyObject *__pyx_tuple__75;
  PyObject *__pyx_tuple__76;
  PyObject *__pyx_tuple__77;
  PyObject *__pyx_tuple__78;
  PyObject *__pyx_tuple__79;
  PyObject *__pyx_tuple__80;
  PyObject *__pyx_tuple__81;
  PyObject *__pyx_tuple__82;
  PyObject *__pyx_tuple__83;
  PyObject *__pyx_tuple__84;
  PyObject *__pyx_tuple__85;
  PyObject *__pyx_tuple__86;
  PyObject *__pyx_tuple__87;
  PyObject *__pyx_tuple__88;
  PyObject *__pyx_tuple__89;
  PyObject *__pyx_tuple__90;
  PyObject *__pyx_tuple__91;
  PyObject *__pyx_tuple__92;
  PyObject *__pyx_tuple__93;
  PyObject *__pyx_tuple__94;
  PyObject *__pyx_tuple__95;
  PyObject *__pyx_tuple__96;
  PyObject *__pyx_tuple__97;
  PyObject *__pyx_tuple__98;
  PyObject *__pyx_tuple__100;
  PyObject *__pyx_tuple__106;
  PyObject *__pyx_tuple__108;
  PyObject *__pyx_tuple__111;
  PyObject *__pyx_tuple__115;
  PyObject *__pyx_tuple__117;
  PyObject *__pyx_tuple__120;
  PyObject *__pyx_tuple__122;
  PyObject *__pyx_tuple__124;
  PyObject *__pyx_tuple__125;
  PyObject *__pyx_tuple__127;
  PyObject *__pyx_tuple__129;
  PyObject *__pyx_tuple__130;
  PyObject *__pyx_tuple__132;
  PyObject *__pyx_tuple__137;
  PyObject *__pyx_tuple__142;
  PyObject *__pyx_tuple__144;
  PyObject *__pyx_tuple__148;
  PyObject *__pyx_tuple__161;
  PyObject *__pyx_tuple__163;
  PyObject *__pyx_tuple__165;
  PyObject *__pyx_tuple__167;
  PyObject *__pyx_tuple__168;
  PyObject *__pyx_tuple__171;
  PyObject *__pyx_tuple__173;
  PyObject *__pyx_tuple__174;
  PyObject *__pyx_tuple__177;
  PyObject *__pyx_tuple__181;
  PyObject *__pyx_tuple__187;
  PyObject *__pyx_tuple__189;
  PyObject *__pyx_tuple__191;
  PyObject *__pyx_tuple__194;
  PyObject *__pyx_tuple__202;
  PyObject *__pyx_tuple__204;
  PyObject *__pyx_tuple__208;
  PyObject *__pyx_tuple__212;
  PyObject *__pyx_tuple__215;
  PyObject *__pyx_tuple__217;
  PyObject *__pyx_tuple__218;
  PyObject *__pyx_tuple__220;
  PyObject *__pyx_tuple__226;
  PyObject *__pyx_tuple__228;
  PyObject *__pyx_tuple__230;
  PyObject *__pyx_tuple__232;
  PyObject *__pyx_tuple__288;
  PyObject *__pyx_codeobj__99;
  PyObject *__pyx_codeobj__101;
  PyObject *__pyx_codeobj__102;
  PyObject *__pyx_codeobj__103;
  PyObject *__pyx_codeobj__104;
  PyObject *__pyx_codeobj__105;
  PyObject *__pyx_codeobj__107;
  PyObject *__pyx_codeobj__109;
  PyObject *__pyx_codeobj__110;
  PyObject *__pyx_codeobj__112;
  PyObject *__pyx_codeobj__113;
  PyObject *__pyx_codeobj__114;
  PyObject *__pyx_codeobj__116;
  PyObject *__pyx_codeobj__118;
  PyObject *__pyx_codeobj__119;
  PyObject *__pyx_codeobj__121;
  PyObject *__pyx_codeobj__123;
  PyObject *__pyx_codeobj__126;
  PyObject *__pyx_codeobj__128;
  PyObject *__pyx_codeobj__131;
  PyObject *__pyx_codeobj__133;
  PyObject *__pyx_codeobj__134;
  PyObject *__pyx_codeobj__135;
  PyObject *__pyx_codeobj__136;
  PyObject *__pyx_codeobj__138;
  PyObject *__pyx_codeobj__139;
  PyObject *__pyx_codeobj__140;
  PyObject *__pyx_codeobj__141;
  PyObject *__pyx_codeobj__143;
  PyObject *__pyx_codeobj__145;
  PyObject *__pyx_codeobj__146;
  PyObject *__pyx_codeobj__147;
  PyObject *__pyx_codeobj__149;
  PyObject *__pyx_codeobj__150;
  PyObject *__pyx_codeobj__151;
  PyObject *__pyx_codeobj__152;
  PyObject *__pyx_codeobj__153;
  PyObject *__pyx_codeobj__154;
  PyObject *__pyx_codeobj__155;
  PyObject *__pyx_codeobj__156;
  PyObject *__pyx_codeobj__157;
  PyObject *__pyx_codeobj__158;
  PyObject *__pyx_codeobj__159;
  PyObject *__pyx_codeobj__160;
  PyObject *__pyx_codeobj__162;
  PyObject *__pyx_codeobj__164;
  PyObject *__pyx_codeobj__166;
  PyObject *__pyx_codeobj__169;
  PyObject *__pyx_codeobj__170;
  PyObject *__pyx_codeobj__172;
  PyObject *__pyx_codeobj__175;
  PyObject *__pyx_codeobj__176;
  PyObject *__pyx_codeobj__178;
  PyObject *__pyx_codeobj__179;
  PyObject *__pyx_codeobj__180;
  PyObject *__pyx_codeobj__182;
  PyObject *__pyx_codeobj__183;
  PyObject *__pyx_codeobj__184;
  PyObject *__pyx_codeobj__185;
  PyObject *__pyx_codeobj__186;
  PyObject *__pyx_codeobj__188;
  PyObject *__pyx_codeobj__190;
  PyObject *__pyx_codeobj__192;
  PyObject *__pyx_codeobj__193;
  PyObject *__pyx_codeobj__195;
  PyObject *__pyx_codeobj__196;
  PyObject *__pyx_codeobj__197;
  PyObject *__pyx_codeobj__198;
  PyObject *__pyx_codeobj__199;
  PyObject *__pyx_codeobj__200;
  PyObject *__pyx_codeobj__201;
  PyObject *__pyx_codeobj__203;
  PyObject *__pyx_codeobj__205;
  PyObject *__pyx_codeobj__206;
  PyObject *__pyx_codeobj__207;
  PyObject *__pyx_codeobj__209;
  PyObject *__pyx_codeobj__210;
  PyObject *__pyx_codeobj__211;
  PyObject *__pyx_codeobj__213;
  PyObject *__pyx_codeobj__214;
  PyObject *__pyx_codeobj__216;
  PyObject *__pyx_codeobj__219;
  PyObject *__pyx_codeobj__221;
  PyObject *__pyx_codeobj__222;
  PyObject *__pyx_codeobj__223;
  PyObject *__pyx_codeobj__224;
  PyObject *__pyx_codeobj__225;
  PyObject *__pyx_codeobj__227;
  PyObject *__pyx_codeobj__229;
  PyObject *__pyx_codeobj__231;
  PyObject *__pyx_codeobj__233;
  PyObject *__pyx_codeobj__234;
  PyObject *__pyx_codeobj__235;
  PyObject *__pyx_codeobj__236;
  PyObject *__pyx_codeobj__237;
  PyObject *__pyx_codeobj__238;
  PyObject *__pyx_codeobj__239;
  PyObject *__pyx_codeobj__240;
  PyObject *__pyx_codeobj__241;
  PyObject *__pyx_codeobj__242;
  PyObject *__pyx_codeobj__243;
  PyObject *__pyx_codeobj__244;
  PyObject *__pyx_codeobj__245;
  PyObject *__pyx_codeobj__246;
  PyObject *__pyx_codeobj__247;
  PyObject *__pyx_codeobj__248;
  PyObject *__pyx_codeobj__249;
  PyObject *__pyx_codeobj__250;
  PyObject *__pyx_codeobj__251;
  PyObject *__pyx_codeobj__252;
  PyObject *__pyx_codeobj__253;
  PyObject *__pyx_codeobj__254;
  PyObject *__pyx_codeobj__255;
  PyObject *__pyx_codeobj__256;
  PyObject *__pyx_codeobj__257;
  PyObject *__pyx_codeobj__258;
  PyObject *__pyx_codeobj__259;
  PyObject *__pyx_codeobj__260;
  PyObject *__pyx_codeobj__261;
  PyObject *__pyx_codeobj__262;
  PyObject *__pyx_codeobj__263;
  PyObject *__pyx_codeobj__264;
  PyObject *__pyx_codeobj__265;
  PyObject *__pyx_codeobj__266;
  PyObject *__pyx_codeobj__267;
  PyObject *__pyx_codeobj__268;
  PyObject *__pyx_codeobj__269;
  PyObject *__pyx_codeobj__270;
  PyObject *__pyx_codeobj__271;
  PyObject *__pyx_codeobj__272;
  PyObject *__pyx_codeobj__273;
  PyObject *__pyx_codeobj__274;
  PyObject *__pyx_codeobj__275;
  PyObject *__pyx_codeobj__276;
  PyObject *__pyx_codeobj__277;
  PyObject *__pyx_codeobj__278;
  PyObject *__pyx_codeobj__279;
  PyObject *__pyx_codeobj__280;
  PyObject *__pyx_codeobj__281;
  PyObject *__pyx_codeobj__282;
  PyObject *__pyx_codeobj__283;
  PyObject *__pyx_codeobj__284;
  PyObject *__pyx_codeobj__285;
  PyObject *__pyx_codeobj__286;
  PyObject *__pyx_codeobj__287;
  PyObject *__pyx_codeobj__289;
  PyObject *__pyx_codeobj__290;
  PyObject *__pyx_codeobj__291;
  PyObject *__pyx_codeobj__292;
  PyObject *__pyx_codeobj__293;
  PyObject *__pyx_codeobj__294;
  PyObject *__pyx_codeobj__295;
  PyObject *__pyx_codeobj__296;
  PyObject *__pyx_codeobj__297;
  PyObject *__pyx_codeobj__298;
  PyObject *__pyx_codeobj__299;
} __pyx_mstate;

#if CYTHON_USE_MODULE_STATE
#ifdef __cplusplus
namespace {
  extern struct PyModuleDef __pyx_moduledef;
} /* anonymous namespace */
#else
static struct PyModuleDef __pyx_moduledef;
#endif

#define __pyx_mstate(o) ((__pyx_mstate *)__Pyx_PyModule_GetState(o))

#define __pyx_mstate_global (__pyx_mstate(PyState_FindModule(&__pyx_moduledef)))

#define __pyx_m (PyState_FindModule(&__pyx_moduledef))
#else
static __pyx_mstate __pyx_mstate_global_static =
#ifdef __cplusplus
    {};
#else
    {0};
#endif
static __pyx_mstate *__pyx_mstate_global = &__pyx_mstate_global_static;
#endif
/* #### Code section: module_state_clear ### */
#if CYTHON_USE_MODULE_STATE
static int __pyx_m_clear(PyObject *m) {
  __pyx_mstate *clear_module_state = __pyx_mstate(m);
  if (!clear_module_state) return 0;
  Py_CLEAR(clear_module_state->__pyx_d);
  Py_CLEAR(clear_module_state->__pyx_b);
  Py_CLEAR(clear_module_state->__pyx_cython_runtime);
  Py_CLEAR(clear_module_state->__pyx_empty_tuple);
  Py_CLEAR(clear_module_state->__pyx_empty_bytes);
  Py_CLEAR(clear_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_CLEAR(clear_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_CLEAR(clear_module_state->__pyx_FusedFunctionType);
  #endif
  Py_CLEAR(clear_module_state->__pyx_ptype_7cpython_4type_type);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_dtype);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_flatiter);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_broadcast);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_ndarray);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_generic);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_number);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_integer);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_signedinteger);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_unsignedinteger);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_inexact);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_floating);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_complexfloating);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_flexible);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_character);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_ufunc);
  Py_CLEAR(clear_module_state->__pyx_ptype_5miolo_mioloObject);
  Py_CLEAR(clear_module_state->__pyx_type_5miolo_mioloObject);
  Py_CLEAR(clear_module_state->__pyx_ptype_5miolo_Matrix);
  Py_CLEAR(clear_module_state->__pyx_type_5miolo_Matrix);
  Py_CLEAR(clear_module_state->__pyx_ptype_5miolo_Graph);
  Py_CLEAR(clear_module_state->__pyx_type_5miolo_Graph);
  Py_CLEAR(clear_module_state->__pyx_ptype_5miolo_Digraph);
  Py_CLEAR(clear_module_state->__pyx_type_5miolo_Digraph);
  Py_CLEAR(clear_module_state->__pyx_ptype_5miolo_Diagonal);
  Py_CLEAR(clear_module_state->__pyx_type_5miolo_Diagonal);
  Py_CLEAR(clear_module_state->__pyx_ptype_5miolo_Manifold);
  Py_CLEAR(clear_module_state->__pyx_type_5miolo_Manifold);
  Py_CLEAR(clear_module_state->__pyx_ptype_5miolo_Euclidean);
  Py_CLEAR(clear_module_state->__pyx_type_5miolo_Euclidean);
  Py_CLEAR(clear_module_state->__pyx_ptype_5miolo_Sphere);
  Py_CLEAR(clear_module_state->__pyx_type_5miolo_Sphere);
  Py_CLEAR(clear_module_state->__pyx_ptype_5miolo_Poincare);
  Py_CLEAR(clear_module_state->__pyx_type_5miolo_Poincare);
  Py_CLEAR(clear_module_state->__pyx_ptype_5miolo_Lorentz);
  Py_CLEAR(clear_module_state->__pyx_type_5miolo_Lorentz);
  Py_CLEAR(clear_module_state->__pyx_ptype_5miolo_ufunction);
  Py_CLEAR(clear_module_state->__pyx_type_5miolo_ufunction);
  Py_CLEAR(clear_module_state->__pyx_ptype_5miolo_sin);
  Py_CLEAR(clear_module_state->__pyx_type_5miolo_sin);
  Py_CLEAR(clear_module_state->__pyx_ptype_5miolo_cos);
  Py_CLEAR(clear_module_state->__pyx_type_5miolo_cos);
  Py_CLEAR(clear_module_state->__pyx_ptype_5miolo_tan);
  Py_CLEAR(clear_module_state->__pyx_type_5miolo_tan);
  Py_CLEAR(clear_module_state->__pyx_ptype_5miolo_asin);
  Py_CLEAR(clear_module_state->__pyx_type_5miolo_asin);
  Py_CLEAR(clear_module_state->__pyx_ptype_5miolo_acos);
  Py_CLEAR(clear_module_state->__pyx_type_5miolo_acos);
  Py_CLEAR(clear_module_state->__pyx_ptype_5miolo_atan);
  Py_CLEAR(clear_module_state->__pyx_type_5miolo_atan);
  Py_CLEAR(clear_module_state->__pyx_ptype_5miolo_cosh);
  Py_CLEAR(clear_module_state->__pyx_type_5miolo_cosh);
  Py_CLEAR(clear_module_state->__pyx_ptype_5miolo_sinh);
  Py_CLEAR(clear_module_state->__pyx_type_5miolo_sinh);
  Py_CLEAR(clear_module_state->__pyx_ptype_5miolo_tanh);
  Py_CLEAR(clear_module_state->__pyx_type_5miolo_tanh);
  Py_CLEAR(clear_module_state->__pyx_ptype_5miolo_acosh);
  Py_CLEAR(clear_module_state->__pyx_type_5miolo_acosh);
  Py_CLEAR(clear_module_state->__pyx_ptype_5miolo_asinh);
  Py_CLEAR(clear_module_state->__pyx_type_5miolo_asinh);
  Py_CLEAR(clear_module_state->__pyx_ptype_5miolo_atanh);
  Py_CLEAR(clear_module_state->__pyx_type_5miolo_atanh);
  Py_CLEAR(clear_module_state->__pyx_ptype_5miolo_exp);
  Py_CLEAR(clear_module_state->__pyx_type_5miolo_exp);
  Py_CLEAR(clear_module_state->__pyx_ptype_5miolo_log);
  Py_CLEAR(clear_module_state->__pyx_type_5miolo_log);
  Py_CLEAR(clear_module_state->__pyx_ptype_5miolo_fabs);
  Py_CLEAR(clear_module_state->__pyx_type_5miolo_fabs);
  Py_CLEAR(clear_module_state->__pyx_ptype_5miolo_sqrt);
  Py_CLEAR(clear_module_state->__pyx_type_5miolo_sqrt);
  Py_CLEAR(clear_module_state->__pyx_ptype_5miolo_recp);
  Py_CLEAR(clear_module_state->__pyx_type_5miolo_recp);
  Py_CLEAR(clear_module_state->__pyx_ptype_5miolo_classSeparation);
  Py_CLEAR(clear_module_state->__pyx_type_5miolo_classSeparation);
  Py_CLEAR(clear_module_state->__pyx_ptype_5miolo_weightedSquareDistance);
  Py_CLEAR(clear_module_state->__pyx_type_5miolo_weightedSquareDistance);
  Py_CLEAR(clear_module_state->__pyx_ptype_5miolo_weightedDotProduct);
  Py_CLEAR(clear_module_state->__pyx_type_5miolo_weightedDotProduct);
  Py_CLEAR(clear_module_state->__pyx_ptype_5miolo_pottsEnergy);
  Py_CLEAR(clear_module_state->__pyx_type_5miolo_pottsEnergy);
  Py_CLEAR(clear_module_state->__pyx_array_type);
  Py_CLEAR(clear_module_state->__pyx_type___pyx_array);
  Py_CLEAR(clear_module_state->__pyx_MemviewEnum_type);
  Py_CLEAR(clear_module_state->__pyx_type___pyx_MemviewEnum);
  Py_CLEAR(clear_module_state->__pyx_memoryview_type);
  Py_CLEAR(clear_module_state->__pyx_type___pyx_memoryview);
  Py_CLEAR(clear_module_state->__pyx_memoryviewslice_type);
  Py_CLEAR(clear_module_state->__pyx_type___pyx_memoryviewslice);
  Py_CLEAR(clear_module_state->__pyx_kp_u_);
  Py_CLEAR(clear_module_state->__pyx_n_s_A);
  Py_CLEAR(clear_module_state->__pyx_n_s_ASCII);
  Py_CLEAR(clear_module_state->__pyx_kp_s_A_and_B_must_have_same_ctype);
  Py_CLEAR(clear_module_state->__pyx_kp_s_A_and_B_must_have_same_number_of);
  Py_CLEAR(clear_module_state->__pyx_kp_s_All_dimensions_preceding_dimensi);
  Py_CLEAR(clear_module_state->__pyx_n_s_AssertionError);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Attempting_division_by_zero);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Avoiding_division_by_zero);
  Py_CLEAR(clear_module_state->__pyx_n_s_B);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Buffer_view_does_not_expose_stri);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Can_only_create_a_buffer_that_is);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Cannot_assign_to_read_only_memor);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Cannot_create_writable_memory_vi);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Cannot_divide_by_zero);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Cannot_index_with_type);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Cannot_transpose_memoryview_with);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Col_range_is_out_of_bounds);
  Py_CLEAR(clear_module_state->__pyx_n_s_Diagonal);
  Py_CLEAR(clear_module_state->__pyx_n_s_Diagonal___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_Diagonal___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Diagonals_must_have_same_ctype);
  Py_CLEAR(clear_module_state->__pyx_n_s_Digraph);
  Py_CLEAR(clear_module_state->__pyx_n_s_Digraph___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_Digraph___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Digraph_and_Matrix_must_share_sa);
  Py_CLEAR(clear_module_state->__pyx_n_s_Digraph_connect);
  Py_CLEAR(clear_module_state->__pyx_n_s_Digraph_connectRegular);
  Py_CLEAR(clear_module_state->__pyx_n_s_Digraph_copy);
  Py_CLEAR(clear_module_state->__pyx_n_s_Digraph_gaussianScale);
  Py_CLEAR(clear_module_state->__pyx_n_s_Digraph_normalize);
  Py_CLEAR(clear_module_state->__pyx_n_s_Digraph_sameShape);
  Py_CLEAR(clear_module_state->__pyx_n_s_Digraph_shape);
  Py_CLEAR(clear_module_state->__pyx_n_s_Digraph_symmetrize);
  Py_CLEAR(clear_module_state->__pyx_n_s_Digraph_toGraph);
  Py_CLEAR(clear_module_state->__pyx_n_s_Digraph_transpose);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Digraphs_must_have_same_shapes);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Digraphs_must_share_same_ctype);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Dimension_d_is_not_direct);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Dimension_of_diagonals_must_be_e);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Dist_rows_must_be_equal_to_label);
  Py_CLEAR(clear_module_state->__pyx_n_s_E);
  Py_CLEAR(clear_module_state->__pyx_n_s_Ellipsis);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Empty_shape_tuple_for_cython_arr);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Entries_of_only_exceed_self_rows);
  Py_CLEAR(clear_module_state->__pyx_n_s_Euclidean);
  Py_CLEAR(clear_module_state->__pyx_n_s_Euclidean___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_Euclidean___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_Euclidean_centroidDistance);
  Py_CLEAR(clear_module_state->__pyx_n_s_Euclidean_distance);
  Py_CLEAR(clear_module_state->__pyx_n_s_Euclidean_dot);
  Py_CLEAR(clear_module_state->__pyx_n_s_Euclidean_gaussianNormalize);
  Py_CLEAR(clear_module_state->__pyx_n_s_Euclidean_kmpp);
  Py_CLEAR(clear_module_state->__pyx_n_s_Euclidean_mean);
  Py_CLEAR(clear_module_state->__pyx_n_s_Euclidean_minmaxNormalize);
  Py_CLEAR(clear_module_state->__pyx_n_s_Euclidean_rowNormalize);
  Py_CLEAR(clear_module_state->__pyx_n_s_Euclidean_variance);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Failed_to_allocate_memory);
  Py_CLEAR(clear_module_state->__pyx_n_s_G);
  Py_CLEAR(clear_module_state->__pyx_n_s_Graph);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Graph_Matrix_operations_require);
  Py_CLEAR(clear_module_state->__pyx_n_s_Graph___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_Graph___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Graph_and_Matrix_must_have_same);
  Py_CLEAR(clear_module_state->__pyx_n_s_Graph_degree);
  Py_CLEAR(clear_module_state->__pyx_n_s_Graph_gaussianScale);
  Py_CLEAR(clear_module_state->__pyx_n_s_Graph_isolatedNodes);
  Py_CLEAR(clear_module_state->__pyx_n_s_Graph_laplacian);
  Py_CLEAR(clear_module_state->__pyx_n_s_Graph_max);
  Py_CLEAR(clear_module_state->__pyx_n_s_Graph_min);
  Py_CLEAR(clear_module_state->__pyx_n_s_Graph_normalize);
  Py_CLEAR(clear_module_state->__pyx_n_s_Graph_print);
  Py_CLEAR(clear_module_state->__pyx_n_s_Graph_propagate);
  Py_CLEAR(clear_module_state->__pyx_n_s_Graph_toDigraph);
  Py_CLEAR(clear_module_state->__pyx_n_s_Graph_toMatrix);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Graphs_must_have_same_number_of);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Graphs_must_share_same_ctype);
  Py_CLEAR(clear_module_state->__pyx_n_s_H);
  Py_CLEAR(clear_module_state->__pyx_n_s_ImportError);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Incompatible_checksums_0x_x_vs_0);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_2);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Incompatible_shape_for_Graph_dat);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Incompatible_shape_for_Hadamard);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Incompatible_shape_for_Matrix_ad);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Incompatible_shape_for_Matrix_pr);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Incompatible_shape_for_Matrix_su);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Incompatible_shape_for_matrix_mu);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Incompatible_shape_for_miolo_Mat);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Incompatible_shape_for_product);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Incompatible_shapes_for_addition);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Incompatible_shapes_for_subtract);
  Py_CLEAR(clear_module_state->__pyx_n_s_IndexError);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Index_is_out_of_bounds);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Index_k_is_out_of_bounds);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Index_out_of_bounds_axis_d);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Indirect_dimensions_not_supporte);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Invalid_mode_expected_c_or_fortr);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Invalid_new_shape);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Invalid_shape_for_at);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Invalid_shape_in_axis);
  Py_CLEAR(clear_module_state->__pyx_n_s_Lorentz);
  Py_CLEAR(clear_module_state->__pyx_n_s_Lorentz___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_Lorentz___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_Lorentz_centroidDistance);
  Py_CLEAR(clear_module_state->__pyx_n_s_Lorentz_dot);
  Py_CLEAR(clear_module_state->__pyx_n_s_Lorentz_exp);
  Py_CLEAR(clear_module_state->__pyx_n_s_Lorentz_fromEuclidean);
  Py_CLEAR(clear_module_state->__pyx_n_s_Lorentz_isIn);
  Py_CLEAR(clear_module_state->__pyx_n_s_Lorentz_lorentzDistance);
  Py_CLEAR(clear_module_state->__pyx_n_s_Lorentz_mean);
  Py_CLEAR(clear_module_state->__pyx_n_s_Lorentz_metricDistance);
  Py_CLEAR(clear_module_state->__pyx_n_s_Lorentz_tangentProjection);
  Py_CLEAR(clear_module_state->__pyx_n_s_Lorentz_toEuclidean);
  Py_CLEAR(clear_module_state->__pyx_n_s_M);
  Py_CLEAR(clear_module_state->__pyx_n_s_MST);
  Py_CLEAR(clear_module_state->__pyx_kp_s_M_and_Weights_must_have_same_cty);
  Py_CLEAR(clear_module_state->__pyx_kp_s_M_and_Weights_must_have_same_num);
  Py_CLEAR(clear_module_state->__pyx_kp_s_M_and_center_must_have_same_ctyp);
  Py_CLEAR(clear_module_state->__pyx_kp_s_M_cols_must_be_equal_to_center_c);
  Py_CLEAR(clear_module_state->__pyx_n_s_Manifold);
  Py_CLEAR(clear_module_state->__pyx_n_s_Manifold___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_Manifold___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Matrices_must_have_same_ctype);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Matrices_must_have_same_shape);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Matrices_must_have_the_same_ctyp);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Matrices_must_share_same_ctype);
  Py_CLEAR(clear_module_state->__pyx_n_s_Matrix);
  Py_CLEAR(clear_module_state->__pyx_n_s_Matrix___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_Matrix___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_Matrix_argkmax);
  Py_CLEAR(clear_module_state->__pyx_n_s_Matrix_argkmin);
  Py_CLEAR(clear_module_state->__pyx_n_s_Matrix_argmax);
  Py_CLEAR(clear_module_state->__pyx_n_s_Matrix_argmin);
  Py_CLEAR(clear_module_state->__pyx_n_s_Matrix_copy);
  Py_CLEAR(clear_module_state->__pyx_n_s_Matrix_cut);
  Py_CLEAR(clear_module_state->__pyx_n_s_Matrix_flatten);
  Py_CLEAR(clear_module_state->__pyx_n_s_Matrix_max);
  Py_CLEAR(clear_module_state->__pyx_n_s_Matrix_min);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Matrix_must_be_square);
  Py_CLEAR(clear_module_state->__pyx_n_s_Matrix_normalize);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Matrix_operations_require_same_c);
  Py_CLEAR(clear_module_state->__pyx_n_s_Matrix_partition);
  Py_CLEAR(clear_module_state->__pyx_n_s_Matrix_print);
  Py_CLEAR(clear_module_state->__pyx_n_s_Matrix_reshape);
  Py_CLEAR(clear_module_state->__pyx_n_s_Matrix_rowDistance);
  Py_CLEAR(clear_module_state->__pyx_n_s_Matrix_sparsifyKNN);
  Py_CLEAR(clear_module_state->__pyx_n_s_Matrix_sparsifyThreshold);
  Py_CLEAR(clear_module_state->__pyx_n_s_Matrix_sumAll);
  Py_CLEAR(clear_module_state->__pyx_n_s_Matrix_trace);
  Py_CLEAR(clear_module_state->__pyx_n_s_Matrix_transpose);
  Py_CLEAR(clear_module_state->__pyx_n_s_MemoryError);
  Py_CLEAR(clear_module_state->__pyx_kp_s_MemoryView_of_r_at_0x_x);
  Py_CLEAR(clear_module_state->__pyx_kp_s_MemoryView_of_r_object);
  Py_CLEAR(clear_module_state->__pyx_n_s_N);
  Py_CLEAR(clear_module_state->__pyx_n_s_Neighbors);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Neighbors_and_Weights_must_have);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Neighbors_must_have_int_ctype);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Number_of_Matrix_rows_must_be_eq);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Number_of_cols_must_be_greater_t);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Number_of_nodes_must_be_equal_to);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Number_of_rows_must_be_equal_to);
  Py_CLEAR(clear_module_state->__pyx_n_b_O);
  Py_CLEAR(clear_module_state->__pyx_n_s_O);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Objects_must_share_same_ctype);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Only_square_matrices_are_allowed);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Only_square_matrices_can_be_spar);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Only_square_weight_matrices_are);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Out_of_bounds_on_buffer_access_a);
  Py_CLEAR(clear_module_state->__pyx_n_s_PickleError);
  Py_CLEAR(clear_module_state->__pyx_n_s_Poincare);
  Py_CLEAR(clear_module_state->__pyx_n_s_Poincare___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_Poincare___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_Poincare_add);
  Py_CLEAR(clear_module_state->__pyx_n_s_Poincare_centroidDistance);
  Py_CLEAR(clear_module_state->__pyx_n_s_Poincare_distance);
  Py_CLEAR(clear_module_state->__pyx_n_s_Poincare_exp);
  Py_CLEAR(clear_module_state->__pyx_n_s_Poincare_hyperbolicity);
  Py_CLEAR(clear_module_state->__pyx_n_s_Poincare_isIn);
  Py_CLEAR(clear_module_state->__pyx_n_s_Poincare_log);
  Py_CLEAR(clear_module_state->__pyx_n_s_Poincare_mean);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Row_range_is_out_of_bounds);
  Py_CLEAR(clear_module_state->__pyx_n_s_Sequence);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Size_of_labels_must_be_equal_to);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Size_of_labels_must_be_equal_to_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_Sphere);
  Py_CLEAR(clear_module_state->__pyx_n_s_Sphere___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_Sphere___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_Sphere_centroidDistance);
  Py_CLEAR(clear_module_state->__pyx_n_s_Sphere_coordinateReady);
  Py_CLEAR(clear_module_state->__pyx_n_s_Sphere_distance);
  Py_CLEAR(clear_module_state->__pyx_n_s_Sphere_exp);
  Py_CLEAR(clear_module_state->__pyx_n_s_Sphere_fromEuclidean);
  Py_CLEAR(clear_module_state->__pyx_n_s_Sphere_isIn);
  Py_CLEAR(clear_module_state->__pyx_n_s_Sphere_isTangent);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Sphere_radius_must_be_greater_th);
  Py_CLEAR(clear_module_state->__pyx_n_s_Sphere_stereographicProjection);
  Py_CLEAR(clear_module_state->__pyx_n_s_Sphere_toEuclidean);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Step_may_not_be_zero_axis_d);
  Py_CLEAR(clear_module_state->__pyx_n_s_Threshold);
  Py_CLEAR(clear_module_state->__pyx_n_s_TypeError);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Unable_to_convert_item_to_object);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Unknown_ctype);
  Py_CLEAR(clear_module_state->__pyx_n_s_ValueError);
  Py_CLEAR(clear_module_state->__pyx_n_s_View_MemoryView);
  Py_CLEAR(clear_module_state->__pyx_n_s_Weights);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Weights_and_self_must_have_same);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Weights_must_be_a_square_Matrix);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Weights_nodes_must_be_equal_to_M);
  Py_CLEAR(clear_module_state->__pyx_n_s_X);
  Py_CLEAR(clear_module_state->__pyx_kp_u__2);
  Py_CLEAR(clear_module_state->__pyx_n_s__3);
  Py_CLEAR(clear_module_state->__pyx_n_s__300);
  Py_CLEAR(clear_module_state->__pyx_kp_u__6);
  Py_CLEAR(clear_module_state->__pyx_kp_u__7);
  Py_CLEAR(clear_module_state->__pyx_n_s_abc);
  Py_CLEAR(clear_module_state->__pyx_n_s_acos);
  Py_CLEAR(clear_module_state->__pyx_n_s_acos___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_acos___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_acosh);
  Py_CLEAR(clear_module_state->__pyx_n_s_acosh___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_acosh___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_add);
  Py_CLEAR(clear_module_state->__pyx_n_s_allocate_buffer);
  Py_CLEAR(clear_module_state->__pyx_kp_u_and);
  Py_CLEAR(clear_module_state->__pyx_n_s_argkmax);
  Py_CLEAR(clear_module_state->__pyx_n_s_argkmin);
  Py_CLEAR(clear_module_state->__pyx_n_s_argmax);
  Py_CLEAR(clear_module_state->__pyx_n_s_argmin);
  Py_CLEAR(clear_module_state->__pyx_n_s_ashape);
  Py_CLEAR(clear_module_state->__pyx_n_s_asin);
  Py_CLEAR(clear_module_state->__pyx_n_s_asin___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_asin___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_asinh);
  Py_CLEAR(clear_module_state->__pyx_n_s_asinh___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_asinh___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_asyncio_coroutines);
  Py_CLEAR(clear_module_state->__pyx_n_s_at);
  Py_CLEAR(clear_module_state->__pyx_kp_s_at_and_M_must_have_same_ctype);
  Py_CLEAR(clear_module_state->__pyx_kp_s_at_and_M_must_have_same_number_o);
  Py_CLEAR(clear_module_state->__pyx_kp_s_at_and_M_must_have_same_number_o_2);
  Py_CLEAR(clear_module_state->__pyx_kp_s_at_and_M_must_have_same_shape);
  Py_CLEAR(clear_module_state->__pyx_kp_s_at_and_tangent_must_have_same_nu);
  Py_CLEAR(clear_module_state->__pyx_kp_s_at_and_tanget_must_have_same_cty);
  Py_CLEAR(clear_module_state->__pyx_n_s_atan);
  Py_CLEAR(clear_module_state->__pyx_n_s_atan___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_atan___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_atanh);
  Py_CLEAR(clear_module_state->__pyx_n_s_atanh___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_atanh___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_aux);
  Py_CLEAR(clear_module_state->__pyx_n_s_azimuth);
  Py_CLEAR(clear_module_state->__pyx_kp_s_azimuth_must_be_smaller_than_M_c);
  Py_CLEAR(clear_module_state->__pyx_n_s_base);
  Py_CLEAR(clear_module_state->__pyx_n_s_beta);
  Py_CLEAR(clear_module_state->__pyx_n_s_c);
  Py_CLEAR(clear_module_state->__pyx_n_u_c);
  Py_CLEAR(clear_module_state->__pyx_n_s_center);
  Py_CLEAR(clear_module_state->__pyx_n_s_centroidDistance);
  Py_CLEAR(clear_module_state->__pyx_n_s_clamped);
  Py_CLEAR(clear_module_state->__pyx_kp_s_clamped_must_have_length_equal_t);
  Py_CLEAR(clear_module_state->__pyx_n_s_class);
  Py_CLEAR(clear_module_state->__pyx_n_s_classSeparation);
  Py_CLEAR(clear_module_state->__pyx_n_s_classSeparation___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_classSeparation___setstate_cytho);
  Py_CLEAR(clear_module_state->__pyx_n_s_classSeparation_extra);
  Py_CLEAR(clear_module_state->__pyx_n_s_classSeparation_intra);
  Py_CLEAR(clear_module_state->__pyx_n_s_class_getitem);
  Py_CLEAR(clear_module_state->__pyx_n_s_cline_in_traceback);
  Py_CLEAR(clear_module_state->__pyx_n_s_colMax);
  Py_CLEAR(clear_module_state->__pyx_n_s_colMin);
  Py_CLEAR(clear_module_state->__pyx_n_s_collections);
  Py_CLEAR(clear_module_state->__pyx_kp_s_collections_abc);
  Py_CLEAR(clear_module_state->__pyx_n_s_cols);
  Py_CLEAR(clear_module_state->__pyx_n_s_concat);
  Py_CLEAR(clear_module_state->__pyx_n_s_connect);
  Py_CLEAR(clear_module_state->__pyx_n_s_connectRegular);
  Py_CLEAR(clear_module_state->__pyx_kp_s_contiguous_and_direct);
  Py_CLEAR(clear_module_state->__pyx_kp_s_contiguous_and_indirect);
  Py_CLEAR(clear_module_state->__pyx_n_s_coordinateReady);
  Py_CLEAR(clear_module_state->__pyx_n_s_copy);
  Py_CLEAR(clear_module_state->__pyx_n_s_cos);
  Py_CLEAR(clear_module_state->__pyx_n_s_cos___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_cos___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_cosh);
  Py_CLEAR(clear_module_state->__pyx_n_s_cosh___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_cosh___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_count);
  Py_CLEAR(clear_module_state->__pyx_n_s_ctype);
  Py_CLEAR(clear_module_state->__pyx_n_s_ctypes);
  Py_CLEAR(clear_module_state->__pyx_n_s_curvature);
  Py_CLEAR(clear_module_state->__pyx_n_s_cut);
  Py_CLEAR(clear_module_state->__pyx_n_s_degree);
  Py_CLEAR(clear_module_state->__pyx_n_s_dict);
  Py_CLEAR(clear_module_state->__pyx_n_s_dict_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_dim);
  Py_CLEAR(clear_module_state->__pyx_kp_u_disable);
  Py_CLEAR(clear_module_state->__pyx_n_s_distance);
  Py_CLEAR(clear_module_state->__pyx_n_s_dot);
  Py_CLEAR(clear_module_state->__pyx_n_s_double);
  Py_CLEAR(clear_module_state->__pyx_n_s_dtype);
  Py_CLEAR(clear_module_state->__pyx_n_s_dtype_is_object);
  Py_CLEAR(clear_module_state->__pyx_n_s_edges);
  Py_CLEAR(clear_module_state->__pyx_n_s_empty);
  Py_CLEAR(clear_module_state->__pyx_kp_u_enable);
  Py_CLEAR(clear_module_state->__pyx_n_s_encode);
  Py_CLEAR(clear_module_state->__pyx_n_s_end);
  Py_CLEAR(clear_module_state->__pyx_n_s_enumerate);
  Py_CLEAR(clear_module_state->__pyx_n_s_error);
  Py_CLEAR(clear_module_state->__pyx_n_s_exp);
  Py_CLEAR(clear_module_state->__pyx_n_s_exp___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_exp___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_extra);
  Py_CLEAR(clear_module_state->__pyx_n_s_fabs);
  Py_CLEAR(clear_module_state->__pyx_n_s_fabs___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_fabs___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_filename);
  Py_CLEAR(clear_module_state->__pyx_n_s_flags);
  Py_CLEAR(clear_module_state->__pyx_n_s_flatten);
  Py_CLEAR(clear_module_state->__pyx_n_s_float);
  Py_CLEAR(clear_module_state->__pyx_n_s_format);
  Py_CLEAR(clear_module_state->__pyx_n_s_fortran);
  Py_CLEAR(clear_module_state->__pyx_n_u_fortran);
  Py_CLEAR(clear_module_state->__pyx_n_s_fromEuclidean);
  Py_CLEAR(clear_module_state->__pyx_n_s_g);
  Py_CLEAR(clear_module_state->__pyx_n_s_gaussianNormalize);
  Py_CLEAR(clear_module_state->__pyx_n_s_gaussianScale);
  Py_CLEAR(clear_module_state->__pyx_kp_u_gc);
  Py_CLEAR(clear_module_state->__pyx_n_s_getstate);
  Py_CLEAR(clear_module_state->__pyx_n_s_global_ctype);
  Py_CLEAR(clear_module_state->__pyx_kp_u_got);
  Py_CLEAR(clear_module_state->__pyx_kp_u_got_differing_extents_in_dimensi);
  Py_CLEAR(clear_module_state->__pyx_n_s_gshape);
  Py_CLEAR(clear_module_state->__pyx_n_s_hadamard);
  Py_CLEAR(clear_module_state->__pyx_n_s_hyperbolicity);
  Py_CLEAR(clear_module_state->__pyx_n_s_i);
  Py_CLEAR(clear_module_state->__pyx_kp_s_i_is_not_a_valid_index_for_Digra);
  Py_CLEAR(clear_module_state->__pyx_n_s_id);
  Py_CLEAR(clear_module_state->__pyx_n_s_import);
  Py_CLEAR(clear_module_state->__pyx_n_s_index);
  Py_CLEAR(clear_module_state->__pyx_n_s_init);
  Py_CLEAR(clear_module_state->__pyx_n_s_init_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_initializing);
  Py_CLEAR(clear_module_state->__pyx_n_s_int);
  Py_CLEAR(clear_module_state->__pyx_n_s_intra);
  Py_CLEAR(clear_module_state->__pyx_n_s_isDiagonal);
  Py_CLEAR(clear_module_state->__pyx_n_s_isDigraph);
  Py_CLEAR(clear_module_state->__pyx_n_s_isGraph);
  Py_CLEAR(clear_module_state->__pyx_n_s_isIn);
  Py_CLEAR(clear_module_state->__pyx_n_s_isMatrix);
  Py_CLEAR(clear_module_state->__pyx_n_s_isTangent);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_coroutine);
  Py_CLEAR(clear_module_state->__pyx_kp_u_isenabled);
  Py_CLEAR(clear_module_state->__pyx_n_s_isolatedNodes);
  Py_CLEAR(clear_module_state->__pyx_n_s_itemsize);
  Py_CLEAR(clear_module_state->__pyx_kp_s_itemsize_0_for_cython_array);
  Py_CLEAR(clear_module_state->__pyx_n_s_j);
  Py_CLEAR(clear_module_state->__pyx_kp_s_j_is_not_a_valid_index_for_Digra);
  Py_CLEAR(clear_module_state->__pyx_n_s_k);
  Py_CLEAR(clear_module_state->__pyx_n_s_kmpp);
  Py_CLEAR(clear_module_state->__pyx_n_s_labels);
  Py_CLEAR(clear_module_state->__pyx_kp_s_labels_must_have_size_equal_to_s);
  Py_CLEAR(clear_module_state->__pyx_n_s_laplacian);
  Py_CLEAR(clear_module_state->__pyx_n_s_loadtxt);
  Py_CLEAR(clear_module_state->__pyx_n_s_log);
  Py_CLEAR(clear_module_state->__pyx_n_s_log___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_log___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_lorentzDistance);
  Py_CLEAR(clear_module_state->__pyx_n_s_m);
  Py_CLEAR(clear_module_state->__pyx_n_s_main);
  Py_CLEAR(clear_module_state->__pyx_n_s_max);
  Py_CLEAR(clear_module_state->__pyx_n_s_max_0);
  Py_CLEAR(clear_module_state->__pyx_n_s_max_1);
  Py_CLEAR(clear_module_state->__pyx_n_s_mean);
  Py_CLEAR(clear_module_state->__pyx_n_s_memview);
  Py_CLEAR(clear_module_state->__pyx_n_s_metricDistance);
  Py_CLEAR(clear_module_state->__pyx_n_s_min);
  Py_CLEAR(clear_module_state->__pyx_n_s_minmaxNormalize);
  Py_CLEAR(clear_module_state->__pyx_n_s_miolo);
  Py_CLEAR(clear_module_state->__pyx_n_s_mioloObject);
  Py_CLEAR(clear_module_state->__pyx_n_s_mioloObject___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_mioloObject___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_mioloObject_isDiagonal);
  Py_CLEAR(clear_module_state->__pyx_n_s_mioloObject_isDigraph);
  Py_CLEAR(clear_module_state->__pyx_n_s_mioloObject_isGraph);
  Py_CLEAR(clear_module_state->__pyx_n_s_mioloObject_isMatrix);
  Py_CLEAR(clear_module_state->__pyx_kp_s_miololib_pyx);
  Py_CLEAR(clear_module_state->__pyx_n_s_mode);
  Py_CLEAR(clear_module_state->__pyx_n_s_n);
  Py_CLEAR(clear_module_state->__pyx_n_s_name);
  Py_CLEAR(clear_module_state->__pyx_n_s_name_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_ndim);
  Py_CLEAR(clear_module_state->__pyx_n_s_new);
  Py_CLEAR(clear_module_state->__pyx_kp_s_no_default___reduce___due_to_non);
  Py_CLEAR(clear_module_state->__pyx_n_s_nodes);
  Py_CLEAR(clear_module_state->__pyx_n_s_normalize);
  Py_CLEAR(clear_module_state->__pyx_n_s_np);
  Py_CLEAR(clear_module_state->__pyx_n_s_null);
  Py_CLEAR(clear_module_state->__pyx_n_s_numpy);
  Py_CLEAR(clear_module_state->__pyx_kp_s_numpy__core_multiarray_failed_to);
  Py_CLEAR(clear_module_state->__pyx_kp_s_numpy__core_umath_failed_to_impo);
  Py_CLEAR(clear_module_state->__pyx_n_s_obj);
  Py_CLEAR(clear_module_state->__pyx_n_s_only);
  Py_CLEAR(clear_module_state->__pyx_n_s_out);
  Py_CLEAR(clear_module_state->__pyx_n_s_output);
  Py_CLEAR(clear_module_state->__pyx_n_s_pack);
  Py_CLEAR(clear_module_state->__pyx_n_s_partition);
  Py_CLEAR(clear_module_state->__pyx_n_s_pickle);
  Py_CLEAR(clear_module_state->__pyx_n_s_pottsEnergy);
  Py_CLEAR(clear_module_state->__pyx_n_s_pottsEnergy___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_pottsEnergy___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_print);
  Py_CLEAR(clear_module_state->__pyx_n_s_propagate);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_PickleError);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_checksum);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_result);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_state);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_type);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_unpickle_Enum);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_unpickle_Manifold);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_vtable);
  Py_CLEAR(clear_module_state->__pyx_n_s_radius);
  Py_CLEAR(clear_module_state->__pyx_n_s_range);
  Py_CLEAR(clear_module_state->__pyx_n_s_recp);
  Py_CLEAR(clear_module_state->__pyx_n_s_recp___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_recp___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce_ex);
  Py_CLEAR(clear_module_state->__pyx_n_s_register);
  Py_CLEAR(clear_module_state->__pyx_n_s_reshape);
  Py_CLEAR(clear_module_state->__pyx_n_s_rowDistance);
  Py_CLEAR(clear_module_state->__pyx_n_s_rowMax);
  Py_CLEAR(clear_module_state->__pyx_n_s_rowMin);
  Py_CLEAR(clear_module_state->__pyx_n_s_rowNormalize);
  Py_CLEAR(clear_module_state->__pyx_n_s_rows);
  Py_CLEAR(clear_module_state->__pyx_n_s_sameShape);
  Py_CLEAR(clear_module_state->__pyx_n_s_self);
  Py_CLEAR(clear_module_state->__pyx_kp_s_self_diagonalDouble_self_diagona);
  Py_CLEAR(clear_module_state->__pyx_kp_s_self_view_cannot_be_converted_to);
  Py_CLEAR(clear_module_state->__pyx_n_s_setstate);
  Py_CLEAR(clear_module_state->__pyx_n_s_setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_shape);
  Py_CLEAR(clear_module_state->__pyx_n_s_sin);
  Py_CLEAR(clear_module_state->__pyx_n_s_sin___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_sin___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_single);
  Py_CLEAR(clear_module_state->__pyx_n_s_sinh);
  Py_CLEAR(clear_module_state->__pyx_n_s_sinh___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_sinh___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_size);
  Py_CLEAR(clear_module_state->__pyx_n_s_sparsifyKNN);
  Py_CLEAR(clear_module_state->__pyx_n_s_sparsifyThreshold);
  Py_CLEAR(clear_module_state->__pyx_n_s_spec);
  Py_CLEAR(clear_module_state->__pyx_n_s_sqrt);
  Py_CLEAR(clear_module_state->__pyx_n_s_sqrt___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_sqrt___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_start);
  Py_CLEAR(clear_module_state->__pyx_n_s_state);
  Py_CLEAR(clear_module_state->__pyx_n_s_step);
  Py_CLEAR(clear_module_state->__pyx_n_s_stereographicProjection);
  Py_CLEAR(clear_module_state->__pyx_n_s_stop);
  Py_CLEAR(clear_module_state->__pyx_n_s_str_memory);
  Py_CLEAR(clear_module_state->__pyx_kp_s_strided_and_direct);
  Py_CLEAR(clear_module_state->__pyx_kp_s_strided_and_direct_or_indirect);
  Py_CLEAR(clear_module_state->__pyx_kp_s_strided_and_indirect);
  Py_CLEAR(clear_module_state->__pyx_kp_s_stringsource);
  Py_CLEAR(clear_module_state->__pyx_n_s_struct);
  Py_CLEAR(clear_module_state->__pyx_n_s_structure);
  Py_CLEAR(clear_module_state->__pyx_n_s_sumAll);
  Py_CLEAR(clear_module_state->__pyx_n_s_super);
  Py_CLEAR(clear_module_state->__pyx_n_s_symmetrize);
  Py_CLEAR(clear_module_state->__pyx_n_s_sys);
  Py_CLEAR(clear_module_state->__pyx_n_s_tan);
  Py_CLEAR(clear_module_state->__pyx_n_s_tan___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_tan___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_tangent);
  Py_CLEAR(clear_module_state->__pyx_n_s_tangentProjection);
  Py_CLEAR(clear_module_state->__pyx_n_s_tanh);
  Py_CLEAR(clear_module_state->__pyx_n_s_tanh___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_tanh___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_targetLabel);
  Py_CLEAR(clear_module_state->__pyx_n_s_test);
  Py_CLEAR(clear_module_state->__pyx_n_s_toDigraph);
  Py_CLEAR(clear_module_state->__pyx_n_s_toEuclidean);
  Py_CLEAR(clear_module_state->__pyx_n_s_toGraph);
  Py_CLEAR(clear_module_state->__pyx_n_s_toMatrix);
  Py_CLEAR(clear_module_state->__pyx_n_s_tolerance);
  Py_CLEAR(clear_module_state->__pyx_n_s_trace);
  Py_CLEAR(clear_module_state->__pyx_n_s_transpose);
  Py_CLEAR(clear_module_state->__pyx_n_s_txtGraph);
  Py_CLEAR(clear_module_state->__pyx_n_s_txtMatrix);
  Py_CLEAR(clear_module_state->__pyx_n_s_ufunction);
  Py_CLEAR(clear_module_state->__pyx_n_s_ufunction___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_ufunction___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_ulong);
  Py_CLEAR(clear_module_state->__pyx_kp_s_unable_to_allocate_array_data);
  Py_CLEAR(clear_module_state->__pyx_kp_s_unable_to_allocate_shape_and_str);
  Py_CLEAR(clear_module_state->__pyx_n_s_unpack);
  Py_CLEAR(clear_module_state->__pyx_n_s_update);
  Py_CLEAR(clear_module_state->__pyx_n_s_use_setstate);
  Py_CLEAR(clear_module_state->__pyx_n_s_value);
  Py_CLEAR(clear_module_state->__pyx_n_s_variance);
  Py_CLEAR(clear_module_state->__pyx_n_s_version_info);
  Py_CLEAR(clear_module_state->__pyx_n_s_view);
  Py_CLEAR(clear_module_state->__pyx_n_s_weightedDotProduct);
  Py_CLEAR(clear_module_state->__pyx_n_s_weightedDotProduct___reduce_cyth);
  Py_CLEAR(clear_module_state->__pyx_n_s_weightedDotProduct___setstate_cy);
  Py_CLEAR(clear_module_state->__pyx_n_s_weightedSquareDistance);
  Py_CLEAR(clear_module_state->__pyx_n_s_weightedSquareDistance___reduce);
  Py_CLEAR(clear_module_state->__pyx_n_s_weightedSquareDistance___setstat);
  Py_CLEAR(clear_module_state->__pyx_n_s_weights);
  Py_CLEAR(clear_module_state->__pyx_n_s_whole);
  Py_CLEAR(clear_module_state->__pyx_float_1_);
  Py_CLEAR(clear_module_state->__pyx_float_0_001);
  Py_CLEAR(clear_module_state->__pyx_int_0);
  Py_CLEAR(clear_module_state->__pyx_int_1);
  Py_CLEAR(clear_module_state->__pyx_int_2);
  Py_CLEAR(clear_module_state->__pyx_int_3);
  Py_CLEAR(clear_module_state->__pyx_int_112105877);
  Py_CLEAR(clear_module_state->__pyx_int_136983863);
  Py_CLEAR(clear_module_state->__pyx_int_184977713);
  Py_CLEAR(clear_module_state->__pyx_int_222419149);
  Py_CLEAR(clear_module_state->__pyx_int_228825662);
  Py_CLEAR(clear_module_state->__pyx_int_238750788);
  Py_CLEAR(clear_module_state->__pyx_int_neg_1);
  Py_CLEAR(clear_module_state->__pyx_k__11);
  Py_CLEAR(clear_module_state->__pyx_k__15);
  Py_CLEAR(clear_module_state->__pyx_k__33);
  Py_CLEAR(clear_module_state->__pyx_k__36);
  Py_CLEAR(clear_module_state->__pyx_k__45);
  Py_CLEAR(clear_module_state->__pyx_k__57);
  Py_CLEAR(clear_module_state->__pyx_slice__5);
  Py_CLEAR(clear_module_state->__pyx_tuple__4);
  Py_CLEAR(clear_module_state->__pyx_tuple__8);
  Py_CLEAR(clear_module_state->__pyx_tuple__9);
  Py_CLEAR(clear_module_state->__pyx_slice__66);
  Py_CLEAR(clear_module_state->__pyx_tuple__10);
  Py_CLEAR(clear_module_state->__pyx_tuple__12);
  Py_CLEAR(clear_module_state->__pyx_tuple__13);
  Py_CLEAR(clear_module_state->__pyx_tuple__14);
  Py_CLEAR(clear_module_state->__pyx_tuple__16);
  Py_CLEAR(clear_module_state->__pyx_tuple__17);
  Py_CLEAR(clear_module_state->__pyx_tuple__18);
  Py_CLEAR(clear_module_state->__pyx_tuple__19);
  Py_CLEAR(clear_module_state->__pyx_tuple__20);
  Py_CLEAR(clear_module_state->__pyx_tuple__21);
  Py_CLEAR(clear_module_state->__pyx_tuple__22);
  Py_CLEAR(clear_module_state->__pyx_tuple__23);
  Py_CLEAR(clear_module_state->__pyx_tuple__24);
  Py_CLEAR(clear_module_state->__pyx_tuple__25);
  Py_CLEAR(clear_module_state->__pyx_tuple__26);
  Py_CLEAR(clear_module_state->__pyx_tuple__27);
  Py_CLEAR(clear_module_state->__pyx_tuple__28);
  Py_CLEAR(clear_module_state->__pyx_tuple__29);
  Py_CLEAR(clear_module_state->__pyx_tuple__30);
  Py_CLEAR(clear_module_state->__pyx_tuple__31);
  Py_CLEAR(clear_module_state->__pyx_tuple__32);
  Py_CLEAR(clear_module_state->__pyx_tuple__34);
  Py_CLEAR(clear_module_state->__pyx_tuple__35);
  Py_CLEAR(clear_module_state->__pyx_tuple__37);
  Py_CLEAR(clear_module_state->__pyx_tuple__38);
  Py_CLEAR(clear_module_state->__pyx_tuple__39);
  Py_CLEAR(clear_module_state->__pyx_tuple__40);
  Py_CLEAR(clear_module_state->__pyx_tuple__41);
  Py_CLEAR(clear_module_state->__pyx_tuple__42);
  Py_CLEAR(clear_module_state->__pyx_tuple__43);
  Py_CLEAR(clear_module_state->__pyx_tuple__44);
  Py_CLEAR(clear_module_state->__pyx_tuple__46);
  Py_CLEAR(clear_module_state->__pyx_tuple__47);
  Py_CLEAR(clear_module_state->__pyx_tuple__48);
  Py_CLEAR(clear_module_state->__pyx_tuple__49);
  Py_CLEAR(clear_module_state->__pyx_tuple__50);
  Py_CLEAR(clear_module_state->__pyx_tuple__51);
  Py_CLEAR(clear_module_state->__pyx_tuple__52);
  Py_CLEAR(clear_module_state->__pyx_tuple__53);
  Py_CLEAR(clear_module_state->__pyx_tuple__54);
  Py_CLEAR(clear_module_state->__pyx_tuple__55);
  Py_CLEAR(clear_module_state->__pyx_tuple__56);
  Py_CLEAR(clear_module_state->__pyx_tuple__58);
  Py_CLEAR(clear_module_state->__pyx_tuple__59);
  Py_CLEAR(clear_module_state->__pyx_tuple__60);
  Py_CLEAR(clear_module_state->__pyx_tuple__61);
  Py_CLEAR(clear_module_state->__pyx_tuple__62);
  Py_CLEAR(clear_module_state->__pyx_tuple__63);
  Py_CLEAR(clear_module_state->__pyx_tuple__64);
  Py_CLEAR(clear_module_state->__pyx_tuple__65);
  Py_CLEAR(clear_module_state->__pyx_tuple__67);
  Py_CLEAR(clear_module_state->__pyx_tuple__68);
  Py_CLEAR(clear_module_state->__pyx_tuple__69);
  Py_CLEAR(clear_module_state->__pyx_tuple__70);
  Py_CLEAR(clear_module_state->__pyx_tuple__71);
  Py_CLEAR(clear_module_state->__pyx_tuple__72);
  Py_CLEAR(clear_module_state->__pyx_tuple__73);
  Py_CLEAR(clear_module_state->__pyx_tuple__74);
  Py_CLEAR(clear_module_state->__pyx_tuple__75);
  Py_CLEAR(clear_module_state->__pyx_tuple__76);
  Py_CLEAR(clear_module_state->__pyx_tuple__77);
  Py_CLEAR(clear_module_state->__pyx_tuple__78);
  Py_CLEAR(clear_module_state->__pyx_tuple__79);
  Py_CLEAR(clear_module_state->__pyx_tuple__80);
  Py_CLEAR(clear_module_state->__pyx_tuple__81);
  Py_CLEAR(clear_module_state->__pyx_tuple__82);
  Py_CLEAR(clear_module_state->__pyx_tuple__83);
  Py_CLEAR(clear_module_state->__pyx_tuple__84);
  Py_CLEAR(clear_module_state->__pyx_tuple__85);
  Py_CLEAR(clear_module_state->__pyx_tuple__86);
  Py_CLEAR(clear_module_state->__pyx_tuple__87);
  Py_CLEAR(clear_module_state->__pyx_tuple__88);
  Py_CLEAR(clear_module_state->__pyx_tuple__89);
  Py_CLEAR(clear_module_state->__pyx_tuple__90);
  Py_CLEAR(clear_module_state->__pyx_tuple__91);
  Py_CLEAR(clear_module_state->__pyx_tuple__92);
  Py_CLEAR(clear_module_state->__pyx_tuple__93);
  Py_CLEAR(clear_module_state->__pyx_tuple__94);
  Py_CLEAR(clear_module_state->__pyx_tuple__95);
  Py_CLEAR(clear_module_state->__pyx_tuple__96);
  Py_CLEAR(clear_module_state->__pyx_tuple__97);
  Py_CLEAR(clear_module_state->__pyx_tuple__98);
  Py_CLEAR(clear_module_state->__pyx_tuple__100);
  Py_CLEAR(clear_module_state->__pyx_tuple__106);
  Py_CLEAR(clear_module_state->__pyx_tuple__108);
  Py_CLEAR(clear_module_state->__pyx_tuple__111);
  Py_CLEAR(clear_module_state->__pyx_tuple__115);
  Py_CLEAR(clear_module_state->__pyx_tuple__117);
  Py_CLEAR(clear_module_state->__pyx_tuple__120);
  Py_CLEAR(clear_module_state->__pyx_tuple__122);
  Py_CLEAR(clear_module_state->__pyx_tuple__124);
  Py_CLEAR(clear_module_state->__pyx_tuple__125);
  Py_CLEAR(clear_module_state->__pyx_tuple__127);
  Py_CLEAR(clear_module_state->__pyx_tuple__129);
  Py_CLEAR(clear_module_state->__pyx_tuple__130);
  Py_CLEAR(clear_module_state->__pyx_tuple__132);
  Py_CLEAR(clear_module_state->__pyx_tuple__137);
  Py_CLEAR(clear_module_state->__pyx_tuple__142);
  Py_CLEAR(clear_module_state->__pyx_tuple__144);
  Py_CLEAR(clear_module_state->__pyx_tuple__148);
  Py_CLEAR(clear_module_state->__pyx_tuple__161);
  Py_CLEAR(clear_module_state->__pyx_tuple__163);
  Py_CLEAR(clear_module_state->__pyx_tuple__165);
  Py_CLEAR(clear_module_state->__pyx_tuple__167);
  Py_CLEAR(clear_module_state->__pyx_tuple__168);
  Py_CLEAR(clear_module_state->__pyx_tuple__171);
  Py_CLEAR(clear_module_state->__pyx_tuple__173);
  Py_CLEAR(clear_module_state->__pyx_tuple__174);
  Py_CLEAR(clear_module_state->__pyx_tuple__177);
  Py_CLEAR(clear_module_state->__pyx_tuple__181);
  Py_CLEAR(clear_module_state->__pyx_tuple__187);
  Py_CLEAR(clear_module_state->__pyx_tuple__189);
  Py_CLEAR(clear_module_state->__pyx_tuple__191);
  Py_CLEAR(clear_module_state->__pyx_tuple__194);
  Py_CLEAR(clear_module_state->__pyx_tuple__202);
  Py_CLEAR(clear_module_state->__pyx_tuple__204);
  Py_CLEAR(clear_module_state->__pyx_tuple__208);
  Py_CLEAR(clear_module_state->__pyx_tuple__212);
  Py_CLEAR(clear_module_state->__pyx_tuple__215);
  Py_CLEAR(clear_module_state->__pyx_tuple__217);
  Py_CLEAR(clear_module_state->__pyx_tuple__218);
  Py_CLEAR(clear_module_state->__pyx_tuple__220);
  Py_CLEAR(clear_module_state->__pyx_tuple__226);
  Py_CLEAR(clear_module_state->__pyx_tuple__228);
  Py_CLEAR(clear_module_state->__pyx_tuple__230);
  Py_CLEAR(clear_module_state->__pyx_tuple__232);
  Py_CLEAR(clear_module_state->__pyx_tuple__288);
  Py_CLEAR(clear_module_state->__pyx_codeobj__99);
  Py_CLEAR(clear_module_state->__pyx_codeobj__101);
  Py_CLEAR(clear_module_state->__pyx_codeobj__102);
  Py_CLEAR(clear_module_state->__pyx_codeobj__103);
  Py_CLEAR(clear_module_state->__pyx_codeobj__104);
  Py_CLEAR(clear_module_state->__pyx_codeobj__105);
  Py_CLEAR(clear_module_state->__pyx_codeobj__107);
  Py_CLEAR(clear_module_state->__pyx_codeobj__109);
  Py_CLEAR(clear_module_state->__pyx_codeobj__110);
  Py_CLEAR(clear_module_state->__pyx_codeobj__112);
  Py_CLEAR(clear_module_state->__pyx_codeobj__113);
  Py_CLEAR(clear_module_state->__pyx_codeobj__114);
  Py_CLEAR(clear_module_state->__pyx_codeobj__116);
  Py_CLEAR(clear_module_state->__pyx_codeobj__118);
  Py_CLEAR(clear_module_state->__pyx_codeobj__119);
  Py_CLEAR(clear_module_state->__pyx_codeobj__121);
  Py_CLEAR(clear_module_state->__pyx_codeobj__123);
  Py_CLEAR(clear_module_state->__pyx_codeobj__126);
  Py_CLEAR(clear_module_state->__pyx_codeobj__128);
  Py_CLEAR(clear_module_state->__pyx_codeobj__131);
  Py_CLEAR(clear_module_state->__pyx_codeobj__133);
  Py_CLEAR(clear_module_state->__pyx_codeobj__134);
  Py_CLEAR(clear_module_state->__pyx_codeobj__135);
  Py_CLEAR(clear_module_state->__pyx_codeobj__136);
  Py_CLEAR(clear_module_state->__pyx_codeobj__138);
  Py_CLEAR(clear_module_state->__pyx_codeobj__139);
  Py_CLEAR(clear_module_state->__pyx_codeobj__140);
  Py_CLEAR(clear_module_state->__pyx_codeobj__141);
  Py_CLEAR(clear_module_state->__pyx_codeobj__143);
  Py_CLEAR(clear_module_state->__pyx_codeobj__145);
  Py_CLEAR(clear_module_state->__pyx_codeobj__146);
  Py_CLEAR(clear_module_state->__pyx_codeobj__147);
  Py_CLEAR(clear_module_state->__pyx_codeobj__149);
  Py_CLEAR(clear_module_state->__pyx_codeobj__150);
  Py_CLEAR(clear_module_state->__pyx_codeobj__151);
  Py_CLEAR(clear_module_state->__pyx_codeobj__152);
  Py_CLEAR(clear_module_state->__pyx_codeobj__153);
  Py_CLEAR(clear_module_state->__pyx_codeobj__154);
  Py_CLEAR(clear_module_state->__pyx_codeobj__155);
  Py_CLEAR(clear_module_state->__pyx_codeobj__156);
  Py_CLEAR(clear_module_state->__pyx_codeobj__157);
  Py_CLEAR(clear_module_state->__pyx_codeobj__158);
  Py_CLEAR(clear_module_state->__pyx_codeobj__159);
  Py_CLEAR(clear_module_state->__pyx_codeobj__160);
  Py_CLEAR(clear_module_state->__pyx_codeobj__162);
  Py_CLEAR(clear_module_state->__pyx_codeobj__164);
  Py_CLEAR(clear_module_state->__pyx_codeobj__166);
  Py_CLEAR(clear_module_state->__pyx_codeobj__169);
  Py_CLEAR(clear_module_state->__pyx_codeobj__170);
  Py_CLEAR(clear_module_state->__pyx_codeobj__172);
  Py_CLEAR(clear_module_state->__pyx_codeobj__175);
  Py_CLEAR(clear_module_state->__pyx_codeobj__176);
  Py_CLEAR(clear_module_state->__pyx_codeobj__178);
  Py_CLEAR(clear_module_state->__pyx_codeobj__179);
  Py_CLEAR(clear_module_state->__pyx_codeobj__180);
  Py_CLEAR(clear_module_state->__pyx_codeobj__182);
  Py_CLEAR(clear_module_state->__pyx_codeobj__183);
  Py_CLEAR(clear_module_state->__pyx_codeobj__184);
  Py_CLEAR(clear_module_state->__pyx_codeobj__185);
  Py_CLEAR(clear_module_state->__pyx_codeobj__186);
  Py_CLEAR(clear_module_state->__pyx_codeobj__188);
  Py_CLEAR(clear_module_state->__pyx_codeobj__190);
  Py_CLEAR(clear_module_state->__pyx_codeobj__192);
  Py_CLEAR(clear_module_state->__pyx_codeobj__193);
  Py_CLEAR(clear_module_state->__pyx_codeobj__195);
  Py_CLEAR(clear_module_state->__pyx_codeobj__196);
  Py_CLEAR(clear_module_state->__pyx_codeobj__197);
  Py_CLEAR(clear_module_state->__pyx_codeobj__198);
  Py_CLEAR(clear_module_state->__pyx_codeobj__199);
  Py_CLEAR(clear_module_state->__pyx_codeobj__200);
  Py_CLEAR(clear_module_state->__pyx_codeobj__201);
  Py_CLEAR(clear_module_state->__pyx_codeobj__203);
  Py_CLEAR(clear_module_state->__pyx_codeobj__205);
  Py_CLEAR(clear_module_state->__pyx_codeobj__206);
  Py_CLEAR(clear_module_state->__pyx_codeobj__207);
  Py_CLEAR(clear_module_state->__pyx_codeobj__209);
  Py_CLEAR(clear_module_state->__pyx_codeobj__210);
  Py_CLEAR(clear_module_state->__pyx_codeobj__211);
  Py_CLEAR(clear_module_state->__pyx_codeobj__213);
  Py_CLEAR(clear_module_state->__pyx_codeobj__214);
  Py_CLEAR(clear_module_state->__pyx_codeobj__216);
  Py_CLEAR(clear_module_state->__pyx_codeobj__219);
  Py_CLEAR(clear_module_state->__pyx_codeobj__221);
  Py_CLEAR(clear_module_state->__pyx_codeobj__222);
  Py_CLEAR(clear_module_state->__pyx_codeobj__223);
  Py_CLEAR(clear_module_state->__pyx_codeobj__224);
  Py_CLEAR(clear_module_state->__pyx_codeobj__225);
  Py_CLEAR(clear_module_state->__pyx_codeobj__227);
  Py_CLEAR(clear_module_state->__pyx_codeobj__229);
  Py_CLEAR(clear_module_state->__pyx_codeobj__231);
  Py_CLEAR(clear_module_state->__pyx_codeobj__233);
  Py_CLEAR(clear_module_state->__pyx_codeobj__234);
  Py_CLEAR(clear_module_state->__pyx_codeobj__235);
  Py_CLEAR(clear_module_state->__pyx_codeobj__236);
  Py_CLEAR(clear_module_state->__pyx_codeobj__237);
  Py_CLEAR(clear_module_state->__pyx_codeobj__238);
  Py_CLEAR(clear_module_state->__pyx_codeobj__239);
  Py_CLEAR(clear_module_state->__pyx_codeobj__240);
  Py_CLEAR(clear_module_state->__pyx_codeobj__241);
  Py_CLEAR(clear_module_state->__pyx_codeobj__242);
  Py_CLEAR(clear_module_state->__pyx_codeobj__243);
  Py_CLEAR(clear_module_state->__pyx_codeobj__244);
  Py_CLEAR(clear_module_state->__pyx_codeobj__245);
  Py_CLEAR(clear_module_state->__pyx_codeobj__246);
  Py_CLEAR(clear_module_state->__pyx_codeobj__247);
  Py_CLEAR(clear_module_state->__pyx_codeobj__248);
  Py_CLEAR(clear_module_state->__pyx_codeobj__249);
  Py_CLEAR(clear_module_state->__pyx_codeobj__250);
  Py_CLEAR(clear_module_state->__pyx_codeobj__251);
  Py_CLEAR(clear_module_state->__pyx_codeobj__252);
  Py_CLEAR(clear_module_state->__pyx_codeobj__253);
  Py_CLEAR(clear_module_state->__pyx_codeobj__254);
  Py_CLEAR(clear_module_state->__pyx_codeobj__255);
  Py_CLEAR(clear_module_state->__pyx_codeobj__256);
  Py_CLEAR(clear_module_state->__pyx_codeobj__257);
  Py_CLEAR(clear_module_state->__pyx_codeobj__258);
  Py_CLEAR(clear_module_state->__pyx_codeobj__259);
  Py_CLEAR(clear_module_state->__pyx_codeobj__260);
  Py_CLEAR(clear_module_state->__pyx_codeobj__261);
  Py_CLEAR(clear_module_state->__pyx_codeobj__262);
  Py_CLEAR(clear_module_state->__pyx_codeobj__263);
  Py_CLEAR(clear_module_state->__pyx_codeobj__264);
  Py_CLEAR(clear_module_state->__pyx_codeobj__265);
  Py_CLEAR(clear_module_state->__pyx_codeobj__266);
  Py_CLEAR(clear_module_state->__pyx_codeobj__267);
  Py_CLEAR(clear_module_state->__pyx_codeobj__268);
  Py_CLEAR(clear_module_state->__pyx_codeobj__269);
  Py_CLEAR(clear_module_state->__pyx_codeobj__270);
  Py_CLEAR(clear_module_state->__pyx_codeobj__271);
  Py_CLEAR(clear_module_state->__pyx_codeobj__272);
  Py_CLEAR(clear_module_state->__pyx_codeobj__273);
  Py_CLEAR(clear_module_state->__pyx_codeobj__274);
  Py_CLEAR(clear_module_state->__pyx_codeobj__275);
  Py_CLEAR(clear_module_state->__pyx_codeobj__276);
  Py_CLEAR(clear_module_state->__pyx_codeobj__277);
  Py_CLEAR(clear_module_state->__pyx_codeobj__278);
  Py_CLEAR(clear_module_state->__pyx_codeobj__279);
  Py_CLEAR(clear_module_state->__pyx_codeobj__280);
  Py_CLEAR(clear_module_state->__pyx_codeobj__281);
  Py_CLEAR(clear_module_state->__pyx_codeobj__282);
  Py_CLEAR(clear_module_state->__pyx_codeobj__283);
  Py_CLEAR(clear_module_state->__pyx_codeobj__284);
  Py_CLEAR(clear_module_state->__pyx_codeobj__285);
  Py_CLEAR(clear_module_state->__pyx_codeobj__286);
  Py_CLEAR(clear_module_state->__pyx_codeobj__287);
  Py_CLEAR(clear_module_state->__pyx_codeobj__289);
  Py_CLEAR(clear_module_state->__pyx_codeobj__290);
  Py_CLEAR(clear_module_state->__pyx_codeobj__291);
  Py_CLEAR(clear_module_state->__pyx_codeobj__292);
  Py_CLEAR(clear_module_state->__pyx_codeobj__293);
  Py_CLEAR(clear_module_state->__pyx_codeobj__294);
  Py_CLEAR(clear_module_state->__pyx_codeobj__295);
  Py_CLEAR(clear_module_state->__pyx_codeobj__296);
  Py_CLEAR(clear_module_state->__pyx_codeobj__297);
  Py_CLEAR(clear_module_state->__pyx_codeobj__298);
  Py_CLEAR(clear_module_state->__pyx_codeobj__299);
  return 0;
}
#endif
/* #### Code section: module_state_traverse ### */
#if CYTHON_USE_MODULE_STATE
static int __pyx_m_traverse(PyObject *m, visitproc visit, void *arg) {
  __pyx_mstate *traverse_module_state = __pyx_mstate(m);
  if (!traverse_module_state) return 0;
  Py_VISIT(traverse_module_state->__pyx_d);
  Py_VISIT(traverse_module_state->__pyx_b);
  Py_VISIT(traverse_module_state->__pyx_cython_runtime);
  Py_VISIT(traverse_module_state->__pyx_empty_tuple);
  Py_VISIT(traverse_module_state->__pyx_empty_bytes);
  Py_VISIT(traverse_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_VISIT(traverse_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_VISIT(traverse_module_state->__pyx_FusedFunctionType);
  #endif
  Py_VISIT(traverse_module_state->__pyx_ptype_7cpython_4type_type);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_dtype);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_flatiter);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_broadcast);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_ndarray);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_generic);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_number);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_integer);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_signedinteger);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_unsignedinteger);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_inexact);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_floating);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_complexfloating);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_flexible);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_character);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_ufunc);
  Py_VISIT(traverse_module_state->__pyx_ptype_5miolo_mioloObject);
  Py_VISIT(traverse_module_state->__pyx_type_5miolo_mioloObject);
  Py_VISIT(traverse_module_state->__pyx_ptype_5miolo_Matrix);
  Py_VISIT(traverse_module_state->__pyx_type_5miolo_Matrix);
  Py_VISIT(traverse_module_state->__pyx_ptype_5miolo_Graph);
  Py_VISIT(traverse_module_state->__pyx_type_5miolo_Graph);
  Py_VISIT(traverse_module_state->__pyx_ptype_5miolo_Digraph);
  Py_VISIT(traverse_module_state->__pyx_type_5miolo_Digraph);
  Py_VISIT(traverse_module_state->__pyx_ptype_5miolo_Diagonal);
  Py_VISIT(traverse_module_state->__pyx_type_5miolo_Diagonal);
  Py_VISIT(traverse_module_state->__pyx_ptype_5miolo_Manifold);
  Py_VISIT(traverse_module_state->__pyx_type_5miolo_Manifold);
  Py_VISIT(traverse_module_state->__pyx_ptype_5miolo_Euclidean);
  Py_VISIT(traverse_module_state->__pyx_type_5miolo_Euclidean);
  Py_VISIT(traverse_module_state->__pyx_ptype_5miolo_Sphere);
  Py_VISIT(traverse_module_state->__pyx_type_5miolo_Sphere);
  Py_VISIT(traverse_module_state->__pyx_ptype_5miolo_Poincare);
  Py_VISIT(traverse_module_state->__pyx_type_5miolo_Poincare);
  Py_VISIT(traverse_module_state->__pyx_ptype_5miolo_Lorentz);
  Py_VISIT(traverse_module_state->__pyx_type_5miolo_Lorentz);
  Py_VISIT(traverse_module_state->__pyx_ptype_5miolo_ufunction);
  Py_VISIT(traverse_module_state->__pyx_type_5miolo_ufunction);
  Py_VISIT(traverse_module_state->__pyx_ptype_5miolo_sin);
  Py_VISIT(traverse_module_state->__pyx_type_5miolo_sin);
  Py_VISIT(traverse_module_state->__pyx_ptype_5miolo_cos);
  Py_VISIT(traverse_module_state->__pyx_type_5miolo_cos);
  Py_VISIT(traverse_module_state->__pyx_ptype_5miolo_tan);
  Py_VISIT(traverse_module_state->__pyx_type_5miolo_tan);
  Py_VISIT(traverse_module_state->__pyx_ptype_5miolo_asin);
  Py_VISIT(traverse_module_state->__pyx_type_5miolo_asin);
  Py_VISIT(traverse_module_state->__pyx_ptype_5miolo_acos);
  Py_VISIT(traverse_module_state->__pyx_type_5miolo_acos);
  Py_VISIT(traverse_module_state->__pyx_ptype_5miolo_atan);
  Py_VISIT(traverse_module_state->__pyx_type_5miolo_atan);
  Py_VISIT(traverse_module_state->__pyx_ptype_5miolo_cosh);
  Py_VISIT(traverse_module_state->__pyx_type_5miolo_cosh);
  Py_VISIT(traverse_module_state->__pyx_ptype_5miolo_sinh);
  Py_VISIT(traverse_module_state->__pyx_type_5miolo_sinh);
  Py_VISIT(traverse_module_state->__pyx_ptype_5miolo_tanh);
  Py_VISIT(traverse_module_state->__pyx_type_5miolo_tanh);
  Py_VISIT(traverse_module_state->__pyx_ptype_5miolo_acosh);
  Py_VISIT(traverse_module_state->__pyx_type_5miolo_acosh);
  Py_VISIT(traverse_module_state->__pyx_ptype_5miolo_asinh);
  Py_VISIT(traverse_module_state->__pyx_type_5miolo_asinh);
  Py_VISIT(traverse_module_state->__pyx_ptype_5miolo_atanh);
  Py_VISIT(traverse_module_state->__pyx_type_5miolo_atanh);
  Py_VISIT(traverse_module_state->__pyx_ptype_5miolo_exp);
  Py_VISIT(traverse_module_state->__pyx_type_5miolo_exp);
  Py_VISIT(traverse_module_state->__pyx_ptype_5miolo_log);
  Py_VISIT(traverse_module_state->__pyx_type_5miolo_log);
  Py_VISIT(traverse_module_state->__pyx_ptype_5miolo_fabs);
  Py_VISIT(traverse_module_state->__pyx_type_5miolo_fabs);
  Py_VISIT(traverse_module_state->__pyx_ptype_5miolo_sqrt);
  Py_VISIT(traverse_module_state->__pyx_type_5miolo_sqrt);
  Py_VISIT(traverse_module_state->__pyx_ptype_5miolo_recp);
  Py_VISIT(traverse_module_state->__pyx_type_5miolo_recp);
  Py_VISIT(traverse_module_state->__pyx_ptype_5miolo_classSeparation);
  Py_VISIT(traverse_module_state->__pyx_type_5miolo_classSeparation);
  Py_VISIT(traverse_module_state->__pyx_ptype_5miolo_weightedSquareDistance);
  Py_VISIT(traverse_module_state->__pyx_type_5miolo_weightedSquareDistance);
  Py_VISIT(traverse_module_state->__pyx_ptype_5miolo_weightedDotProduct);
  Py_VISIT(traverse_module_state->__pyx_type_5miolo_weightedDotProduct);
  Py_VISIT(traverse_module_state->__pyx_ptype_5miolo_pottsEnergy);
  Py_VISIT(traverse_module_state->__pyx_type_5miolo_pottsEnergy);
  Py_VISIT(traverse_module_state->__pyx_array_type);
  Py_VISIT(traverse_module_state->__pyx_type___pyx_array);
  Py_VISIT(traverse_module_state->__pyx_MemviewEnum_type);
  Py_VISIT(traverse_module_state->__pyx_type___pyx_MemviewEnum);
  Py_VISIT(traverse_module_state->__pyx_memoryview_type);
  Py_VISIT(traverse_module_state->__pyx_type___pyx_memoryview);
  Py_VISIT(traverse_module_state->__pyx_memoryviewslice_type);
  Py_VISIT(traverse_module_state->__pyx_type___pyx_memoryviewslice);
  Py_VISIT(traverse_module_state->__pyx_kp_u_);
  Py_VISIT(traverse_module_state->__pyx_n_s_A);
  Py_VISIT(traverse_module_state->__pyx_n_s_ASCII);
  Py_VISIT(traverse_module_state->__pyx_kp_s_A_and_B_must_have_same_ctype);
  Py_VISIT(traverse_module_state->__pyx_kp_s_A_and_B_must_have_same_number_of);
  Py_VISIT(traverse_module_state->__pyx_kp_s_All_dimensions_preceding_dimensi);
  Py_VISIT(traverse_module_state->__pyx_n_s_AssertionError);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Attempting_division_by_zero);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Avoiding_division_by_zero);
  Py_VISIT(traverse_module_state->__pyx_n_s_B);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Buffer_view_does_not_expose_stri);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Can_only_create_a_buffer_that_is);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Cannot_assign_to_read_only_memor);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Cannot_create_writable_memory_vi);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Cannot_divide_by_zero);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Cannot_index_with_type);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Cannot_transpose_memoryview_with);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Col_range_is_out_of_bounds);
  Py_VISIT(traverse_module_state->__pyx_n_s_Diagonal);
  Py_VISIT(traverse_module_state->__pyx_n_s_Diagonal___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_Diagonal___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Diagonals_must_have_same_ctype);
  Py_VISIT(traverse_module_state->__pyx_n_s_Digraph);
  Py_VISIT(traverse_module_state->__pyx_n_s_Digraph___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_Digraph___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Digraph_and_Matrix_must_share_sa);
  Py_VISIT(traverse_module_state->__pyx_n_s_Digraph_connect);
  Py_VISIT(traverse_module_state->__pyx_n_s_Digraph_connectRegular);
  Py_VISIT(traverse_module_state->__pyx_n_s_Digraph_copy);
  Py_VISIT(traverse_module_state->__pyx_n_s_Digraph_gaussianScale);
  Py_VISIT(traverse_module_state->__pyx_n_s_Digraph_normalize);
  Py_VISIT(traverse_module_state->__pyx_n_s_Digraph_sameShape);
  Py_VISIT(traverse_module_state->__pyx_n_s_Digraph_shape);
  Py_VISIT(traverse_module_state->__pyx_n_s_Digraph_symmetrize);
  Py_VISIT(traverse_module_state->__pyx_n_s_Digraph_toGraph);
  Py_VISIT(traverse_module_state->__pyx_n_s_Digraph_transpose);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Digraphs_must_have_same_shapes);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Digraphs_must_share_same_ctype);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Dimension_d_is_not_direct);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Dimension_of_diagonals_must_be_e);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Dist_rows_must_be_equal_to_label);
  Py_VISIT(traverse_module_state->__pyx_n_s_E);
  Py_VISIT(traverse_module_state->__pyx_n_s_Ellipsis);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Empty_shape_tuple_for_cython_arr);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Entries_of_only_exceed_self_rows);
  Py_VISIT(traverse_module_state->__pyx_n_s_Euclidean);
  Py_VISIT(traverse_module_state->__pyx_n_s_Euclidean___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_Euclidean___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_Euclidean_centroidDistance);
  Py_VISIT(traverse_module_state->__pyx_n_s_Euclidean_distance);
  Py_VISIT(traverse_module_state->__pyx_n_s_Euclidean_dot);
  Py_VISIT(traverse_module_state->__pyx_n_s_Euclidean_gaussianNormalize);
  Py_VISIT(traverse_module_state->__pyx_n_s_Euclidean_kmpp);
  Py_VISIT(traverse_module_state->__pyx_n_s_Euclidean_mean);
  Py_VISIT(traverse_module_state->__pyx_n_s_Euclidean_minmaxNormalize);
  Py_VISIT(traverse_module_state->__pyx_n_s_Euclidean_rowNormalize);
  Py_VISIT(traverse_module_state->__pyx_n_s_Euclidean_variance);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Failed_to_allocate_memory);
  Py_VISIT(traverse_module_state->__pyx_n_s_G);
  Py_VISIT(traverse_module_state->__pyx_n_s_Graph);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Graph_Matrix_operations_require);
  Py_VISIT(traverse_module_state->__pyx_n_s_Graph___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_Graph___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Graph_and_Matrix_must_have_same);
  Py_VISIT(traverse_module_state->__pyx_n_s_Graph_degree);
  Py_VISIT(traverse_module_state->__pyx_n_s_Graph_gaussianScale);
  Py_VISIT(traverse_module_state->__pyx_n_s_Graph_isolatedNodes);
  Py_VISIT(traverse_module_state->__pyx_n_s_Graph_laplacian);
  Py_VISIT(traverse_module_state->__pyx_n_s_Graph_max);
  Py_VISIT(traverse_module_state->__pyx_n_s_Graph_min);
  Py_VISIT(traverse_module_state->__pyx_n_s_Graph_normalize);
  Py_VISIT(traverse_module_state->__pyx_n_s_Graph_print);
  Py_VISIT(traverse_module_state->__pyx_n_s_Graph_propagate);
  Py_VISIT(traverse_module_state->__pyx_n_s_Graph_toDigraph);
  Py_VISIT(traverse_module_state->__pyx_n_s_Graph_toMatrix);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Graphs_must_have_same_number_of);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Graphs_must_share_same_ctype);
  Py_VISIT(traverse_module_state->__pyx_n_s_H);
  Py_VISIT(traverse_module_state->__pyx_n_s_ImportError);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Incompatible_checksums_0x_x_vs_0);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_2);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Incompatible_shape_for_Graph_dat);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Incompatible_shape_for_Hadamard);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Incompatible_shape_for_Matrix_ad);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Incompatible_shape_for_Matrix_pr);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Incompatible_shape_for_Matrix_su);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Incompatible_shape_for_matrix_mu);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Incompatible_shape_for_miolo_Mat);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Incompatible_shape_for_product);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Incompatible_shapes_for_addition);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Incompatible_shapes_for_subtract);
  Py_VISIT(traverse_module_state->__pyx_n_s_IndexError);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Index_is_out_of_bounds);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Index_k_is_out_of_bounds);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Index_out_of_bounds_axis_d);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Indirect_dimensions_not_supporte);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Invalid_mode_expected_c_or_fortr);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Invalid_new_shape);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Invalid_shape_for_at);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Invalid_shape_in_axis);
  Py_VISIT(traverse_module_state->__pyx_n_s_Lorentz);
  Py_VISIT(traverse_module_state->__pyx_n_s_Lorentz___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_Lorentz___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_Lorentz_centroidDistance);
  Py_VISIT(traverse_module_state->__pyx_n_s_Lorentz_dot);
  Py_VISIT(traverse_module_state->__pyx_n_s_Lorentz_exp);
  Py_VISIT(traverse_module_state->__pyx_n_s_Lorentz_fromEuclidean);
  Py_VISIT(traverse_module_state->__pyx_n_s_Lorentz_isIn);
  Py_VISIT(traverse_module_state->__pyx_n_s_Lorentz_lorentzDistance);
  Py_VISIT(traverse_module_state->__pyx_n_s_Lorentz_mean);
  Py_VISIT(traverse_module_state->__pyx_n_s_Lorentz_metricDistance);
  Py_VISIT(traverse_module_state->__pyx_n_s_Lorentz_tangentProjection);
  Py_VISIT(traverse_module_state->__pyx_n_s_Lorentz_toEuclidean);
  Py_VISIT(traverse_module_state->__pyx_n_s_M);
  Py_VISIT(traverse_module_state->__pyx_n_s_MST);
  Py_VISIT(traverse_module_state->__pyx_kp_s_M_and_Weights_must_have_same_cty);
  Py_VISIT(traverse_module_state->__pyx_kp_s_M_and_Weights_must_have_same_num);
  Py_VISIT(traverse_module_state->__pyx_kp_s_M_and_center_must_have_same_ctyp);
  Py_VISIT(traverse_module_state->__pyx_kp_s_M_cols_must_be_equal_to_center_c);
  Py_VISIT(traverse_module_state->__pyx_n_s_Manifold);
  Py_VISIT(traverse_module_state->__pyx_n_s_Manifold___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_Manifold___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Matrices_must_have_same_ctype);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Matrices_must_have_same_shape);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Matrices_must_have_the_same_ctyp);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Matrices_must_share_same_ctype);
  Py_VISIT(traverse_module_state->__pyx_n_s_Matrix);
  Py_VISIT(traverse_module_state->__pyx_n_s_Matrix___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_Matrix___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_Matrix_argkmax);
  Py_VISIT(traverse_module_state->__pyx_n_s_Matrix_argkmin);
  Py_VISIT(traverse_module_state->__pyx_n_s_Matrix_argmax);
  Py_VISIT(traverse_module_state->__pyx_n_s_Matrix_argmin);
  Py_VISIT(traverse_module_state->__pyx_n_s_Matrix_copy);
  Py_VISIT(traverse_module_state->__pyx_n_s_Matrix_cut);
  Py_VISIT(traverse_module_state->__pyx_n_s_Matrix_flatten);
  Py_VISIT(traverse_module_state->__pyx_n_s_Matrix_max);
  Py_VISIT(traverse_module_state->__pyx_n_s_Matrix_min);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Matrix_must_be_square);
  Py_VISIT(traverse_module_state->__pyx_n_s_Matrix_normalize);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Matrix_operations_require_same_c);
  Py_VISIT(traverse_module_state->__pyx_n_s_Matrix_partition);
  Py_VISIT(traverse_module_state->__pyx_n_s_Matrix_print);
  Py_VISIT(traverse_module_state->__pyx_n_s_Matrix_reshape);
  Py_VISIT(traverse_module_state->__pyx_n_s_Matrix_rowDistance);
  Py_VISIT(traverse_module_state->__pyx_n_s_Matrix_sparsifyKNN);
  Py_VISIT(traverse_module_state->__pyx_n_s_Matrix_sparsifyThreshold);
  Py_VISIT(traverse_module_state->__pyx_n_s_Matrix_sumAll);
  Py_VISIT(traverse_module_state->__pyx_n_s_Matrix_trace);
  Py_VISIT(traverse_module_state->__pyx_n_s_Matrix_transpose);
  Py_VISIT(traverse_module_state->__pyx_n_s_MemoryError);
  Py_VISIT(traverse_module_state->__pyx_kp_s_MemoryView_of_r_at_0x_x);
  Py_VISIT(traverse_module_state->__pyx_kp_s_MemoryView_of_r_object);
  Py_VISIT(traverse_module_state->__pyx_n_s_N);
  Py_VISIT(traverse_module_state->__pyx_n_s_Neighbors);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Neighbors_and_Weights_must_have);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Neighbors_must_have_int_ctype);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Number_of_Matrix_rows_must_be_eq);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Number_of_cols_must_be_greater_t);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Number_of_nodes_must_be_equal_to);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Number_of_rows_must_be_equal_to);
  Py_VISIT(traverse_module_state->__pyx_n_b_O);
  Py_VISIT(traverse_module_state->__pyx_n_s_O);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Objects_must_share_same_ctype);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Only_square_matrices_are_allowed);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Only_square_matrices_can_be_spar);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Only_square_weight_matrices_are);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Out_of_bounds_on_buffer_access_a);
  Py_VISIT(traverse_module_state->__pyx_n_s_PickleError);
  Py_VISIT(traverse_module_state->__pyx_n_s_Poincare);
  Py_VISIT(traverse_module_state->__pyx_n_s_Poincare___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_Poincare___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_Poincare_add);
  Py_VISIT(traverse_module_state->__pyx_n_s_Poincare_centroidDistance);
  Py_VISIT(traverse_module_state->__pyx_n_s_Poincare_distance);
  Py_VISIT(traverse_module_state->__pyx_n_s_Poincare_exp);
  Py_VISIT(traverse_module_state->__pyx_n_s_Poincare_hyperbolicity);
  Py_VISIT(traverse_module_state->__pyx_n_s_Poincare_isIn);
  Py_VISIT(traverse_module_state->__pyx_n_s_Poincare_log);
  Py_VISIT(traverse_module_state->__pyx_n_s_Poincare_mean);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Row_range_is_out_of_bounds);
  Py_VISIT(traverse_module_state->__pyx_n_s_Sequence);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Size_of_labels_must_be_equal_to);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Size_of_labels_must_be_equal_to_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_Sphere);
  Py_VISIT(traverse_module_state->__pyx_n_s_Sphere___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_Sphere___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_Sphere_centroidDistance);
  Py_VISIT(traverse_module_state->__pyx_n_s_Sphere_coordinateReady);
  Py_VISIT(traverse_module_state->__pyx_n_s_Sphere_distance);
  Py_VISIT(traverse_module_state->__pyx_n_s_Sphere_exp);
  Py_VISIT(traverse_module_state->__pyx_n_s_Sphere_fromEuclidean);
  Py_VISIT(traverse_module_state->__pyx_n_s_Sphere_isIn);
  Py_VISIT(traverse_module_state->__pyx_n_s_Sphere_isTangent);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Sphere_radius_must_be_greater_th);
  Py_VISIT(traverse_module_state->__pyx_n_s_Sphere_stereographicProjection);
  Py_VISIT(traverse_module_state->__pyx_n_s_Sphere_toEuclidean);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Step_may_not_be_zero_axis_d);
  Py_VISIT(traverse_module_state->__pyx_n_s_Threshold);
  Py_VISIT(traverse_module_state->__pyx_n_s_TypeError);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Unable_to_convert_item_to_object);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Unknown_ctype);
  Py_VISIT(traverse_module_state->__pyx_n_s_ValueError);
  Py_VISIT(traverse_module_state->__pyx_n_s_View_MemoryView);
  Py_VISIT(traverse_module_state->__pyx_n_s_Weights);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Weights_and_self_must_have_same);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Weights_must_be_a_square_Matrix);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Weights_nodes_must_be_equal_to_M);
  Py_VISIT(traverse_module_state->__pyx_n_s_X);
  Py_VISIT(traverse_module_state->__pyx_kp_u__2);
  Py_VISIT(traverse_module_state->__pyx_n_s__3);
  Py_VISIT(traverse_module_state->__pyx_n_s__300);
  Py_VISIT(traverse_module_state->__pyx_kp_u__6);
  Py_VISIT(traverse_module_state->__pyx_kp_u__7);
  Py_VISIT(traverse_module_state->__pyx_n_s_abc);
  Py_VISIT(traverse_module_state->__pyx_n_s_acos);
  Py_VISIT(traverse_module_state->__pyx_n_s_acos___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_acos___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_acosh);
  Py_VISIT(traverse_module_state->__pyx_n_s_acosh___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_acosh___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_add);
  Py_VISIT(traverse_module_state->__pyx_n_s_allocate_buffer);
  Py_VISIT(traverse_module_state->__pyx_kp_u_and);
  Py_VISIT(traverse_module_state->__pyx_n_s_argkmax);
  Py_VISIT(traverse_module_state->__pyx_n_s_argkmin);
  Py_VISIT(traverse_module_state->__pyx_n_s_argmax);
  Py_VISIT(traverse_module_state->__pyx_n_s_argmin);
  Py_VISIT(traverse_module_state->__pyx_n_s_ashape);
  Py_VISIT(traverse_module_state->__pyx_n_s_asin);
  Py_VISIT(traverse_module_state->__pyx_n_s_asin___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_asin___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_asinh);
  Py_VISIT(traverse_module_state->__pyx_n_s_asinh___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_asinh___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_asyncio_coroutines);
  Py_VISIT(traverse_module_state->__pyx_n_s_at);
  Py_VISIT(traverse_module_state->__pyx_kp_s_at_and_M_must_have_same_ctype);
  Py_VISIT(traverse_module_state->__pyx_kp_s_at_and_M_must_have_same_number_o);
  Py_VISIT(traverse_module_state->__pyx_kp_s_at_and_M_must_have_same_number_o_2);
  Py_VISIT(traverse_module_state->__pyx_kp_s_at_and_M_must_have_same_shape);
  Py_VISIT(traverse_module_state->__pyx_kp_s_at_and_tangent_must_have_same_nu);
  Py_VISIT(traverse_module_state->__pyx_kp_s_at_and_tanget_must_have_same_cty);
  Py_VISIT(traverse_module_state->__pyx_n_s_atan);
  Py_VISIT(traverse_module_state->__pyx_n_s_atan___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_atan___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_atanh);
  Py_VISIT(traverse_module_state->__pyx_n_s_atanh___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_atanh___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_aux);
  Py_VISIT(traverse_module_state->__pyx_n_s_azimuth);
  Py_VISIT(traverse_module_state->__pyx_kp_s_azimuth_must_be_smaller_than_M_c);
  Py_VISIT(traverse_module_state->__pyx_n_s_base);
  Py_VISIT(traverse_module_state->__pyx_n_s_beta);
  Py_VISIT(traverse_module_state->__pyx_n_s_c);
  Py_VISIT(traverse_module_state->__pyx_n_u_c);
  Py_VISIT(traverse_module_state->__pyx_n_s_center);
  Py_VISIT(traverse_module_state->__pyx_n_s_centroidDistance);
  Py_VISIT(traverse_module_state->__pyx_n_s_clamped);
  Py_VISIT(traverse_module_state->__pyx_kp_s_clamped_must_have_length_equal_t);
  Py_VISIT(traverse_module_state->__pyx_n_s_class);
  Py_VISIT(traverse_module_state->__pyx_n_s_classSeparation);
  Py_VISIT(traverse_module_state->__pyx_n_s_classSeparation___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_classSeparation___setstate_cytho);
  Py_VISIT(traverse_module_state->__pyx_n_s_classSeparation_extra);
  Py_VISIT(traverse_module_state->__pyx_n_s_classSeparation_intra);
  Py_VISIT(traverse_module_state->__pyx_n_s_class_getitem);
  Py_VISIT(traverse_module_state->__pyx_n_s_cline_in_traceback);
  Py_VISIT(traverse_module_state->__pyx_n_s_colMax);
  Py_VISIT(traverse_module_state->__pyx_n_s_colMin);
  Py_VISIT(traverse_module_state->__pyx_n_s_collections);
  Py_VISIT(traverse_module_state->__pyx_kp_s_collections_abc);
  Py_VISIT(traverse_module_state->__pyx_n_s_cols);
  Py_VISIT(traverse_module_state->__pyx_n_s_concat);
  Py_VISIT(traverse_module_state->__pyx_n_s_connect);
  Py_VISIT(traverse_module_state->__pyx_n_s_connectRegular);
  Py_VISIT(traverse_module_state->__pyx_kp_s_contiguous_and_direct);
  Py_VISIT(traverse_module_state->__pyx_kp_s_contiguous_and_indirect);
  Py_VISIT(traverse_module_state->__pyx_n_s_coordinateReady);
  Py_VISIT(traverse_module_state->__pyx_n_s_copy);
  Py_VISIT(traverse_module_state->__pyx_n_s_cos);
  Py_VISIT(traverse_module_state->__pyx_n_s_cos___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_cos___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_cosh);
  Py_VISIT(traverse_module_state->__pyx_n_s_cosh___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_cosh___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_count);
  Py_VISIT(traverse_module_state->__pyx_n_s_ctype);
  Py_VISIT(traverse_module_state->__pyx_n_s_ctypes);
  Py_VISIT(traverse_module_state->__pyx_n_s_curvature);
  Py_VISIT(traverse_module_state->__pyx_n_s_cut);
  Py_VISIT(traverse_module_state->__pyx_n_s_degree);
  Py_VISIT(traverse_module_state->__pyx_n_s_dict);
  Py_VISIT(traverse_module_state->__pyx_n_s_dict_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_dim);
  Py_VISIT(traverse_module_state->__pyx_kp_u_disable);
  Py_VISIT(traverse_module_state->__pyx_n_s_distance);
  Py_VISIT(traverse_module_state->__pyx_n_s_dot);
  Py_VISIT(traverse_module_state->__pyx_n_s_double);
  Py_VISIT(traverse_module_state->__pyx_n_s_dtype);
  Py_VISIT(traverse_module_state->__pyx_n_s_dtype_is_object);
  Py_VISIT(traverse_module_state->__pyx_n_s_edges);
  Py_VISIT(traverse_module_state->__pyx_n_s_empty);
  Py_VISIT(traverse_module_state->__pyx_kp_u_enable);
  Py_VISIT(traverse_module_state->__pyx_n_s_encode);
  Py_VISIT(traverse_module_state->__pyx_n_s_end);
  Py_VISIT(traverse_module_state->__pyx_n_s_enumerate);
  Py_VISIT(traverse_module_state->__pyx_n_s_error);
  Py_VISIT(traverse_module_state->__pyx_n_s_exp);
  Py_VISIT(traverse_module_state->__pyx_n_s_exp___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_exp___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_extra);
  Py_VISIT(traverse_module_state->__pyx_n_s_fabs);
  Py_VISIT(traverse_module_state->__pyx_n_s_fabs___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_fabs___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_filename);
  Py_VISIT(traverse_module_state->__pyx_n_s_flags);
  Py_VISIT(traverse_module_state->__pyx_n_s_flatten);
  Py_VISIT(traverse_module_state->__pyx_n_s_float);
  Py_VISIT(traverse_module_state->__pyx_n_s_format);
  Py_VISIT(traverse_module_state->__pyx_n_s_fortran);
  Py_VISIT(traverse_module_state->__pyx_n_u_fortran);
  Py_VISIT(traverse_module_state->__pyx_n_s_fromEuclidean);
  Py_VISIT(traverse_module_state->__pyx_n_s_g);
  Py_VISIT(traverse_module_state->__pyx_n_s_gaussianNormalize);
  Py_VISIT(traverse_module_state->__pyx_n_s_gaussianScale);
  Py_VISIT(traverse_module_state->__pyx_kp_u_gc);
  Py_VISIT(traverse_module_state->__pyx_n_s_getstate);
  Py_VISIT(traverse_module_state->__pyx_n_s_global_ctype);
  Py_VISIT(traverse_module_state->__pyx_kp_u_got);
  Py_VISIT(traverse_module_state->__pyx_kp_u_got_differing_extents_in_dimensi);
  Py_VISIT(traverse_module_state->__pyx_n_s_gshape);
  Py_VISIT(traverse_module_state->__pyx_n_s_hadamard);
  Py_VISIT(traverse_module_state->__pyx_n_s_hyperbolicity);
  Py_VISIT(traverse_module_state->__pyx_n_s_i);
  Py_VISIT(traverse_module_state->__pyx_kp_s_i_is_not_a_valid_index_for_Digra);
  Py_VISIT(traverse_module_state->__pyx_n_s_id);
  Py_VISIT(traverse_module_state->__pyx_n_s_import);
  Py_VISIT(traverse_module_state->__pyx_n_s_index);
  Py_VISIT(traverse_module_state->__pyx_n_s_init);
  Py_VISIT(traverse_module_state->__pyx_n_s_init_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_initializing);
  Py_VISIT(traverse_module_state->__pyx_n_s_int);
  Py_VISIT(traverse_module_state->__pyx_n_s_intra);
  Py_VISIT(traverse_module_state->__pyx_n_s_isDiagonal);
  Py_VISIT(traverse_module_state->__pyx_n_s_isDigraph);
  Py_VISIT(traverse_module_state->__pyx_n_s_isGraph);
  Py_VISIT(traverse_module_state->__pyx_n_s_isIn);
  Py_VISIT(traverse_module_state->__pyx_n_s_isMatrix);
  Py_VISIT(traverse_module_state->__pyx_n_s_isTangent);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_coroutine);
  Py_VISIT(traverse_module_state->__pyx_kp_u_isenabled);
  Py_VISIT(traverse_module_state->__pyx_n_s_isolatedNodes);
  Py_VISIT(traverse_module_state->__pyx_n_s_itemsize);
  Py_VISIT(traverse_module_state->__pyx_kp_s_itemsize_0_for_cython_array);
  Py_VISIT(traverse_module_state->__pyx_n_s_j);
  Py_VISIT(traverse_module_state->__pyx_kp_s_j_is_not_a_valid_index_for_Digra);
  Py_VISIT(traverse_module_state->__pyx_n_s_k);
  Py_VISIT(traverse_module_state->__pyx_n_s_kmpp);
  Py_VISIT(traverse_module_state->__pyx_n_s_labels);
  Py_VISIT(traverse_module_state->__pyx_kp_s_labels_must_have_size_equal_to_s);
  Py_VISIT(traverse_module_state->__pyx_n_s_laplacian);
  Py_VISIT(traverse_module_state->__pyx_n_s_loadtxt);
  Py_VISIT(traverse_module_state->__pyx_n_s_log);
  Py_VISIT(traverse_module_state->__pyx_n_s_log___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_log___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_lorentzDistance);
  Py_VISIT(traverse_module_state->__pyx_n_s_m);
  Py_VISIT(traverse_module_state->__pyx_n_s_main);
  Py_VISIT(traverse_module_state->__pyx_n_s_max);
  Py_VISIT(traverse_module_state->__pyx_n_s_max_0);
  Py_VISIT(traverse_module_state->__pyx_n_s_max_1);
  Py_VISIT(traverse_module_state->__pyx_n_s_mean);
  Py_VISIT(traverse_module_state->__pyx_n_s_memview);
  Py_VISIT(traverse_module_state->__pyx_n_s_metricDistance);
  Py_VISIT(traverse_module_state->__pyx_n_s_min);
  Py_VISIT(traverse_module_state->__pyx_n_s_minmaxNormalize);
  Py_VISIT(traverse_module_state->__pyx_n_s_miolo);
  Py_VISIT(traverse_module_state->__pyx_n_s_mioloObject);
  Py_VISIT(traverse_module_state->__pyx_n_s_mioloObject___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_mioloObject___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_mioloObject_isDiagonal);
  Py_VISIT(traverse_module_state->__pyx_n_s_mioloObject_isDigraph);
  Py_VISIT(traverse_module_state->__pyx_n_s_mioloObject_isGraph);
  Py_VISIT(traverse_module_state->__pyx_n_s_mioloObject_isMatrix);
  Py_VISIT(traverse_module_state->__pyx_kp_s_miololib_pyx);
  Py_VISIT(traverse_module_state->__pyx_n_s_mode);
  Py_VISIT(traverse_module_state->__pyx_n_s_n);
  Py_VISIT(traverse_module_state->__pyx_n_s_name);
  Py_VISIT(traverse_module_state->__pyx_n_s_name_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_ndim);
  Py_VISIT(traverse_module_state->__pyx_n_s_new);
  Py_VISIT(traverse_module_state->__pyx_kp_s_no_default___reduce___due_to_non);
  Py_VISIT(traverse_module_state->__pyx_n_s_nodes);
  Py_VISIT(traverse_module_state->__pyx_n_s_normalize);
  Py_VISIT(traverse_module_state->__pyx_n_s_np);
  Py_VISIT(traverse_module_state->__pyx_n_s_null);
  Py_VISIT(traverse_module_state->__pyx_n_s_numpy);
  Py_VISIT(traverse_module_state->__pyx_kp_s_numpy__core_multiarray_failed_to);
  Py_VISIT(traverse_module_state->__pyx_kp_s_numpy__core_umath_failed_to_impo);
  Py_VISIT(traverse_module_state->__pyx_n_s_obj);
  Py_VISIT(traverse_module_state->__pyx_n_s_only);
  Py_VISIT(traverse_module_state->__pyx_n_s_out);
  Py_VISIT(traverse_module_state->__pyx_n_s_output);
  Py_VISIT(traverse_module_state->__pyx_n_s_pack);
  Py_VISIT(traverse_module_state->__pyx_n_s_partition);
  Py_VISIT(traverse_module_state->__pyx_n_s_pickle);
  Py_VISIT(traverse_module_state->__pyx_n_s_pottsEnergy);
  Py_VISIT(traverse_module_state->__pyx_n_s_pottsEnergy___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_pottsEnergy___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_print);
  Py_VISIT(traverse_module_state->__pyx_n_s_propagate);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_PickleError);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_checksum);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_result);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_state);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_type);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_unpickle_Enum);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_unpickle_Manifold);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_vtable);
  Py_VISIT(traverse_module_state->__pyx_n_s_radius);
  Py_VISIT(traverse_module_state->__pyx_n_s_range);
  Py_VISIT(traverse_module_state->__pyx_n_s_recp);
  Py_VISIT(traverse_module_state->__pyx_n_s_recp___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_recp___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce_ex);
  Py_VISIT(traverse_module_state->__pyx_n_s_register);
  Py_VISIT(traverse_module_state->__pyx_n_s_reshape);
  Py_VISIT(traverse_module_state->__pyx_n_s_rowDistance);
  Py_VISIT(traverse_module_state->__pyx_n_s_rowMax);
  Py_VISIT(traverse_module_state->__pyx_n_s_rowMin);
  Py_VISIT(traverse_module_state->__pyx_n_s_rowNormalize);
  Py_VISIT(traverse_module_state->__pyx_n_s_rows);
  Py_VISIT(traverse_module_state->__pyx_n_s_sameShape);
  Py_VISIT(traverse_module_state->__pyx_n_s_self);
  Py_VISIT(traverse_module_state->__pyx_kp_s_self_diagonalDouble_self_diagona);
  Py_VISIT(traverse_module_state->__pyx_kp_s_self_view_cannot_be_converted_to);
  Py_VISIT(traverse_module_state->__pyx_n_s_setstate);
  Py_VISIT(traverse_module_state->__pyx_n_s_setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_shape);
  Py_VISIT(traverse_module_state->__pyx_n_s_sin);
  Py_VISIT(traverse_module_state->__pyx_n_s_sin___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_sin___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_single);
  Py_VISIT(traverse_module_state->__pyx_n_s_sinh);
  Py_VISIT(traverse_module_state->__pyx_n_s_sinh___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_sinh___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_size);
  Py_VISIT(traverse_module_state->__pyx_n_s_sparsifyKNN);
  Py_VISIT(traverse_module_state->__pyx_n_s_sparsifyThreshold);
  Py_VISIT(traverse_module_state->__pyx_n_s_spec);
  Py_VISIT(traverse_module_state->__pyx_n_s_sqrt);
  Py_VISIT(traverse_module_state->__pyx_n_s_sqrt___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_sqrt___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_start);
  Py_VISIT(traverse_module_state->__pyx_n_s_state);
  Py_VISIT(traverse_module_state->__pyx_n_s_step);
  Py_VISIT(traverse_module_state->__pyx_n_s_stereographicProjection);
  Py_VISIT(traverse_module_state->__pyx_n_s_stop);
  Py_VISIT(traverse_module_state->__pyx_n_s_str_memory);
  Py_VISIT(traverse_module_state->__pyx_kp_s_strided_and_direct);
  Py_VISIT(traverse_module_state->__pyx_kp_s_strided_and_direct_or_indirect);
  Py_VISIT(traverse_module_state->__pyx_kp_s_strided_and_indirect);
  Py_VISIT(traverse_module_state->__pyx_kp_s_stringsource);
  Py_VISIT(traverse_module_state->__pyx_n_s_struct);
  Py_VISIT(traverse_module_state->__pyx_n_s_structure);
  Py_VISIT(traverse_module_state->__pyx_n_s_sumAll);
  Py_VISIT(traverse_module_state->__pyx_n_s_super);
  Py_VISIT(traverse_module_state->__pyx_n_s_symmetrize);
  Py_VISIT(traverse_module_state->__pyx_n_s_sys);
  Py_VISIT(traverse_module_state->__pyx_n_s_tan);
  Py_VISIT(traverse_module_state->__pyx_n_s_tan___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_tan___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_tangent);
  Py_VISIT(traverse_module_state->__pyx_n_s_tangentProjection);
  Py_VISIT(traverse_module_state->__pyx_n_s_tanh);
  Py_VISIT(traverse_module_state->__pyx_n_s_tanh___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_tanh___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_targetLabel);
  Py_VISIT(traverse_module_state->__pyx_n_s_test);
  Py_VISIT(traverse_module_state->__pyx_n_s_toDigraph);
  Py_VISIT(traverse_module_state->__pyx_n_s_toEuclidean);
  Py_VISIT(traverse_module_state->__pyx_n_s_toGraph);
  Py_VISIT(traverse_module_state->__pyx_n_s_toMatrix);
  Py_VISIT(traverse_module_state->__pyx_n_s_tolerance);
  Py_VISIT(traverse_module_state->__pyx_n_s_trace);
  Py_VISIT(traverse_module_state->__pyx_n_s_transpose);
  Py_VISIT(traverse_module_state->__pyx_n_s_txtGraph);
  Py_VISIT(traverse_module_state->__pyx_n_s_txtMatrix);
  Py_VISIT(traverse_module_state->__pyx_n_s_ufunction);
  Py_VISIT(traverse_module_state->__pyx_n_s_ufunction___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_ufunction___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_ulong);
  Py_VISIT(traverse_module_state->__pyx_kp_s_unable_to_allocate_array_data);
  Py_VISIT(traverse_module_state->__pyx_kp_s_unable_to_allocate_shape_and_str);
  Py_VISIT(traverse_module_state->__pyx_n_s_unpack);
  Py_VISIT(traverse_module_state->__pyx_n_s_update);
  Py_VISIT(traverse_module_state->__pyx_n_s_use_setstate);
  Py_VISIT(traverse_module_state->__pyx_n_s_value);
  Py_VISIT(traverse_module_state->__pyx_n_s_variance);
  Py_VISIT(traverse_module_state->__pyx_n_s_version_info);
  Py_VISIT(traverse_module_state->__pyx_n_s_view);
  Py_VISIT(traverse_module_state->__pyx_n_s_weightedDotProduct);
  Py_VISIT(traverse_module_state->__pyx_n_s_weightedDotProduct___reduce_cyth);
  Py_VISIT(traverse_module_state->__pyx_n_s_weightedDotProduct___setstate_cy);
  Py_VISIT(traverse_module_state->__pyx_n_s_weightedSquareDistance);
  Py_VISIT(traverse_module_state->__pyx_n_s_weightedSquareDistance___reduce);
  Py_VISIT(traverse_module_state->__pyx_n_s_weightedSquareDistance___setstat);
  Py_VISIT(traverse_module_state->__pyx_n_s_weights);
  Py_VISIT(traverse_module_state->__pyx_n_s_whole);
  Py_VISIT(traverse_module_state->__pyx_float_1_);
  Py_VISIT(traverse_module_state->__pyx_float_0_001);
  Py_VISIT(traverse_module_state->__pyx_int_0);
  Py_VISIT(traverse_module_state->__pyx_int_1);
  Py_VISIT(traverse_module_state->__pyx_int_2);
  Py_VISIT(traverse_module_state->__pyx_int_3);
  Py_VISIT(traverse_module_state->__pyx_int_112105877);
  Py_VISIT(traverse_module_state->__pyx_int_136983863);
  Py_VISIT(traverse_module_state->__pyx_int_184977713);
  Py_VISIT(traverse_module_state->__pyx_int_222419149);
  Py_VISIT(traverse_module_state->__pyx_int_228825662);
  Py_VISIT(traverse_module_state->__pyx_int_238750788);
  Py_VISIT(traverse_module_state->__pyx_int_neg_1);
  Py_VISIT(traverse_module_state->__pyx_k__11);
  Py_VISIT(traverse_module_state->__pyx_k__15);
  Py_VISIT(traverse_module_state->__pyx_k__33);
  Py_VISIT(traverse_module_state->__pyx_k__36);
  Py_VISIT(traverse_module_state->__pyx_k__45);
  Py_VISIT(traverse_module_state->__pyx_k__57);
  Py_VISIT(traverse_module_state->__pyx_slice__5);
  Py_VISIT(traverse_module_state->__pyx_tuple__4);
  Py_VISIT(traverse_module_state->__pyx_tuple__8);
  Py_VISIT(traverse_module_state->__pyx_tuple__9);
  Py_VISIT(traverse_module_state->__pyx_slice__66);
  Py_VISIT(traverse_module_state->__pyx_tuple__10);
  Py_VISIT(traverse_module_state->__pyx_tuple__12);
  Py_VISIT(traverse_module_state->__pyx_tuple__13);
  Py_VISIT(traverse_module_state->__pyx_tuple__14);
  Py_VISIT(traverse_module_state->__pyx_tuple__16);
  Py_VISIT(traverse_module_state->__pyx_tuple__17);
  Py_VISIT(traverse_module_state->__pyx_tuple__18);
  Py_VISIT(traverse_module_state->__pyx_tuple__19);
  Py_VISIT(traverse_module_state->__pyx_tuple__20);
  Py_VISIT(traverse_module_state->__pyx_tuple__21);
  Py_VISIT(traverse_module_state->__pyx_tuple__22);
  Py_VISIT(traverse_module_state->__pyx_tuple__23);
  Py_VISIT(traverse_module_state->__pyx_tuple__24);
  Py_VISIT(traverse_module_state->__pyx_tuple__25);
  Py_VISIT(traverse_module_state->__pyx_tuple__26);
  Py_VISIT(traverse_module_state->__pyx_tuple__27);
  Py_VISIT(traverse_module_state->__pyx_tuple__28);
  Py_VISIT(traverse_module_state->__pyx_tuple__29);
  Py_VISIT(traverse_module_state->__pyx_tuple__30);
  Py_VISIT(traverse_module_state->__pyx_tuple__31);
  Py_VISIT(traverse_module_state->__pyx_tuple__32);
  Py_VISIT(traverse_module_state->__pyx_tuple__34);
  Py_VISIT(traverse_module_state->__pyx_tuple__35);
  Py_VISIT(traverse_module_state->__pyx_tuple__37);
  Py_VISIT(traverse_module_state->__pyx_tuple__38);
  Py_VISIT(traverse_module_state->__pyx_tuple__39);
  Py_VISIT(traverse_module_state->__pyx_tuple__40);
  Py_VISIT(traverse_module_state->__pyx_tuple__41);
  Py_VISIT(traverse_module_state->__pyx_tuple__42);
  Py_VISIT(traverse_module_state->__pyx_tuple__43);
  Py_VISIT(traverse_module_state->__pyx_tuple__44);
  Py_VISIT(traverse_module_state->__pyx_tuple__46);
  Py_VISIT(traverse_module_state->__pyx_tuple__47);
  Py_VISIT(traverse_module_state->__pyx_tuple__48);
  Py_VISIT(traverse_module_state->__pyx_tuple__49);
  Py_VISIT(traverse_module_state->__pyx_tuple__50);
  Py_VISIT(traverse_module_state->__pyx_tuple__51);
  Py_VISIT(traverse_module_state->__pyx_tuple__52);
  Py_VISIT(traverse_module_state->__pyx_tuple__53);
  Py_VISIT(traverse_module_state->__pyx_tuple__54);
  Py_VISIT(traverse_module_state->__pyx_tuple__55);
  Py_VISIT(traverse_module_state->__pyx_tuple__56);
  Py_VISIT(traverse_module_state->__pyx_tuple__58);
  Py_VISIT(traverse_module_state->__pyx_tuple__59);
  Py_VISIT(traverse_module_state->__pyx_tuple__60);
  Py_VISIT(traverse_module_state->__pyx_tuple__61);
  Py_VISIT(traverse_module_state->__pyx_tuple__62);
  Py_VISIT(traverse_module_state->__pyx_tuple__63);
  Py_VISIT(traverse_module_state->__pyx_tuple__64);
  Py_VISIT(traverse_module_state->__pyx_tuple__65);
  Py_VISIT(traverse_module_state->__pyx_tuple__67);
  Py_VISIT(traverse_module_state->__pyx_tuple__68);
  Py_VISIT(traverse_module_state->__pyx_tuple__69);
  Py_VISIT(traverse_module_state->__pyx_tuple__70);
  Py_VISIT(traverse_module_state->__pyx_tuple__71);
  Py_VISIT(traverse_module_state->__pyx_tuple__72);
  Py_VISIT(traverse_module_state->__pyx_tuple__73);
  Py_VISIT(traverse_module_state->__pyx_tuple__74);
  Py_VISIT(traverse_module_state->__pyx_tuple__75);
  Py_VISIT(traverse_module_state->__pyx_tuple__76);
  Py_VISIT(traverse_module_state->__pyx_tuple__77);
  Py_VISIT(traverse_module_state->__pyx_tuple__78);
  Py_VISIT(traverse_module_state->__pyx_tuple__79);
  Py_VISIT(traverse_module_state->__pyx_tuple__80);
  Py_VISIT(traverse_module_state->__pyx_tuple__81);
  Py_VISIT(traverse_module_state->__pyx_tuple__82);
  Py_VISIT(traverse_module_state->__pyx_tuple__83);
  Py_VISIT(traverse_module_state->__pyx_tuple__84);
  Py_VISIT(traverse_module_state->__pyx_tuple__85);
  Py_VISIT(traverse_module_state->__pyx_tuple__86);
  Py_VISIT(traverse_module_state->__pyx_tuple__87);
  Py_VISIT(traverse_module_state->__pyx_tuple__88);
  Py_VISIT(traverse_module_state->__pyx_tuple__89);
  Py_VISIT(traverse_module_state->__pyx_tuple__90);
  Py_VISIT(traverse_module_state->__pyx_tuple__91);
  Py_VISIT(traverse_module_state->__pyx_tuple__92);
  Py_VISIT(traverse_module_state->__pyx_tuple__93);
  Py_VISIT(traverse_module_state->__pyx_tuple__94);
  Py_VISIT(traverse_module_state->__pyx_tuple__95);
  Py_VISIT(traverse_module_state->__pyx_tuple__96);
  Py_VISIT(traverse_module_state->__pyx_tuple__97);
  Py_VISIT(traverse_module_state->__pyx_tuple__98);
  Py_VISIT(traverse_module_state->__pyx_tuple__100);
  Py_VISIT(traverse_module_state->__pyx_tuple__106);
  Py_VISIT(traverse_module_state->__pyx_tuple__108);
  Py_VISIT(traverse_module_state->__pyx_tuple__111);
  Py_VISIT(traverse_module_state->__pyx_tuple__115);
  Py_VISIT(traverse_module_state->__pyx_tuple__117);
  Py_VISIT(traverse_module_state->__pyx_tuple__120);
  Py_VISIT(traverse_module_state->__pyx_tuple__122);
  Py_VISIT(traverse_module_state->__pyx_tuple__124);
  Py_VISIT(traverse_module_state->__pyx_tuple__125);
  Py_VISIT(traverse_module_state->__pyx_tuple__127);
  Py_VISIT(traverse_module_state->__pyx_tuple__129);
  Py_VISIT(traverse_module_state->__pyx_tuple__130);
  Py_VISIT(traverse_module_state->__pyx_tuple__132);
  Py_VISIT(traverse_module_state->__pyx_tuple__137);
  Py_VISIT(traverse_module_state->__pyx_tuple__142);
  Py_VISIT(traverse_module_state->__pyx_tuple__144);
  Py_VISIT(traverse_module_state->__pyx_tuple__148);
  Py_VISIT(traverse_module_state->__pyx_tuple__161);
  Py_VISIT(traverse_module_state->__pyx_tuple__163);
  Py_VISIT(traverse_module_state->__pyx_tuple__165);
  Py_VISIT(traverse_module_state->__pyx_tuple__167);
  Py_VISIT(traverse_module_state->__pyx_tuple__168);
  Py_VISIT(traverse_module_state->__pyx_tuple__171);
  Py_VISIT(traverse_module_state->__pyx_tuple__173);
  Py_VISIT(traverse_module_state->__pyx_tuple__174);
  Py_VISIT(traverse_module_state->__pyx_tuple__177);
  Py_VISIT(traverse_module_state->__pyx_tuple__181);
  Py_VISIT(traverse_module_state->__pyx_tuple__187);
  Py_VISIT(traverse_module_state->__pyx_tuple__189);
  Py_VISIT(traverse_module_state->__pyx_tuple__191);
  Py_VISIT(traverse_module_state->__pyx_tuple__194);
  Py_VISIT(traverse_module_state->__pyx_tuple__202);
  Py_VISIT(traverse_module_state->__pyx_tuple__204);
  Py_VISIT(traverse_module_state->__pyx_tuple__208);
  Py_VISIT(traverse_module_state->__pyx_tuple__212);
  Py_VISIT(traverse_module_state->__pyx_tuple__215);
  Py_VISIT(traverse_module_state->__pyx_tuple__217);
  Py_VISIT(traverse_module_state->__pyx_tuple__218);
  Py_VISIT(traverse_module_state->__pyx_tuple__220);
  Py_VISIT(traverse_module_state->__pyx_tuple__226);
  Py_VISIT(traverse_module_state->__pyx_tuple__228);
  Py_VISIT(traverse_module_state->__pyx_tuple__230);
  Py_VISIT(traverse_module_state->__pyx_tuple__232);
  Py_VISIT(traverse_module_state->__pyx_tuple__288);
  Py_VISIT(traverse_module_state->__pyx_codeobj__99);
  Py_VISIT(traverse_module_state->__pyx_codeobj__101);
  Py_VISIT(traverse_module_state->__pyx_codeobj__102);
  Py_VISIT(traverse_module_state->__pyx_codeobj__103);
  Py_VISIT(traverse_module_state->__pyx_codeobj__104);
  Py_VISIT(traverse_module_state->__pyx_codeobj__105);
  Py_VISIT(traverse_module_state->__pyx_codeobj__107);
  Py_VISIT(traverse_module_state->__pyx_codeobj__109);
  Py_VISIT(traverse_module_state->__pyx_codeobj__110);
  Py_VISIT(traverse_module_state->__pyx_codeobj__112);
  Py_VISIT(traverse_module_state->__pyx_codeobj__113);
  Py_VISIT(traverse_module_state->__pyx_codeobj__114);
  Py_VISIT(traverse_module_state->__pyx_codeobj__116);
  Py_VISIT(traverse_module_state->__pyx_codeobj__118);
  Py_VISIT(traverse_module_state->__pyx_codeobj__119);
  Py_VISIT(traverse_module_state->__pyx_codeobj__121);
  Py_VISIT(traverse_module_state->__pyx_codeobj__123);
  Py_VISIT(traverse_module_state->__pyx_codeobj__126);
  Py_VISIT(traverse_module_state->__pyx_codeobj__128);
  Py_VISIT(traverse_module_state->__pyx_codeobj__131);
  Py_VISIT(traverse_module_state->__pyx_codeobj__133);
  Py_VISIT(traverse_module_state->__pyx_codeobj__134);
  Py_VISIT(traverse_module_state->__pyx_codeobj__135);
  Py_VISIT(traverse_module_state->__pyx_codeobj__136);
  Py_VISIT(traverse_module_state->__pyx_codeobj__138);
  Py_VISIT(traverse_module_state->__pyx_codeobj__139);
  Py_VISIT(traverse_module_state->__pyx_codeobj__140);
  Py_VISIT(traverse_module_state->__pyx_codeobj__141);
  Py_VISIT(traverse_module_state->__pyx_codeobj__143);
  Py_VISIT(traverse_module_state->__pyx_codeobj__145);
  Py_VISIT(traverse_module_state->__pyx_codeobj__146);
  Py_VISIT(traverse_module_state->__pyx_codeobj__147);
  Py_VISIT(traverse_module_state->__pyx_codeobj__149);
  Py_VISIT(traverse_module_state->__pyx_codeobj__150);
  Py_VISIT(traverse_module_state->__pyx_codeobj__151);
  Py_VISIT(traverse_module_state->__pyx_codeobj__152);
  Py_VISIT(traverse_module_state->__pyx_codeobj__153);
  Py_VISIT(traverse_module_state->__pyx_codeobj__154);
  Py_VISIT(traverse_module_state->__pyx_codeobj__155);
  Py_VISIT(traverse_module_state->__pyx_codeobj__156);
  Py_VISIT(traverse_module_state->__pyx_codeobj__157);
  Py_VISIT(traverse_module_state->__pyx_codeobj__158);
  Py_VISIT(traverse_module_state->__pyx_codeobj__159);
  Py_VISIT(traverse_module_state->__pyx_codeobj__160);
  Py_VISIT(traverse_module_state->__pyx_codeobj__162);
  Py_VISIT(traverse_module_state->__pyx_codeobj__164);
  Py_VISIT(traverse_module_state->__pyx_codeobj__166);
  Py_VISIT(traverse_module_state->__pyx_codeobj__169);
  Py_VISIT(traverse_module_state->__pyx_codeobj__170);
  Py_VISIT(traverse_module_state->__pyx_codeobj__172);
  Py_VISIT(traverse_module_state->__pyx_codeobj__175);
  Py_VISIT(traverse_module_state->__pyx_codeobj__176);
  Py_VISIT(traverse_module_state->__pyx_codeobj__178);
  Py_VISIT(traverse_module_state->__pyx_codeobj__179);
  Py_VISIT(traverse_module_state->__pyx_codeobj__180);
  Py_VISIT(traverse_module_state->__pyx_codeobj__182);
  Py_VISIT(traverse_module_state->__pyx_codeobj__183);
  Py_VISIT(traverse_module_state->__pyx_codeobj__184);
  Py_VISIT(traverse_module_state->__pyx_codeobj__185);
  Py_VISIT(traverse_module_state->__pyx_codeobj__186);
  Py_VISIT(traverse_module_state->__pyx_codeobj__188);
  Py_VISIT(traverse_module_state->__pyx_codeobj__190);
  Py_VISIT(traverse_module_state->__pyx_codeobj__192);
  Py_VISIT(traverse_module_state->__pyx_codeobj__193);
  Py_VISIT(traverse_module_state->__pyx_codeobj__195);
  Py_VISIT(traverse_module_state->__pyx_codeobj__196);
  Py_VISIT(traverse_module_state->__pyx_codeobj__197);
  Py_VISIT(traverse_module_state->__pyx_codeobj__198);
  Py_VISIT(traverse_module_state->__pyx_codeobj__199);
  Py_VISIT(traverse_module_state->__pyx_codeobj__200);
  Py_VISIT(traverse_module_state->__pyx_codeobj__201);
  Py_VISIT(traverse_module_state->__pyx_codeobj__203);
  Py_VISIT(traverse_module_state->__pyx_codeobj__205);
  Py_VISIT(traverse_module_state->__pyx_codeobj__206);
  Py_VISIT(traverse_module_state->__pyx_codeobj__207);
  Py_VISIT(traverse_module_state->__pyx_codeobj__209);
  Py_VISIT(traverse_module_state->__pyx_codeobj__210);
  Py_VISIT(traverse_module_state->__pyx_codeobj__211);
  Py_VISIT(traverse_module_state->__pyx_codeobj__213);
  Py_VISIT(traverse_module_state->__pyx_codeobj__214);
  Py_VISIT(traverse_module_state->__pyx_codeobj__216);
  Py_VISIT(traverse_module_state->__pyx_codeobj__219);
  Py_VISIT(traverse_module_state->__pyx_codeobj__221);
  Py_VISIT(traverse_module_state->__pyx_codeobj__222);
  Py_VISIT(traverse_module_state->__pyx_codeobj__223);
  Py_VISIT(traverse_module_state->__pyx_codeobj__224);
  Py_VISIT(traverse_module_state->__pyx_codeobj__225);
  Py_VISIT(traverse_module_state->__pyx_codeobj__227);
  Py_VISIT(traverse_module_state->__pyx_codeobj__229);
  Py_VISIT(traverse_module_state->__pyx_codeobj__231);
  Py_VISIT(traverse_module_state->__pyx_codeobj__233);
  Py_VISIT(traverse_module_state->__pyx_codeobj__234);
  Py_VISIT(traverse_module_state->__pyx_codeobj__235);
  Py_VISIT(traverse_module_state->__pyx_codeobj__236);
  Py_VISIT(traverse_module_state->__pyx_codeobj__237);
  Py_VISIT(traverse_module_state->__pyx_codeobj__238);
  Py_VISIT(traverse_module_state->__pyx_codeobj__239);
  Py_VISIT(traverse_module_state->__pyx_codeobj__240);
  Py_VISIT(traverse_module_state->__pyx_codeobj__241);
  Py_VISIT(traverse_module_state->__pyx_codeobj__242);
  Py_VISIT(traverse_module_state->__pyx_codeobj__243);
  Py_VISIT(traverse_module_state->__pyx_codeobj__244);
  Py_VISIT(traverse_module_state->__pyx_codeobj__245);
  Py_VISIT(traverse_module_state->__pyx_codeobj__246);
  Py_VISIT(traverse_module_state->__pyx_codeobj__247);
  Py_VISIT(traverse_module_state->__pyx_codeobj__248);
  Py_VISIT(traverse_module_state->__pyx_codeobj__249);
  Py_VISIT(traverse_module_state->__pyx_codeobj__250);
  Py_VISIT(traverse_module_state->__pyx_codeobj__251);
  Py_VISIT(traverse_module_state->__pyx_codeobj__252);
  Py_VISIT(traverse_module_state->__pyx_codeobj__253);
  Py_VISIT(traverse_module_state->__pyx_codeobj__254);
  Py_VISIT(traverse_module_state->__pyx_codeobj__255);
  Py_VISIT(traverse_module_state->__pyx_codeobj__256);
  Py_VISIT(traverse_module_state->__pyx_codeobj__257);
  Py_VISIT(traverse_module_state->__pyx_codeobj__258);
  Py_VISIT(traverse_module_state->__pyx_codeobj__259);
  Py_VISIT(traverse_module_state->__pyx_codeobj__260);
  Py_VISIT(traverse_module_state->__pyx_codeobj__261);
  Py_VISIT(traverse_module_state->__pyx_codeobj__262);
  Py_VISIT(traverse_module_state->__pyx_codeobj__263);
  Py_VISIT(traverse_module_state->__pyx_codeobj__264);
  Py_VISIT(traverse_module_state->__pyx_codeobj__265);
  Py_VISIT(traverse_module_state->__pyx_codeobj__266);
  Py_VISIT(traverse_module_state->__pyx_codeobj__267);
  Py_VISIT(traverse_module_state->__pyx_codeobj__268);
  Py_VISIT(traverse_module_state->__pyx_codeobj__269);
  Py_VISIT(traverse_module_state->__pyx_codeobj__270);
  Py_VISIT(traverse_module_state->__pyx_codeobj__271);
  Py_VISIT(traverse_module_state->__pyx_codeobj__272);
  Py_VISIT(traverse_module_state->__pyx_codeobj__273);
  Py_VISIT(traverse_module_state->__pyx_codeobj__274);
  Py_VISIT(traverse_module_state->__pyx_codeobj__275);
  Py_VISIT(traverse_module_state->__pyx_codeobj__276);
  Py_VISIT(traverse_module_state->__pyx_codeobj__277);
  Py_VISIT(traverse_module_state->__pyx_codeobj__278);
  Py_VISIT(traverse_module_state->__pyx_codeobj__279);
  Py_VISIT(traverse_module_state->__pyx_codeobj__280);
  Py_VISIT(traverse_module_state->__pyx_codeobj__281);
  Py_VISIT(traverse_module_state->__pyx_codeobj__282);
  Py_VISIT(traverse_module_state->__pyx_codeobj__283);
  Py_VISIT(traverse_module_state->__pyx_codeobj__284);
  Py_VISIT(traverse_module_state->__pyx_codeobj__285);
  Py_VISIT(traverse_module_state->__pyx_codeobj__286);
  Py_VISIT(traverse_module_state->__pyx_codeobj__287);
  Py_VISIT(traverse_module_state->__pyx_codeobj__289);
  Py_VISIT(traverse_module_state->__pyx_codeobj__290);
  Py_VISIT(traverse_module_state->__pyx_codeobj__291);
  Py_VISIT(traverse_module_state->__pyx_codeobj__292);
  Py_VISIT(traverse_module_state->__pyx_codeobj__293);
  Py_VISIT(traverse_module_state->__pyx_codeobj__294);
  Py_VISIT(traverse_module_state->__pyx_codeobj__295);
  Py_VISIT(traverse_module_state->__pyx_codeobj__296);
  Py_VISIT(traverse_module_state->__pyx_codeobj__297);
  Py_VISIT(traverse_module_state->__pyx_codeobj__298);
  Py_VISIT(traverse_module_state->__pyx_codeobj__299);
  return 0;
}
#endif
/* #### Code section: module_state_defines ### */
#define __pyx_d __pyx_mstate_global->__pyx_d
#define __pyx_b __pyx_mstate_global->__pyx_b
#define __pyx_cython_runtime __pyx_mstate_global->__pyx_cython_runtime
#define __pyx_empty_tuple __pyx_mstate_global->__pyx_empty_tuple
#define __pyx_empty_bytes __pyx_mstate_global->__pyx_empty_bytes
#define __pyx_empty_unicode __pyx_mstate_global->__pyx_empty_unicode
#ifdef __Pyx_CyFunction_USED
#define __pyx_CyFunctionType __pyx_mstate_global->__pyx_CyFunctionType
#endif
#ifdef __Pyx_FusedFunction_USED
#define __pyx_FusedFunctionType __pyx_mstate_global->__pyx_FusedFunctionType
#endif
#ifdef __Pyx_Generator_USED
#define __pyx_GeneratorType __pyx_mstate_global->__pyx_GeneratorType
#endif
#ifdef __Pyx_IterableCoroutine_USED
#define __pyx_IterableCoroutineType __pyx_mstate_global->__pyx_IterableCoroutineType
#endif
#ifdef __Pyx_Coroutine_USED
#define __pyx_CoroutineAwaitType __pyx_mstate_global->__pyx_CoroutineAwaitType
#endif
#ifdef __Pyx_Coroutine_USED
#define __pyx_CoroutineType __pyx_mstate_global->__pyx_CoroutineType
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_7cpython_4type_type __pyx_mstate_global->__pyx_ptype_7cpython_4type_type
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_5numpy_dtype __pyx_mstate_global->__pyx_ptype_5numpy_dtype
#define __pyx_ptype_5numpy_flatiter __pyx_mstate_global->__pyx_ptype_5numpy_flatiter
#define __pyx_ptype_5numpy_broadcast __pyx_mstate_global->__pyx_ptype_5numpy_broadcast
#define __pyx_ptype_5numpy_ndarray __pyx_mstate_global->__pyx_ptype_5numpy_ndarray
#define __pyx_ptype_5numpy_generic __pyx_mstate_global->__pyx_ptype_5numpy_generic
#define __pyx_ptype_5numpy_number __pyx_mstate_global->__pyx_ptype_5numpy_number
#define __pyx_ptype_5numpy_integer __pyx_mstate_global->__pyx_ptype_5numpy_integer
#define __pyx_ptype_5numpy_signedinteger __pyx_mstate_global->__pyx_ptype_5numpy_signedinteger
#define __pyx_ptype_5numpy_unsignedinteger __pyx_mstate_global->__pyx_ptype_5numpy_unsignedinteger
#define __pyx_ptype_5numpy_inexact __pyx_mstate_global->__pyx_ptype_5numpy_inexact
#define __pyx_ptype_5numpy_floating __pyx_mstate_global->__pyx_ptype_5numpy_floating
#define __pyx_ptype_5numpy_complexfloating __pyx_mstate_global->__pyx_ptype_5numpy_complexfloating
#define __pyx_ptype_5numpy_flexible __pyx_mstate_global->__pyx_ptype_5numpy_flexible
#define __pyx_ptype_5numpy_character __pyx_mstate_global->__pyx_ptype_5numpy_character
#define __pyx_ptype_5numpy_ufunc __pyx_mstate_global->__pyx_ptype_5numpy_ufunc
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#define __pyx_type_5miolo_mioloObject __pyx_mstate_global->__pyx_type_5miolo_mioloObject
#define __pyx_type_5miolo_Matrix __pyx_mstate_global->__pyx_type_5miolo_Matrix
#define __pyx_type_5miolo_Graph __pyx_mstate_global->__pyx_type_5miolo_Graph
#define __pyx_type_5miolo_Digraph __pyx_mstate_global->__pyx_type_5miolo_Digraph
#define __pyx_type_5miolo_Diagonal __pyx_mstate_global->__pyx_type_5miolo_Diagonal
#define __pyx_type_5miolo_Manifold __pyx_mstate_global->__pyx_type_5miolo_Manifold
#define __pyx_type_5miolo_Euclidean __pyx_mstate_global->__pyx_type_5miolo_Euclidean
#define __pyx_type_5miolo_Sphere __pyx_mstate_global->__pyx_type_5miolo_Sphere
#define __pyx_type_5miolo_Poincare __pyx_mstate_global->__pyx_type_5miolo_Poincare
#define __pyx_type_5miolo_Lorentz __pyx_mstate_global->__pyx_type_5miolo_Lorentz
#define __pyx_type_5miolo_ufunction __pyx_mstate_global->__pyx_type_5miolo_ufunction
#define __pyx_type_5miolo_sin __pyx_mstate_global->__pyx_type_5miolo_sin
#define __pyx_type_5miolo_cos __pyx_mstate_global->__pyx_type_5miolo_cos
#define __pyx_type_5miolo_tan __pyx_mstate_global->__pyx_type_5miolo_tan
#define __pyx_type_5miolo_asin __pyx_mstate_global->__pyx_type_5miolo_asin
#define __pyx_type_5miolo_acos __pyx_mstate_global->__pyx_type_5miolo_acos
#define __pyx_type_5miolo_atan __pyx_mstate_global->__pyx_type_5miolo_atan
#define __pyx_type_5miolo_cosh __pyx_mstate_global->__pyx_type_5miolo_cosh
#define __pyx_type_5miolo_sinh __pyx_mstate_global->__pyx_type_5miolo_sinh
#define __pyx_type_5miolo_tanh __pyx_mstate_global->__pyx_type_5miolo_tanh
#define __pyx_type_5miolo_acosh __pyx_mstate_global->__pyx_type_5miolo_acosh
#define __pyx_type_5miolo_asinh __pyx_mstate_global->__pyx_type_5miolo_asinh
#define __pyx_type_5miolo_atanh __pyx_mstate_global->__pyx_type_5miolo_atanh
#define __pyx_type_5miolo_exp __pyx_mstate_global->__pyx_type_5miolo_exp
#define __pyx_type_5miolo_log __pyx_mstate_global->__pyx_type_5miolo_log
#define __pyx_type_5miolo_fabs __pyx_mstate_global->__pyx_type_5miolo_fabs
#define __pyx_type_5miolo_sqrt __pyx_mstate_global->__pyx_type_5miolo_sqrt
#define __pyx_type_5miolo_recp __pyx_mstate_global->__pyx_type_5miolo_recp
#define __pyx_type_5miolo_classSeparation __pyx_mstate_global->__pyx_type_5miolo_classSeparation
#define __pyx_type_5miolo_weightedSquareDistance __pyx_mstate_global->__pyx_type_5miolo_weightedSquareDistance
#define __pyx_type_5miolo_weightedDotProduct __pyx_mstate_global->__pyx_type_5miolo_weightedDotProduct
#define __pyx_type_5miolo_pottsEnergy __pyx_mstate_global->__pyx_type_5miolo_pottsEnergy
#define __pyx_type___pyx_array __pyx_mstate_global->__pyx_type___pyx_array
#define __pyx_type___pyx_MemviewEnum __pyx_mstate_global->__pyx_type___pyx_MemviewEnum
#define __pyx_type___pyx_memoryview __pyx_mstate_global->__pyx_type___pyx_memoryview
#define __pyx_type___pyx_memoryviewslice __pyx_mstate_global->__pyx_type___pyx_memoryviewslice
#endif
#define __pyx_ptype_5miolo_mioloObject __pyx_mstate_global->__pyx_ptype_5miolo_mioloObject
#define __pyx_ptype_5miolo_Matrix __pyx_mstate_global->__pyx_ptype_5miolo_Matrix
#define __pyx_ptype_5miolo_Graph __pyx_mstate_global->__pyx_ptype_5miolo_Graph
#define __pyx_ptype_5miolo_Digraph __pyx_mstate_global->__pyx_ptype_5miolo_Digraph
#define __pyx_ptype_5miolo_Diagonal __pyx_mstate_global->__pyx_ptype_5miolo_Diagonal
#define __pyx_ptype_5miolo_Manifold __pyx_mstate_global->__pyx_ptype_5miolo_Manifold
#define __pyx_ptype_5miolo_Euclidean __pyx_mstate_global->__pyx_ptype_5miolo_Euclidean
#define __pyx_ptype_5miolo_Sphere __pyx_mstate_global->__pyx_ptype_5miolo_Sphere
#define __pyx_ptype_5miolo_Poincare __pyx_mstate_global->__pyx_ptype_5miolo_Poincare
#define __pyx_ptype_5miolo_Lorentz __pyx_mstate_global->__pyx_ptype_5miolo_Lorentz
#define __pyx_ptype_5miolo_ufunction __pyx_mstate_global->__pyx_ptype_5miolo_ufunction
#define __pyx_ptype_5miolo_sin __pyx_mstate_global->__pyx_ptype_5miolo_sin
#define __pyx_ptype_5miolo_cos __pyx_mstate_global->__pyx_ptype_5miolo_cos
#define __pyx_ptype_5miolo_tan __pyx_mstate_global->__pyx_ptype_5miolo_tan
#define __pyx_ptype_5miolo_asin __pyx_mstate_global->__pyx_ptype_5miolo_asin
#define __pyx_ptype_5miolo_acos __pyx_mstate_global->__pyx_ptype_5miolo_acos
#define __pyx_ptype_5miolo_atan __pyx_mstate_global->__pyx_ptype_5miolo_atan
#define __pyx_ptype_5miolo_cosh __pyx_mstate_global->__pyx_ptype_5miolo_cosh
#define __pyx_ptype_5miolo_sinh __pyx_mstate_global->__pyx_ptype_5miolo_sinh
#define __pyx_ptype_5miolo_tanh __pyx_mstate_global->__pyx_ptype_5miolo_tanh
#define __pyx_ptype_5miolo_acosh __pyx_mstate_global->__pyx_ptype_5miolo_acosh
#define __pyx_ptype_5miolo_asinh __pyx_mstate_global->__pyx_ptype_5miolo_asinh
#define __pyx_ptype_5miolo_atanh __pyx_mstate_global->__pyx_ptype_5miolo_atanh
#define __pyx_ptype_5miolo_exp __pyx_mstate_global->__pyx_ptype_5miolo_exp
#define __pyx_ptype_5miolo_log __pyx_mstate_global->__pyx_ptype_5miolo_log
#define __pyx_ptype_5miolo_fabs __pyx_mstate_global->__pyx_ptype_5miolo_fabs
#define __pyx_ptype_5miolo_sqrt __pyx_mstate_global->__pyx_ptype_5miolo_sqrt
#define __pyx_ptype_5miolo_recp __pyx_mstate_global->__pyx_ptype_5miolo_recp
#define __pyx_ptype_5miolo_classSeparation __pyx_mstate_global->__pyx_ptype_5miolo_classSeparation
#define __pyx_ptype_5miolo_weightedSquareDistance __pyx_mstate_global->__pyx_ptype_5miolo_weightedSquareDistance
#define __pyx_ptype_5miolo_weightedDotProduct __pyx_mstate_global->__pyx_ptype_5miolo_weightedDotProduct
#define __pyx_ptype_5miolo_pottsEnergy __pyx_mstate_global->__pyx_ptype_5miolo_pottsEnergy
#define __pyx_array_type __pyx_mstate_global->__pyx_array_type
#define __pyx_MemviewEnum_type __pyx_mstate_global->__pyx_MemviewEnum_type
#define __pyx_memoryview_type __pyx_mstate_global->__pyx_memoryview_type
#define __pyx_memoryviewslice_type __pyx_mstate_global->__pyx_memoryviewslice_type
#define __pyx_kp_u_ __pyx_mstate_global->__pyx_kp_u_
#define __pyx_n_s_A __pyx_mstate_global->__pyx_n_s_A
#define __pyx_n_s_ASCII __pyx_mstate_global->__pyx_n_s_ASCII
#define __pyx_kp_s_A_and_B_must_have_same_ctype __pyx_mstate_global->__pyx_kp_s_A_and_B_must_have_same_ctype
#define __pyx_kp_s_A_and_B_must_have_same_number_of __pyx_mstate_global->__pyx_kp_s_A_and_B_must_have_same_number_of
#define __pyx_kp_s_All_dimensions_preceding_dimensi __pyx_mstate_global->__pyx_kp_s_All_dimensions_preceding_dimensi
#define __pyx_n_s_AssertionError __pyx_mstate_global->__pyx_n_s_AssertionError
#define __pyx_kp_s_Attempting_division_by_zero __pyx_mstate_global->__pyx_kp_s_Attempting_division_by_zero
#define __pyx_kp_s_Avoiding_division_by_zero __pyx_mstate_global->__pyx_kp_s_Avoiding_division_by_zero
#define __pyx_n_s_B __pyx_mstate_global->__pyx_n_s_B
#define __pyx_kp_s_Buffer_view_does_not_expose_stri __pyx_mstate_global->__pyx_kp_s_Buffer_view_does_not_expose_stri
#define __pyx_kp_s_Can_only_create_a_buffer_that_is __pyx_mstate_global->__pyx_kp_s_Can_only_create_a_buffer_that_is
#define __pyx_kp_s_Cannot_assign_to_read_only_memor __pyx_mstate_global->__pyx_kp_s_Cannot_assign_to_read_only_memor
#define __pyx_kp_s_Cannot_create_writable_memory_vi __pyx_mstate_global->__pyx_kp_s_Cannot_create_writable_memory_vi
#define __pyx_kp_s_Cannot_divide_by_zero __pyx_mstate_global->__pyx_kp_s_Cannot_divide_by_zero
#define __pyx_kp_u_Cannot_index_with_type __pyx_mstate_global->__pyx_kp_u_Cannot_index_with_type
#define __pyx_kp_s_Cannot_transpose_memoryview_with __pyx_mstate_global->__pyx_kp_s_Cannot_transpose_memoryview_with
#define __pyx_kp_s_Col_range_is_out_of_bounds __pyx_mstate_global->__pyx_kp_s_Col_range_is_out_of_bounds
#define __pyx_n_s_Diagonal __pyx_mstate_global->__pyx_n_s_Diagonal
#define __pyx_n_s_Diagonal___reduce_cython __pyx_mstate_global->__pyx_n_s_Diagonal___reduce_cython
#define __pyx_n_s_Diagonal___setstate_cython __pyx_mstate_global->__pyx_n_s_Diagonal___setstate_cython
#define __pyx_kp_s_Diagonals_must_have_same_ctype __pyx_mstate_global->__pyx_kp_s_Diagonals_must_have_same_ctype
#define __pyx_n_s_Digraph __pyx_mstate_global->__pyx_n_s_Digraph
#define __pyx_n_s_Digraph___reduce_cython __pyx_mstate_global->__pyx_n_s_Digraph___reduce_cython
#define __pyx_n_s_Digraph___setstate_cython __pyx_mstate_global->__pyx_n_s_Digraph___setstate_cython
#define __pyx_kp_s_Digraph_and_Matrix_must_share_sa __pyx_mstate_global->__pyx_kp_s_Digraph_and_Matrix_must_share_sa
#define __pyx_n_s_Digraph_connect __pyx_mstate_global->__pyx_n_s_Digraph_connect
#define __pyx_n_s_Digraph_connectRegular __pyx_mstate_global->__pyx_n_s_Digraph_connectRegular
#define __pyx_n_s_Digraph_copy __pyx_mstate_global->__pyx_n_s_Digraph_copy
#define __pyx_n_s_Digraph_gaussianScale __pyx_mstate_global->__pyx_n_s_Digraph_gaussianScale
#define __pyx_n_s_Digraph_normalize __pyx_mstate_global->__pyx_n_s_Digraph_normalize
#define __pyx_n_s_Digraph_sameShape __pyx_mstate_global->__pyx_n_s_Digraph_sameShape
#define __pyx_n_s_Digraph_shape __pyx_mstate_global->__pyx_n_s_Digraph_shape
#define __pyx_n_s_Digraph_symmetrize __pyx_mstate_global->__pyx_n_s_Digraph_symmetrize
#define __pyx_n_s_Digraph_toGraph __pyx_mstate_global->__pyx_n_s_Digraph_toGraph
#define __pyx_n_s_Digraph_transpose __pyx_mstate_global->__pyx_n_s_Digraph_transpose
#define __pyx_kp_s_Digraphs_must_have_same_shapes __pyx_mstate_global->__pyx_kp_s_Digraphs_must_have_same_shapes
#define __pyx_kp_s_Digraphs_must_share_same_ctype __pyx_mstate_global->__pyx_kp_s_Digraphs_must_share_same_ctype
#define __pyx_kp_s_Dimension_d_is_not_direct __pyx_mstate_global->__pyx_kp_s_Dimension_d_is_not_direct
#define __pyx_kp_s_Dimension_of_diagonals_must_be_e __pyx_mstate_global->__pyx_kp_s_Dimension_of_diagonals_must_be_e
#define __pyx_kp_s_Dist_rows_must_be_equal_to_label __pyx_mstate_global->__pyx_kp_s_Dist_rows_must_be_equal_to_label
#define __pyx_n_s_E __pyx_mstate_global->__pyx_n_s_E
#define __pyx_n_s_Ellipsis __pyx_mstate_global->__pyx_n_s_Ellipsis
#define __pyx_kp_s_Empty_shape_tuple_for_cython_arr __pyx_mstate_global->__pyx_kp_s_Empty_shape_tuple_for_cython_arr
#define __pyx_kp_s_Entries_of_only_exceed_self_rows __pyx_mstate_global->__pyx_kp_s_Entries_of_only_exceed_self_rows
#define __pyx_n_s_Euclidean __pyx_mstate_global->__pyx_n_s_Euclidean
#define __pyx_n_s_Euclidean___reduce_cython __pyx_mstate_global->__pyx_n_s_Euclidean___reduce_cython
#define __pyx_n_s_Euclidean___setstate_cython __pyx_mstate_global->__pyx_n_s_Euclidean___setstate_cython
#define __pyx_n_s_Euclidean_centroidDistance __pyx_mstate_global->__pyx_n_s_Euclidean_centroidDistance
#define __pyx_n_s_Euclidean_distance __pyx_mstate_global->__pyx_n_s_Euclidean_distance
#define __pyx_n_s_Euclidean_dot __pyx_mstate_global->__pyx_n_s_Euclidean_dot
#define __pyx_n_s_Euclidean_gaussianNormalize __pyx_mstate_global->__pyx_n_s_Euclidean_gaussianNormalize
#define __pyx_n_s_Euclidean_kmpp __pyx_mstate_global->__pyx_n_s_Euclidean_kmpp
#define __pyx_n_s_Euclidean_mean __pyx_mstate_global->__pyx_n_s_Euclidean_mean
#define __pyx_n_s_Euclidean_minmaxNormalize __pyx_mstate_global->__pyx_n_s_Euclidean_minmaxNormalize
#define __pyx_n_s_Euclidean_rowNormalize __pyx_mstate_global->__pyx_n_s_Euclidean_rowNormalize
#define __pyx_n_s_Euclidean_variance __pyx_mstate_global->__pyx_n_s_Euclidean_variance
#define __pyx_kp_s_Failed_to_allocate_memory __pyx_mstate_global->__pyx_kp_s_Failed_to_allocate_memory
#define __pyx_n_s_G __pyx_mstate_global->__pyx_n_s_G
#define __pyx_n_s_Graph __pyx_mstate_global->__pyx_n_s_Graph
#define __pyx_kp_s_Graph_Matrix_operations_require __pyx_mstate_global->__pyx_kp_s_Graph_Matrix_operations_require
#define __pyx_n_s_Graph___reduce_cython __pyx_mstate_global->__pyx_n_s_Graph___reduce_cython
#define __pyx_n_s_Graph___setstate_cython __pyx_mstate_global->__pyx_n_s_Graph___setstate_cython
#define __pyx_kp_s_Graph_and_Matrix_must_have_same __pyx_mstate_global->__pyx_kp_s_Graph_and_Matrix_must_have_same
#define __pyx_n_s_Graph_degree __pyx_mstate_global->__pyx_n_s_Graph_degree
#define __pyx_n_s_Graph_gaussianScale __pyx_mstate_global->__pyx_n_s_Graph_gaussianScale
#define __pyx_n_s_Graph_isolatedNodes __pyx_mstate_global->__pyx_n_s_Graph_isolatedNodes
#define __pyx_n_s_Graph_laplacian __pyx_mstate_global->__pyx_n_s_Graph_laplacian
#define __pyx_n_s_Graph_max __pyx_mstate_global->__pyx_n_s_Graph_max
#define __pyx_n_s_Graph_min __pyx_mstate_global->__pyx_n_s_Graph_min
#define __pyx_n_s_Graph_normalize __pyx_mstate_global->__pyx_n_s_Graph_normalize
#define __pyx_n_s_Graph_print __pyx_mstate_global->__pyx_n_s_Graph_print
#define __pyx_n_s_Graph_propagate __pyx_mstate_global->__pyx_n_s_Graph_propagate
#define __pyx_n_s_Graph_toDigraph __pyx_mstate_global->__pyx_n_s_Graph_toDigraph
#define __pyx_n_s_Graph_toMatrix __pyx_mstate_global->__pyx_n_s_Graph_toMatrix
#define __pyx_kp_s_Graphs_must_have_same_number_of __pyx_mstate_global->__pyx_kp_s_Graphs_must_have_same_number_of
#define __pyx_kp_s_Graphs_must_share_same_ctype __pyx_mstate_global->__pyx_kp_s_Graphs_must_share_same_ctype
#define __pyx_n_s_H __pyx_mstate_global->__pyx_n_s_H
#define __pyx_n_s_ImportError __pyx_mstate_global->__pyx_n_s_ImportError
#define __pyx_kp_s_Incompatible_checksums_0x_x_vs_0 __pyx_mstate_global->__pyx_kp_s_Incompatible_checksums_0x_x_vs_0
#define __pyx_kp_s_Incompatible_checksums_0x_x_vs_0_2 __pyx_mstate_global->__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_2
#define __pyx_kp_s_Incompatible_shape_for_Graph_dat __pyx_mstate_global->__pyx_kp_s_Incompatible_shape_for_Graph_dat
#define __pyx_kp_s_Incompatible_shape_for_Hadamard __pyx_mstate_global->__pyx_kp_s_Incompatible_shape_for_Hadamard
#define __pyx_kp_s_Incompatible_shape_for_Matrix_ad __pyx_mstate_global->__pyx_kp_s_Incompatible_shape_for_Matrix_ad
#define __pyx_kp_s_Incompatible_shape_for_Matrix_pr __pyx_mstate_global->__pyx_kp_s_Incompatible_shape_for_Matrix_pr
#define __pyx_kp_s_Incompatible_shape_for_Matrix_su __pyx_mstate_global->__pyx_kp_s_Incompatible_shape_for_Matrix_su
#define __pyx_kp_s_Incompatible_shape_for_matrix_mu __pyx_mstate_global->__pyx_kp_s_Incompatible_shape_for_matrix_mu
#define __pyx_kp_s_Incompatible_shape_for_miolo_Mat __pyx_mstate_global->__pyx_kp_s_Incompatible_shape_for_miolo_Mat
#define __pyx_kp_s_Incompatible_shape_for_product __pyx_mstate_global->__pyx_kp_s_Incompatible_shape_for_product
#define __pyx_kp_s_Incompatible_shapes_for_addition __pyx_mstate_global->__pyx_kp_s_Incompatible_shapes_for_addition
#define __pyx_kp_s_Incompatible_shapes_for_subtract __pyx_mstate_global->__pyx_kp_s_Incompatible_shapes_for_subtract
#define __pyx_n_s_IndexError __pyx_mstate_global->__pyx_n_s_IndexError
#define __pyx_kp_s_Index_is_out_of_bounds __pyx_mstate_global->__pyx_kp_s_Index_is_out_of_bounds
#define __pyx_kp_s_Index_k_is_out_of_bounds __pyx_mstate_global->__pyx_kp_s_Index_k_is_out_of_bounds
#define __pyx_kp_s_Index_out_of_bounds_axis_d __pyx_mstate_global->__pyx_kp_s_Index_out_of_bounds_axis_d
#define __pyx_kp_s_Indirect_dimensions_not_supporte __pyx_mstate_global->__pyx_kp_s_Indirect_dimensions_not_supporte
#define __pyx_kp_u_Invalid_mode_expected_c_or_fortr __pyx_mstate_global->__pyx_kp_u_Invalid_mode_expected_c_or_fortr
#define __pyx_kp_s_Invalid_new_shape __pyx_mstate_global->__pyx_kp_s_Invalid_new_shape
#define __pyx_kp_s_Invalid_shape_for_at __pyx_mstate_global->__pyx_kp_s_Invalid_shape_for_at
#define __pyx_kp_u_Invalid_shape_in_axis __pyx_mstate_global->__pyx_kp_u_Invalid_shape_in_axis
#define __pyx_n_s_Lorentz __pyx_mstate_global->__pyx_n_s_Lorentz
#define __pyx_n_s_Lorentz___reduce_cython __pyx_mstate_global->__pyx_n_s_Lorentz___reduce_cython
#define __pyx_n_s_Lorentz___setstate_cython __pyx_mstate_global->__pyx_n_s_Lorentz___setstate_cython
#define __pyx_n_s_Lorentz_centroidDistance __pyx_mstate_global->__pyx_n_s_Lorentz_centroidDistance
#define __pyx_n_s_Lorentz_dot __pyx_mstate_global->__pyx_n_s_Lorentz_dot
#define __pyx_n_s_Lorentz_exp __pyx_mstate_global->__pyx_n_s_Lorentz_exp
#define __pyx_n_s_Lorentz_fromEuclidean __pyx_mstate_global->__pyx_n_s_Lorentz_fromEuclidean
#define __pyx_n_s_Lorentz_isIn __pyx_mstate_global->__pyx_n_s_Lorentz_isIn
#define __pyx_n_s_Lorentz_lorentzDistance __pyx_mstate_global->__pyx_n_s_Lorentz_lorentzDistance
#define __pyx_n_s_Lorentz_mean __pyx_mstate_global->__pyx_n_s_Lorentz_mean
#define __pyx_n_s_Lorentz_metricDistance __pyx_mstate_global->__pyx_n_s_Lorentz_metricDistance
#define __pyx_n_s_Lorentz_tangentProjection __pyx_mstate_global->__pyx_n_s_Lorentz_tangentProjection
#define __pyx_n_s_Lorentz_toEuclidean __pyx_mstate_global->__pyx_n_s_Lorentz_toEuclidean
#define __pyx_n_s_M __pyx_mstate_global->__pyx_n_s_M
#define __pyx_n_s_MST __pyx_mstate_global->__pyx_n_s_MST
#define __pyx_kp_s_M_and_Weights_must_have_same_cty __pyx_mstate_global->__pyx_kp_s_M_and_Weights_must_have_same_cty
#define __pyx_kp_s_M_and_Weights_must_have_same_num __pyx_mstate_global->__pyx_kp_s_M_and_Weights_must_have_same_num
#define __pyx_kp_s_M_and_center_must_have_same_ctyp __pyx_mstate_global->__pyx_kp_s_M_and_center_must_have_same_ctyp
#define __pyx_kp_s_M_cols_must_be_equal_to_center_c __pyx_mstate_global->__pyx_kp_s_M_cols_must_be_equal_to_center_c
#define __pyx_n_s_Manifold __pyx_mstate_global->__pyx_n_s_Manifold
#define __pyx_n_s_Manifold___reduce_cython __pyx_mstate_global->__pyx_n_s_Manifold___reduce_cython
#define __pyx_n_s_Manifold___setstate_cython __pyx_mstate_global->__pyx_n_s_Manifold___setstate_cython
#define __pyx_kp_s_Matrices_must_have_same_ctype __pyx_mstate_global->__pyx_kp_s_Matrices_must_have_same_ctype
#define __pyx_kp_s_Matrices_must_have_same_shape __pyx_mstate_global->__pyx_kp_s_Matrices_must_have_same_shape
#define __pyx_kp_s_Matrices_must_have_the_same_ctyp __pyx_mstate_global->__pyx_kp_s_Matrices_must_have_the_same_ctyp
#define __pyx_kp_s_Matrices_must_share_same_ctype __pyx_mstate_global->__pyx_kp_s_Matrices_must_share_same_ctype
#define __pyx_n_s_Matrix __pyx_mstate_global->__pyx_n_s_Matrix
#define __pyx_n_s_Matrix___reduce_cython __pyx_mstate_global->__pyx_n_s_Matrix___reduce_cython
#define __pyx_n_s_Matrix___setstate_cython __pyx_mstate_global->__pyx_n_s_Matrix___setstate_cython
#define __pyx_n_s_Matrix_argkmax __pyx_mstate_global->__pyx_n_s_Matrix_argkmax
#define __pyx_n_s_Matrix_argkmin __pyx_mstate_global->__pyx_n_s_Matrix_argkmin
#define __pyx_n_s_Matrix_argmax __pyx_mstate_global->__pyx_n_s_Matrix_argmax
#define __pyx_n_s_Matrix_argmin __pyx_mstate_global->__pyx_n_s_Matrix_argmin
#define __pyx_n_s_Matrix_copy __pyx_mstate_global->__pyx_n_s_Matrix_copy
#define __pyx_n_s_Matrix_cut __pyx_mstate_global->__pyx_n_s_Matrix_cut
#define __pyx_n_s_Matrix_flatten __pyx_mstate_global->__pyx_n_s_Matrix_flatten
#define __pyx_n_s_Matrix_max __pyx_mstate_global->__pyx_n_s_Matrix_max
#define __pyx_n_s_Matrix_min __pyx_mstate_global->__pyx_n_s_Matrix_min
#define __pyx_kp_s_Matrix_must_be_square __pyx_mstate_global->__pyx_kp_s_Matrix_must_be_square
#define __pyx_n_s_Matrix_normalize __pyx_mstate_global->__pyx_n_s_Matrix_normalize
#define __pyx_kp_s_Matrix_operations_require_same_c __pyx_mstate_global->__pyx_kp_s_Matrix_operations_require_same_c
#define __pyx_n_s_Matrix_partition __pyx_mstate_global->__pyx_n_s_Matrix_partition
#define __pyx_n_s_Matrix_print __pyx_mstate_global->__pyx_n_s_Matrix_print
#define __pyx_n_s_Matrix_reshape __pyx_mstate_global->__pyx_n_s_Matrix_reshape
#define __pyx_n_s_Matrix_rowDistance __pyx_mstate_global->__pyx_n_s_Matrix_rowDistance
#define __pyx_n_s_Matrix_sparsifyKNN __pyx_mstate_global->__pyx_n_s_Matrix_sparsifyKNN
#define __pyx_n_s_Matrix_sparsifyThreshold __pyx_mstate_global->__pyx_n_s_Matrix_sparsifyThreshold
#define __pyx_n_s_Matrix_sumAll __pyx_mstate_global->__pyx_n_s_Matrix_sumAll
#define __pyx_n_s_Matrix_trace __pyx_mstate_global->__pyx_n_s_Matrix_trace
#define __pyx_n_s_Matrix_transpose __pyx_mstate_global->__pyx_n_s_Matrix_transpose
#define __pyx_n_s_MemoryError __pyx_mstate_global->__pyx_n_s_MemoryError
#define __pyx_kp_s_MemoryView_of_r_at_0x_x __pyx_mstate_global->__pyx_kp_s_MemoryView_of_r_at_0x_x
#define __pyx_kp_s_MemoryView_of_r_object __pyx_mstate_global->__pyx_kp_s_MemoryView_of_r_object
#define __pyx_n_s_N __pyx_mstate_global->__pyx_n_s_N
#define __pyx_n_s_Neighbors __pyx_mstate_global->__pyx_n_s_Neighbors
#define __pyx_kp_s_Neighbors_and_Weights_must_have __pyx_mstate_global->__pyx_kp_s_Neighbors_and_Weights_must_have
#define __pyx_kp_s_Neighbors_must_have_int_ctype __pyx_mstate_global->__pyx_kp_s_Neighbors_must_have_int_ctype
#define __pyx_kp_s_Number_of_Matrix_rows_must_be_eq __pyx_mstate_global->__pyx_kp_s_Number_of_Matrix_rows_must_be_eq
#define __pyx_kp_s_Number_of_cols_must_be_greater_t __pyx_mstate_global->__pyx_kp_s_Number_of_cols_must_be_greater_t
#define __pyx_kp_s_Number_of_nodes_must_be_equal_to __pyx_mstate_global->__pyx_kp_s_Number_of_nodes_must_be_equal_to
#define __pyx_kp_s_Number_of_rows_must_be_equal_to __pyx_mstate_global->__pyx_kp_s_Number_of_rows_must_be_equal_to
#define __pyx_n_b_O __pyx_mstate_global->__pyx_n_b_O
#define __pyx_n_s_O __pyx_mstate_global->__pyx_n_s_O
#define __pyx_kp_s_Objects_must_share_same_ctype __pyx_mstate_global->__pyx_kp_s_Objects_must_share_same_ctype
#define __pyx_kp_s_Only_square_matrices_are_allowed __pyx_mstate_global->__pyx_kp_s_Only_square_matrices_are_allowed
#define __pyx_kp_s_Only_square_matrices_can_be_spar __pyx_mstate_global->__pyx_kp_s_Only_square_matrices_can_be_spar
#define __pyx_kp_s_Only_square_weight_matrices_are __pyx_mstate_global->__pyx_kp_s_Only_square_weight_matrices_are
#define __pyx_kp_u_Out_of_bounds_on_buffer_access_a __pyx_mstate_global->__pyx_kp_u_Out_of_bounds_on_buffer_access_a
#define __pyx_n_s_PickleError __pyx_mstate_global->__pyx_n_s_PickleError
#define __pyx_n_s_Poincare __pyx_mstate_global->__pyx_n_s_Poincare
#define __pyx_n_s_Poincare___reduce_cython __pyx_mstate_global->__pyx_n_s_Poincare___reduce_cython
#define __pyx_n_s_Poincare___setstate_cython __pyx_mstate_global->__pyx_n_s_Poincare___setstate_cython
#define __pyx_n_s_Poincare_add __pyx_mstate_global->__pyx_n_s_Poincare_add
#define __pyx_n_s_Poincare_centroidDistance __pyx_mstate_global->__pyx_n_s_Poincare_centroidDistance
#define __pyx_n_s_Poincare_distance __pyx_mstate_global->__pyx_n_s_Poincare_distance
#define __pyx_n_s_Poincare_exp __pyx_mstate_global->__pyx_n_s_Poincare_exp
#define __pyx_n_s_Poincare_hyperbolicity __pyx_mstate_global->__pyx_n_s_Poincare_hyperbolicity
#define __pyx_n_s_Poincare_isIn __pyx_mstate_global->__pyx_n_s_Poincare_isIn
#define __pyx_n_s_Poincare_log __pyx_mstate_global->__pyx_n_s_Poincare_log
#define __pyx_n_s_Poincare_mean __pyx_mstate_global->__pyx_n_s_Poincare_mean
#define __pyx_kp_s_Row_range_is_out_of_bounds __pyx_mstate_global->__pyx_kp_s_Row_range_is_out_of_bounds
#define __pyx_n_s_Sequence __pyx_mstate_global->__pyx_n_s_Sequence
#define __pyx_kp_s_Size_of_labels_must_be_equal_to __pyx_mstate_global->__pyx_kp_s_Size_of_labels_must_be_equal_to
#define __pyx_kp_s_Size_of_labels_must_be_equal_to_2 __pyx_mstate_global->__pyx_kp_s_Size_of_labels_must_be_equal_to_2
#define __pyx_n_s_Sphere __pyx_mstate_global->__pyx_n_s_Sphere
#define __pyx_n_s_Sphere___reduce_cython __pyx_mstate_global->__pyx_n_s_Sphere___reduce_cython
#define __pyx_n_s_Sphere___setstate_cython __pyx_mstate_global->__pyx_n_s_Sphere___setstate_cython
#define __pyx_n_s_Sphere_centroidDistance __pyx_mstate_global->__pyx_n_s_Sphere_centroidDistance
#define __pyx_n_s_Sphere_coordinateReady __pyx_mstate_global->__pyx_n_s_Sphere_coordinateReady
#define __pyx_n_s_Sphere_distance __pyx_mstate_global->__pyx_n_s_Sphere_distance
#define __pyx_n_s_Sphere_exp __pyx_mstate_global->__pyx_n_s_Sphere_exp
#define __pyx_n_s_Sphere_fromEuclidean __pyx_mstate_global->__pyx_n_s_Sphere_fromEuclidean
#define __pyx_n_s_Sphere_isIn __pyx_mstate_global->__pyx_n_s_Sphere_isIn
#define __pyx_n_s_Sphere_isTangent __pyx_mstate_global->__pyx_n_s_Sphere_isTangent
#define __pyx_kp_s_Sphere_radius_must_be_greater_th __pyx_mstate_global->__pyx_kp_s_Sphere_radius_must_be_greater_th
#define __pyx_n_s_Sphere_stereographicProjection __pyx_mstate_global->__pyx_n_s_Sphere_stereographicProjection
#define __pyx_n_s_Sphere_toEuclidean __pyx_mstate_global->__pyx_n_s_Sphere_toEuclidean
#define __pyx_kp_s_Step_may_not_be_zero_axis_d __pyx_mstate_global->__pyx_kp_s_Step_may_not_be_zero_axis_d
#define __pyx_n_s_Threshold __pyx_mstate_global->__pyx_n_s_Threshold
#define __pyx_n_s_TypeError __pyx_mstate_global->__pyx_n_s_TypeError
#define __pyx_kp_s_Unable_to_convert_item_to_object __pyx_mstate_global->__pyx_kp_s_Unable_to_convert_item_to_object
#define __pyx_kp_s_Unknown_ctype __pyx_mstate_global->__pyx_kp_s_Unknown_ctype
#define __pyx_n_s_ValueError __pyx_mstate_global->__pyx_n_s_ValueError
#define __pyx_n_s_View_MemoryView __pyx_mstate_global->__pyx_n_s_View_MemoryView
#define __pyx_n_s_Weights __pyx_mstate_global->__pyx_n_s_Weights
#define __pyx_kp_s_Weights_and_self_must_have_same __pyx_mstate_global->__pyx_kp_s_Weights_and_self_must_have_same
#define __pyx_kp_s_Weights_must_be_a_square_Matrix __pyx_mstate_global->__pyx_kp_s_Weights_must_be_a_square_Matrix
#define __pyx_kp_s_Weights_nodes_must_be_equal_to_M __pyx_mstate_global->__pyx_kp_s_Weights_nodes_must_be_equal_to_M
#define __pyx_n_s_X __pyx_mstate_global->__pyx_n_s_X
#define __pyx_kp_u__2 __pyx_mstate_global->__pyx_kp_u__2
#define __pyx_n_s__3 __pyx_mstate_global->__pyx_n_s__3
#define __pyx_n_s__300 __pyx_mstate_global->__pyx_n_s__300
#define __pyx_kp_u__6 __pyx_mstate_global->__pyx_kp_u__6
#define __pyx_kp_u__7 __pyx_mstate_global->__pyx_kp_u__7
#define __pyx_n_s_abc __pyx_mstate_global->__pyx_n_s_abc
#define __pyx_n_s_acos __pyx_mstate_global->__pyx_n_s_acos
#define __pyx_n_s_acos___reduce_cython __pyx_mstate_global->__pyx_n_s_acos___reduce_cython
#define __pyx_n_s_acos___setstate_cython __pyx_mstate_global->__pyx_n_s_acos___setstate_cython
#define __pyx_n_s_acosh __pyx_mstate_global->__pyx_n_s_acosh
#define __pyx_n_s_acosh___reduce_cython __pyx_mstate_global->__pyx_n_s_acosh___reduce_cython
#define __pyx_n_s_acosh___setstate_cython __pyx_mstate_global->__pyx_n_s_acosh___setstate_cython
#define __pyx_n_s_add __pyx_mstate_global->__pyx_n_s_add
#define __pyx_n_s_allocate_buffer __pyx_mstate_global->__pyx_n_s_allocate_buffer
#define __pyx_kp_u_and __pyx_mstate_global->__pyx_kp_u_and
#define __pyx_n_s_argkmax __pyx_mstate_global->__pyx_n_s_argkmax
#define __pyx_n_s_argkmin __pyx_mstate_global->__pyx_n_s_argkmin
#define __pyx_n_s_argmax __pyx_mstate_global->__pyx_n_s_argmax
#define __pyx_n_s_argmin __pyx_mstate_global->__pyx_n_s_argmin
#define __pyx_n_s_ashape __pyx_mstate_global->__pyx_n_s_ashape
#define __pyx_n_s_asin __pyx_mstate_global->__pyx_n_s_asin
#define __pyx_n_s_asin___reduce_cython __pyx_mstate_global->__pyx_n_s_asin___reduce_cython
#define __pyx_n_s_asin___setstate_cython __pyx_mstate_global->__pyx_n_s_asin___setstate_cython
#define __pyx_n_s_asinh __pyx_mstate_global->__pyx_n_s_asinh
#define __pyx_n_s_asinh___reduce_cython __pyx_mstate_global->__pyx_n_s_asinh___reduce_cython
#define __pyx_n_s_asinh___setstate_cython __pyx_mstate_global->__pyx_n_s_asinh___setstate_cython
#define __pyx_n_s_asyncio_coroutines __pyx_mstate_global->__pyx_n_s_asyncio_coroutines
#define __pyx_n_s_at __pyx_mstate_global->__pyx_n_s_at
#define __pyx_kp_s_at_and_M_must_have_same_ctype __pyx_mstate_global->__pyx_kp_s_at_and_M_must_have_same_ctype
#define __pyx_kp_s_at_and_M_must_have_same_number_o __pyx_mstate_global->__pyx_kp_s_at_and_M_must_have_same_number_o
#define __pyx_kp_s_at_and_M_must_have_same_number_o_2 __pyx_mstate_global->__pyx_kp_s_at_and_M_must_have_same_number_o_2
#define __pyx_kp_s_at_and_M_must_have_same_shape __pyx_mstate_global->__pyx_kp_s_at_and_M_must_have_same_shape
#define __pyx_kp_s_at_and_tangent_must_have_same_nu __pyx_mstate_global->__pyx_kp_s_at_and_tangent_must_have_same_nu
#define __pyx_kp_s_at_and_tanget_must_have_same_cty __pyx_mstate_global->__pyx_kp_s_at_and_tanget_must_have_same_cty
#define __pyx_n_s_atan __pyx_mstate_global->__pyx_n_s_atan
#define __pyx_n_s_atan___reduce_cython __pyx_mstate_global->__pyx_n_s_atan___reduce_cython
#define __pyx_n_s_atan___setstate_cython __pyx_mstate_global->__pyx_n_s_atan___setstate_cython
#define __pyx_n_s_atanh __pyx_mstate_global->__pyx_n_s_atanh
#define __pyx_n_s_atanh___reduce_cython __pyx_mstate_global->__pyx_n_s_atanh___reduce_cython
#define __pyx_n_s_atanh___setstate_cython __pyx_mstate_global->__pyx_n_s_atanh___setstate_cython
#define __pyx_n_s_aux __pyx_mstate_global->__pyx_n_s_aux
#define __pyx_n_s_azimuth __pyx_mstate_global->__pyx_n_s_azimuth
#define __pyx_kp_s_azimuth_must_be_smaller_than_M_c __pyx_mstate_global->__pyx_kp_s_azimuth_must_be_smaller_than_M_c
#define __pyx_n_s_base __pyx_mstate_global->__pyx_n_s_base
#define __pyx_n_s_beta __pyx_mstate_global->__pyx_n_s_beta
#define __pyx_n_s_c __pyx_mstate_global->__pyx_n_s_c
#define __pyx_n_u_c __pyx_mstate_global->__pyx_n_u_c
#define __pyx_n_s_center __pyx_mstate_global->__pyx_n_s_center
#define __pyx_n_s_centroidDistance __pyx_mstate_global->__pyx_n_s_centroidDistance
#define __pyx_n_s_clamped __pyx_mstate_global->__pyx_n_s_clamped
#define __pyx_kp_s_clamped_must_have_length_equal_t __pyx_mstate_global->__pyx_kp_s_clamped_must_have_length_equal_t
#define __pyx_n_s_class __pyx_mstate_global->__pyx_n_s_class
#define __pyx_n_s_classSeparation __pyx_mstate_global->__pyx_n_s_classSeparation
#define __pyx_n_s_classSeparation___reduce_cython __pyx_mstate_global->__pyx_n_s_classSeparation___reduce_cython
#define __pyx_n_s_classSeparation___setstate_cytho __pyx_mstate_global->__pyx_n_s_classSeparation___setstate_cytho
#define __pyx_n_s_classSeparation_extra __pyx_mstate_global->__pyx_n_s_classSeparation_extra
#define __pyx_n_s_classSeparation_intra __pyx_mstate_global->__pyx_n_s_classSeparation_intra
#define __pyx_n_s_class_getitem __pyx_mstate_global->__pyx_n_s_class_getitem
#define __pyx_n_s_cline_in_traceback __pyx_mstate_global->__pyx_n_s_cline_in_traceback
#define __pyx_n_s_colMax __pyx_mstate_global->__pyx_n_s_colMax
#define __pyx_n_s_colMin __pyx_mstate_global->__pyx_n_s_colMin
#define __pyx_n_s_collections __pyx_mstate_global->__pyx_n_s_collections
#define __pyx_kp_s_collections_abc __pyx_mstate_global->__pyx_kp_s_collections_abc
#define __pyx_n_s_cols __pyx_mstate_global->__pyx_n_s_cols
#define __pyx_n_s_concat __pyx_mstate_global->__pyx_n_s_concat
#define __pyx_n_s_connect __pyx_mstate_global->__pyx_n_s_connect
#define __pyx_n_s_connectRegular __pyx_mstate_global->__pyx_n_s_connectRegular
#define __pyx_kp_s_contiguous_and_direct __pyx_mstate_global->__pyx_kp_s_contiguous_and_direct
#define __pyx_kp_s_contiguous_and_indirect __pyx_mstate_global->__pyx_kp_s_contiguous_and_indirect
#define __pyx_n_s_coordinateReady __pyx_mstate_global->__pyx_n_s_coordinateReady
#define __pyx_n_s_copy __pyx_mstate_global->__pyx_n_s_copy
#define __pyx_n_s_cos __pyx_mstate_global->__pyx_n_s_cos
#define __pyx_n_s_cos___reduce_cython __pyx_mstate_global->__pyx_n_s_cos___reduce_cython
#define __pyx_n_s_cos___setstate_cython __pyx_mstate_global->__pyx_n_s_cos___setstate_cython
#define __pyx_n_s_cosh __pyx_mstate_global->__pyx_n_s_cosh
#define __pyx_n_s_cosh___reduce_cython __pyx_mstate_global->__pyx_n_s_cosh___reduce_cython
#define __pyx_n_s_cosh___setstate_cython __pyx_mstate_global->__pyx_n_s_cosh___setstate_cython
#define __pyx_n_s_count __pyx_mstate_global->__pyx_n_s_count
#define __pyx_n_s_ctype __pyx_mstate_global->__pyx_n_s_ctype
#define __pyx_n_s_ctypes __pyx_mstate_global->__pyx_n_s_ctypes
#define __pyx_n_s_curvature __pyx_mstate_global->__pyx_n_s_curvature
#define __pyx_n_s_cut __pyx_mstate_global->__pyx_n_s_cut
#define __pyx_n_s_degree __pyx_mstate_global->__pyx_n_s_degree
#define __pyx_n_s_dict __pyx_mstate_global->__pyx_n_s_dict
#define __pyx_n_s_dict_2 __pyx_mstate_global->__pyx_n_s_dict_2
#define __pyx_n_s_dim __pyx_mstate_global->__pyx_n_s_dim
#define __pyx_kp_u_disable __pyx_mstate_global->__pyx_kp_u_disable
#define __pyx_n_s_distance __pyx_mstate_global->__pyx_n_s_distance
#define __pyx_n_s_dot __pyx_mstate_global->__pyx_n_s_dot
#define __pyx_n_s_double __pyx_mstate_global->__pyx_n_s_double
#define __pyx_n_s_dtype __pyx_mstate_global->__pyx_n_s_dtype
#define __pyx_n_s_dtype_is_object __pyx_mstate_global->__pyx_n_s_dtype_is_object
#define __pyx_n_s_edges __pyx_mstate_global->__pyx_n_s_edges
#define __pyx_n_s_empty __pyx_mstate_global->__pyx_n_s_empty
#define __pyx_kp_u_enable __pyx_mstate_global->__pyx_kp_u_enable
#define __pyx_n_s_encode __pyx_mstate_global->__pyx_n_s_encode
#define __pyx_n_s_end __pyx_mstate_global->__pyx_n_s_end
#define __pyx_n_s_enumerate __pyx_mstate_global->__pyx_n_s_enumerate
#define __pyx_n_s_error __pyx_mstate_global->__pyx_n_s_error
#define __pyx_n_s_exp __pyx_mstate_global->__pyx_n_s_exp
#define __pyx_n_s_exp___reduce_cython __pyx_mstate_global->__pyx_n_s_exp___reduce_cython
#define __pyx_n_s_exp___setstate_cython __pyx_mstate_global->__pyx_n_s_exp___setstate_cython
#define __pyx_n_s_extra __pyx_mstate_global->__pyx_n_s_extra
#define __pyx_n_s_fabs __pyx_mstate_global->__pyx_n_s_fabs
#define __pyx_n_s_fabs___reduce_cython __pyx_mstate_global->__pyx_n_s_fabs___reduce_cython
#define __pyx_n_s_fabs___setstate_cython __pyx_mstate_global->__pyx_n_s_fabs___setstate_cython
#define __pyx_n_s_filename __pyx_mstate_global->__pyx_n_s_filename
#define __pyx_n_s_flags __pyx_mstate_global->__pyx_n_s_flags
#define __pyx_n_s_flatten __pyx_mstate_global->__pyx_n_s_flatten
#define __pyx_n_s_float __pyx_mstate_global->__pyx_n_s_float
#define __pyx_n_s_format __pyx_mstate_global->__pyx_n_s_format
#define __pyx_n_s_fortran __pyx_mstate_global->__pyx_n_s_fortran
#define __pyx_n_u_fortran __pyx_mstate_global->__pyx_n_u_fortran
#define __pyx_n_s_fromEuclidean __pyx_mstate_global->__pyx_n_s_fromEuclidean
#define __pyx_n_s_g __pyx_mstate_global->__pyx_n_s_g
#define __pyx_n_s_gaussianNormalize __pyx_mstate_global->__pyx_n_s_gaussianNormalize
#define __pyx_n_s_gaussianScale __pyx_mstate_global->__pyx_n_s_gaussianScale
#define __pyx_kp_u_gc __pyx_mstate_global->__pyx_kp_u_gc
#define __pyx_n_s_getstate __pyx_mstate_global->__pyx_n_s_getstate
#define __pyx_n_s_global_ctype __pyx_mstate_global->__pyx_n_s_global_ctype
#define __pyx_kp_u_got __pyx_mstate_global->__pyx_kp_u_got
#define __pyx_kp_u_got_differing_extents_in_dimensi __pyx_mstate_global->__pyx_kp_u_got_differing_extents_in_dimensi
#define __pyx_n_s_gshape __pyx_mstate_global->__pyx_n_s_gshape
#define __pyx_n_s_hadamard __pyx_mstate_global->__pyx_n_s_hadamard
#define __pyx_n_s_hyperbolicity __pyx_mstate_global->__pyx_n_s_hyperbolicity
#define __pyx_n_s_i __pyx_mstate_global->__pyx_n_s_i
#define __pyx_kp_s_i_is_not_a_valid_index_for_Digra __pyx_mstate_global->__pyx_kp_s_i_is_not_a_valid_index_for_Digra
#define __pyx_n_s_id __pyx_mstate_global->__pyx_n_s_id
#define __pyx_n_s_import __pyx_mstate_global->__pyx_n_s_import
#define __pyx_n_s_index __pyx_mstate_global->__pyx_n_s_index
#define __pyx_n_s_init __pyx_mstate_global->__pyx_n_s_init
#define __pyx_n_s_init_2 __pyx_mstate_global->__pyx_n_s_init_2
#define __pyx_n_s_initializing __pyx_mstate_global->__pyx_n_s_initializing
#define __pyx_n_s_int __pyx_mstate_global->__pyx_n_s_int
#define __pyx_n_s_intra __pyx_mstate_global->__pyx_n_s_intra
#define __pyx_n_s_isDiagonal __pyx_mstate_global->__pyx_n_s_isDiagonal
#define __pyx_n_s_isDigraph __pyx_mstate_global->__pyx_n_s_isDigraph
#define __pyx_n_s_isGraph __pyx_mstate_global->__pyx_n_s_isGraph
#define __pyx_n_s_isIn __pyx_mstate_global->__pyx_n_s_isIn
#define __pyx_n_s_isMatrix __pyx_mstate_global->__pyx_n_s_isMatrix
#define __pyx_n_s_isTangent __pyx_mstate_global->__pyx_n_s_isTangent
#define __pyx_n_s_is_coroutine __pyx_mstate_global->__pyx_n_s_is_coroutine
#define __pyx_kp_u_isenabled __pyx_mstate_global->__pyx_kp_u_isenabled
#define __pyx_n_s_isolatedNodes __pyx_mstate_global->__pyx_n_s_isolatedNodes
#define __pyx_n_s_itemsize __pyx_mstate_global->__pyx_n_s_itemsize
#define __pyx_kp_s_itemsize_0_for_cython_array __pyx_mstate_global->__pyx_kp_s_itemsize_0_for_cython_array
#define __pyx_n_s_j __pyx_mstate_global->__pyx_n_s_j
#define __pyx_kp_s_j_is_not_a_valid_index_for_Digra __pyx_mstate_global->__pyx_kp_s_j_is_not_a_valid_index_for_Digra
#define __pyx_n_s_k __pyx_mstate_global->__pyx_n_s_k
#define __pyx_n_s_kmpp __pyx_mstate_global->__pyx_n_s_kmpp
#define __pyx_n_s_labels __pyx_mstate_global->__pyx_n_s_labels
#define __pyx_kp_s_labels_must_have_size_equal_to_s __pyx_mstate_global->__pyx_kp_s_labels_must_have_size_equal_to_s
#define __pyx_n_s_laplacian __pyx_mstate_global->__pyx_n_s_laplacian
#define __pyx_n_s_loadtxt __pyx_mstate_global->__pyx_n_s_loadtxt
#define __pyx_n_s_log __pyx_mstate_global->__pyx_n_s_log
#define __pyx_n_s_log___reduce_cython __pyx_mstate_global->__pyx_n_s_log___reduce_cython
#define __pyx_n_s_log___setstate_cython __pyx_mstate_global->__pyx_n_s_log___setstate_cython
#define __pyx_n_s_lorentzDistance __pyx_mstate_global->__pyx_n_s_lorentzDistance
#define __pyx_n_s_m __pyx_mstate_global->__pyx_n_s_m
#define __pyx_n_s_main __pyx_mstate_global->__pyx_n_s_main
#define __pyx_n_s_max __pyx_mstate_global->__pyx_n_s_max
#define __pyx_n_s_max_0 __pyx_mstate_global->__pyx_n_s_max_0
#define __pyx_n_s_max_1 __pyx_mstate_global->__pyx_n_s_max_1
#define __pyx_n_s_mean __pyx_mstate_global->__pyx_n_s_mean
#define __pyx_n_s_memview __pyx_mstate_global->__pyx_n_s_memview
#define __pyx_n_s_metricDistance __pyx_mstate_global->__pyx_n_s_metricDistance
#define __pyx_n_s_min __pyx_mstate_global->__pyx_n_s_min
#define __pyx_n_s_minmaxNormalize __pyx_mstate_global->__pyx_n_s_minmaxNormalize
#define __pyx_n_s_miolo __pyx_mstate_global->__pyx_n_s_miolo
#define __pyx_n_s_mioloObject __pyx_mstate_global->__pyx_n_s_mioloObject
#define __pyx_n_s_mioloObject___reduce_cython __pyx_mstate_global->__pyx_n_s_mioloObject___reduce_cython
#define __pyx_n_s_mioloObject___setstate_cython __pyx_mstate_global->__pyx_n_s_mioloObject___setstate_cython
#define __pyx_n_s_mioloObject_isDiagonal __pyx_mstate_global->__pyx_n_s_mioloObject_isDiagonal
#define __pyx_n_s_mioloObject_isDigraph __pyx_mstate_global->__pyx_n_s_mioloObject_isDigraph
#define __pyx_n_s_mioloObject_isGraph __pyx_mstate_global->__pyx_n_s_mioloObject_isGraph
#define __pyx_n_s_mioloObject_isMatrix __pyx_mstate_global->__pyx_n_s_mioloObject_isMatrix
#define __pyx_kp_s_miololib_pyx __pyx_mstate_global->__pyx_kp_s_miololib_pyx
#define __pyx_n_s_mode __pyx_mstate_global->__pyx_n_s_mode
#define __pyx_n_s_n __pyx_mstate_global->__pyx_n_s_n
#define __pyx_n_s_name __pyx_mstate_global->__pyx_n_s_name
#define __pyx_n_s_name_2 __pyx_mstate_global->__pyx_n_s_name_2
#define __pyx_n_s_ndim __pyx_mstate_global->__pyx_n_s_ndim
#define __pyx_n_s_new __pyx_mstate_global->__pyx_n_s_new
#define __pyx_kp_s_no_default___reduce___due_to_non __pyx_mstate_global->__pyx_kp_s_no_default___reduce___due_to_non
#define __pyx_n_s_nodes __pyx_mstate_global->__pyx_n_s_nodes
#define __pyx_n_s_normalize __pyx_mstate_global->__pyx_n_s_normalize
#define __pyx_n_s_np __pyx_mstate_global->__pyx_n_s_np
#define __pyx_n_s_null __pyx_mstate_global->__pyx_n_s_null
#define __pyx_n_s_numpy __pyx_mstate_global->__pyx_n_s_numpy
#define __pyx_kp_s_numpy__core_multiarray_failed_to __pyx_mstate_global->__pyx_kp_s_numpy__core_multiarray_failed_to
#define __pyx_kp_s_numpy__core_umath_failed_to_impo __pyx_mstate_global->__pyx_kp_s_numpy__core_umath_failed_to_impo
#define __pyx_n_s_obj __pyx_mstate_global->__pyx_n_s_obj
#define __pyx_n_s_only __pyx_mstate_global->__pyx_n_s_only
#define __pyx_n_s_out __pyx_mstate_global->__pyx_n_s_out
#define __pyx_n_s_output __pyx_mstate_global->__pyx_n_s_output
#define __pyx_n_s_pack __pyx_mstate_global->__pyx_n_s_pack
#define __pyx_n_s_partition __pyx_mstate_global->__pyx_n_s_partition
#define __pyx_n_s_pickle __pyx_mstate_global->__pyx_n_s_pickle
#define __pyx_n_s_pottsEnergy __pyx_mstate_global->__pyx_n_s_pottsEnergy
#define __pyx_n_s_pottsEnergy___reduce_cython __pyx_mstate_global->__pyx_n_s_pottsEnergy___reduce_cython
#define __pyx_n_s_pottsEnergy___setstate_cython __pyx_mstate_global->__pyx_n_s_pottsEnergy___setstate_cython
#define __pyx_n_s_print __pyx_mstate_global->__pyx_n_s_print
#define __pyx_n_s_propagate __pyx_mstate_global->__pyx_n_s_propagate
#define __pyx_n_s_pyx_PickleError __pyx_mstate_global->__pyx_n_s_pyx_PickleError
#define __pyx_n_s_pyx_checksum __pyx_mstate_global->__pyx_n_s_pyx_checksum
#define __pyx_n_s_pyx_result __pyx_mstate_global->__pyx_n_s_pyx_result
#define __pyx_n_s_pyx_state __pyx_mstate_global->__pyx_n_s_pyx_state
#define __pyx_n_s_pyx_type __pyx_mstate_global->__pyx_n_s_pyx_type
#define __pyx_n_s_pyx_unpickle_Enum __pyx_mstate_global->__pyx_n_s_pyx_unpickle_Enum
#define __pyx_n_s_pyx_unpickle_Manifold __pyx_mstate_global->__pyx_n_s_pyx_unpickle_Manifold
#define __pyx_n_s_pyx_vtable __pyx_mstate_global->__pyx_n_s_pyx_vtable
#define __pyx_n_s_radius __pyx_mstate_global->__pyx_n_s_radius
#define __pyx_n_s_range __pyx_mstate_global->__pyx_n_s_range
#define __pyx_n_s_recp __pyx_mstate_global->__pyx_n_s_recp
#define __pyx_n_s_recp___reduce_cython __pyx_mstate_global->__pyx_n_s_recp___reduce_cython
#define __pyx_n_s_recp___setstate_cython __pyx_mstate_global->__pyx_n_s_recp___setstate_cython
#define __pyx_n_s_reduce __pyx_mstate_global->__pyx_n_s_reduce
#define __pyx_n_s_reduce_cython __pyx_mstate_global->__pyx_n_s_reduce_cython
#define __pyx_n_s_reduce_ex __pyx_mstate_global->__pyx_n_s_reduce_ex
#define __pyx_n_s_register __pyx_mstate_global->__pyx_n_s_register
#define __pyx_n_s_reshape __pyx_mstate_global->__pyx_n_s_reshape
#define __pyx_n_s_rowDistance __pyx_mstate_global->__pyx_n_s_rowDistance
#define __pyx_n_s_rowMax __pyx_mstate_global->__pyx_n_s_rowMax
#define __pyx_n_s_rowMin __pyx_mstate_global->__pyx_n_s_rowMin
#define __pyx_n_s_rowNormalize __pyx_mstate_global->__pyx_n_s_rowNormalize
#define __pyx_n_s_rows __pyx_mstate_global->__pyx_n_s_rows
#define __pyx_n_s_sameShape __pyx_mstate_global->__pyx_n_s_sameShape
#define __pyx_n_s_self __pyx_mstate_global->__pyx_n_s_self
#define __pyx_kp_s_self_diagonalDouble_self_diagona __pyx_mstate_global->__pyx_kp_s_self_diagonalDouble_self_diagona
#define __pyx_kp_s_self_view_cannot_be_converted_to __pyx_mstate_global->__pyx_kp_s_self_view_cannot_be_converted_to
#define __pyx_n_s_setstate __pyx_mstate_global->__pyx_n_s_setstate
#define __pyx_n_s_setstate_cython __pyx_mstate_global->__pyx_n_s_setstate_cython
#define __pyx_n_s_shape __pyx_mstate_global->__pyx_n_s_shape
#define __pyx_n_s_sin __pyx_mstate_global->__pyx_n_s_sin
#define __pyx_n_s_sin___reduce_cython __pyx_mstate_global->__pyx_n_s_sin___reduce_cython
#define __pyx_n_s_sin___setstate_cython __pyx_mstate_global->__pyx_n_s_sin___setstate_cython
#define __pyx_n_s_single __pyx_mstate_global->__pyx_n_s_single
#define __pyx_n_s_sinh __pyx_mstate_global->__pyx_n_s_sinh
#define __pyx_n_s_sinh___reduce_cython __pyx_mstate_global->__pyx_n_s_sinh___reduce_cython
#define __pyx_n_s_sinh___setstate_cython __pyx_mstate_global->__pyx_n_s_sinh___setstate_cython
#define __pyx_n_s_size __pyx_mstate_global->__pyx_n_s_size
#define __pyx_n_s_sparsifyKNN __pyx_mstate_global->__pyx_n_s_sparsifyKNN
#define __pyx_n_s_sparsifyThreshold __pyx_mstate_global->__pyx_n_s_sparsifyThreshold
#define __pyx_n_s_spec __pyx_mstate_global->__pyx_n_s_spec
#define __pyx_n_s_sqrt __pyx_mstate_global->__pyx_n_s_sqrt
#define __pyx_n_s_sqrt___reduce_cython __pyx_mstate_global->__pyx_n_s_sqrt___reduce_cython
#define __pyx_n_s_sqrt___setstate_cython __pyx_mstate_global->__pyx_n_s_sqrt___setstate_cython
#define __pyx_n_s_start __pyx_mstate_global->__pyx_n_s_start
#define __pyx_n_s_state __pyx_mstate_global->__pyx_n_s_state
#define __pyx_n_s_step __pyx_mstate_global->__pyx_n_s_step
#define __pyx_n_s_stereographicProjection __pyx_mstate_global->__pyx_n_s_stereographicProjection
#define __pyx_n_s_stop __pyx_mstate_global->__pyx_n_s_stop
#define __pyx_n_s_str_memory __pyx_mstate_global->__pyx_n_s_str_memory
#define __pyx_kp_s_strided_and_direct __pyx_mstate_global->__pyx_kp_s_strided_and_direct
#define __pyx_kp_s_strided_and_direct_or_indirect __pyx_mstate_global->__pyx_kp_s_strided_and_direct_or_indirect
#define __pyx_kp_s_strided_and_indirect __pyx_mstate_global->__pyx_kp_s_strided_and_indirect
#define __pyx_kp_s_stringsource __pyx_mstate_global->__pyx_kp_s_stringsource
#define __pyx_n_s_struct __pyx_mstate_global->__pyx_n_s_struct
#define __pyx_n_s_structure __pyx_mstate_global->__pyx_n_s_structure
#define __pyx_n_s_sumAll __pyx_mstate_global->__pyx_n_s_sumAll
#define __pyx_n_s_super __pyx_mstate_global->__pyx_n_s_super
#define __pyx_n_s_symmetrize __pyx_mstate_global->__pyx_n_s_symmetrize
#define __pyx_n_s_sys __pyx_mstate_global->__pyx_n_s_sys
#define __pyx_n_s_tan __pyx_mstate_global->__pyx_n_s_tan
#define __pyx_n_s_tan___reduce_cython __pyx_mstate_global->__pyx_n_s_tan___reduce_cython
#define __pyx_n_s_tan___setstate_cython __pyx_mstate_global->__pyx_n_s_tan___setstate_cython
#define __pyx_n_s_tangent __pyx_mstate_global->__pyx_n_s_tangent
#define __pyx_n_s_tangentProjection __pyx_mstate_global->__pyx_n_s_tangentProjection
#define __pyx_n_s_tanh __pyx_mstate_global->__pyx_n_s_tanh
#define __pyx_n_s_tanh___reduce_cython __pyx_mstate_global->__pyx_n_s_tanh___reduce_cython
#define __pyx_n_s_tanh___setstate_cython __pyx_mstate_global->__pyx_n_s_tanh___setstate_cython
#define __pyx_n_s_targetLabel __pyx_mstate_global->__pyx_n_s_targetLabel
#define __pyx_n_s_test __pyx_mstate_global->__pyx_n_s_test
#define __pyx_n_s_toDigraph __pyx_mstate_global->__pyx_n_s_toDigraph
#define __pyx_n_s_toEuclidean __pyx_mstate_global->__pyx_n_s_toEuclidean
#define __pyx_n_s_toGraph __pyx_mstate_global->__pyx_n_s_toGraph
#define __pyx_n_s_toMatrix __pyx_mstate_global->__pyx_n_s_toMatrix
#define __pyx_n_s_tolerance __pyx_mstate_global->__pyx_n_s_tolerance
#define __pyx_n_s_trace __pyx_mstate_global->__pyx_n_s_trace
#define __pyx_n_s_transpose __pyx_mstate_global->__pyx_n_s_transpose
#define __pyx_n_s_txtGraph __pyx_mstate_global->__pyx_n_s_txtGraph
#define __pyx_n_s_txtMatrix __pyx_mstate_global->__pyx_n_s_txtMatrix
#define __pyx_n_s_ufunction __pyx_mstate_global->__pyx_n_s_ufunction
#define __pyx_n_s_ufunction___reduce_cython __pyx_mstate_global->__pyx_n_s_ufunction___reduce_cython
#define __pyx_n_s_ufunction___setstate_cython __pyx_mstate_global->__pyx_n_s_ufunction___setstate_cython
#define __pyx_n_s_ulong __pyx_mstate_global->__pyx_n_s_ulong
#define __pyx_kp_s_unable_to_allocate_array_data __pyx_mstate_global->__pyx_kp_s_unable_to_allocate_array_data
#define __pyx_kp_s_unable_to_allocate_shape_and_str __pyx_mstate_global->__pyx_kp_s_unable_to_allocate_shape_and_str
#define __pyx_n_s_unpack __pyx_mstate_global->__pyx_n_s_unpack
#define __pyx_n_s_update __pyx_mstate_global->__pyx_n_s_update
#define __pyx_n_s_use_setstate __pyx_mstate_global->__pyx_n_s_use_setstate
#define __pyx_n_s_value __pyx_mstate_global->__pyx_n_s_value
#define __pyx_n_s_variance __pyx_mstate_global->__pyx_n_s_variance
#define __pyx_n_s_version_info __pyx_mstate_global->__pyx_n_s_version_info
#define __pyx_n_s_view __pyx_mstate_global->__pyx_n_s_view
#define __pyx_n_s_weightedDotProduct __pyx_mstate_global->__pyx_n_s_weightedDotProduct
#define __pyx_n_s_weightedDotProduct___reduce_cyth __pyx_mstate_global->__pyx_n_s_weightedDotProduct___reduce_cyth
#define __pyx_n_s_weightedDotProduct___setstate_cy __pyx_mstate_global->__pyx_n_s_weightedDotProduct___setstate_cy
#define __pyx_n_s_weightedSquareDistance __pyx_mstate_global->__pyx_n_s_weightedSquareDistance
#define __pyx_n_s_weightedSquareDistance___reduce __pyx_mstate_global->__pyx_n_s_weightedSquareDistance___reduce
#define __pyx_n_s_weightedSquareDistance___setstat __pyx_mstate_global->__pyx_n_s_weightedSquareDistance___setstat
#define __pyx_n_s_weights __pyx_mstate_global->__pyx_n_s_weights
#define __pyx_n_s_whole __pyx_mstate_global->__pyx_n_s_whole
#define __pyx_float_1_ __pyx_mstate_global->__pyx_float_1_
#define __pyx_float_0_001 __pyx_mstate_global->__pyx_float_0_001
#define __pyx_int_0 __pyx_mstate_global->__pyx_int_0
#define __pyx_int_1 __pyx_mstate_global->__pyx_int_1
#define __pyx_int_2 __pyx_mstate_global->__pyx_int_2
#define __pyx_int_3 __pyx_mstate_global->__pyx_int_3
#define __pyx_int_112105877 __pyx_mstate_global->__pyx_int_112105877
#define __pyx_int_136983863 __pyx_mstate_global->__pyx_int_136983863
#define __pyx_int_184977713 __pyx_mstate_global->__pyx_int_184977713
#define __pyx_int_222419149 __pyx_mstate_global->__pyx_int_222419149
#define __pyx_int_228825662 __pyx_mstate_global->__pyx_int_228825662
#define __pyx_int_238750788 __pyx_mstate_global->__pyx_int_238750788
#define __pyx_int_neg_1 __pyx_mstate_global->__pyx_int_neg_1
#define __pyx_k__11 __pyx_mstate_global->__pyx_k__11
#define __pyx_k__15 __pyx_mstate_global->__pyx_k__15
#define __pyx_k__33 __pyx_mstate_global->__pyx_k__33
#define __pyx_k__36 __pyx_mstate_global->__pyx_k__36
#define __pyx_k__45 __pyx_mstate_global->__pyx_k__45
#define __pyx_k__57 __pyx_mstate_global->__pyx_k__57
#define __pyx_slice__5 __pyx_mstate_global->__pyx_slice__5
#define __pyx_tuple__4 __pyx_mstate_global->__pyx_tuple__4
#define __pyx_tuple__8 __pyx_mstate_global->__pyx_tuple__8
#define __pyx_tuple__9 __pyx_mstate_global->__pyx_tuple__9
#define __pyx_slice__66 __pyx_mstate_global->__pyx_slice__66
#define __pyx_tuple__10 __pyx_mstate_global->__pyx_tuple__10
#define __pyx_tuple__12 __pyx_mstate_global->__pyx_tuple__12
#define __pyx_tuple__13 __pyx_mstate_global->__pyx_tuple__13
#define __pyx_tuple__14 __pyx_mstate_global->__pyx_tuple__14
#define __pyx_tuple__16 __pyx_mstate_global->__pyx_tuple__16
#define __pyx_tuple__17 __pyx_mstate_global->__pyx_tuple__17
#define __pyx_tuple__18 __pyx_mstate_global->__pyx_tuple__18
#define __pyx_tuple__19 __pyx_mstate_global->__pyx_tuple__19
#define __pyx_tuple__20 __pyx_mstate_global->__pyx_tuple__20
#define __pyx_tuple__21 __pyx_mstate_global->__pyx_tuple__21
#define __pyx_tuple__22 __pyx_mstate_global->__pyx_tuple__22
#define __pyx_tuple__23 __pyx_mstate_global->__pyx_tuple__23
#define __pyx_tuple__24 __pyx_mstate_global->__pyx_tuple__24
#define __pyx_tuple__25 __pyx_mstate_global->__pyx_tuple__25
#define __pyx_tuple__26 __pyx_mstate_global->__pyx_tuple__26
#define __pyx_tuple__27 __pyx_mstate_global->__pyx_tuple__27
#define __pyx_tuple__28 __pyx_mstate_global->__pyx_tuple__28
#define __pyx_tuple__29 __pyx_mstate_global->__pyx_tuple__29
#define __pyx_tuple__30 __pyx_mstate_global->__pyx_tuple__30
#define __pyx_tuple__31 __pyx_mstate_global->__pyx_tuple__31
#define __pyx_tuple__32 __pyx_mstate_global->__pyx_tuple__32
#define __pyx_tuple__34 __pyx_mstate_global->__pyx_tuple__34
#define __pyx_tuple__35 __pyx_mstate_global->__pyx_tuple__35
#define __pyx_tuple__37 __pyx_mstate_global->__pyx_tuple__37
#define __pyx_tuple__38 __pyx_mstate_global->__pyx_tuple__38
#define __pyx_tuple__39 __pyx_mstate_global->__pyx_tuple__39
#define __pyx_tuple__40 __pyx_mstate_global->__pyx_tuple__40
#define __pyx_tuple__41 __pyx_mstate_global->__pyx_tuple__41
#define __pyx_tuple__42 __pyx_mstate_global->__pyx_tuple__42
#define __pyx_tuple__43 __pyx_mstate_global->__pyx_tuple__43
#define __pyx_tuple__44 __pyx_mstate_global->__pyx_tuple__44
#define __pyx_tuple__46 __pyx_mstate_global->__pyx_tuple__46
#define __pyx_tuple__47 __pyx_mstate_global->__pyx_tuple__47
#define __pyx_tuple__48 __pyx_mstate_global->__pyx_tuple__48
#define __pyx_tuple__49 __pyx_mstate_global->__pyx_tuple__49
#define __pyx_tuple__50 __pyx_mstate_global->__pyx_tuple__50
#define __pyx_tuple__51 __pyx_mstate_global->__pyx_tuple__51
#define __pyx_tuple__52 __pyx_mstate_global->__pyx_tuple__52
#define __pyx_tuple__53 __pyx_mstate_global->__pyx_tuple__53
#define __pyx_tuple__54 __pyx_mstate_global->__pyx_tuple__54
#define __pyx_tuple__55 __pyx_mstate_global->__pyx_tuple__55
#define __pyx_tuple__56 __pyx_mstate_global->__pyx_tuple__56
#define __pyx_tuple__58 __pyx_mstate_global->__pyx_tuple__58
#define __pyx_tuple__59 __pyx_mstate_global->__pyx_tuple__59
#define __pyx_tuple__60 __pyx_mstate_global->__pyx_tuple__60
#define __pyx_tuple__61 __pyx_mstate_global->__pyx_tuple__61
#define __pyx_tuple__62 __pyx_mstate_global->__pyx_tuple__62
#define __pyx_tuple__63 __pyx_mstate_global->__pyx_tuple__63
#define __pyx_tuple__64 __pyx_mstate_global->__pyx_tuple__64
#define __pyx_tuple__65 __pyx_mstate_global->__pyx_tuple__65
#define __pyx_tuple__67 __pyx_mstate_global->__pyx_tuple__67
#define __pyx_tuple__68 __pyx_mstate_global->__pyx_tuple__68
#define __pyx_tuple__69 __pyx_mstate_global->__pyx_tuple__69
#define __pyx_tuple__70 __pyx_mstate_global->__pyx_tuple__70
#define __pyx_tuple__71 __pyx_mstate_global->__pyx_tuple__71
#define __pyx_tuple__72 __pyx_mstate_global->__pyx_tuple__72
#define __pyx_tuple__73 __pyx_mstate_global->__pyx_tuple__73
#define __pyx_tuple__74 __pyx_mstate_global->__pyx_tuple__74
#define __pyx_tuple__75 __pyx_mstate_global->__pyx_tuple__75
#define __pyx_tuple__76 __pyx_mstate_global->__pyx_tuple__76
#define __pyx_tuple__77 __pyx_mstate_global->__pyx_tuple__77
#define __pyx_tuple__78 __pyx_mstate_global->__pyx_tuple__78
#define __pyx_tuple__79 __pyx_mstate_global->__pyx_tuple__79
#define __pyx_tuple__80 __pyx_mstate_global->__pyx_tuple__80
#define __pyx_tuple__81 __pyx_mstate_global->__pyx_tuple__81
#define __pyx_tuple__82 __pyx_mstate_global->__pyx_tuple__82
#define __pyx_tuple__83 __pyx_mstate_global->__pyx_tuple__83
#define __pyx_tuple__84 __pyx_mstate_global->__pyx_tuple__84
#define __pyx_tuple__85 __pyx_mstate_global->__pyx_tuple__85
#define __pyx_tuple__86 __pyx_mstate_global->__pyx_tuple__86
#define __pyx_tuple__87 __pyx_mstate_global->__pyx_tuple__87
#define __pyx_tuple__88 __pyx_mstate_global->__pyx_tuple__88
#define __pyx_tuple__89 __pyx_mstate_global->__pyx_tuple__89
#define __pyx_tuple__90 __pyx_mstate_global->__pyx_tuple__90
#define __pyx_tuple__91 __pyx_mstate_global->__pyx_tuple__91
#define __pyx_tuple__92 __pyx_mstate_global->__pyx_tuple__92
#define __pyx_tuple__93 __pyx_mstate_global->__pyx_tuple__93
#define __pyx_tuple__94 __pyx_mstate_global->__pyx_tuple__94
#define __pyx_tuple__95 __pyx_mstate_global->__pyx_tuple__95
#define __pyx_tuple__96 __pyx_mstate_global->__pyx_tuple__96
#define __pyx_tuple__97 __pyx_mstate_global->__pyx_tuple__97
#define __pyx_tuple__98 __pyx_mstate_global->__pyx_tuple__98
#define __pyx_tuple__100 __pyx_mstate_global->__pyx_tuple__100
#define __pyx_tuple__106 __pyx_mstate_global->__pyx_tuple__106
#define __pyx_tuple__108 __pyx_mstate_global->__pyx_tuple__108
#define __pyx_tuple__111 __pyx_mstate_global->__pyx_tuple__111
#define __pyx_tuple__115 __pyx_mstate_global->__pyx_tuple__115
#define __pyx_tuple__117 __pyx_mstate_global->__pyx_tuple__117
#define __pyx_tuple__120 __pyx_mstate_global->__pyx_tuple__120
#define __pyx_tuple__122 __pyx_mstate_global->__pyx_tuple__122
#define __pyx_tuple__124 __pyx_mstate_global->__pyx_tuple__124
#define __pyx_tuple__125 __pyx_mstate_global->__pyx_tuple__125
#define __pyx_tuple__127 __pyx_mstate_global->__pyx_tuple__127
#define __pyx_tuple__129 __pyx_mstate_global->__pyx_tuple__129
#define __pyx_tuple__130 __pyx_mstate_global->__pyx_tuple__130
#define __pyx_tuple__132 __pyx_mstate_global->__pyx_tuple__132
#define __pyx_tuple__137 __pyx_mstate_global->__pyx_tuple__137
#define __pyx_tuple__142 __pyx_mstate_global->__pyx_tuple__142
#define __pyx_tuple__144 __pyx_mstate_global->__pyx_tuple__144
#define __pyx_tuple__148 __pyx_mstate_global->__pyx_tuple__148
#define __pyx_tuple__161 __pyx_mstate_global->__pyx_tuple__161
#define __pyx_tuple__163 __pyx_mstate_global->__pyx_tuple__163
#define __pyx_tuple__165 __pyx_mstate_global->__pyx_tuple__165
#define __pyx_tuple__167 __pyx_mstate_global->__pyx_tuple__167
#define __pyx_tuple__168 __pyx_mstate_global->__pyx_tuple__168
#define __pyx_tuple__171 __pyx_mstate_global->__pyx_tuple__171
#define __pyx_tuple__173 __pyx_mstate_global->__pyx_tuple__173
#define __pyx_tuple__174 __pyx_mstate_global->__pyx_tuple__174
#define __pyx_tuple__177 __pyx_mstate_global->__pyx_tuple__177
#define __pyx_tuple__181 __pyx_mstate_global->__pyx_tuple__181
#define __pyx_tuple__187 __pyx_mstate_global->__pyx_tuple__187
#define __pyx_tuple__189 __pyx_mstate_global->__pyx_tuple__189
#define __pyx_tuple__191 __pyx_mstate_global->__pyx_tuple__191
#define __pyx_tuple__194 __pyx_mstate_global->__pyx_tuple__194
#define __pyx_tuple__202 __pyx_mstate_global->__pyx_tuple__202
#define __pyx_tuple__204 __pyx_mstate_global->__pyx_tuple__204
#define __pyx_tuple__208 __pyx_mstate_global->__pyx_tuple__208
#define __pyx_tuple__212 __pyx_mstate_global->__pyx_tuple__212
#define __pyx_tuple__215 __pyx_mstate_global->__pyx_tuple__215
#define __pyx_tuple__217 __pyx_mstate_global->__pyx_tuple__217
#define __pyx_tuple__218 __pyx_mstate_global->__pyx_tuple__218
#define __pyx_tuple__220 __pyx_mstate_global->__pyx_tuple__220
#define __pyx_tuple__226 __pyx_mstate_global->__pyx_tuple__226
#define __pyx_tuple__228 __pyx_mstate_global->__pyx_tuple__228
#define __pyx_tuple__230 __pyx_mstate_global->__pyx_tuple__230
#define __pyx_tuple__232 __pyx_mstate_global->__pyx_tuple__232
#define __pyx_tuple__288 __pyx_mstate_global->__pyx_tuple__288
#define __pyx_codeobj__99 __pyx_mstate_global->__pyx_codeobj__99
#define __pyx_codeobj__101 __pyx_mstate_global->__pyx_codeobj__101
#define __pyx_codeobj__102 __pyx_mstate_global->__pyx_codeobj__102
#define __pyx_codeobj__103 __pyx_mstate_global->__pyx_codeobj__103
#define __pyx_codeobj__104 __pyx_mstate_global->__pyx_codeobj__104
#define __pyx_codeobj__105 __pyx_mstate_global->__pyx_codeobj__105
#define __pyx_codeobj__107 __pyx_mstate_global->__pyx_codeobj__107
#define __pyx_codeobj__109 __pyx_mstate_global->__pyx_codeobj__109
#define __pyx_codeobj__110 __pyx_mstate_global->__pyx_codeobj__110
#define __pyx_codeobj__112 __pyx_mstate_global->__pyx_codeobj__112
#define __pyx_codeobj__113 __pyx_mstate_global->__pyx_codeobj__113
#define __pyx_codeobj__114 __pyx_mstate_global->__pyx_codeobj__114
#define __pyx_codeobj__116 __pyx_mstate_global->__pyx_codeobj__116
#define __pyx_codeobj__118 __pyx_mstate_global->__pyx_codeobj__118
#define __pyx_codeobj__119 __pyx_mstate_global->__pyx_codeobj__119
#define __pyx_codeobj__121 __pyx_mstate_global->__pyx_codeobj__121
#define __pyx_codeobj__123 __pyx_mstate_global->__pyx_codeobj__123
#define __pyx_codeobj__126 __pyx_mstate_global->__pyx_codeobj__126
#define __pyx_codeobj__128 __pyx_mstate_global->__pyx_codeobj__128
#define __pyx_codeobj__131 __pyx_mstate_global->__pyx_codeobj__131
#define __pyx_codeobj__133 __pyx_mstate_global->__pyx_codeobj__133
#define __pyx_codeobj__134 __pyx_mstate_global->__pyx_codeobj__134
#define __pyx_codeobj__135 __pyx_mstate_global->__pyx_codeobj__135
#define __pyx_codeobj__136 __pyx_mstate_global->__pyx_codeobj__136
#define __pyx_codeobj__138 __pyx_mstate_global->__pyx_codeobj__138
#define __pyx_codeobj__139 __pyx_mstate_global->__pyx_codeobj__139
#define __pyx_codeobj__140 __pyx_mstate_global->__pyx_codeobj__140
#define __pyx_codeobj__141 __pyx_mstate_global->__pyx_codeobj__141
#define __pyx_codeobj__143 __pyx_mstate_global->__pyx_codeobj__143
#define __pyx_codeobj__145 __pyx_mstate_global->__pyx_codeobj__145
#define __pyx_codeobj__146 __pyx_mstate_global->__pyx_codeobj__146
#define __pyx_codeobj__147 __pyx_mstate_global->__pyx_codeobj__147
#define __pyx_codeobj__149 __pyx_mstate_global->__pyx_codeobj__149
#define __pyx_codeobj__150 __pyx_mstate_global->__pyx_codeobj__150
#define __pyx_codeobj__151 __pyx_mstate_global->__pyx_codeobj__151
#define __pyx_codeobj__152 __pyx_mstate_global->__pyx_codeobj__152
#define __pyx_codeobj__153 __pyx_mstate_global->__pyx_codeobj__153
#define __pyx_codeobj__154 __pyx_mstate_global->__pyx_codeobj__154
#define __pyx_codeobj__155 __pyx_mstate_global->__pyx_codeobj__155
#define __pyx_codeobj__156 __pyx_mstate_global->__pyx_codeobj__156
#define __pyx_codeobj__157 __pyx_mstate_global->__pyx_codeobj__157
#define __pyx_codeobj__158 __pyx_mstate_global->__pyx_codeobj__158
#define __pyx_codeobj__159 __pyx_mstate_global->__pyx_codeobj__159
#define __pyx_codeobj__160 __pyx_mstate_global->__pyx_codeobj__160
#define __pyx_codeobj__162 __pyx_mstate_global->__pyx_codeobj__162
#define __pyx_codeobj__164 __pyx_mstate_global->__pyx_codeobj__164
#define __pyx_codeobj__166 __pyx_mstate_global->__pyx_codeobj__166
#define __pyx_codeobj__169 __pyx_mstate_global->__pyx_codeobj__169
#define __pyx_codeobj__170 __pyx_mstate_global->__pyx_codeobj__170
#define __pyx_codeobj__172 __pyx_mstate_global->__pyx_codeobj__172
#define __pyx_codeobj__175 __pyx_mstate_global->__pyx_codeobj__175
#define __pyx_codeobj__176 __pyx_mstate_global->__pyx_codeobj__176
#define __pyx_codeobj__178 __pyx_mstate_global->__pyx_codeobj__178
#define __pyx_codeobj__179 __pyx_mstate_global->__pyx_codeobj__179
#define __pyx_codeobj__180 __pyx_mstate_global->__pyx_codeobj__180
#define __pyx_codeobj__182 __pyx_mstate_global->__pyx_codeobj__182
#define __pyx_codeobj__183 __pyx_mstate_global->__pyx_codeobj__183
#define __pyx_codeobj__184 __pyx_mstate_global->__pyx_codeobj__184
#define __pyx_codeobj__185 __pyx_mstate_global->__pyx_codeobj__185
#define __pyx_codeobj__186 __pyx_mstate_global->__pyx_codeobj__186
#define __pyx_codeobj__188 __pyx_mstate_global->__pyx_codeobj__188
#define __pyx_codeobj__190 __pyx_mstate_global->__pyx_codeobj__190
#define __pyx_codeobj__192 __pyx_mstate_global->__pyx_codeobj__192
#define __pyx_codeobj__193 __pyx_mstate_global->__pyx_codeobj__193
#define __pyx_codeobj__195 __pyx_mstate_global->__pyx_codeobj__195
#define __pyx_codeobj__196 __pyx_mstate_global->__pyx_codeobj__196
#define __pyx_codeobj__197 __pyx_mstate_global->__pyx_codeobj__197
#define __pyx_codeobj__198 __pyx_mstate_global->__pyx_codeobj__198
#define __pyx_codeobj__199 __pyx_mstate_global->__pyx_codeobj__199
#define __pyx_codeobj__200 __pyx_mstate_global->__pyx_codeobj__200
#define __pyx_codeobj__201 __pyx_mstate_global->__pyx_codeobj__201
#define __pyx_codeobj__203 __pyx_mstate_global->__pyx_codeobj__203
#define __pyx_codeobj__205 __pyx_mstate_global->__pyx_codeobj__205
#define __pyx_codeobj__206 __pyx_mstate_global->__pyx_codeobj__206
#define __pyx_codeobj__207 __pyx_mstate_global->__pyx_codeobj__207
#define __pyx_codeobj__209 __pyx_mstate_global->__pyx_codeobj__209
#define __pyx_codeobj__210 __pyx_mstate_global->__pyx_codeobj__210
#define __pyx_codeobj__211 __pyx_mstate_global->__pyx_codeobj__211
#define __pyx_codeobj__213 __pyx_mstate_global->__pyx_codeobj__213
#define __pyx_codeobj__214 __pyx_mstate_global->__pyx_codeobj__214
#define __pyx_codeobj__216 __pyx_mstate_global->__pyx_codeobj__216
#define __pyx_codeobj__219 __pyx_mstate_global->__pyx_codeobj__219
#define __pyx_codeobj__221 __pyx_mstate_global->__pyx_codeobj__221
#define __pyx_codeobj__222 __pyx_mstate_global->__pyx_codeobj__222
#define __pyx_codeobj__223 __pyx_mstate_global->__pyx_codeobj__223
#define __pyx_codeobj__224 __pyx_mstate_global->__pyx_codeobj__224
#define __pyx_codeobj__225 __pyx_mstate_global->__pyx_codeobj__225
#define __pyx_codeobj__227 __pyx_mstate_global->__pyx_codeobj__227
#define __pyx_codeobj__229 __pyx_mstate_global->__pyx_codeobj__229
#define __pyx_codeobj__231 __pyx_mstate_global->__pyx_codeobj__231
#define __pyx_codeobj__233 __pyx_mstate_global->__pyx_codeobj__233
#define __pyx_codeobj__234 __pyx_mstate_global->__pyx_codeobj__234
#define __pyx_codeobj__235 __pyx_mstate_global->__pyx_codeobj__235
#define __pyx_codeobj__236 __pyx_mstate_global->__pyx_codeobj__236
#define __pyx_codeobj__237 __pyx_mstate_global->__pyx_codeobj__237
#define __pyx_codeobj__238 __pyx_mstate_global->__pyx_codeobj__238
#define __pyx_codeobj__239 __pyx_mstate_global->__pyx_codeobj__239
#define __pyx_codeobj__240 __pyx_mstate_global->__pyx_codeobj__240
#define __pyx_codeobj__241 __pyx_mstate_global->__pyx_codeobj__241
#define __pyx_codeobj__242 __pyx_mstate_global->__pyx_codeobj__242
#define __pyx_codeobj__243 __pyx_mstate_global->__pyx_codeobj__243
#define __pyx_codeobj__244 __pyx_mstate_global->__pyx_codeobj__244
#define __pyx_codeobj__245 __pyx_mstate_global->__pyx_codeobj__245
#define __pyx_codeobj__246 __pyx_mstate_global->__pyx_codeobj__246
#define __pyx_codeobj__247 __pyx_mstate_global->__pyx_codeobj__247
#define __pyx_codeobj__248 __pyx_mstate_global->__pyx_codeobj__248
#define __pyx_codeobj__249 __pyx_mstate_global->__pyx_codeobj__249
#define __pyx_codeobj__250 __pyx_mstate_global->__pyx_codeobj__250
#define __pyx_codeobj__251 __pyx_mstate_global->__pyx_codeobj__251
#define __pyx_codeobj__252 __pyx_mstate_global->__pyx_codeobj__252
#define __pyx_codeobj__253 __pyx_mstate_global->__pyx_codeobj__253
#define __pyx_codeobj__254 __pyx_mstate_global->__pyx_codeobj__254
#define __pyx_codeobj__255 __pyx_mstate_global->__pyx_codeobj__255
#define __pyx_codeobj__256 __pyx_mstate_global->__pyx_codeobj__256
#define __pyx_codeobj__257 __pyx_mstate_global->__pyx_codeobj__257
#define __pyx_codeobj__258 __pyx_mstate_global->__pyx_codeobj__258
#define __pyx_codeobj__259 __pyx_mstate_global->__pyx_codeobj__259
#define __pyx_codeobj__260 __pyx_mstate_global->__pyx_codeobj__260
#define __pyx_codeobj__261 __pyx_mstate_global->__pyx_codeobj__261
#define __pyx_codeobj__262 __pyx_mstate_global->__pyx_codeobj__262
#define __pyx_codeobj__263 __pyx_mstate_global->__pyx_codeobj__263
#define __pyx_codeobj__264 __pyx_mstate_global->__pyx_codeobj__264
#define __pyx_codeobj__265 __pyx_mstate_global->__pyx_codeobj__265
#define __pyx_codeobj__266 __pyx_mstate_global->__pyx_codeobj__266
#define __pyx_codeobj__267 __pyx_mstate_global->__pyx_codeobj__267
#define __pyx_codeobj__268 __pyx_mstate_global->__pyx_codeobj__268
#define __pyx_codeobj__269 __pyx_mstate_global->__pyx_codeobj__269
#define __pyx_codeobj__270 __pyx_mstate_global->__pyx_codeobj__270
#define __pyx_codeobj__271 __pyx_mstate_global->__pyx_codeobj__271
#define __pyx_codeobj__272 __pyx_mstate_global->__pyx_codeobj__272
#define __pyx_codeobj__273 __pyx_mstate_global->__pyx_codeobj__273
#define __pyx_codeobj__274 __pyx_mstate_global->__pyx_codeobj__274
#define __pyx_codeobj__275 __pyx_mstate_global->__pyx_codeobj__275
#define __pyx_codeobj__276 __pyx_mstate_global->__pyx_codeobj__276
#define __pyx_codeobj__277 __pyx_mstate_global->__pyx_codeobj__277
#define __pyx_codeobj__278 __pyx_mstate_global->__pyx_codeobj__278
#define __pyx_codeobj__279 __pyx_mstate_global->__pyx_codeobj__279
#define __pyx_codeobj__280 __pyx_mstate_global->__pyx_codeobj__280
#define __pyx_codeobj__281 __pyx_mstate_global->__pyx_codeobj__281
#define __pyx_codeobj__282 __pyx_mstate_global->__pyx_codeobj__282
#define __pyx_codeobj__283 __pyx_mstate_global->__pyx_codeobj__283
#define __pyx_codeobj__284 __pyx_mstate_global->__pyx_codeobj__284
#define __pyx_codeobj__285 __pyx_mstate_global->__pyx_codeobj__285
#define __pyx_codeobj__286 __pyx_mstate_global->__pyx_codeobj__286
#define __pyx_codeobj__287 __pyx_mstate_global->__pyx_codeobj__287
#define __pyx_codeobj__289 __pyx_mstate_global->__pyx_codeobj__289
#define __pyx_codeobj__290 __pyx_mstate_global->__pyx_codeobj__290
#define __pyx_codeobj__291 __pyx_mstate_global->__pyx_codeobj__291
#define __pyx_codeobj__292 __pyx_mstate_global->__pyx_codeobj__292
#define __pyx_codeobj__293 __pyx_mstate_global->__pyx_codeobj__293
#define __pyx_codeobj__294 __pyx_mstate_global->__pyx_codeobj__294
#define __pyx_codeobj__295 __pyx_mstate_global->__pyx_codeobj__295
#define __pyx_codeobj__296 __pyx_mstate_global->__pyx_codeobj__296
#define __pyx_codeobj__297 __pyx_mstate_global->__pyx_codeobj__297
#define __pyx_codeobj__298 __pyx_mstate_global->__pyx_codeobj__298
#define __pyx_codeobj__299 __pyx_mstate_global->__pyx_codeobj__299
/* #### Code section: module_code ### */

/* "View.MemoryView":131
 *         cdef bint dtype_is_object
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,             # <<<<<<<<<<<<<<
 *                   mode="c", bint allocate_buffer=True):
 * 
 */

/* Python wrapper */
static int __pyx_array___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_array___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_shape = 0;
  Py_ssize_t __pyx_v_itemsize;
  PyObject *__pyx_v_format = 0;
  PyObject *__pyx_v_mode = 0;
  int __pyx_v_allocate_buffer;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[5] = {0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_shape,&__pyx_n_s_itemsize,&__pyx_n_s_format,&__pyx_n_s_mode,&__pyx_n_s_allocate_buffer,0};
    values[3] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)__pyx_n_s_c));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  5: values[4] = __Pyx_Arg_VARARGS(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_VARARGS(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_shape)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 131, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_itemsize)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 131, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 5, 1); __PYX_ERR(0, 131, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_format)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 131, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 5, 2); __PYX_ERR(0, 131, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_mode);
          if (value) { values[3] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 131, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_allocate_buffer);
          if (value) { values[4] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 131, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__cinit__") < 0)) __PYX_ERR(0, 131, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  5: values[4] = __Pyx_Arg_VARARGS(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_VARARGS(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_shape = ((PyObject*)values[0]);
    __pyx_v_itemsize = __Pyx_PyIndex_AsSsize_t(values[1]); if (unlikely((__pyx_v_itemsize == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 131, __pyx_L3_error)
    __pyx_v_format = values[2];
    __pyx_v_mode = values[3];
    if (values[4]) {
      __pyx_v_allocate_buffer = __Pyx_PyObject_IsTrue(values[4]); if (unlikely((__pyx_v_allocate_buffer == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 132, __pyx_L3_error)
    } else {

      /* "View.MemoryView":132
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,
 *                   mode="c", bint allocate_buffer=True):             # <<<<<<<<<<<<<<
 * 
 *         cdef int idx
 */
      __pyx_v_allocate_buffer = ((int)1);
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 5, __pyx_nargs); __PYX_ERR(0, 131, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("View.MemoryView.array.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_shape), (&PyTuple_Type), 1, "shape", 1))) __PYX_ERR(0, 131, __pyx_L1_error)
  if (unlikely(((PyObject *)__pyx_v_format) == Py_None)) {
    PyErr_Format(PyExc_TypeError, "Argument '%.200s' must not be None", "format"); __PYX_ERR(0, 131, __pyx_L1_error)
  }
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__(((struct __pyx_array_obj *)__pyx_v_self), __pyx_v_shape, __pyx_v_itemsize, __pyx_v_format, __pyx_v_mode, __pyx_v_allocate_buffer);

  /* "View.MemoryView":131
 *         cdef bint dtype_is_object
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,             # <<<<<<<<<<<<<<
 *                   mode="c", bint allocate_buffer=True):
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_shape, Py_ssize_t __pyx_v_itemsize, PyObject *__pyx_v_format, PyObject *__pyx_v_mode, int __pyx_v_allocate_buffer) {
  int __pyx_v_idx;
  Py_ssize_t __pyx_v_dim;
  char __pyx_v_order;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  char *__pyx_t_8;
  Py_ssize_t __pyx_t_9;
  Py_UCS4 __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __Pyx_INCREF(__pyx_v_format);

  /* "View.MemoryView":137
 *         cdef Py_ssize_t dim
 * 
 *         self.ndim = <int> len(shape)             # <<<<<<<<<<<<<<
 *         self.itemsize = itemsize
 * 
 */
  if (unlikely(__pyx_v_shape == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 137, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyTuple_GET_SIZE(__pyx_v_shape); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 137, __pyx_L1_error)
  __pyx_v_self->ndim = ((int)__pyx_t_1);

  /* "View.MemoryView":138
 * 
 *         self.ndim = <int> len(shape)
 *         self.itemsize = itemsize             # <<<<<<<<<<<<<<
 * 
 *         if not self.ndim:
 */
  __pyx_v_self->itemsize = __pyx_v_itemsize;

  /* "View.MemoryView":140
 *         self.itemsize = itemsize
 * 
 *         if not self.ndim:             # <<<<<<<<<<<<<<
 *             raise ValueError, "Empty shape tuple for cython.array"
 * 
 */
  __pyx_t_2 = (!(__pyx_v_self->ndim != 0));
  if (unlikely(__pyx_t_2)) {

    /* "View.MemoryView":141
 * 
 *         if not self.ndim:
 *             raise ValueError, "Empty shape tuple for cython.array"             # <<<<<<<<<<<<<<
 * 
 *         if itemsize <= 0:
 */
    __Pyx_Raise(__pyx_builtin_ValueError, __pyx_kp_s_Empty_shape_tuple_for_cython_arr, 0, 0);
    __PYX_ERR(0, 141, __pyx_L1_error)

    /* "View.MemoryView":140
 *         self.itemsize = itemsize
 * 
 *         if not self.ndim:             # <<<<<<<<<<<<<<
 *             raise ValueError, "Empty shape tuple for cython.array"
 * 
 */
  }

  /* "View.MemoryView":143
 *             raise ValueError, "Empty shape tuple for cython.array"
 * 
 *         if itemsize <= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError, "itemsize <= 0 for cython.array"
 * 
 */
  __pyx_t_2 = (__pyx_v_itemsize <= 0);
  if (unlikely(__pyx_t_2)) {

    /* "View.MemoryView":144
 * 
 *         if itemsize <= 0:
 *             raise ValueError, "itemsize <= 0 for cython.array"             # <<<<<<<<<<<<<<
 * 
 *         if not isinstance(format, bytes):
 */
    __Pyx_Raise(__pyx_builtin_ValueError, __pyx_kp_s_itemsize_0_for_cython_array, 0, 0);
    __PYX_ERR(0, 144, __pyx_L1_error)

    /* "View.MemoryView":143
 *             raise ValueError, "Empty shape tuple for cython.array"
 * 
 *         if itemsize <= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError, "itemsize <= 0 for cython.array"
 * 
 */
  }

  /* "View.MemoryView":146
 *             raise ValueError, "itemsize <= 0 for cython.array"
 * 
 *         if not isinstance(format, bytes):             # <<<<<<<<<<<<<<
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string
 */
  __pyx_t_2 = PyBytes_Check(__pyx_v_format); 
  __pyx_t_3 = (!__pyx_t_2);
  if (__pyx_t_3) {

    /* "View.MemoryView":147
 * 
 *         if not isinstance(format, bytes):
 *             format = format.encode('ASCII')             # <<<<<<<<<<<<<<
 *         self._format = format  # keep a reference to the byte string
 *         self.format = self._format
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_format, __pyx_n_s_encode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 147, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    __pyx_t_7 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_7 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_n_s_ASCII};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 147, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF_SET(__pyx_v_format, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "View.MemoryView":146
 *             raise ValueError, "itemsize <= 0 for cython.array"
 * 
 *         if not isinstance(format, bytes):             # <<<<<<<<<<<<<<
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string
 */
  }

  /* "View.MemoryView":148
 *         if not isinstance(format, bytes):
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string             # <<<<<<<<<<<<<<
 *         self.format = self._format
 * 
 */
  if (!(likely(PyBytes_CheckExact(__pyx_v_format))||((__pyx_v_format) == Py_None) || __Pyx_RaiseUnexpectedTypeError("bytes", __pyx_v_format))) __PYX_ERR(0, 148, __pyx_L1_error)
  __pyx_t_4 = __pyx_v_format;
  __Pyx_INCREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __Pyx_GOTREF(__pyx_v_self->_format);
  __Pyx_DECREF(__pyx_v_self->_format);
  __pyx_v_self->_format = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "View.MemoryView":149
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string
 *         self.format = self._format             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (unlikely(__pyx_v_self->_format == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 149, __pyx_L1_error)
  }
  __pyx_t_8 = __Pyx_PyBytes_AsWritableString(__pyx_v_self->_format); if (unlikely((!__pyx_t_8) && PyErr_Occurred())) __PYX_ERR(0, 149, __pyx_L1_error)
  __pyx_v_self->format = __pyx_t_8;

  /* "View.MemoryView":152
 * 
 * 
 *         self._shape = <Py_ssize_t *> PyObject_Malloc(sizeof(Py_ssize_t)*self.ndim*2)             # <<<<<<<<<<<<<<
 *         self._strides = self._shape + self.ndim
 * 
 */
  __pyx_v_self->_shape = ((Py_ssize_t *)PyObject_Malloc((((sizeof(Py_ssize_t)) * __pyx_v_self->ndim) * 2)));

  /* "View.MemoryView":153
 * 
 *         self._shape = <Py_ssize_t *> PyObject_Malloc(sizeof(Py_ssize_t)*self.ndim*2)
 *         self._strides = self._shape + self.ndim             # <<<<<<<<<<<<<<
 * 
 *         if not self._shape:
 */
  __pyx_v_self->_strides = (__pyx_v_self->_shape + __pyx_v_self->ndim);

  /* "View.MemoryView":155
 *         self._strides = self._shape + self.ndim
 * 
 *         if not self._shape:             # <<<<<<<<<<<<<<
 *             raise MemoryError, "unable to allocate shape and strides."
 * 
 */
  __pyx_t_3 = (!(__pyx_v_self->_shape != 0));
  if (unlikely(__pyx_t_3)) {

    /* "View.MemoryView":156
 * 
 *         if not self._shape:
 *             raise MemoryError, "unable to allocate shape and strides."             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_Raise(__pyx_builtin_MemoryError, __pyx_kp_s_unable_to_allocate_shape_and_str, 0, 0);
    __PYX_ERR(0, 156, __pyx_L1_error)

    /* "View.MemoryView":155
 *         self._strides = self._shape + self.ndim
 * 
 *         if not self._shape:             # <<<<<<<<<<<<<<
 *             raise MemoryError, "unable to allocate shape and strides."
 * 
 */
  }

  /* "View.MemoryView":159
 * 
 * 
 *         for idx, dim in enumerate(shape):             # <<<<<<<<<<<<<<
 *             if dim <= 0:
 *                 raise ValueError, f"Invalid shape in axis {idx}: {dim}."
 */
  __pyx_t_7 = 0;
  __pyx_t_4 = __pyx_v_shape; __Pyx_INCREF(__pyx_t_4);
  __pyx_t_1 = 0;
  for (;;) {
    {
      Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_4);
      #if !CYTHON_ASSUME_SAFE_MACROS
      if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 159, __pyx_L1_error)
      #endif
      if (__pyx_t_1 >= __pyx_temp) break;
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_1); __Pyx_INCREF(__pyx_t_5); __pyx_t_1++; if (unlikely((0 < 0))) __PYX_ERR(0, 159, __pyx_L1_error)
    #else
    __pyx_t_5 = __Pyx_PySequence_ITEM(__pyx_t_4, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 159, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    #endif
    __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_t_5); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 159, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_dim = __pyx_t_9;
    __pyx_v_idx = __pyx_t_7;
    __pyx_t_7 = (__pyx_t_7 + 1);

    /* "View.MemoryView":160
 * 
 *         for idx, dim in enumerate(shape):
 *             if dim <= 0:             # <<<<<<<<<<<<<<
 *                 raise ValueError, f"Invalid shape in axis {idx}: {dim}."
 *             self._shape[idx] = dim
 */
    __pyx_t_3 = (__pyx_v_dim <= 0);
    if (unlikely(__pyx_t_3)) {

      /* "View.MemoryView":161
 *         for idx, dim in enumerate(shape):
 *             if dim <= 0:
 *                 raise ValueError, f"Invalid shape in axis {idx}: {dim}."             # <<<<<<<<<<<<<<
 *             self._shape[idx] = dim
 * 
 */
      __pyx_t_5 = PyTuple_New(5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 161, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_9 = 0;
      __pyx_t_10 = 127;
      __Pyx_INCREF(__pyx_kp_u_Invalid_shape_in_axis);
      __pyx_t_9 += 22;
      __Pyx_GIVEREF(__pyx_kp_u_Invalid_shape_in_axis);
      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_kp_u_Invalid_shape_in_axis);
      __pyx_t_6 = __Pyx_PyUnicode_From_int(__pyx_v_idx, 0, ' ', 'd'); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 161, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_9 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_6);
      __pyx_t_6 = 0;
      __Pyx_INCREF(__pyx_kp_u_);
      __pyx_t_9 += 2;
      __Pyx_GIVEREF(__pyx_kp_u_);
      PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_kp_u_);
      __pyx_t_6 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_v_dim, 0, ' ', 'd'); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 161, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_9 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_6);
      __pyx_t_6 = 0;
      __Pyx_INCREF(__pyx_kp_u__2);
      __pyx_t_9 += 1;
      __Pyx_GIVEREF(__pyx_kp_u__2);
      PyTuple_SET_ITEM(__pyx_t_5, 4, __pyx_kp_u__2);
      __pyx_t_6 = __Pyx_PyUnicode_Join(__pyx_t_5, 5, __pyx_t_9, __pyx_t_10); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 161, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_Raise(__pyx_builtin_ValueError, __pyx_t_6, 0, 0);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __PYX_ERR(0, 161, __pyx_L1_error)

      /* "View.MemoryView":160
 * 
 *         for idx, dim in enumerate(shape):
 *             if dim <= 0:             # <<<<<<<<<<<<<<
 *                 raise ValueError, f"Invalid shape in axis {idx}: {dim}."
 *             self._shape[idx] = dim
 */
    }

    /* "View.MemoryView":162
 *             if dim <= 0:
 *                 raise ValueError, f"Invalid shape in axis {idx}: {dim}."
 *             self._shape[idx] = dim             # <<<<<<<<<<<<<<
 * 
 *         cdef char order
 */
    (__pyx_v_self->_shape[__pyx_v_idx]) = __pyx_v_dim;

    /* "View.MemoryView":159
 * 
 * 
 *         for idx, dim in enumerate(shape):             # <<<<<<<<<<<<<<
 *             if dim <= 0:
 *                 raise ValueError, f"Invalid shape in axis {idx}: {dim}."
 */
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "View.MemoryView":165
 * 
 *         cdef char order
 *         if mode == 'c':             # <<<<<<<<<<<<<<
 *             order = b'C'
 *             self.mode = u'c'
 */
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_v_mode, __pyx_n_s_c, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 165, __pyx_L1_error)
  if (__pyx_t_3) {

    /* "View.MemoryView":166
 *         cdef char order
 *         if mode == 'c':
 *             order = b'C'             # <<<<<<<<<<<<<<
 *             self.mode = u'c'
 *         elif mode == 'fortran':
 */
    __pyx_v_order = 'C';

    /* "View.MemoryView":167
 *         if mode == 'c':
 *             order = b'C'
 *             self.mode = u'c'             # <<<<<<<<<<<<<<
 *         elif mode == 'fortran':
 *             order = b'F'
 */
    __Pyx_INCREF(__pyx_n_u_c);
    __Pyx_GIVEREF(__pyx_n_u_c);
    __Pyx_GOTREF(__pyx_v_self->mode);
    __Pyx_DECREF(__pyx_v_self->mode);
    __pyx_v_self->mode = __pyx_n_u_c;

    /* "View.MemoryView":165
 * 
 *         cdef char order
 *         if mode == 'c':             # <<<<<<<<<<<<<<
 *             order = b'C'
 *             self.mode = u'c'
 */
    goto __pyx_L11;
  }

  /* "View.MemoryView":168
 *             order = b'C'
 *             self.mode = u'c'
 *         elif mode == 'fortran':             # <<<<<<<<<<<<<<
 *             order = b'F'
 *             self.mode = u'fortran'
 */
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_v_mode, __pyx_n_s_fortran, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 168, __pyx_L1_error)
  if (likely(__pyx_t_3)) {

    /* "View.MemoryView":169
 *             self.mode = u'c'
 *         elif mode == 'fortran':
 *             order = b'F'             # <<<<<<<<<<<<<<
 *             self.mode = u'fortran'
 *         else:
 */
    __pyx_v_order = 'F';

    /* "View.MemoryView":170
 *         elif mode == 'fortran':
 *             order = b'F'
 *             self.mode = u'fortran'             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError, f"Invalid mode, expected 'c' or 'fortran', got {mode}"
 */
    __Pyx_INCREF(__pyx_n_u_fortran);
    __Pyx_GIVEREF(__pyx_n_u_fortran);
    __Pyx_GOTREF(__pyx_v_self->mode);
    __Pyx_DECREF(__pyx_v_self->mode);
    __pyx_v_self->mode = __pyx_n_u_fortran;

    /* "View.MemoryView":168
 *             order = b'C'
 *             self.mode = u'c'
 *         elif mode == 'fortran':             # <<<<<<<<<<<<<<
 *             order = b'F'
 *             self.mode = u'fortran'
 */
    goto __pyx_L11;
  }

  /* "View.MemoryView":172
 *             self.mode = u'fortran'
 *         else:
 *             raise ValueError, f"Invalid mode, expected 'c' or 'fortran', got {mode}"             # <<<<<<<<<<<<<<
 * 
 *         self.len = fill_contig_strides_array(self._shape, self._strides, itemsize, self.ndim, order)
 */
  /*else*/ {
    __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_v_mode, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 172, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_PyUnicode_Concat(__pyx_kp_u_Invalid_mode_expected_c_or_fortr, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 172, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_builtin_ValueError, __pyx_t_6, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(0, 172, __pyx_L1_error)
  }
  __pyx_L11:;

  /* "View.MemoryView":174
 *             raise ValueError, f"Invalid mode, expected 'c' or 'fortran', got {mode}"
 * 
 *         self.len = fill_contig_strides_array(self._shape, self._strides, itemsize, self.ndim, order)             # <<<<<<<<<<<<<<
 * 
 *         self.free_data = allocate_buffer
 */
  __pyx_v_self->len = __pyx_fill_contig_strides_array(__pyx_v_self->_shape, __pyx_v_self->_strides, __pyx_v_itemsize, __pyx_v_self->ndim, __pyx_v_order);

  /* "View.MemoryView":176
 *         self.len = fill_contig_strides_array(self._shape, self._strides, itemsize, self.ndim, order)
 * 
 *         self.free_data = allocate_buffer             # <<<<<<<<<<<<<<
 *         self.dtype_is_object = format == b'O'
 * 
 */
  __pyx_v_self->free_data = __pyx_v_allocate_buffer;

  /* "View.MemoryView":177
 * 
 *         self.free_data = allocate_buffer
 *         self.dtype_is_object = format == b'O'             # <<<<<<<<<<<<<<
 * 
 *         if allocate_buffer:
 */
  __pyx_t_6 = PyObject_RichCompare(__pyx_v_format, __pyx_n_b_O, Py_EQ); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 177, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 177, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_self->dtype_is_object = __pyx_t_3;

  /* "View.MemoryView":179
 *         self.dtype_is_object = format == b'O'
 * 
 *         if allocate_buffer:             # <<<<<<<<<<<<<<
 *             _allocate_buffer(self)
 * 
 */
  if (__pyx_v_allocate_buffer) {

    /* "View.MemoryView":180
 * 
 *         if allocate_buffer:
 *             _allocate_buffer(self)             # <<<<<<<<<<<<<<
 * 
 *     @cname('getbuffer')
 */
    __pyx_t_7 = __pyx_array_allocate_buffer(__pyx_v_self); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(0, 180, __pyx_L1_error)

    /* "View.MemoryView":179
 *         self.dtype_is_object = format == b'O'
 * 
 *         if allocate_buffer:             # <<<<<<<<<<<<<<
 *             _allocate_buffer(self)
 * 
 */
  }

  /* "View.MemoryView":131
 *         cdef bint dtype_is_object
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,             # <<<<<<<<<<<<<<
 *                   mode="c", bint allocate_buffer=True):
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("View.MemoryView.array.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_format);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":182
 *             _allocate_buffer(self)
 * 
 *     @cname('getbuffer')             # <<<<<<<<<<<<<<
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         cdef int bufmode = -1
 */

/* Python wrapper */
CYTHON_UNUSED static int __pyx_array_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
CYTHON_UNUSED static int __pyx_array_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__(((struct __pyx_array_obj *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__(struct __pyx_array_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_v_bufmode;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  char *__pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  Py_ssize_t *__pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  if (unlikely(__pyx_v_info == NULL)) {
    PyErr_SetString(PyExc_BufferError, "PyObject_GetBuffer: view==NULL argument is obsolete");
    return -1;
  }
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(__pyx_v_info->obj);

  /* "View.MemoryView":184
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         cdef int bufmode = -1             # <<<<<<<<<<<<<<
 *         if flags & (PyBUF_C_CONTIGUOUS | PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS):
 *             if self.mode == u"c":
 */
  __pyx_v_bufmode = -1;

  /* "View.MemoryView":185
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         cdef int bufmode = -1
 *         if flags & (PyBUF_C_CONTIGUOUS | PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS):             # <<<<<<<<<<<<<<
 *             if self.mode == u"c":
 *                 bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 */
  __pyx_t_1 = ((__pyx_v_flags & ((PyBUF_C_CONTIGUOUS | PyBUF_F_CONTIGUOUS) | PyBUF_ANY_CONTIGUOUS)) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":186
 *         cdef int bufmode = -1
 *         if flags & (PyBUF_C_CONTIGUOUS | PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS):
 *             if self.mode == u"c":             # <<<<<<<<<<<<<<
 *                 bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *             elif self.mode == u"fortran":
 */
    __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_self->mode, __pyx_n_u_c, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 186, __pyx_L1_error)
    if (__pyx_t_1) {

      /* "View.MemoryView":187
 *         if flags & (PyBUF_C_CONTIGUOUS | PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS):
 *             if self.mode == u"c":
 *                 bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS             # <<<<<<<<<<<<<<
 *             elif self.mode == u"fortran":
 *                 bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 */
      __pyx_v_bufmode = (PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS);

      /* "View.MemoryView":186
 *         cdef int bufmode = -1
 *         if flags & (PyBUF_C_CONTIGUOUS | PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS):
 *             if self.mode == u"c":             # <<<<<<<<<<<<<<
 *                 bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *             elif self.mode == u"fortran":
 */
      goto __pyx_L4;
    }

    /* "View.MemoryView":188
 *             if self.mode == u"c":
 *                 bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *             elif self.mode == u"fortran":             # <<<<<<<<<<<<<<
 *                 bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *             if not (flags & bufmode):
 */
    __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_self->mode, __pyx_n_u_fortran, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 188, __pyx_L1_error)
    if (__pyx_t_1) {

      /* "View.MemoryView":189
 *                 bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *             elif self.mode == u"fortran":
 *                 bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS             # <<<<<<<<<<<<<<
 *             if not (flags & bufmode):
 *                 raise ValueError, "Can only create a buffer that is contiguous in memory."
 */
      __pyx_v_bufmode = (PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS);

      /* "View.MemoryView":188
 *             if self.mode == u"c":
 *                 bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *             elif self.mode == u"fortran":             # <<<<<<<<<<<<<<
 *                 bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *             if not (flags & bufmode):
 */
    }
    __pyx_L4:;

    /* "View.MemoryView":190
 *             elif self.mode == u"fortran":
 *                 bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *             if not (flags & bufmode):             # <<<<<<<<<<<<<<
 *                 raise ValueError, "Can only create a buffer that is contiguous in memory."
 *         info.buf = self.data
 */
    __pyx_t_1 = (!((__pyx_v_flags & __pyx_v_bufmode) != 0));
    if (unlikely(__pyx_t_1)) {

      /* "View.MemoryView":191
 *                 bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *             if not (flags & bufmode):
 *                 raise ValueError, "Can only create a buffer that is contiguous in memory."             # <<<<<<<<<<<<<<
 *         info.buf = self.data
 *         info.len = self.len
 */
      __Pyx_Raise(__pyx_builtin_ValueError, __pyx_kp_s_Can_only_create_a_buffer_that_is, 0, 0);
      __PYX_ERR(0, 191, __pyx_L1_error)

      /* "View.MemoryView":190
 *             elif self.mode == u"fortran":
 *                 bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *             if not (flags & bufmode):             # <<<<<<<<<<<<<<
 *                 raise ValueError, "Can only create a buffer that is contiguous in memory."
 *         info.buf = self.data
 */
    }

    /* "View.MemoryView":185
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         cdef int bufmode = -1
 *         if flags & (PyBUF_C_CONTIGUOUS | PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS):             # <<<<<<<<<<<<<<
 *             if self.mode == u"c":
 *                 bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 */
  }

  /* "View.MemoryView":192
 *             if not (flags & bufmode):
 *                 raise ValueError, "Can only create a buffer that is contiguous in memory."
 *         info.buf = self.data             # <<<<<<<<<<<<<<
 *         info.len = self.len
 * 
 */
  __pyx_t_2 = __pyx_v_self->data;
  __pyx_v_info->buf = __pyx_t_2;

  /* "View.MemoryView":193
 *                 raise ValueError, "Can only create a buffer that is contiguous in memory."
 *         info.buf = self.data
 *         info.len = self.len             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_STRIDES:
 */
  __pyx_t_3 = __pyx_v_self->len;
  __pyx_v_info->len = __pyx_t_3;

  /* "View.MemoryView":195
 *         info.len = self.len
 * 
 *         if flags & PyBUF_STRIDES:             # <<<<<<<<<<<<<<
 *             info.ndim = self.ndim
 *             info.shape = self._shape
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_STRIDES) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":196
 * 
 *         if flags & PyBUF_STRIDES:
 *             info.ndim = self.ndim             # <<<<<<<<<<<<<<
 *             info.shape = self._shape
 *             info.strides = self._strides
 */
    __pyx_t_4 = __pyx_v_self->ndim;
    __pyx_v_info->ndim = __pyx_t_4;

    /* "View.MemoryView":197
 *         if flags & PyBUF_STRIDES:
 *             info.ndim = self.ndim
 *             info.shape = self._shape             # <<<<<<<<<<<<<<
 *             info.strides = self._strides
 *         else:
 */
    __pyx_t_5 = __pyx_v_self->_shape;
    __pyx_v_info->shape = __pyx_t_5;

    /* "View.MemoryView":198
 *             info.ndim = self.ndim
 *             info.shape = self._shape
 *             info.strides = self._strides             # <<<<<<<<<<<<<<
 *         else:
 *             info.ndim = 1
 */
    __pyx_t_5 = __pyx_v_self->_strides;
    __pyx_v_info->strides = __pyx_t_5;

    /* "View.MemoryView":195
 *         info.len = self.len
 * 
 *         if flags & PyBUF_STRIDES:             # <<<<<<<<<<<<<<
 *             info.ndim = self.ndim
 *             info.shape = self._shape
 */
    goto __pyx_L6;
  }

  /* "View.MemoryView":200
 *             info.strides = self._strides
 *         else:
 *             info.ndim = 1             # <<<<<<<<<<<<<<
 *             info.shape = &self.len if flags & PyBUF_ND else NULL
 *             info.strides = NULL
 */
  /*else*/ {
    __pyx_v_info->ndim = 1;

    /* "View.MemoryView":201
 *         else:
 *             info.ndim = 1
 *             info.shape = &self.len if flags & PyBUF_ND else NULL             # <<<<<<<<<<<<<<
 *             info.strides = NULL
 * 
 */
    __pyx_t_1 = ((__pyx_v_flags & PyBUF_ND) != 0);
    if (__pyx_t_1) {
      __pyx_t_5 = (&__pyx_v_self->len);
    } else {
      __pyx_t_5 = NULL;
    }
    __pyx_v_info->shape = __pyx_t_5;

    /* "View.MemoryView":202
 *             info.ndim = 1
 *             info.shape = &self.len if flags & PyBUF_ND else NULL
 *             info.strides = NULL             # <<<<<<<<<<<<<<
 * 
 *         info.suboffsets = NULL
 */
    __pyx_v_info->strides = NULL;
  }
  __pyx_L6:;

  /* "View.MemoryView":204
 *             info.strides = NULL
 * 
 *         info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *         info.itemsize = self.itemsize
 *         info.readonly = 0
 */
  __pyx_v_info->suboffsets = NULL;

  /* "View.MemoryView":205
 * 
 *         info.suboffsets = NULL
 *         info.itemsize = self.itemsize             # <<<<<<<<<<<<<<
 *         info.readonly = 0
 *         info.format = self.format if flags & PyBUF_FORMAT else NULL
 */
  __pyx_t_3 = __pyx_v_self->itemsize;
  __pyx_v_info->itemsize = __pyx_t_3;

  /* "View.MemoryView":206
 *         info.suboffsets = NULL
 *         info.itemsize = self.itemsize
 *         info.readonly = 0             # <<<<<<<<<<<<<<
 *         info.format = self.format if flags & PyBUF_FORMAT else NULL
 *         info.obj = self
 */
  __pyx_v_info->readonly = 0;

  /* "View.MemoryView":207
 *         info.itemsize = self.itemsize
 *         info.readonly = 0
 *         info.format = self.format if flags & PyBUF_FORMAT else NULL             # <<<<<<<<<<<<<<
 *         info.obj = self
 * 
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_FORMAT) != 0);
  if (__pyx_t_1) {
    __pyx_t_2 = __pyx_v_self->format;
  } else {
    __pyx_t_2 = NULL;
  }
  __pyx_v_info->format = __pyx_t_2;

  /* "View.MemoryView":208
 *         info.readonly = 0
 *         info.format = self.format if flags & PyBUF_FORMAT else NULL
 *         info.obj = self             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(array self):
 */
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self);
  __Pyx_GOTREF(__pyx_v_info->obj);
  __Pyx_DECREF(__pyx_v_info->obj);
  __pyx_v_info->obj = ((PyObject *)__pyx_v_self);

  /* "View.MemoryView":182
 *             _allocate_buffer(self)
 * 
 *     @cname('getbuffer')             # <<<<<<<<<<<<<<
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         cdef int bufmode = -1
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("View.MemoryView.array.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  __pyx_L2:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":210
 *         info.obj = self
 * 
 *     def __dealloc__(array self):             # <<<<<<<<<<<<<<
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 */

/* Python wrapper */
static void __pyx_array___dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_array___dealloc__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__(((struct __pyx_array_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__(struct __pyx_array_obj *__pyx_v_self) {
  int __pyx_t_1;
  int __pyx_t_2;

  /* "View.MemoryView":211
 * 
 *     def __dealloc__(array self):
 *         if self.callback_free_data != NULL:             # <<<<<<<<<<<<<<
 *             self.callback_free_data(self.data)
 *         elif self.free_data and self.data is not NULL:
 */
  __pyx_t_1 = (__pyx_v_self->callback_free_data != NULL);
  if (__pyx_t_1) {

    /* "View.MemoryView":212
 *     def __dealloc__(array self):
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)             # <<<<<<<<<<<<<<
 *         elif self.free_data and self.data is not NULL:
 *             if self.dtype_is_object:
 */
    __pyx_v_self->callback_free_data(__pyx_v_self->data);

    /* "View.MemoryView":211
 * 
 *     def __dealloc__(array self):
 *         if self.callback_free_data != NULL:             # <<<<<<<<<<<<<<
 *             self.callback_free_data(self.data)
 *         elif self.free_data and self.data is not NULL:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":213
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 *         elif self.free_data and self.data is not NULL:             # <<<<<<<<<<<<<<
 *             if self.dtype_is_object:
 *                 refcount_objects_in_slice(self.data, self._shape, self._strides, self.ndim, inc=False)
 */
  if (__pyx_v_self->free_data) {
  } else {
    __pyx_t_1 = __pyx_v_self->free_data;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_self->data != NULL);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "View.MemoryView":214
 *             self.callback_free_data(self.data)
 *         elif self.free_data and self.data is not NULL:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 refcount_objects_in_slice(self.data, self._shape, self._strides, self.ndim, inc=False)
 *             free(self.data)
 */
    if (__pyx_v_self->dtype_is_object) {

      /* "View.MemoryView":215
 *         elif self.free_data and self.data is not NULL:
 *             if self.dtype_is_object:
 *                 refcount_objects_in_slice(self.data, self._shape, self._strides, self.ndim, inc=False)             # <<<<<<<<<<<<<<
 *             free(self.data)
 *         PyObject_Free(self._shape)
 */
      __pyx_memoryview_refcount_objects_in_slice(__pyx_v_self->data, __pyx_v_self->_shape, __pyx_v_self->_strides, __pyx_v_self->ndim, 0);

      /* "View.MemoryView":214
 *             self.callback_free_data(self.data)
 *         elif self.free_data and self.data is not NULL:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 refcount_objects_in_slice(self.data, self._shape, self._strides, self.ndim, inc=False)
 *             free(self.data)
 */
    }

    /* "View.MemoryView":216
 *             if self.dtype_is_object:
 *                 refcount_objects_in_slice(self.data, self._shape, self._strides, self.ndim, inc=False)
 *             free(self.data)             # <<<<<<<<<<<<<<
 *         PyObject_Free(self._shape)
 * 
 */
    free(__pyx_v_self->data);

    /* "View.MemoryView":213
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 *         elif self.free_data and self.data is not NULL:             # <<<<<<<<<<<<<<
 *             if self.dtype_is_object:
 *                 refcount_objects_in_slice(self.data, self._shape, self._strides, self.ndim, inc=False)
 */
  }
  __pyx_L3:;

  /* "View.MemoryView":217
 *                 refcount_objects_in_slice(self.data, self._shape, self._strides, self.ndim, inc=False)
 *             free(self.data)
 *         PyObject_Free(self._shape)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  PyObject_Free(__pyx_v_self->_shape);

  /* "View.MemoryView":210
 *         info.obj = self
 * 
 *     def __dealloc__(array self):             # <<<<<<<<<<<<<<
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 */

  /* function exit code */
}

/* "View.MemoryView":219
 *         PyObject_Free(self._shape)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def memview(self):
 *         return self.get_memview()
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_5array_7memview_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_5array_7memview_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_5array_7memview___get__(((struct __pyx_array_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_5array_7memview___get__(struct __pyx_array_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "View.MemoryView":221
 *     @property
 *     def memview(self):
 *         return self.get_memview()             # <<<<<<<<<<<<<<
 * 
 *     @cname('get_memview')
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_array *)__pyx_v_self->__pyx_vtab)->get_memview(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 221, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":219
 *         PyObject_Free(self._shape)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def memview(self):
 *         return self.get_memview()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.array.memview.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":224
 * 
 *     @cname('get_memview')
 *     cdef get_memview(self):             # <<<<<<<<<<<<<<
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE
 *         return  memoryview(self, flags, self.dtype_is_object)
 */

static PyObject *__pyx_array_get_memview(struct __pyx_array_obj *__pyx_v_self) {
  int __pyx_v_flags;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_memview", 1);

  /* "View.MemoryView":225
 *     @cname('get_memview')
 *     cdef get_memview(self):
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE             # <<<<<<<<<<<<<<
 *         return  memoryview(self, flags, self.dtype_is_object)
 * 
 */
  __pyx_v_flags = ((PyBUF_ANY_CONTIGUOUS | PyBUF_FORMAT) | PyBUF_WRITABLE);

  /* "View.MemoryView":226
 *     cdef get_memview(self):
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE
 *         return  memoryview(self, flags, self.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->dtype_is_object); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self))) __PYX_ERR(0, 226, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1)) __PYX_ERR(0, 226, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_2);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2)) __PYX_ERR(0, 226, __pyx_L1_error);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryview_type), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":224
 * 
 *     @cname('get_memview')
 *     cdef get_memview(self):             # <<<<<<<<<<<<<<
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE
 *         return  memoryview(self, flags, self.dtype_is_object)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.array.get_memview", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":228
 *         return  memoryview(self, flags, self.dtype_is_object)
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self._shape[0]
 * 
 */

/* Python wrapper */
static Py_ssize_t __pyx_array___len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_array___len__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_6__len__(((struct __pyx_array_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_array___pyx_pf_15View_dot_MemoryView_5array_6__len__(struct __pyx_array_obj *__pyx_v_self) {
  Py_ssize_t __pyx_r;

  /* "View.MemoryView":229
 * 
 *     def __len__(self):
 *         return self._shape[0]             # <<<<<<<<<<<<<<
 * 
 *     def __getattr__(self, attr):
 */
  __pyx_r = (__pyx_v_self->_shape[0]);
  goto __pyx_L0;

  /* "View.MemoryView":228
 *         return  memoryview(self, flags, self.dtype_is_object)
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self._shape[0]
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":231
 *         return self._shape[0]
 * 
 *     def __getattr__(self, attr):             # <<<<<<<<<<<<<<
 *         return getattr(self.memview, attr)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_array___getattr__(PyObject *__pyx_v_self, PyObject *__pyx_v_attr); /*proto*/
static PyObject *__pyx_array___getattr__(PyObject *__pyx_v_self, PyObject *__pyx_v_attr) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getattr__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getattr__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v_attr));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getattr__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_attr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getattr__", 1);

  /* "View.MemoryView":232
 * 
 *     def __getattr__(self, attr):
 *         return getattr(self.memview, attr)             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, item):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_memview); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 232, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetAttr(__pyx_t_1, __pyx_v_attr); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 232, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":231
 *         return self._shape[0]
 * 
 *     def __getattr__(self, attr):             # <<<<<<<<<<<<<<
 *         return getattr(self.memview, attr)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.array.__getattr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":234
 *         return getattr(self.memview, attr)
 * 
 *     def __getitem__(self, item):             # <<<<<<<<<<<<<<
 *         return self.memview[item]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_array___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item); /*proto*/
static PyObject *__pyx_array___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_10__getitem__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v_item));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_10__getitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 1);

  /* "View.MemoryView":235
 * 
 *     def __getitem__(self, item):
 *         return self.memview[item]             # <<<<<<<<<<<<<<
 * 
 *     def __setitem__(self, item, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_memview); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_t_1, __pyx_v_item); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":234
 *         return getattr(self.memview, attr)
 * 
 *     def __getitem__(self, item):             # <<<<<<<<<<<<<<
 *         return self.memview[item]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.array.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":237
 *         return self.memview[item]
 * 
 *     def __setitem__(self, item, value):             # <<<<<<<<<<<<<<
 *         self.memview[item] = value
 * 
 */

/* Python wrapper */
static int __pyx_array___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value); /*proto*/
static int __pyx_array___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_12__setitem__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v_item), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_12__setitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setitem__", 1);

  /* "View.MemoryView":238
 * 
 *     def __setitem__(self, item, value):
 *         self.memview[item] = value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_memview); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely((PyObject_SetItem(__pyx_t_1, __pyx_v_item, __pyx_v_value) < 0))) __PYX_ERR(0, 238, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "View.MemoryView":237
 *         return self.memview[item]
 * 
 *     def __setitem__(self, item, value):             # <<<<<<<<<<<<<<
 *         self.memview[item] = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.array.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_array_1__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_pw___pyx_array_1__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf___pyx_array___reduce_cython__(((struct __pyx_array_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_array___reduce_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("View.MemoryView.array.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_array_3__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_pw___pyx_array_3__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(0, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("View.MemoryView.array.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf___pyx_array_2__setstate_cython__(((struct __pyx_array_obj *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_array_2__setstate_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("View.MemoryView.array.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":248
 * 
 * @cname("__pyx_array_allocate_buffer")
 * cdef int _allocate_buffer(array self) except -1:             # <<<<<<<<<<<<<<
 * 
 * 
 */

static int __pyx_array_allocate_buffer(struct __pyx_array_obj *__pyx_v_self) {
  Py_ssize_t __pyx_v_i;
  PyObject **__pyx_v_p;
  int __pyx_r;
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "View.MemoryView":254
 *     cdef PyObject **p
 * 
 *     self.free_data = True             # <<<<<<<<<<<<<<
 *     self.data = <char *>malloc(self.len)
 *     if not self.data:
 */
  __pyx_v_self->free_data = 1;

  /* "View.MemoryView":255
 * 
 *     self.free_data = True
 *     self.data = <char *>malloc(self.len)             # <<<<<<<<<<<<<<
 *     if not self.data:
 *         raise MemoryError, "unable to allocate array data."
 */
  __pyx_v_self->data = ((char *)malloc(__pyx_v_self->len));

  /* "View.MemoryView":256
 *     self.free_data = True
 *     self.data = <char *>malloc(self.len)
 *     if not self.data:             # <<<<<<<<<<<<<<
 *         raise MemoryError, "unable to allocate array data."
 * 
 */
  __pyx_t_1 = (!(__pyx_v_self->data != 0));
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":257
 *     self.data = <char *>malloc(self.len)
 *     if not self.data:
 *         raise MemoryError, "unable to allocate array data."             # <<<<<<<<<<<<<<
 * 
 *     if self.dtype_is_object:
 */
    __Pyx_Raise(__pyx_builtin_MemoryError, __pyx_kp_s_unable_to_allocate_array_data, 0, 0);
    __PYX_ERR(0, 257, __pyx_L1_error)

    /* "View.MemoryView":256
 *     self.free_data = True
 *     self.data = <char *>malloc(self.len)
 *     if not self.data:             # <<<<<<<<<<<<<<
 *         raise MemoryError, "unable to allocate array data."
 * 
 */
  }

  /* "View.MemoryView":259
 *         raise MemoryError, "unable to allocate array data."
 * 
 *     if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *         p = <PyObject **> self.data
 *         for i in range(self.len // self.itemsize):
 */
  if (__pyx_v_self->dtype_is_object) {

    /* "View.MemoryView":260
 * 
 *     if self.dtype_is_object:
 *         p = <PyObject **> self.data             # <<<<<<<<<<<<<<
 *         for i in range(self.len // self.itemsize):
 *             p[i] = Py_None
 */
    __pyx_v_p = ((PyObject **)__pyx_v_self->data);

    /* "View.MemoryView":261
 *     if self.dtype_is_object:
 *         p = <PyObject **> self.data
 *         for i in range(self.len // self.itemsize):             # <<<<<<<<<<<<<<
 *             p[i] = Py_None
 *             Py_INCREF(Py_None)
 */
    if (unlikely(__pyx_v_self->itemsize == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      __PYX_ERR(0, 261, __pyx_L1_error)
    }
    else if (sizeof(Py_ssize_t) == sizeof(long) && (!(((Py_ssize_t)-1) > 0)) && unlikely(__pyx_v_self->itemsize == (Py_ssize_t)-1)  && unlikely(__Pyx_UNARY_NEG_WOULD_OVERFLOW(__pyx_v_self->len))) {
      PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
      __PYX_ERR(0, 261, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_div_Py_ssize_t(__pyx_v_self->len, __pyx_v_self->itemsize);
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "View.MemoryView":262
 *         p = <PyObject **> self.data
 *         for i in range(self.len // self.itemsize):
 *             p[i] = Py_None             # <<<<<<<<<<<<<<
 *             Py_INCREF(Py_None)
 *     return 0
 */
      (__pyx_v_p[__pyx_v_i]) = Py_None;

      /* "View.MemoryView":263
 *         for i in range(self.len // self.itemsize):
 *             p[i] = Py_None
 *             Py_INCREF(Py_None)             # <<<<<<<<<<<<<<
 *     return 0
 * 
 */
      Py_INCREF(Py_None);
    }

    /* "View.MemoryView":259
 *         raise MemoryError, "unable to allocate array data."
 * 
 *     if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *         p = <PyObject **> self.data
 *         for i in range(self.len // self.itemsize):
 */
  }

  /* "View.MemoryView":264
 *             p[i] = Py_None
 *             Py_INCREF(Py_None)
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "View.MemoryView":248
 * 
 * @cname("__pyx_array_allocate_buffer")
 * cdef int _allocate_buffer(array self) except -1:             # <<<<<<<<<<<<<<
 * 
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("View.MemoryView._allocate_buffer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":268
 * 
 * @cname("__pyx_array_new")
 * cdef array array_cwrapper(tuple shape, Py_ssize_t itemsize, char *format, char *c_mode, char *buf):             # <<<<<<<<<<<<<<
 *     cdef array result
 *     cdef str mode = "fortran" if c_mode[0] == b'f' else "c"  # this often comes from a constant C string.
 */

static struct __pyx_array_obj *__pyx_array_new(PyObject *__pyx_v_shape, Py_ssize_t __pyx_v_itemsize, char *__pyx_v_format, char *__pyx_v_c_mode, char *__pyx_v_buf) {
  struct __pyx_array_obj *__pyx_v_result = 0;
  PyObject *__pyx_v_mode = 0;
  struct __pyx_array_obj *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("array_cwrapper", 1);

  /* "View.MemoryView":270
 * cdef array array_cwrapper(tuple shape, Py_ssize_t itemsize, char *format, char *c_mode, char *buf):
 *     cdef array result
 *     cdef str mode = "fortran" if c_mode[0] == b'f' else "c"  # this often comes from a constant C string.             # <<<<<<<<<<<<<<
 * 
 *     if buf is NULL:
 */
  __pyx_t_2 = ((__pyx_v_c_mode[0]) == 'f');
  if (__pyx_t_2) {
    __Pyx_INCREF(__pyx_n_s_fortran);
    __pyx_t_1 = __pyx_n_s_fortran;
  } else {
    __Pyx_INCREF(__pyx_n_s_c);
    __pyx_t_1 = __pyx_n_s_c;
  }
  __pyx_v_mode = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":272
 *     cdef str mode = "fortran" if c_mode[0] == b'f' else "c"  # this often comes from a constant C string.
 * 
 *     if buf is NULL:             # <<<<<<<<<<<<<<
 *         result = array.__new__(array, shape, itemsize, format, mode)
 *     else:
 */
  __pyx_t_2 = (__pyx_v_buf == NULL);
  if (__pyx_t_2) {

    /* "View.MemoryView":273
 * 
 *     if buf is NULL:
 *         result = array.__new__(array, shape, itemsize, format, mode)             # <<<<<<<<<<<<<<
 *     else:
 *         result = array.__new__(array, shape, itemsize, format, mode, allocate_buffer=False)
 */
    __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_itemsize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 273, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyBytes_FromString(__pyx_v_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 273, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 273, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v_shape);
    __Pyx_GIVEREF(__pyx_v_shape);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_shape)) __PYX_ERR(0, 273, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_1);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1)) __PYX_ERR(0, 273, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_3);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3)) __PYX_ERR(0, 273, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_mode);
    __Pyx_GIVEREF(__pyx_v_mode);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_v_mode)) __PYX_ERR(0, 273, __pyx_L1_error);
    __pyx_t_1 = 0;
    __pyx_t_3 = 0;
    __pyx_t_3 = ((PyObject *)__pyx_tp_new_array(((PyTypeObject *)__pyx_array_type), __pyx_t_4, NULL)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 273, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_result = ((struct __pyx_array_obj *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "View.MemoryView":272
 *     cdef str mode = "fortran" if c_mode[0] == b'f' else "c"  # this often comes from a constant C string.
 * 
 *     if buf is NULL:             # <<<<<<<<<<<<<<
 *         result = array.__new__(array, shape, itemsize, format, mode)
 *     else:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":275
 *         result = array.__new__(array, shape, itemsize, format, mode)
 *     else:
 *         result = array.__new__(array, shape, itemsize, format, mode, allocate_buffer=False)             # <<<<<<<<<<<<<<
 *         result.data = buf
 * 
 */
  /*else*/ {
    __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_itemsize); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 275, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyBytes_FromString(__pyx_v_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 275, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 275, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v_shape);
    __Pyx_GIVEREF(__pyx_v_shape);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_shape)) __PYX_ERR(0, 275, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_3);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3)) __PYX_ERR(0, 275, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_4);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_t_4)) __PYX_ERR(0, 275, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_mode);
    __Pyx_GIVEREF(__pyx_v_mode);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_v_mode)) __PYX_ERR(0, 275, __pyx_L1_error);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 275, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_allocate_buffer, Py_False) < 0) __PYX_ERR(0, 275, __pyx_L1_error)
    __pyx_t_3 = ((PyObject *)__pyx_tp_new_array(((PyTypeObject *)__pyx_array_type), __pyx_t_1, __pyx_t_4)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 275, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_result = ((struct __pyx_array_obj *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "View.MemoryView":276
 *     else:
 *         result = array.__new__(array, shape, itemsize, format, mode, allocate_buffer=False)
 *         result.data = buf             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
    __pyx_v_result->data = __pyx_v_buf;
  }
  __pyx_L3:;

  /* "View.MemoryView":278
 *         result.data = buf
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF((PyObject *)__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "View.MemoryView":268
 * 
 * @cname("__pyx_array_new")
 * cdef array array_cwrapper(tuple shape, Py_ssize_t itemsize, char *format, char *c_mode, char *buf):             # <<<<<<<<<<<<<<
 *     cdef array result
 *     cdef str mode = "fortran" if c_mode[0] == b'f' else "c"  # this often comes from a constant C string.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView.array_cwrapper", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_mode);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":304
 * cdef class Enum(object):
 *     cdef object name
 *     def __init__(self, name):             # <<<<<<<<<<<<<<
 *         self.name = name
 *     def __repr__(self):
 */

/* Python wrapper */
static int __pyx_MemviewEnum___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_MemviewEnum___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_name = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_name)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 304, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__init__") < 0)) __PYX_ERR(0, 304, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
    }
    __pyx_v_name = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 304, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("View.MemoryView.Enum.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum___init__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self), __pyx_v_name);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum___init__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v_name) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 1);

  /* "View.MemoryView":305
 *     cdef object name
 *     def __init__(self, name):
 *         self.name = name             # <<<<<<<<<<<<<<
 *     def __repr__(self):
 *         return self.name
 */
  __Pyx_INCREF(__pyx_v_name);
  __Pyx_GIVEREF(__pyx_v_name);
  __Pyx_GOTREF(__pyx_v_self->name);
  __Pyx_DECREF(__pyx_v_self->name);
  __pyx_v_self->name = __pyx_v_name;

  /* "View.MemoryView":304
 * cdef class Enum(object):
 *     cdef object name
 *     def __init__(self, name):             # <<<<<<<<<<<<<<
 *         self.name = name
 *     def __repr__(self):
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":306
 *     def __init__(self, name):
 *         self.name = name
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.name
 * 
 */

/* Python wrapper */
static PyObject *__pyx_MemviewEnum___repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_MemviewEnum___repr__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum_2__repr__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum_2__repr__(struct __pyx_MemviewEnum_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__", 1);

  /* "View.MemoryView":307
 *         self.name = name
 *     def __repr__(self):
 *         return self.name             # <<<<<<<<<<<<<<
 * 
 * cdef generic = Enum("<strided and direct or indirect>")
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->name);
  __pyx_r = __pyx_v_self->name;
  goto __pyx_L0;

  /* "View.MemoryView":306
 *     def __init__(self, name):
 *         self.name = name
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.name
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_MemviewEnum_1__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_pw___pyx_MemviewEnum_1__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf___pyx_MemviewEnum___reduce_cython__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_MemviewEnum___reduce_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.name,)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_self->name);
  __Pyx_GIVEREF(__pyx_v_self->name);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_self->name)) __PYX_ERR(0, 5, __pyx_L1_error);
  __pyx_v_state = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.name,)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":7
 *     state = (self.name,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  if (__pyx_t_2) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict)) __PYX_ERR(0, 8, __pyx_L1_error);
    __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self.name is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.name,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self.name is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_Enum, (type(self), 0x82a3537, None), state
 */
  /*else*/ {
    __pyx_t_2 = (__pyx_v_self->name != Py_None);
    __pyx_v_use_setstate = __pyx_t_2;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.name is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Enum, (type(self), 0x82a3537, None), state
 *     else:
 */
  if (__pyx_v_use_setstate) {

    /* "(tree fragment)":13
 *         use_setstate = self.name is not None
 *     if use_setstate:
 *         return __pyx_unpickle_Enum, (type(self), 0x82a3537, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_Enum, (type(self), 0x82a3537, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_pyx_unpickle_Enum); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))))) __PYX_ERR(0, 13, __pyx_L1_error);
    __Pyx_INCREF(__pyx_int_136983863);
    __Pyx_GIVEREF(__pyx_int_136983863);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_136983863)) __PYX_ERR(0, 13, __pyx_L1_error);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None)) __PYX_ERR(0, 13, __pyx_L1_error);
    __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_3);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3)) __PYX_ERR(0, 13, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_1);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1)) __PYX_ERR(0, 13, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_v_state)) __PYX_ERR(0, 13, __pyx_L1_error);
    __pyx_t_3 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.name is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Enum, (type(self), 0x82a3537, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_Enum, (type(self), 0x82a3537, None), state
 *     else:
 *         return __pyx_unpickle_Enum, (type(self), 0x82a3537, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Enum__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_Enum); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))))) __PYX_ERR(0, 15, __pyx_L1_error);
    __Pyx_INCREF(__pyx_int_136983863);
    __Pyx_GIVEREF(__pyx_int_136983863);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_136983863)) __PYX_ERR(0, 15, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state)) __PYX_ERR(0, 15, __pyx_L1_error);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4)) __PYX_ERR(0, 15, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_1);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1)) __PYX_ERR(0, 15, __pyx_L1_error);
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView.Enum.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Enum, (type(self), 0x82a3537, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Enum__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_MemviewEnum_3__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_pw___pyx_MemviewEnum_3__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 16, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(0, 16, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 16, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("View.MemoryView.Enum.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf___pyx_MemviewEnum_2__setstate_cython__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_MemviewEnum_2__setstate_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_Enum, (type(self), 0x82a3537, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Enum__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v___pyx_state))) __PYX_ERR(0, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_unpickle_Enum__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Enum, (type(self), 0x82a3537, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Enum__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.Enum.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":349
 *     cdef __Pyx_TypeInfo *typeinfo
 * 
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):             # <<<<<<<<<<<<<<
 *         self.obj = obj
 *         self.flags = flags
 */

/* Python wrapper */
static int __pyx_memoryview___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_memoryview___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_obj = 0;
  int __pyx_v_flags;
  int __pyx_v_dtype_is_object;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_obj,&__pyx_n_s_flags,&__pyx_n_s_dtype_is_object,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_obj)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 349, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_flags)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 349, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 3, 1); __PYX_ERR(0, 349, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_dtype_is_object);
          if (value) { values[2] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 349, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__cinit__") < 0)) __PYX_ERR(0, 349, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_obj = values[0];
    __pyx_v_flags = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_flags == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 349, __pyx_L3_error)
    if (values[2]) {
      __pyx_v_dtype_is_object = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_dtype_is_object == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 349, __pyx_L3_error)
    } else {
      __pyx_v_dtype_is_object = ((int)0);
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 3, __pyx_nargs); __PYX_ERR(0, 349, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("View.MemoryView.memoryview.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview___cinit__(((struct __pyx_memoryview_obj *)__pyx_v_self), __pyx_v_obj, __pyx_v_flags, __pyx_v_dtype_is_object);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview___cinit__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj, int __pyx_v_flags, int __pyx_v_dtype_is_object) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  Py_intptr_t __pyx_t_4;
  size_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 1);

  /* "View.MemoryView":350
 * 
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):
 *         self.obj = obj             # <<<<<<<<<<<<<<
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:
 */
  __Pyx_INCREF(__pyx_v_obj);
  __Pyx_GIVEREF(__pyx_v_obj);
  __Pyx_GOTREF(__pyx_v_self->obj);
  __Pyx_DECREF(__pyx_v_self->obj);
  __pyx_v_self->obj = __pyx_v_obj;

  /* "View.MemoryView":351
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):
 *         self.obj = obj
 *         self.flags = flags             # <<<<<<<<<<<<<<
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 */
  __pyx_v_self->flags = __pyx_v_flags;

  /* "View.MemoryView":352
 *         self.obj = obj
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:
 */
  __pyx_t_2 = (((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))) == ((PyObject *)__pyx_memoryview_type));
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_obj != Py_None);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "View.MemoryView":353
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)             # <<<<<<<<<<<<<<
 *             if <PyObject *> self.view.obj == NULL:
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 */
    __pyx_t_3 = __Pyx_GetBuffer(__pyx_v_obj, (&__pyx_v_self->view), __pyx_v_flags); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 353, __pyx_L1_error)

    /* "View.MemoryView":354
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:             # <<<<<<<<<<<<<<
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 *                 Py_INCREF(Py_None)
 */
    __pyx_t_1 = (((PyObject *)__pyx_v_self->view.obj) == NULL);
    if (__pyx_t_1) {

      /* "View.MemoryView":355
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:
 *                 (<__pyx_buffer *> &self.view).obj = Py_None             # <<<<<<<<<<<<<<
 *                 Py_INCREF(Py_None)
 * 
 */
      ((Py_buffer *)(&__pyx_v_self->view))->obj = Py_None;

      /* "View.MemoryView":356
 *             if <PyObject *> self.view.obj == NULL:
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 *                 Py_INCREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *         if not __PYX_CYTHON_ATOMICS_ENABLED():
 */
      Py_INCREF(Py_None);

      /* "View.MemoryView":354
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:             # <<<<<<<<<<<<<<
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 *                 Py_INCREF(Py_None)
 */
    }

    /* "View.MemoryView":352
 *         self.obj = obj
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:
 */
  }

  /* "View.MemoryView":358
 *                 Py_INCREF(Py_None)
 * 
 *         if not __PYX_CYTHON_ATOMICS_ENABLED():             # <<<<<<<<<<<<<<
 *             global __pyx_memoryview_thread_locks_used
 *             if __pyx_memoryview_thread_locks_used < 8:
 */
  __pyx_t_1 = (!__PYX_CYTHON_ATOMICS_ENABLED());
  if (__pyx_t_1) {

    /* "View.MemoryView":360
 *         if not __PYX_CYTHON_ATOMICS_ENABLED():
 *             global __pyx_memoryview_thread_locks_used
 *             if __pyx_memoryview_thread_locks_used < 8:             # <<<<<<<<<<<<<<
 *                 self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *                 __pyx_memoryview_thread_locks_used += 1
 */
    __pyx_t_1 = (__pyx_memoryview_thread_locks_used < 8);
    if (__pyx_t_1) {

      /* "View.MemoryView":361
 *             global __pyx_memoryview_thread_locks_used
 *             if __pyx_memoryview_thread_locks_used < 8:
 *                 self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]             # <<<<<<<<<<<<<<
 *                 __pyx_memoryview_thread_locks_used += 1
 *             if self.lock is NULL:
 */
      __pyx_v_self->lock = (__pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]);

      /* "View.MemoryView":362
 *             if __pyx_memoryview_thread_locks_used < 8:
 *                 self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *                 __pyx_memoryview_thread_locks_used += 1             # <<<<<<<<<<<<<<
 *             if self.lock is NULL:
 *                 self.lock = PyThread_allocate_lock()
 */
      __pyx_memoryview_thread_locks_used = (__pyx_memoryview_thread_locks_used + 1);

      /* "View.MemoryView":360
 *         if not __PYX_CYTHON_ATOMICS_ENABLED():
 *             global __pyx_memoryview_thread_locks_used
 *             if __pyx_memoryview_thread_locks_used < 8:             # <<<<<<<<<<<<<<
 *                 self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *                 __pyx_memoryview_thread_locks_used += 1
 */
    }

    /* "View.MemoryView":363
 *                 self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *                 __pyx_memoryview_thread_locks_used += 1
 *             if self.lock is NULL:             # <<<<<<<<<<<<<<
 *                 self.lock = PyThread_allocate_lock()
 *                 if self.lock is NULL:
 */
    __pyx_t_1 = (__pyx_v_self->lock == NULL);
    if (__pyx_t_1) {

      /* "View.MemoryView":364
 *                 __pyx_memoryview_thread_locks_used += 1
 *             if self.lock is NULL:
 *                 self.lock = PyThread_allocate_lock()             # <<<<<<<<<<<<<<
 *                 if self.lock is NULL:
 *                     raise MemoryError
 */
      __pyx_v_self->lock = PyThread_allocate_lock();

      /* "View.MemoryView":365
 *             if self.lock is NULL:
 *                 self.lock = PyThread_allocate_lock()
 *                 if self.lock is NULL:             # <<<<<<<<<<<<<<
 *                     raise MemoryError
 * 
 */
      __pyx_t_1 = (__pyx_v_self->lock == NULL);
      if (unlikely(__pyx_t_1)) {

        /* "View.MemoryView":366
 *                 self.lock = PyThread_allocate_lock()
 *                 if self.lock is NULL:
 *                     raise MemoryError             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_FORMAT:
 */
        PyErr_NoMemory(); __PYX_ERR(0, 366, __pyx_L1_error)

        /* "View.MemoryView":365
 *             if self.lock is NULL:
 *                 self.lock = PyThread_allocate_lock()
 *                 if self.lock is NULL:             # <<<<<<<<<<<<<<
 *                     raise MemoryError
 * 
 */
      }

      /* "View.MemoryView":363
 *                 self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *                 __pyx_memoryview_thread_locks_used += 1
 *             if self.lock is NULL:             # <<<<<<<<<<<<<<
 *                 self.lock = PyThread_allocate_lock()
 *                 if self.lock is NULL:
 */
    }

    /* "View.MemoryView":358
 *                 Py_INCREF(Py_None)
 * 
 *         if not __PYX_CYTHON_ATOMICS_ENABLED():             # <<<<<<<<<<<<<<
 *             global __pyx_memoryview_thread_locks_used
 *             if __pyx_memoryview_thread_locks_used < 8:
 */
  }

  /* "View.MemoryView":368
 *                     raise MemoryError
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_FORMAT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":369
 * 
 *         if flags & PyBUF_FORMAT:
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')             # <<<<<<<<<<<<<<
 *         else:
 *             self.dtype_is_object = dtype_is_object
 */
    __pyx_t_2 = ((__pyx_v_self->view.format[0]) == 'O');
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L12_bool_binop_done;
    }
    __pyx_t_2 = ((__pyx_v_self->view.format[1]) == '\x00');
    __pyx_t_1 = __pyx_t_2;
    __pyx_L12_bool_binop_done:;
    __pyx_v_self->dtype_is_object = __pyx_t_1;

    /* "View.MemoryView":368
 *                     raise MemoryError
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')
 *         else:
 */
    goto __pyx_L11;
  }

  /* "View.MemoryView":371
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')
 *         else:
 *             self.dtype_is_object = dtype_is_object             # <<<<<<<<<<<<<<
 * 
 *         assert <Py_intptr_t><void*>(&self.acquisition_count) % sizeof(__pyx_atomic_int_type) == 0
 */
  /*else*/ {
    __pyx_v_self->dtype_is_object = __pyx_v_dtype_is_object;
  }
  __pyx_L11:;

  /* "View.MemoryView":373
 *             self.dtype_is_object = dtype_is_object
 * 
 *         assert <Py_intptr_t><void*>(&self.acquisition_count) % sizeof(__pyx_atomic_int_type) == 0             # <<<<<<<<<<<<<<
 *         self.typeinfo = NULL
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(__pyx_assertions_enabled())) {
    __pyx_t_4 = ((Py_intptr_t)((void *)(&__pyx_v_self->acquisition_count)));
    __pyx_t_5 = (sizeof(__pyx_atomic_int_type));
    if (unlikely(__pyx_t_5 == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      __PYX_ERR(0, 373, __pyx_L1_error)
    }
    __pyx_t_1 = ((__pyx_t_4 % __pyx_t_5) == 0);
    if (unlikely(!__pyx_t_1)) {
      __Pyx_Raise(__pyx_builtin_AssertionError, 0, 0, 0);
      __PYX_ERR(0, 373, __pyx_L1_error)
    }
  }
  #else
  if ((1)); else __PYX_ERR(0, 373, __pyx_L1_error)
  #endif

  /* "View.MemoryView":374
 * 
 *         assert <Py_intptr_t><void*>(&self.acquisition_count) % sizeof(__pyx_atomic_int_type) == 0
 *         self.typeinfo = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(memoryview self):
 */
  __pyx_v_self->typeinfo = NULL;

  /* "View.MemoryView":349
 *     cdef __Pyx_TypeInfo *typeinfo
 * 
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):             # <<<<<<<<<<<<<<
 *         self.obj = obj
 *         self.flags = flags
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("View.MemoryView.memoryview.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":376
 *         self.typeinfo = NULL
 * 
 *     def __dealloc__(memoryview self):             # <<<<<<<<<<<<<<
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)
 */

/* Python wrapper */
static void __pyx_memoryview___dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_memoryview___dealloc__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__(struct __pyx_memoryview_obj *__pyx_v_self) {
  int __pyx_v_i;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyThread_type_lock __pyx_t_5;
  PyThread_type_lock __pyx_t_6;

  /* "View.MemoryView":377
 * 
 *     def __dealloc__(memoryview self):
 *         if self.obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_ReleaseBuffer(&self.view)
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:
 */
  __pyx_t_1 = (__pyx_v_self->obj != Py_None);
  if (__pyx_t_1) {

    /* "View.MemoryView":378
 *     def __dealloc__(memoryview self):
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)             # <<<<<<<<<<<<<<
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:
 * 
 */
    __Pyx_ReleaseBuffer((&__pyx_v_self->view));

    /* "View.MemoryView":377
 * 
 *     def __dealloc__(memoryview self):
 *         if self.obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_ReleaseBuffer(&self.view)
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":379
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:             # <<<<<<<<<<<<<<
 * 
 *             (<__pyx_buffer *> &self.view).obj = NULL
 */
  __pyx_t_1 = (((Py_buffer *)(&__pyx_v_self->view))->obj == Py_None);
  if (__pyx_t_1) {

    /* "View.MemoryView":381
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:
 * 
 *             (<__pyx_buffer *> &self.view).obj = NULL             # <<<<<<<<<<<<<<
 *             Py_DECREF(Py_None)
 * 
 */
    ((Py_buffer *)(&__pyx_v_self->view))->obj = NULL;

    /* "View.MemoryView":382
 * 
 *             (<__pyx_buffer *> &self.view).obj = NULL
 *             Py_DECREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *         cdef int i
 */
    Py_DECREF(Py_None);

    /* "View.MemoryView":379
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:             # <<<<<<<<<<<<<<
 * 
 *             (<__pyx_buffer *> &self.view).obj = NULL
 */
  }
  __pyx_L3:;

  /* "View.MemoryView":386
 *         cdef int i
 *         global __pyx_memoryview_thread_locks_used
 *         if self.lock != NULL:             # <<<<<<<<<<<<<<
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 */
  __pyx_t_1 = (__pyx_v_self->lock != NULL);
  if (__pyx_t_1) {

    /* "View.MemoryView":387
 *         global __pyx_memoryview_thread_locks_used
 *         if self.lock != NULL:
 *             for i in range(__pyx_memoryview_thread_locks_used):             # <<<<<<<<<<<<<<
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1
 */
    __pyx_t_2 = __pyx_memoryview_thread_locks_used;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "View.MemoryView":388
 *         if self.lock != NULL:
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:             # <<<<<<<<<<<<<<
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:
 */
      __pyx_t_1 = ((__pyx_memoryview_thread_locks[__pyx_v_i]) == __pyx_v_self->lock);
      if (__pyx_t_1) {

        /* "View.MemoryView":389
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1             # <<<<<<<<<<<<<<
 *                     if i != __pyx_memoryview_thread_locks_used:
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 */
        __pyx_memoryview_thread_locks_used = (__pyx_memoryview_thread_locks_used - 1);

        /* "View.MemoryView":390
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:             # <<<<<<<<<<<<<<
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 */
        __pyx_t_1 = (__pyx_v_i != __pyx_memoryview_thread_locks_used);
        if (__pyx_t_1) {

          /* "View.MemoryView":392
 *                     if i != __pyx_memoryview_thread_locks_used:
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])             # <<<<<<<<<<<<<<
 *                     break
 *             else:
 */
          __pyx_t_5 = (__pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]);
          __pyx_t_6 = (__pyx_memoryview_thread_locks[__pyx_v_i]);

          /* "View.MemoryView":391
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (             # <<<<<<<<<<<<<<
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 *                     break
 */
          (__pyx_memoryview_thread_locks[__pyx_v_i]) = __pyx_t_5;
          (__pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]) = __pyx_t_6;

          /* "View.MemoryView":390
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:             # <<<<<<<<<<<<<<
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 */
        }

        /* "View.MemoryView":393
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 *                     break             # <<<<<<<<<<<<<<
 *             else:
 *                 PyThread_free_lock(self.lock)
 */
        goto __pyx_L6_break;

        /* "View.MemoryView":388
 *         if self.lock != NULL:
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:             # <<<<<<<<<<<<<<
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:
 */
      }
    }
    /*else*/ {

      /* "View.MemoryView":395
 *                     break
 *             else:
 *                 PyThread_free_lock(self.lock)             # <<<<<<<<<<<<<<
 * 
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:
 */
      PyThread_free_lock(__pyx_v_self->lock);
    }
    __pyx_L6_break:;

    /* "View.MemoryView":386
 *         cdef int i
 *         global __pyx_memoryview_thread_locks_used
 *         if self.lock != NULL:             # <<<<<<<<<<<<<<
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 */
  }

  /* "View.MemoryView":376
 *         self.typeinfo = NULL
 * 
 *     def __dealloc__(memoryview self):             # <<<<<<<<<<<<<<
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)
 */

  /* function exit code */
}

/* "View.MemoryView":397
 *                 PyThread_free_lock(self.lock)
 * 
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t dim
 *         cdef char *itemp = <char *> self.view.buf
 */

static char *__pyx_memoryview_get_item_pointer(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index) {
  Py_ssize_t __pyx_v_dim;
  char *__pyx_v_itemp;
  PyObject *__pyx_v_idx = NULL;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  char *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_item_pointer", 1);

  /* "View.MemoryView":399
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:
 *         cdef Py_ssize_t dim
 *         cdef char *itemp = <char *> self.view.buf             # <<<<<<<<<<<<<<
 * 
 *         for dim, idx in enumerate(index):
 */
  __pyx_v_itemp = ((char *)__pyx_v_self->view.buf);

  /* "View.MemoryView":401
 *         cdef char *itemp = <char *> self.view.buf
 * 
 *         for dim, idx in enumerate(index):             # <<<<<<<<<<<<<<
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)
 * 
 */
  __pyx_t_1 = 0;
  if (likely(PyList_CheckExact(__pyx_v_index)) || PyTuple_CheckExact(__pyx_v_index)) {
    __pyx_t_2 = __pyx_v_index; __Pyx_INCREF(__pyx_t_2);
    __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 401, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 401, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_2);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 401, __pyx_L1_error)
          #endif
          if (__pyx_t_3 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely((0 < 0))) __PYX_ERR(0, 401, __pyx_L1_error)
        #else
        __pyx_t_5 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 401, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_2);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 401, __pyx_L1_error)
          #endif
          if (__pyx_t_3 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely((0 < 0))) __PYX_ERR(0, 401, __pyx_L1_error)
        #else
        __pyx_t_5 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 401, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 401, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_XDECREF_SET(__pyx_v_idx, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_v_dim = __pyx_t_1;
    __pyx_t_1 = (__pyx_t_1 + 1);

    /* "View.MemoryView":402
 * 
 *         for dim, idx in enumerate(index):
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)             # <<<<<<<<<<<<<<
 * 
 *         return itemp
 */
    __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_idx); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 402, __pyx_L1_error)
    __pyx_t_7 = __pyx_pybuffer_index((&__pyx_v_self->view), __pyx_v_itemp, __pyx_t_6, __pyx_v_dim); if (unlikely(__pyx_t_7 == ((char *)NULL))) __PYX_ERR(0, 402, __pyx_L1_error)
    __pyx_v_itemp = __pyx_t_7;

    /* "View.MemoryView":401
 *         cdef char *itemp = <char *> self.view.buf
 * 
 *         for dim, idx in enumerate(index):             # <<<<<<<<<<<<<<
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":404
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)
 * 
 *         return itemp             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_itemp;
  goto __pyx_L0;

  /* "View.MemoryView":397
 *                 PyThread_free_lock(self.lock)
 * 
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t dim
 *         cdef char *itemp = <char *> self.view.buf
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview.get_item_pointer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_idx);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":407
 * 
 * 
 *     def __getitem__(memoryview self, object index):             # <<<<<<<<<<<<<<
 *         if index is Ellipsis:
 *             return self
 */

/* Python wrapper */
static PyObject *__pyx_memoryview___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index); /*proto*/
static PyObject *__pyx_memoryview___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_4__getitem__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((PyObject *)__pyx_v_index));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_4__getitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_v_have_slices = NULL;
  PyObject *__pyx_v_indices = NULL;
  char *__pyx_v_itemp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  char *__pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 1);

  /* "View.MemoryView":408
 * 
 *     def __getitem__(memoryview self, object index):
 *         if index is Ellipsis:             # <<<<<<<<<<<<<<
 *             return self
 * 
 */
  __pyx_t_1 = (__pyx_v_index == __pyx_builtin_Ellipsis);
  if (__pyx_t_1) {

    /* "View.MemoryView":409
 *     def __getitem__(memoryview self, object index):
 *         if index is Ellipsis:
 *             return self             # <<<<<<<<<<<<<<
 * 
 *         have_slices, indices = _unellipsify(index, self.view.ndim)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_self);
    __pyx_r = ((PyObject *)__pyx_v_self);
    goto __pyx_L0;

    /* "View.MemoryView":408
 * 
 *     def __getitem__(memoryview self, object index):
 *         if index is Ellipsis:             # <<<<<<<<<<<<<<
 *             return self
 * 
 */
  }

  /* "View.MemoryView":411
 *             return self
 * 
 *         have_slices, indices = _unellipsify(index, self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *         cdef char *itemp
 */
  __pyx_t_2 = _unellipsify(__pyx_v_index, __pyx_v_self->view.ndim); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 411, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (likely(__pyx_t_2 != Py_None)) {
    PyObject* sequence = __pyx_t_2;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 411, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_4);
    #else
    __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 411, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 411, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 411, __pyx_L1_error)
  }
  __pyx_v_have_slices = __pyx_t_3;
  __pyx_t_3 = 0;
  __pyx_v_indices = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "View.MemoryView":414
 * 
 *         cdef char *itemp
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             return memview_slice(self, indices)
 *         else:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_have_slices); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 414, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "View.MemoryView":415
 *         cdef char *itemp
 *         if have_slices:
 *             return memview_slice(self, indices)             # <<<<<<<<<<<<<<
 *         else:
 *             itemp = self.get_item_pointer(indices)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = ((PyObject *)__pyx_memview_slice(__pyx_v_self, __pyx_v_indices)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 415, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":414
 * 
 *         cdef char *itemp
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             return memview_slice(self, indices)
 *         else:
 */
  }

  /* "View.MemoryView":417
 *             return memview_slice(self, indices)
 *         else:
 *             itemp = self.get_item_pointer(indices)             # <<<<<<<<<<<<<<
 *             return self.convert_item_to_object(itemp)
 * 
 */
  /*else*/ {
    __pyx_t_5 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->get_item_pointer(__pyx_v_self, __pyx_v_indices); if (unlikely(__pyx_t_5 == ((char *)NULL))) __PYX_ERR(0, 417, __pyx_L1_error)
    __pyx_v_itemp = __pyx_t_5;

    /* "View.MemoryView":418
 *         else:
 *             itemp = self.get_item_pointer(indices)
 *             return self.convert_item_to_object(itemp)             # <<<<<<<<<<<<<<
 * 
 *     def __setitem__(memoryview self, object index, object value):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->convert_item_to_object(__pyx_v_self, __pyx_v_itemp); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 418, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "View.MemoryView":407
 * 
 * 
 *     def __getitem__(memoryview self, object index):             # <<<<<<<<<<<<<<
 *         if index is Ellipsis:
 *             return self
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_have_slices);
  __Pyx_XDECREF(__pyx_v_indices);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":420
 *             return self.convert_item_to_object(itemp)
 * 
 *     def __setitem__(memoryview self, object index, object value):             # <<<<<<<<<<<<<<
 *         if self.view.readonly:
 *             raise TypeError, "Cannot assign to read-only memoryview"
 */

/* Python wrapper */
static int __pyx_memoryview___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /*proto*/
static int __pyx_memoryview___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((PyObject *)__pyx_v_index), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  PyObject *__pyx_v_have_slices = NULL;
  PyObject *__pyx_v_obj = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setitem__", 0);
  __Pyx_INCREF(__pyx_v_index);

  /* "View.MemoryView":421
 * 
 *     def __setitem__(memoryview self, object index, object value):
 *         if self.view.readonly:             # <<<<<<<<<<<<<<
 *             raise TypeError, "Cannot assign to read-only memoryview"
 * 
 */
  if (unlikely(__pyx_v_self->view.readonly)) {

    /* "View.MemoryView":422
 *     def __setitem__(memoryview self, object index, object value):
 *         if self.view.readonly:
 *             raise TypeError, "Cannot assign to read-only memoryview"             # <<<<<<<<<<<<<<
 * 
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 */
    __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_Cannot_assign_to_read_only_memor, 0, 0);
    __PYX_ERR(0, 422, __pyx_L1_error)

    /* "View.MemoryView":421
 * 
 *     def __setitem__(memoryview self, object index, object value):
 *         if self.view.readonly:             # <<<<<<<<<<<<<<
 *             raise TypeError, "Cannot assign to read-only memoryview"
 * 
 */
  }

  /* "View.MemoryView":424
 *             raise TypeError, "Cannot assign to read-only memoryview"
 * 
 *         have_slices, index = _unellipsify(index, self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *         if have_slices:
 */
  __pyx_t_1 = _unellipsify(__pyx_v_index, __pyx_v_self->view.ndim); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 424, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(__pyx_t_1 != Py_None)) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 424, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    #else
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 424, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 424, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 424, __pyx_L1_error)
  }
  __pyx_v_have_slices = __pyx_t_2;
  __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_index, __pyx_t_3);
  __pyx_t_3 = 0;

  /* "View.MemoryView":426
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 * 
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             obj = self.is_slice(value)
 *             if obj:
 */
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_have_slices); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 426, __pyx_L1_error)
  if (__pyx_t_4) {

    /* "View.MemoryView":427
 * 
 *         if have_slices:
 *             obj = self.is_slice(value)             # <<<<<<<<<<<<<<
 *             if obj:
 *                 self.setitem_slice_assignment(self[index], obj)
 */
    __pyx_t_1 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->is_slice(__pyx_v_self, __pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 427, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_obj = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "View.MemoryView":428
 *         if have_slices:
 *             obj = self.is_slice(value)
 *             if obj:             # <<<<<<<<<<<<<<
 *                 self.setitem_slice_assignment(self[index], obj)
 *             else:
 */
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_obj); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 428, __pyx_L1_error)
    if (__pyx_t_4) {

      /* "View.MemoryView":429
 *             obj = self.is_slice(value)
 *             if obj:
 *                 self.setitem_slice_assignment(self[index], obj)             # <<<<<<<<<<<<<<
 *             else:
 *                 self.setitem_slice_assign_scalar(self[index], value)
 */
      __pyx_t_1 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_self), __pyx_v_index); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 429, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->setitem_slice_assignment(__pyx_v_self, __pyx_t_1, __pyx_v_obj); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 429, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "View.MemoryView":428
 *         if have_slices:
 *             obj = self.is_slice(value)
 *             if obj:             # <<<<<<<<<<<<<<
 *                 self.setitem_slice_assignment(self[index], obj)
 *             else:
 */
      goto __pyx_L5;
    }

    /* "View.MemoryView":431
 *                 self.setitem_slice_assignment(self[index], obj)
 *             else:
 *                 self.setitem_slice_assign_scalar(self[index], value)             # <<<<<<<<<<<<<<
 *         else:
 *             self.setitem_indexed(index, value)
 */
    /*else*/ {
      __pyx_t_3 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_self), __pyx_v_index); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 431, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_memoryview_type))))) __PYX_ERR(0, 431, __pyx_L1_error)
      __pyx_t_1 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->setitem_slice_assign_scalar(__pyx_v_self, ((struct __pyx_memoryview_obj *)__pyx_t_3), __pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 431, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_L5:;

    /* "View.MemoryView":426
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 * 
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             obj = self.is_slice(value)
 *             if obj:
 */
    goto __pyx_L4;
  }

  /* "View.MemoryView":433
 *                 self.setitem_slice_assign_scalar(self[index], value)
 *         else:
 *             self.setitem_indexed(index, value)             # <<<<<<<<<<<<<<
 * 
 *     cdef is_slice(self, obj):
 */
  /*else*/ {
    __pyx_t_1 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->setitem_indexed(__pyx_v_self, __pyx_v_index, __pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 433, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_L4:;

  /* "View.MemoryView":420
 *             return self.convert_item_to_object(itemp)
 * 
 *     def __setitem__(memoryview self, object index, object value):             # <<<<<<<<<<<<<<
 *         if self.view.readonly:
 *             raise TypeError, "Cannot assign to read-only memoryview"
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_have_slices);
  __Pyx_XDECREF(__pyx_v_obj);
  __Pyx_XDECREF(__pyx_v_index);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":435
 *             self.setitem_indexed(index, value)
 * 
 *     cdef is_slice(self, obj):             # <<<<<<<<<<<<<<
 *         if not isinstance(obj, memoryview):
 *             try:
 */

static PyObject *__pyx_memoryview_is_slice(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_slice", 0);
  __Pyx_INCREF(__pyx_v_obj);

  /* "View.MemoryView":436
 * 
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):             # <<<<<<<<<<<<<<
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_obj, __pyx_memoryview_type); 
  __pyx_t_2 = (!__pyx_t_1);
  if (__pyx_t_2) {

    /* "View.MemoryView":437
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):
 *             try:             # <<<<<<<<<<<<<<
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_5);
      /*try:*/ {

        /* "View.MemoryView":438
 *         if not isinstance(obj, memoryview):
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,             # <<<<<<<<<<<<<<
 *                                  self.dtype_is_object)
 *             except TypeError:
 */
        __pyx_t_6 = __Pyx_PyInt_From_int(((__pyx_v_self->flags & (~PyBUF_WRITABLE)) | PyBUF_ANY_CONTIGUOUS)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 438, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_6);

        /* "View.MemoryView":439
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)             # <<<<<<<<<<<<<<
 *             except TypeError:
 *                 return None
 */
        __pyx_t_7 = __Pyx_PyBool_FromLong(__pyx_v_self->dtype_is_object); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 439, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_7);

        /* "View.MemoryView":438
 *         if not isinstance(obj, memoryview):
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,             # <<<<<<<<<<<<<<
 *                                  self.dtype_is_object)
 *             except TypeError:
 */
        __pyx_t_8 = PyTuple_New(3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 438, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_INCREF(__pyx_v_obj);
        __Pyx_GIVEREF(__pyx_v_obj);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_obj)) __PYX_ERR(0, 438, __pyx_L4_error);
        __Pyx_GIVEREF(__pyx_t_6);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_6)) __PYX_ERR(0, 438, __pyx_L4_error);
        __Pyx_GIVEREF(__pyx_t_7);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_7)) __PYX_ERR(0, 438, __pyx_L4_error);
        __pyx_t_6 = 0;
        __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryview_type), __pyx_t_8, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 438, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF_SET(__pyx_v_obj, __pyx_t_7);
        __pyx_t_7 = 0;

        /* "View.MemoryView":437
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):
 *             try:             # <<<<<<<<<<<<<<
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 */
      }
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L9_try_end;
      __pyx_L4_error:;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "View.MemoryView":440
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 *             except TypeError:             # <<<<<<<<<<<<<<
 *                 return None
 * 
 */
      __pyx_t_9 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_TypeError);
      if (__pyx_t_9) {
        __Pyx_AddTraceback("View.MemoryView.memoryview.is_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_7, &__pyx_t_8, &__pyx_t_6) < 0) __PYX_ERR(0, 440, __pyx_L6_except_error)
        __Pyx_XGOTREF(__pyx_t_7);
        __Pyx_XGOTREF(__pyx_t_8);
        __Pyx_XGOTREF(__pyx_t_6);

        /* "View.MemoryView":441
 *                                  self.dtype_is_object)
 *             except TypeError:
 *                 return None             # <<<<<<<<<<<<<<
 * 
 *         return obj
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_r = Py_None; __Pyx_INCREF(Py_None);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L7_except_return;
      }
      goto __pyx_L6_except_error;

      /* "View.MemoryView":437
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):
 *             try:             # <<<<<<<<<<<<<<
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 */
      __pyx_L6_except_error:;
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L1_error;
      __pyx_L7_except_return:;
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L0;
      __pyx_L9_try_end:;
    }

    /* "View.MemoryView":436
 * 
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):             # <<<<<<<<<<<<<<
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 */
  }

  /* "View.MemoryView":443
 *                 return None
 * 
 *         return obj             # <<<<<<<<<<<<<<
 * 
 *     cdef setitem_slice_assignment(self, dst, src):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_obj);
  __pyx_r = __pyx_v_obj;
  goto __pyx_L0;

  /* "View.MemoryView":435
 *             self.setitem_indexed(index, value)
 * 
 *     cdef is_slice(self, obj):             # <<<<<<<<<<<<<<
 *         if not isinstance(obj, memoryview):
 *             try:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("View.MemoryView.memoryview.is_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_obj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":445
 *         return obj
 * 
 *     cdef setitem_slice_assignment(self, dst, src):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice dst_slice
 *         cdef __Pyx_memviewslice src_slice
 */

static PyObject *__pyx_memoryview_setitem_slice_assignment(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_dst, PyObject *__pyx_v_src) {
  __Pyx_memviewslice __pyx_v_dst_slice;
  __Pyx_memviewslice __pyx_v_src_slice;
  __Pyx_memviewslice __pyx_v_msrc;
  __Pyx_memviewslice __pyx_v_mdst;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setitem_slice_assignment", 1);

  /* "View.MemoryView":448
 *         cdef __Pyx_memviewslice dst_slice
 *         cdef __Pyx_memviewslice src_slice
 *         cdef __Pyx_memviewslice msrc = get_slice_from_memview(src, &src_slice)[0]             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice mdst = get_slice_from_memview(dst, &dst_slice)[0]
 * 
 */
  if (!(likely(((__pyx_v_src) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_src, __pyx_memoryview_type))))) __PYX_ERR(0, 448, __pyx_L1_error)
  __pyx_t_1 = __pyx_memoryview_get_slice_from_memoryview(((struct __pyx_memoryview_obj *)__pyx_v_src), (&__pyx_v_src_slice)); if (unlikely(__pyx_t_1 == ((__Pyx_memviewslice *)NULL))) __PYX_ERR(0, 448, __pyx_L1_error)
  __pyx_v_msrc = (__pyx_t_1[0]);

  /* "View.MemoryView":449
 *         cdef __Pyx_memviewslice src_slice
 *         cdef __Pyx_memviewslice msrc = get_slice_from_memview(src, &src_slice)[0]
 *         cdef __Pyx_memviewslice mdst = get_slice_from_memview(dst, &dst_slice)[0]             # <<<<<<<<<<<<<<
 * 
 *         memoryview_copy_contents(msrc, mdst, src.ndim, dst.ndim, self.dtype_is_object)
 */
  if (!(likely(((__pyx_v_dst) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_dst, __pyx_memoryview_type))))) __PYX_ERR(0, 449, __pyx_L1_error)
  __pyx_t_1 = __pyx_memoryview_get_slice_from_memoryview(((struct __pyx_memoryview_obj *)__pyx_v_dst), (&__pyx_v_dst_slice)); if (unlikely(__pyx_t_1 == ((__Pyx_memviewslice *)NULL))) __PYX_ERR(0, 449, __pyx_L1_error)
  __pyx_v_mdst = (__pyx_t_1[0]);

  /* "View.MemoryView":451
 *         cdef __Pyx_memviewslice mdst = get_slice_from_memview(dst, &dst_slice)[0]
 * 
 *         memoryview_copy_contents(msrc, mdst, src.ndim, dst.ndim, self.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_src, __pyx_n_s_ndim); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 451, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 451, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_dst, __pyx_n_s_ndim); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 451, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 451, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __pyx_memoryview_copy_contents(__pyx_v_msrc, __pyx_v_mdst, __pyx_t_3, __pyx_t_4, __pyx_v_self->dtype_is_object); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 451, __pyx_L1_error)

  /* "View.MemoryView":445
 *         return obj
 * 
 *     cdef setitem_slice_assignment(self, dst, src):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice dst_slice
 *         cdef __Pyx_memviewslice src_slice
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.setitem_slice_assignment", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":453
 *         memoryview_copy_contents(msrc, mdst, src.ndim, dst.ndim, self.dtype_is_object)
 * 
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):             # <<<<<<<<<<<<<<
 *         cdef int array[128]
 *         cdef void *tmp = NULL
 */

static PyObject *__pyx_memoryview_setitem_slice_assign_scalar(struct __pyx_memoryview_obj *__pyx_v_self, struct __pyx_memoryview_obj *__pyx_v_dst, PyObject *__pyx_v_value) {
  int __pyx_v_array[0x80];
  void *__pyx_v_tmp;
  void *__pyx_v_item;
  __Pyx_memviewslice *__pyx_v_dst_slice;
  __Pyx_memviewslice __pyx_v_tmp_slice;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice *__pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  char const *__pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setitem_slice_assign_scalar", 1);

  /* "View.MemoryView":455
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):
 *         cdef int array[128]
 *         cdef void *tmp = NULL             # <<<<<<<<<<<<<<
 *         cdef void *item
 * 
 */
  __pyx_v_tmp = NULL;

  /* "View.MemoryView":460
 *         cdef __Pyx_memviewslice *dst_slice
 *         cdef __Pyx_memviewslice tmp_slice
 *         dst_slice = get_slice_from_memview(dst, &tmp_slice)             # <<<<<<<<<<<<<<
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):
 */
  __pyx_t_1 = __pyx_memoryview_get_slice_from_memoryview(__pyx_v_dst, (&__pyx_v_tmp_slice)); if (unlikely(__pyx_t_1 == ((__Pyx_memviewslice *)NULL))) __PYX_ERR(0, 460, __pyx_L1_error)
  __pyx_v_dst_slice = __pyx_t_1;

  /* "View.MemoryView":462
 *         dst_slice = get_slice_from_memview(dst, &tmp_slice)
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):             # <<<<<<<<<<<<<<
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:
 */
  __pyx_t_2 = (((size_t)__pyx_v_self->view.itemsize) > (sizeof(__pyx_v_array)));
  if (__pyx_t_2) {

    /* "View.MemoryView":463
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):
 *             tmp = PyMem_Malloc(self.view.itemsize)             # <<<<<<<<<<<<<<
 *             if tmp == NULL:
 *                 raise MemoryError
 */
    __pyx_v_tmp = PyMem_Malloc(__pyx_v_self->view.itemsize);

    /* "View.MemoryView":464
 *         if <size_t>self.view.itemsize > sizeof(array):
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 *             item = tmp
 */
    __pyx_t_2 = (__pyx_v_tmp == NULL);
    if (unlikely(__pyx_t_2)) {

      /* "View.MemoryView":465
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:
 *                 raise MemoryError             # <<<<<<<<<<<<<<
 *             item = tmp
 *         else:
 */
      PyErr_NoMemory(); __PYX_ERR(0, 465, __pyx_L1_error)

      /* "View.MemoryView":464
 *         if <size_t>self.view.itemsize > sizeof(array):
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 *             item = tmp
 */
    }

    /* "View.MemoryView":466
 *             if tmp == NULL:
 *                 raise MemoryError
 *             item = tmp             # <<<<<<<<<<<<<<
 *         else:
 *             item = <void *> array
 */
    __pyx_v_item = __pyx_v_tmp;

    /* "View.MemoryView":462
 *         dst_slice = get_slice_from_memview(dst, &tmp_slice)
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):             # <<<<<<<<<<<<<<
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":468
 *             item = tmp
 *         else:
 *             item = <void *> array             # <<<<<<<<<<<<<<
 * 
 *         try:
 */
  /*else*/ {
    __pyx_v_item = ((void *)__pyx_v_array);
  }
  __pyx_L3:;

  /* "View.MemoryView":470
 *             item = <void *> array
 * 
 *         try:             # <<<<<<<<<<<<<<
 *             if self.dtype_is_object:
 *                 (<PyObject **> item)[0] = <PyObject *> value
 */
  /*try:*/ {

    /* "View.MemoryView":471
 * 
 *         try:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 (<PyObject **> item)[0] = <PyObject *> value
 *             else:
 */
    if (__pyx_v_self->dtype_is_object) {

      /* "View.MemoryView":472
 *         try:
 *             if self.dtype_is_object:
 *                 (<PyObject **> item)[0] = <PyObject *> value             # <<<<<<<<<<<<<<
 *             else:
 *                 self.assign_item_from_object(<char *> item, value)
 */
      (((PyObject **)__pyx_v_item)[0]) = ((PyObject *)__pyx_v_value);

      /* "View.MemoryView":471
 * 
 *         try:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 (<PyObject **> item)[0] = <PyObject *> value
 *             else:
 */
      goto __pyx_L8;
    }

    /* "View.MemoryView":474
 *                 (<PyObject **> item)[0] = <PyObject *> value
 *             else:
 *                 self.assign_item_from_object(<char *> item, value)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    /*else*/ {
      __pyx_t_3 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->assign_item_from_object(__pyx_v_self, ((char *)__pyx_v_item), __pyx_v_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 474, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_L8:;

    /* "View.MemoryView":478
 * 
 * 
 *             if self.view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,
 */
    __pyx_t_2 = (__pyx_v_self->view.suboffsets != NULL);
    if (__pyx_t_2) {

      /* "View.MemoryView":479
 * 
 *             if self.view.suboffsets != NULL:
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)             # <<<<<<<<<<<<<<
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,
 *                                 item, self.dtype_is_object)
 */
      __pyx_t_4 = assert_direct_dimensions(__pyx_v_self->view.suboffsets, __pyx_v_self->view.ndim); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 479, __pyx_L6_error)

      /* "View.MemoryView":478
 * 
 * 
 *             if self.view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,
 */
    }

    /* "View.MemoryView":480
 *             if self.view.suboffsets != NULL:
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,             # <<<<<<<<<<<<<<
 *                                 item, self.dtype_is_object)
 *         finally:
 */
    __pyx_memoryview_slice_assign_scalar(__pyx_v_dst_slice, __pyx_v_dst->view.ndim, __pyx_v_self->view.itemsize, __pyx_v_item, __pyx_v_self->dtype_is_object);
  }

  /* "View.MemoryView":483
 *                                 item, self.dtype_is_object)
 *         finally:
 *             PyMem_Free(tmp)             # <<<<<<<<<<<<<<
 * 
 *     cdef setitem_indexed(self, index, value):
 */
  /*finally:*/ {
    /*normal exit:*/{
      PyMem_Free(__pyx_v_tmp);
      goto __pyx_L7;
    }
    __pyx_L6_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9) < 0)) __Pyx_ErrFetch(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_12);
      __pyx_t_4 = __pyx_lineno; __pyx_t_5 = __pyx_clineno; __pyx_t_6 = __pyx_filename;
      {
        PyMem_Free(__pyx_v_tmp);
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
      }
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_ErrRestore(__pyx_t_7, __pyx_t_8, __pyx_t_9);
      __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0;
      __pyx_lineno = __pyx_t_4; __pyx_clineno = __pyx_t_5; __pyx_filename = __pyx_t_6;
      goto __pyx_L1_error;
    }
    __pyx_L7:;
  }

  /* "View.MemoryView":453
 *         memoryview_copy_contents(msrc, mdst, src.ndim, dst.ndim, self.dtype_is_object)
 * 
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):             # <<<<<<<<<<<<<<
 *         cdef int array[128]
 *         cdef void *tmp = NULL
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.setitem_slice_assign_scalar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":485
 *             PyMem_Free(tmp)
 * 
 *     cdef setitem_indexed(self, index, value):             # <<<<<<<<<<<<<<
 *         cdef char *itemp = self.get_item_pointer(index)
 *         self.assign_item_from_object(itemp, value)
 */

static PyObject *__pyx_memoryview_setitem_indexed(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  char *__pyx_v_itemp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setitem_indexed", 1);

  /* "View.MemoryView":486
 * 
 *     cdef setitem_indexed(self, index, value):
 *         cdef char *itemp = self.get_item_pointer(index)             # <<<<<<<<<<<<<<
 *         self.assign_item_from_object(itemp, value)
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->get_item_pointer(__pyx_v_self, __pyx_v_index); if (unlikely(__pyx_t_1 == ((char *)NULL))) __PYX_ERR(0, 486, __pyx_L1_error)
  __pyx_v_itemp = __pyx_t_1;

  /* "View.MemoryView":487
 *     cdef setitem_indexed(self, index, value):
 *         cdef char *itemp = self.get_item_pointer(index)
 *         self.assign_item_from_object(itemp, value)             # <<<<<<<<<<<<<<
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->assign_item_from_object(__pyx_v_self, __pyx_v_itemp, __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 487, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":485
 *             PyMem_Free(tmp)
 * 
 *     cdef setitem_indexed(self, index, value):             # <<<<<<<<<<<<<<
 *         cdef char *itemp = self.get_item_pointer(index)
 *         self.assign_item_from_object(itemp, value)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.setitem_indexed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":489
 *         self.assign_item_from_object(itemp, value)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

static PyObject *__pyx_memoryview_convert_item_to_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp) {
  PyObject *__pyx_v_struct = NULL;
  PyObject *__pyx_v_bytesitem = 0;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("convert_item_to_object", 1);

  /* "View.MemoryView":492
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 *         import struct             # <<<<<<<<<<<<<<
 *         cdef bytes bytesitem
 * 
 */
  __pyx_t_1 = __Pyx_ImportDottedModule(__pyx_n_s_struct, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 492, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_struct = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "View.MemoryView":495
 *         cdef bytes bytesitem
 * 
 *         bytesitem = itemp[:self.view.itemsize]             # <<<<<<<<<<<<<<
 *         try:
 *             result = struct.unpack(self.view.format, bytesitem)
 */
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_itemp + 0, __pyx_v_self->view.itemsize - 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 495, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_bytesitem = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":496
 * 
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:             # <<<<<<<<<<<<<<
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_2, &__pyx_t_3, &__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    /*try:*/ {

      /* "View.MemoryView":497
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:
 *             result = struct.unpack(self.view.format, bytesitem)             # <<<<<<<<<<<<<<
 *         except struct.error:
 *             raise ValueError, "Unable to convert item to object"
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_unpack); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 497, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyBytes_FromString(__pyx_v_self->view.format); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 497, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = NULL;
      __pyx_t_8 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_8 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[3] = {__pyx_t_7, __pyx_t_6, __pyx_v_bytesitem};
        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_8, 2+__pyx_t_8);
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 497, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __pyx_v_result = __pyx_t_1;
      __pyx_t_1 = 0;

      /* "View.MemoryView":496
 * 
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:             # <<<<<<<<<<<<<<
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 */
    }

    /* "View.MemoryView":501
 *             raise ValueError, "Unable to convert item to object"
 *         else:
 *             if len(self.view.format) == 1:             # <<<<<<<<<<<<<<
 *                 return result[0]
 *             return result
 */
    /*else:*/ {
      __pyx_t_9 = __Pyx_ssize_strlen(__pyx_v_self->view.format); if (unlikely(__pyx_t_9 == ((Py_ssize_t)-1))) __PYX_ERR(0, 501, __pyx_L5_except_error)
      __pyx_t_10 = (__pyx_t_9 == 1);
      if (__pyx_t_10) {

        /* "View.MemoryView":502
 *         else:
 *             if len(self.view.format) == 1:
 *                 return result[0]             # <<<<<<<<<<<<<<
 *             return result
 * 
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_result, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 502, __pyx_L5_except_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_r = __pyx_t_1;
        __pyx_t_1 = 0;
        goto __pyx_L6_except_return;

        /* "View.MemoryView":501
 *             raise ValueError, "Unable to convert item to object"
 *         else:
 *             if len(self.view.format) == 1:             # <<<<<<<<<<<<<<
 *                 return result[0]
 *             return result
 */
      }

      /* "View.MemoryView":503
 *             if len(self.view.format) == 1:
 *                 return result[0]
 *             return result             # <<<<<<<<<<<<<<
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_result);
      __pyx_r = __pyx_v_result;
      goto __pyx_L6_except_return;
    }
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "View.MemoryView":498
 *         try:
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:             # <<<<<<<<<<<<<<
 *             raise ValueError, "Unable to convert item to object"
 *         else:
 */
    __Pyx_ErrFetch(&__pyx_t_1, &__pyx_t_5, &__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_error); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 498, __pyx_L5_except_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyErr_GivenExceptionMatches(__pyx_t_1, __pyx_t_7);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_ErrRestore(__pyx_t_1, __pyx_t_5, __pyx_t_6);
    __pyx_t_1 = 0; __pyx_t_5 = 0; __pyx_t_6 = 0;
    if (__pyx_t_8) {
      __Pyx_AddTraceback("View.MemoryView.memoryview.convert_item_to_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_5, &__pyx_t_1) < 0) __PYX_ERR(0, 498, __pyx_L5_except_error)
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_1);

      /* "View.MemoryView":499
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 *             raise ValueError, "Unable to convert item to object"             # <<<<<<<<<<<<<<
 *         else:
 *             if len(self.view.format) == 1:
 */
      __Pyx_Raise(__pyx_builtin_ValueError, __pyx_kp_s_Unable_to_convert_item_to_object, 0, 0);
      __PYX_ERR(0, 499, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;

    /* "View.MemoryView":496
 * 
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:             # <<<<<<<<<<<<<<
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 */
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    goto __pyx_L1_error;
    __pyx_L6_except_return:;
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    goto __pyx_L0;
  }

  /* "View.MemoryView":489
 *         self.assign_item_from_object(itemp, value)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("View.MemoryView.memoryview.convert_item_to_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_struct);
  __Pyx_XDECREF(__pyx_v_bytesitem);
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":505
 *             return result
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

static PyObject *__pyx_memoryview_assign_item_from_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value) {
  PyObject *__pyx_v_struct = NULL;
  char __pyx_v_c;
  PyObject *__pyx_v_bytesvalue = 0;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  char *__pyx_t_9;
  char *__pyx_t_10;
  char *__pyx_t_11;
  char *__pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("assign_item_from_object", 1);

  /* "View.MemoryView":508
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 *         import struct             # <<<<<<<<<<<<<<
 *         cdef char c
 *         cdef bytes bytesvalue
 */
  __pyx_t_1 = __Pyx_ImportDottedModule(__pyx_n_s_struct, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 508, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_struct = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "View.MemoryView":513
 *         cdef Py_ssize_t i
 * 
 *         if isinstance(value, tuple):             # <<<<<<<<<<<<<<
 *             bytesvalue = struct.pack(self.view.format, *value)
 *         else:
 */
  __pyx_t_2 = PyTuple_Check(__pyx_v_value); 
  if (__pyx_t_2) {

    /* "View.MemoryView":514
 * 
 *         if isinstance(value, tuple):
 *             bytesvalue = struct.pack(self.view.format, *value)             # <<<<<<<<<<<<<<
 *         else:
 *             bytesvalue = struct.pack(self.view.format, value)
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_pack); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 514, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyBytes_FromString(__pyx_v_self->view.format); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 514, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 514, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_3);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3)) __PYX_ERR(0, 514, __pyx_L1_error);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PySequence_Tuple(__pyx_v_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 514, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = PyNumber_Add(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 514, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 514, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (!(likely(PyBytes_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None) || __Pyx_RaiseUnexpectedTypeError("bytes", __pyx_t_3))) __PYX_ERR(0, 514, __pyx_L1_error)
    __pyx_v_bytesvalue = ((PyObject*)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "View.MemoryView":513
 *         cdef Py_ssize_t i
 * 
 *         if isinstance(value, tuple):             # <<<<<<<<<<<<<<
 *             bytesvalue = struct.pack(self.view.format, *value)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":516
 *             bytesvalue = struct.pack(self.view.format, *value)
 *         else:
 *             bytesvalue = struct.pack(self.view.format, value)             # <<<<<<<<<<<<<<
 * 
 *         for i, c in enumerate(bytesvalue):
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_pack); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 516, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_self->view.format); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 516, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = NULL;
    __pyx_t_6 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_6 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_4, __pyx_t_1, __pyx_v_value};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_6, 2+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 516, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    if (!(likely(PyBytes_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None) || __Pyx_RaiseUnexpectedTypeError("bytes", __pyx_t_3))) __PYX_ERR(0, 516, __pyx_L1_error)
    __pyx_v_bytesvalue = ((PyObject*)__pyx_t_3);
    __pyx_t_3 = 0;
  }
  __pyx_L3:;

  /* "View.MemoryView":518
 *             bytesvalue = struct.pack(self.view.format, value)
 * 
 *         for i, c in enumerate(bytesvalue):             # <<<<<<<<<<<<<<
 *             itemp[i] = c
 * 
 */
  __pyx_t_7 = 0;
  if (unlikely(__pyx_v_bytesvalue == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' is not iterable");
    __PYX_ERR(0, 518, __pyx_L1_error)
  }
  __Pyx_INCREF(__pyx_v_bytesvalue);
  __pyx_t_8 = __pyx_v_bytesvalue;
  __pyx_t_10 = PyBytes_AS_STRING(__pyx_t_8);
  __pyx_t_11 = (__pyx_t_10 + PyBytes_GET_SIZE(__pyx_t_8));
  for (__pyx_t_12 = __pyx_t_10; __pyx_t_12 < __pyx_t_11; __pyx_t_12++) {
    __pyx_t_9 = __pyx_t_12;
    __pyx_v_c = (__pyx_t_9[0]);

    /* "View.MemoryView":519
 * 
 *         for i, c in enumerate(bytesvalue):
 *             itemp[i] = c             # <<<<<<<<<<<<<<
 * 
 *     @cname('getbuffer')
 */
    __pyx_v_i = __pyx_t_7;

    /* "View.MemoryView":518
 *             bytesvalue = struct.pack(self.view.format, value)
 * 
 *         for i, c in enumerate(bytesvalue):             # <<<<<<<<<<<<<<
 *             itemp[i] = c
 * 
 */
    __pyx_t_7 = (__pyx_t_7 + 1);

    /* "View.MemoryView":519
 * 
 *         for i, c in enumerate(bytesvalue):
 *             itemp[i] = c             # <<<<<<<<<<<<<<
 * 
 *     @cname('getbuffer')
 */
    (__pyx_v_itemp[__pyx_v_i]) = __pyx_v_c;
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "View.MemoryView":505
 *             return result
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("View.MemoryView.memoryview.assign_item_from_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_struct);
  __Pyx_XDECREF(__pyx_v_bytesvalue);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":521
 *             itemp[i] = c
 * 
 *     @cname('getbuffer')             # <<<<<<<<<<<<<<
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_WRITABLE and self.view.readonly:
 */

/* Python wrapper */
CYTHON_UNUSED static int __pyx_memoryview_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
CYTHON_UNUSED static int __pyx_memoryview_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__(struct __pyx_memoryview_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t *__pyx_t_3;
  char *__pyx_t_4;
  void *__pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  if (unlikely(__pyx_v_info == NULL)) {
    PyErr_SetString(PyExc_BufferError, "PyObject_GetBuffer: view==NULL argument is obsolete");
    return -1;
  }
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(__pyx_v_info->obj);

  /* "View.MemoryView":523
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_WRITABLE and self.view.readonly:             # <<<<<<<<<<<<<<
 *             raise ValueError, "Cannot create writable memory view from read-only memoryview"
 * 
 */
  __pyx_t_2 = ((__pyx_v_flags & PyBUF_WRITABLE) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_1 = __pyx_v_self->view.readonly;
  __pyx_L4_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":524
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_WRITABLE and self.view.readonly:
 *             raise ValueError, "Cannot create writable memory view from read-only memoryview"             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_ND:
 */
    __Pyx_Raise(__pyx_builtin_ValueError, __pyx_kp_s_Cannot_create_writable_memory_vi, 0, 0);
    __PYX_ERR(0, 524, __pyx_L1_error)

    /* "View.MemoryView":523
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_WRITABLE and self.view.readonly:             # <<<<<<<<<<<<<<
 *             raise ValueError, "Cannot create writable memory view from read-only memoryview"
 * 
 */
  }

  /* "View.MemoryView":526
 *             raise ValueError, "Cannot create writable memory view from read-only memoryview"
 * 
 *         if flags & PyBUF_ND:             # <<<<<<<<<<<<<<
 *             info.shape = self.view.shape
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_ND) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":527
 * 
 *         if flags & PyBUF_ND:
 *             info.shape = self.view.shape             # <<<<<<<<<<<<<<
 *         else:
 *             info.shape = NULL
 */
    __pyx_t_3 = __pyx_v_self->view.shape;
    __pyx_v_info->shape = __pyx_t_3;

    /* "View.MemoryView":526
 *             raise ValueError, "Cannot create writable memory view from read-only memoryview"
 * 
 *         if flags & PyBUF_ND:             # <<<<<<<<<<<<<<
 *             info.shape = self.view.shape
 *         else:
 */
    goto __pyx_L6;
  }

  /* "View.MemoryView":529
 *             info.shape = self.view.shape
 *         else:
 *             info.shape = NULL             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_STRIDES:
 */
  /*else*/ {
    __pyx_v_info->shape = NULL;
  }
  __pyx_L6:;

  /* "View.MemoryView":531
 *             info.shape = NULL
 * 
 *         if flags & PyBUF_STRIDES:             # <<<<<<<<<<<<<<
 *             info.strides = self.view.strides
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_STRIDES) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":532
 * 
 *         if flags & PyBUF_STRIDES:
 *             info.strides = self.view.strides             # <<<<<<<<<<<<<<
 *         else:
 *             info.strides = NULL
 */
    __pyx_t_3 = __pyx_v_self->view.strides;
    __pyx_v_info->strides = __pyx_t_3;

    /* "View.MemoryView":531
 *             info.shape = NULL
 * 
 *         if flags & PyBUF_STRIDES:             # <<<<<<<<<<<<<<
 *             info.strides = self.view.strides
 *         else:
 */
    goto __pyx_L7;
  }

  /* "View.MemoryView":534
 *             info.strides = self.view.strides
 *         else:
 *             info.strides = NULL             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_INDIRECT:
 */
  /*else*/ {
    __pyx_v_info->strides = NULL;
  }
  __pyx_L7:;

  /* "View.MemoryView":536
 *             info.strides = NULL
 * 
 *         if flags & PyBUF_INDIRECT:             # <<<<<<<<<<<<<<
 *             info.suboffsets = self.view.suboffsets
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_INDIRECT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":537
 * 
 *         if flags & PyBUF_INDIRECT:
 *             info.suboffsets = self.view.suboffsets             # <<<<<<<<<<<<<<
 *         else:
 *             info.suboffsets = NULL
 */
    __pyx_t_3 = __pyx_v_self->view.suboffsets;
    __pyx_v_info->suboffsets = __pyx_t_3;

    /* "View.MemoryView":536
 *             info.strides = NULL
 * 
 *         if flags & PyBUF_INDIRECT:             # <<<<<<<<<<<<<<
 *             info.suboffsets = self.view.suboffsets
 *         else:
 */
    goto __pyx_L8;
  }

  /* "View.MemoryView":539
 *             info.suboffsets = self.view.suboffsets
 *         else:
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_FORMAT:
 */
  /*else*/ {
    __pyx_v_info->suboffsets = NULL;
  }
  __pyx_L8:;

  /* "View.MemoryView":541
 *             info.suboffsets = NULL
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.view.format
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_FORMAT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":542
 * 
 *         if flags & PyBUF_FORMAT:
 *             info.format = self.view.format             # <<<<<<<<<<<<<<
 *         else:
 *             info.format = NULL
 */
    __pyx_t_4 = __pyx_v_self->view.format;
    __pyx_v_info->format = __pyx_t_4;

    /* "View.MemoryView":541
 *             info.suboffsets = NULL
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.view.format
 *         else:
 */
    goto __pyx_L9;
  }

  /* "View.MemoryView":544
 *             info.format = self.view.format
 *         else:
 *             info.format = NULL             # <<<<<<<<<<<<<<
 * 
 *         info.buf = self.view.buf
 */
  /*else*/ {
    __pyx_v_info->format = NULL;
  }
  __pyx_L9:;

  /* "View.MemoryView":546
 *             info.format = NULL
 * 
 *         info.buf = self.view.buf             # <<<<<<<<<<<<<<
 *         info.ndim = self.view.ndim
 *         info.itemsize = self.view.itemsize
 */
  __pyx_t_5 = __pyx_v_self->view.buf;
  __pyx_v_info->buf = __pyx_t_5;

  /* "View.MemoryView":547
 * 
 *         info.buf = self.view.buf
 *         info.ndim = self.view.ndim             # <<<<<<<<<<<<<<
 *         info.itemsize = self.view.itemsize
 *         info.len = self.view.len
 */
  __pyx_t_6 = __pyx_v_self->view.ndim;
  __pyx_v_info->ndim = __pyx_t_6;

  /* "View.MemoryView":548
 *         info.buf = self.view.buf
 *         info.ndim = self.view.ndim
 *         info.itemsize = self.view.itemsize             # <<<<<<<<<<<<<<
 *         info.len = self.view.len
 *         info.readonly = self.view.readonly
 */
  __pyx_t_7 = __pyx_v_self->view.itemsize;
  __pyx_v_info->itemsize = __pyx_t_7;

  /* "View.MemoryView":549
 *         info.ndim = self.view.ndim
 *         info.itemsize = self.view.itemsize
 *         info.len = self.view.len             # <<<<<<<<<<<<<<
 *         info.readonly = self.view.readonly
 *         info.obj = self
 */
  __pyx_t_7 = __pyx_v_self->view.len;
  __pyx_v_info->len = __pyx_t_7;

  /* "View.MemoryView":550
 *         info.itemsize = self.view.itemsize
 *         info.len = self.view.len
 *         info.readonly = self.view.readonly             # <<<<<<<<<<<<<<
 *         info.obj = self
 * 
 */
  __pyx_t_1 = __pyx_v_self->view.readonly;
  __pyx_v_info->readonly = __pyx_t_1;

  /* "View.MemoryView":551
 *         info.len = self.view.len
 *         info.readonly = self.view.readonly
 *         info.obj = self             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self);
  __Pyx_GOTREF(__pyx_v_info->obj);
  __Pyx_DECREF(__pyx_v_info->obj);
  __pyx_v_info->obj = ((PyObject *)__pyx_v_self);

  /* "View.MemoryView":521
 *             itemp[i] = c
 * 
 *     @cname('getbuffer')             # <<<<<<<<<<<<<<
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_WRITABLE and self.view.readonly:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("View.MemoryView.memoryview.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  __pyx_L2:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":554
 * 
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def T(self):
 *         cdef _memoryviewslice result = memoryview_copy(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_1T_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_1T_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  struct __pyx_memoryviewslice_obj *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "View.MemoryView":556
 *     @property
 *     def T(self):
 *         cdef _memoryviewslice result = memoryview_copy(self)             # <<<<<<<<<<<<<<
 *         transpose_memslice(&result.from_slice)
 *         return result
 */
  __pyx_t_1 = __pyx_memoryview_copy_object(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 556, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_memoryviewslice_type))))) __PYX_ERR(0, 556, __pyx_L1_error)
  __pyx_v_result = ((struct __pyx_memoryviewslice_obj *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":557
 *     def T(self):
 *         cdef _memoryviewslice result = memoryview_copy(self)
 *         transpose_memslice(&result.from_slice)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  __pyx_t_2 = __pyx_memslice_transpose((&__pyx_v_result->from_slice)); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 557, __pyx_L1_error)

  /* "View.MemoryView":558
 *         cdef _memoryviewslice result = memoryview_copy(self)
 *         transpose_memslice(&result.from_slice)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_result);
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "View.MemoryView":554
 * 
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def T(self):
 *         cdef _memoryviewslice result = memoryview_copy(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.T.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":560
 *         return result
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def base(self):
 *         return self._get_base()
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4base_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4base_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_4base___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4base___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "View.MemoryView":562
 *     @property
 *     def base(self):
 *         return self._get_base()             # <<<<<<<<<<<<<<
 * 
 *     cdef _get_base(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->_get_base(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 562, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":560
 *         return result
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def base(self):
 *         return self._get_base()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.base.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":564
 *         return self._get_base()
 * 
 *     cdef _get_base(self):             # <<<<<<<<<<<<<<
 *         return self.obj
 * 
 */

static PyObject *__pyx_memoryview__get_base(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_base", 1);

  /* "View.MemoryView":565
 * 
 *     cdef _get_base(self):
 *         return self.obj             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->obj);
  __pyx_r = __pyx_v_self->obj;
  goto __pyx_L0;

  /* "View.MemoryView":564
 *         return self._get_base()
 * 
 *     cdef _get_base(self):             # <<<<<<<<<<<<<<
 *         return self.obj
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":567
 *         return self.obj
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def shape(self):
 *         return tuple([length for length in self.view.shape[:self.view.ndim]])
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_5shape_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_5shape_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_7genexpr__pyx_v_length;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t *__pyx_t_2;
  Py_ssize_t *__pyx_t_3;
  Py_ssize_t *__pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "View.MemoryView":569
 *     @property
 *     def shape(self):
 *         return tuple([length for length in self.view.shape[:self.view.ndim]])             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  { /* enter inner scope */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 569, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = (__pyx_v_self->view.shape + __pyx_v_self->view.ndim);
    for (__pyx_t_4 = __pyx_v_self->view.shape; __pyx_t_4 < __pyx_t_3; __pyx_t_4++) {
      __pyx_t_2 = __pyx_t_4;
      __pyx_7genexpr__pyx_v_length = (__pyx_t_2[0]);
      __pyx_t_5 = PyInt_FromSsize_t(__pyx_7genexpr__pyx_v_length); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 569, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 569, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  } /* exit inner scope */
  __pyx_t_5 = PyList_AsTuple(((PyObject*)__pyx_t_1)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 569, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":567
 *         return self.obj
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def shape(self):
 *         return tuple([length for length in self.view.shape[:self.view.ndim]])
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview.shape.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":571
 *         return tuple([length for length in self.view.shape[:self.view.ndim]])
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def strides(self):
 *         if self.view.strides == NULL:
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_7strides_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_7strides_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_8genexpr1__pyx_v_stride;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t *__pyx_t_3;
  Py_ssize_t *__pyx_t_4;
  Py_ssize_t *__pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "View.MemoryView":573
 *     @property
 *     def strides(self):
 *         if self.view.strides == NULL:             # <<<<<<<<<<<<<<
 * 
 *             raise ValueError, "Buffer view does not expose strides"
 */
  __pyx_t_1 = (__pyx_v_self->view.strides == NULL);
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":575
 *         if self.view.strides == NULL:
 * 
 *             raise ValueError, "Buffer view does not expose strides"             # <<<<<<<<<<<<<<
 * 
 *         return tuple([stride for stride in self.view.strides[:self.view.ndim]])
 */
    __Pyx_Raise(__pyx_builtin_ValueError, __pyx_kp_s_Buffer_view_does_not_expose_stri, 0, 0);
    __PYX_ERR(0, 575, __pyx_L1_error)

    /* "View.MemoryView":573
 *     @property
 *     def strides(self):
 *         if self.view.strides == NULL:             # <<<<<<<<<<<<<<
 * 
 *             raise ValueError, "Buffer view does not expose strides"
 */
  }

  /* "View.MemoryView":577
 *             raise ValueError, "Buffer view does not expose strides"
 * 
 *         return tuple([stride for stride in self.view.strides[:self.view.ndim]])             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  { /* enter inner scope */
    __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 577, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = (__pyx_v_self->view.strides + __pyx_v_self->view.ndim);
    for (__pyx_t_5 = __pyx_v_self->view.strides; __pyx_t_5 < __pyx_t_4; __pyx_t_5++) {
      __pyx_t_3 = __pyx_t_5;
      __pyx_8genexpr1__pyx_v_stride = (__pyx_t_3[0]);
      __pyx_t_6 = PyInt_FromSsize_t(__pyx_8genexpr1__pyx_v_stride); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 577, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_6))) __PYX_ERR(0, 577, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
  } /* exit inner scope */
  __pyx_t_6 = PyList_AsTuple(((PyObject*)__pyx_t_2)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 577, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":571
 *         return tuple([length for length in self.view.shape[:self.view.ndim]])
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def strides(self):
 *         if self.view.strides == NULL:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("View.MemoryView.memoryview.strides.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":579
 *         return tuple([stride for stride in self.view.strides[:self.view.ndim]])
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_10suboffsets_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_10suboffsets_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_8genexpr2__pyx_v_suboffset;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t *__pyx_t_3;
  Py_ssize_t *__pyx_t_4;
  Py_ssize_t *__pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "View.MemoryView":581
 *     @property
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:             # <<<<<<<<<<<<<<
 *             return (-1,) * self.view.ndim
 * 
 */
  __pyx_t_1 = (__pyx_v_self->view.suboffsets == NULL);
  if (__pyx_t_1) {

    /* "View.MemoryView":582
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:
 *             return (-1,) * self.view.ndim             # <<<<<<<<<<<<<<
 * 
 *         return tuple([suboffset for suboffset in self.view.suboffsets[:self.view.ndim]])
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PySequence_Multiply(__pyx_tuple__4, __pyx_v_self->view.ndim); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 582, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":581
 *     @property
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:             # <<<<<<<<<<<<<<
 *             return (-1,) * self.view.ndim
 * 
 */
  }

  /* "View.MemoryView":584
 *             return (-1,) * self.view.ndim
 * 
 *         return tuple([suboffset for suboffset in self.view.suboffsets[:self.view.ndim]])             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  { /* enter inner scope */
    __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 584, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = (__pyx_v_self->view.suboffsets + __pyx_v_self->view.ndim);
    for (__pyx_t_5 = __pyx_v_self->view.suboffsets; __pyx_t_5 < __pyx_t_4; __pyx_t_5++) {
      __pyx_t_3 = __pyx_t_5;
      __pyx_8genexpr2__pyx_v_suboffset = (__pyx_t_3[0]);
      __pyx_t_6 = PyInt_FromSsize_t(__pyx_8genexpr2__pyx_v_suboffset); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 584, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_6))) __PYX_ERR(0, 584, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
  } /* exit inner scope */
  __pyx_t_6 = PyList_AsTuple(((PyObject*)__pyx_t_2)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 584, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":579
 *         return tuple([stride for stride in self.view.strides[:self.view.ndim]])
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("View.MemoryView.memoryview.suboffsets.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":586
 *         return tuple([suboffset for suboffset in self.view.suboffsets[:self.view.ndim]])
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def ndim(self):
 *         return self.view.ndim
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4ndim_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4ndim_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_4ndim___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4ndim___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "View.MemoryView":588
 *     @property
 *     def ndim(self):
 *         return self.view.ndim             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->view.ndim); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 588, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":586
 *         return tuple([suboffset for suboffset in self.view.suboffsets[:self.view.ndim]])
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def ndim(self):
 *         return self.view.ndim
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.ndim.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":590
 *         return self.view.ndim
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def itemsize(self):
 *         return self.view.itemsize
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_8itemsize_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_8itemsize_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_8itemsize___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_8itemsize___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "View.MemoryView":592
 *     @property
 *     def itemsize(self):
 *         return self.view.itemsize             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_self->view.itemsize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 592, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":590
 *         return self.view.ndim
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def itemsize(self):
 *         return self.view.itemsize
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.itemsize.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":594
 *         return self.view.itemsize
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def nbytes(self):
 *         return self.size * self.view.itemsize
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_6nbytes_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_6nbytes_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "View.MemoryView":596
 *     @property
 *     def nbytes(self):
 *         return self.size * self.view.itemsize             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 596, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_self->view.itemsize); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 596, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 596, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":594
 *         return self.view.itemsize
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def nbytes(self):
 *         return self.size * self.view.itemsize
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.nbytes.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":598
 *         return self.size * self.view.itemsize
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def size(self):
 *         if self._size is None:
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4size_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_v_length = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t *__pyx_t_2;
  Py_ssize_t *__pyx_t_3;
  Py_ssize_t *__pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "View.MemoryView":600
 *     @property
 *     def size(self):
 *         if self._size is None:             # <<<<<<<<<<<<<<
 *             result = 1
 * 
 */
  __pyx_t_1 = (__pyx_v_self->_size == Py_None);
  if (__pyx_t_1) {

    /* "View.MemoryView":601
 *     def size(self):
 *         if self._size is None:
 *             result = 1             # <<<<<<<<<<<<<<
 * 
 *             for length in self.view.shape[:self.view.ndim]:
 */
    __Pyx_INCREF(__pyx_int_1);
    __pyx_v_result = __pyx_int_1;

    /* "View.MemoryView":603
 *             result = 1
 * 
 *             for length in self.view.shape[:self.view.ndim]:             # <<<<<<<<<<<<<<
 *                 result *= length
 * 
 */
    __pyx_t_3 = (__pyx_v_self->view.shape + __pyx_v_self->view.ndim);
    for (__pyx_t_4 = __pyx_v_self->view.shape; __pyx_t_4 < __pyx_t_3; __pyx_t_4++) {
      __pyx_t_2 = __pyx_t_4;
      __pyx_t_5 = PyInt_FromSsize_t((__pyx_t_2[0])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 603, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_XDECREF_SET(__pyx_v_length, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "View.MemoryView":604
 * 
 *             for length in self.view.shape[:self.view.ndim]:
 *                 result *= length             # <<<<<<<<<<<<<<
 * 
 *             self._size = result
 */
      __pyx_t_5 = PyNumber_InPlaceMultiply(__pyx_v_result, __pyx_v_length); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 604, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_5);
      __pyx_t_5 = 0;
    }

    /* "View.MemoryView":606
 *                 result *= length
 * 
 *             self._size = result             # <<<<<<<<<<<<<<
 * 
 *         return self._size
 */
    __Pyx_INCREF(__pyx_v_result);
    __Pyx_GIVEREF(__pyx_v_result);
    __Pyx_GOTREF(__pyx_v_self->_size);
    __Pyx_DECREF(__pyx_v_self->_size);
    __pyx_v_self->_size = __pyx_v_result;

    /* "View.MemoryView":600
 *     @property
 *     def size(self):
 *         if self._size is None:             # <<<<<<<<<<<<<<
 *             result = 1
 * 
 */
  }

  /* "View.MemoryView":608
 *             self._size = result
 * 
 *         return self._size             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_size);
  __pyx_r = __pyx_v_self->_size;
  goto __pyx_L0;

  /* "View.MemoryView":598
 *         return self.size * self.view.itemsize
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def size(self):
 *         if self._size is None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview.size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_length);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":610
 *         return self._size
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         if self.view.ndim >= 1:
 *             return self.view.shape[0]
 */

/* Python wrapper */
static Py_ssize_t __pyx_memoryview___len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_memoryview___len__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_10__len__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_10__len__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  int __pyx_t_1;

  /* "View.MemoryView":611
 * 
 *     def __len__(self):
 *         if self.view.ndim >= 1:             # <<<<<<<<<<<<<<
 *             return self.view.shape[0]
 * 
 */
  __pyx_t_1 = (__pyx_v_self->view.ndim >= 1);
  if (__pyx_t_1) {

    /* "View.MemoryView":612
 *     def __len__(self):
 *         if self.view.ndim >= 1:
 *             return self.view.shape[0]             # <<<<<<<<<<<<<<
 * 
 *         return 0
 */
    __pyx_r = (__pyx_v_self->view.shape[0]);
    goto __pyx_L0;

    /* "View.MemoryView":611
 * 
 *     def __len__(self):
 *         if self.view.ndim >= 1:             # <<<<<<<<<<<<<<
 *             return self.view.shape[0]
 * 
 */
  }

  /* "View.MemoryView":614
 *             return self.view.shape[0]
 * 
 *         return 0             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "View.MemoryView":610
 *         return self._size
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         if self.view.ndim >= 1:
 *             return self.view.shape[0]
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":616
 *         return 0
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,
 *                                                id(self))
 */

/* Python wrapper */
static PyObject *__pyx_memoryview___repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview___repr__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_12__repr__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_12__repr__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 1);

  /* "View.MemoryView":617
 * 
 *     def __repr__(self):
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,             # <<<<<<<<<<<<<<
 *                                                id(self))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_base); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 617, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_class); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 617, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_name_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 617, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":618
 *     def __repr__(self):
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,
 *                                                id(self))             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self):
 */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_id, ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 618, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "View.MemoryView":617
 * 
 *     def __repr__(self):
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,             # <<<<<<<<<<<<<<
 *                                                id(self))
 * 
 */
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 617, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1)) __PYX_ERR(0, 617, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_2);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2)) __PYX_ERR(0, 617, __pyx_L1_error);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_MemoryView_of_r_at_0x_x, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 617, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":616
 *         return 0
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,
 *                                                id(self))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":620
 *                                                id(self))
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r object>" % (self.base.__class__.__name__,)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_memoryview___str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview___str__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_14__str__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_14__str__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__str__", 1);

  /* "View.MemoryView":621
 * 
 *     def __str__(self):
 *         return "<MemoryView of %r object>" % (self.base.__class__.__name__,)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_base); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 621, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_class); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 621, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_name_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 621, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 621, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1)) __PYX_ERR(0, 621, __pyx_L1_error);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_MemoryView_of_r_object, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 621, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":620
 *                                                id(self))
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r object>" % (self.base.__class__.__name__,)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":624
 * 
 * 
 *     def is_c_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_is_c_contig(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_memoryview_is_c_contig(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_c_contig (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("is_c_contig", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "is_c_contig", 0))) return NULL;
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_16is_c_contig(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_16is_c_contig(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice *__pyx_v_mslice;
  __Pyx_memviewslice __pyx_v_tmp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_c_contig", 1);

  /* "View.MemoryView":627
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)             # <<<<<<<<<<<<<<
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)
 * 
 */
  __pyx_t_1 = __pyx_memoryview_get_slice_from_memoryview(__pyx_v_self, (&__pyx_v_tmp)); if (unlikely(__pyx_t_1 == ((__Pyx_memviewslice *)NULL))) __PYX_ERR(0, 627, __pyx_L1_error)
  __pyx_v_mslice = __pyx_t_1;

  /* "View.MemoryView":628
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *     def is_f_contig(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_memviewslice_is_contig((__pyx_v_mslice[0]), 'C', __pyx_v_self->view.ndim)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 628, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":624
 * 
 * 
 *     def is_c_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.is_c_contig", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":630
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)
 * 
 *     def is_f_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_is_f_contig(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_memoryview_is_f_contig(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_f_contig (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("is_f_contig", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "is_f_contig", 0))) return NULL;
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_18is_f_contig(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_18is_f_contig(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice *__pyx_v_mslice;
  __Pyx_memviewslice __pyx_v_tmp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_f_contig", 1);

  /* "View.MemoryView":633
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)             # <<<<<<<<<<<<<<
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)
 * 
 */
  __pyx_t_1 = __pyx_memoryview_get_slice_from_memoryview(__pyx_v_self, (&__pyx_v_tmp)); if (unlikely(__pyx_t_1 == ((__Pyx_memviewslice *)NULL))) __PYX_ERR(0, 633, __pyx_L1_error)
  __pyx_v_mslice = __pyx_t_1;

  /* "View.MemoryView":634
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *     def copy(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_memviewslice_is_contig((__pyx_v_mslice[0]), 'F', __pyx_v_self->view.ndim)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 634, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":630
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)
 * 
 *     def is_f_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.is_f_contig", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":636
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice mslice
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_copy(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_memoryview_copy(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("copy", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "copy", 0))) return NULL;
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_20copy(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_20copy(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_mslice;
  int __pyx_v_flags;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("copy", 1);

  /* "View.MemoryView":638
 *     def copy(self):
 *         cdef __Pyx_memviewslice mslice
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS             # <<<<<<<<<<<<<<
 * 
 *         slice_copy(self, &mslice)
 */
  __pyx_v_flags = (__pyx_v_self->flags & (~PyBUF_F_CONTIGUOUS));

  /* "View.MemoryView":640
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS
 * 
 *         slice_copy(self, &mslice)             # <<<<<<<<<<<<<<
 *         mslice = slice_copy_contig(&mslice, "c", self.view.ndim,
 *                                    self.view.itemsize,
 */
  __pyx_memoryview_slice_copy(__pyx_v_self, (&__pyx_v_mslice));

  /* "View.MemoryView":641
 * 
 *         slice_copy(self, &mslice)
 *         mslice = slice_copy_contig(&mslice, "c", self.view.ndim,             # <<<<<<<<<<<<<<
 *                                    self.view.itemsize,
 *                                    flags|PyBUF_C_CONTIGUOUS,
 */
  __pyx_t_1 = __pyx_memoryview_copy_new_contig((&__pyx_v_mslice), ((char *)"c"), __pyx_v_self->view.ndim, __pyx_v_self->view.itemsize, (__pyx_v_flags | PyBUF_C_CONTIGUOUS), __pyx_v_self->dtype_is_object); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 641, __pyx_L1_error)
  __pyx_v_mslice = __pyx_t_1;

  /* "View.MemoryView":646
 *                                    self.dtype_is_object)
 * 
 *         return memoryview_copy_from_slice(self, &mslice)             # <<<<<<<<<<<<<<
 * 
 *     def copy_fortran(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_memoryview_copy_object_from_slice(__pyx_v_self, (&__pyx_v_mslice)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 646, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":636
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice mslice
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":648
 *         return memoryview_copy_from_slice(self, &mslice)
 * 
 *     def copy_fortran(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice src, dst
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_copy_fortran(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_memoryview_copy_fortran(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy_fortran (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("copy_fortran", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "copy_fortran", 0))) return NULL;
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_22copy_fortran(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_22copy_fortran(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_src;
  __Pyx_memviewslice __pyx_v_dst;
  int __pyx_v_flags;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("copy_fortran", 1);

  /* "View.MemoryView":650
 *     def copy_fortran(self):
 *         cdef __Pyx_memviewslice src, dst
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS             # <<<<<<<<<<<<<<
 * 
 *         slice_copy(self, &src)
 */
  __pyx_v_flags = (__pyx_v_self->flags & (~PyBUF_C_CONTIGUOUS));

  /* "View.MemoryView":652
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS
 * 
 *         slice_copy(self, &src)             # <<<<<<<<<<<<<<
 *         dst = slice_copy_contig(&src, "fortran", self.view.ndim,
 *                                 self.view.itemsize,
 */
  __pyx_memoryview_slice_copy(__pyx_v_self, (&__pyx_v_src));

  /* "View.MemoryView":653
 * 
 *         slice_copy(self, &src)
 *         dst = slice_copy_contig(&src, "fortran", self.view.ndim,             # <<<<<<<<<<<<<<
 *                                 self.view.itemsize,
 *                                 flags|PyBUF_F_CONTIGUOUS,
 */
  __pyx_t_1 = __pyx_memoryview_copy_new_contig((&__pyx_v_src), ((char *)"fortran"), __pyx_v_self->view.ndim, __pyx_v_self->view.itemsize, (__pyx_v_flags | PyBUF_F_CONTIGUOUS), __pyx_v_self->dtype_is_object); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 653, __pyx_L1_error)
  __pyx_v_dst = __pyx_t_1;

  /* "View.MemoryView":658
 *                                 self.dtype_is_object)
 * 
 *         return memoryview_copy_from_slice(self, &dst)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_memoryview_copy_object_from_slice(__pyx_v_self, (&__pyx_v_dst)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":648
 *         return memoryview_copy_from_slice(self, &mslice)
 * 
 *     def copy_fortran(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice src, dst
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.copy_fortran", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_memoryview_1__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_pw___pyx_memoryview_1__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf___pyx_memoryview___reduce_cython__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_memoryview___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("View.MemoryView.memoryview.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_memoryview_3__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_pw___pyx_memoryview_3__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(0, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("View.MemoryView.memoryview.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf___pyx_memoryview_2__setstate_cython__(((struct __pyx_memoryview_obj *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_memoryview_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("View.MemoryView.memoryview.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":662
 * 
 * @cname('__pyx_memoryview_new')
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):             # <<<<<<<<<<<<<<
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo
 */

static PyObject *__pyx_memoryview_new(PyObject *__pyx_v_o, int __pyx_v_flags, int __pyx_v_dtype_is_object, __Pyx_TypeInfo *__pyx_v_typeinfo) {
  struct __pyx_memoryview_obj *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memoryview_cwrapper", 1);

  /* "View.MemoryView":663
 * @cname('__pyx_memoryview_new')
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)             # <<<<<<<<<<<<<<
 *     result.typeinfo = typeinfo
 *     return result
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 663, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_dtype_is_object); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 663, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 663, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_o);
  __Pyx_GIVEREF(__pyx_v_o);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_o)) __PYX_ERR(0, 663, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1)) __PYX_ERR(0, 663, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_2);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2)) __PYX_ERR(0, 663, __pyx_L1_error);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryview_type), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 663, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_result = ((struct __pyx_memoryview_obj *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":664
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
  __pyx_v_result->typeinfo = __pyx_v_typeinfo;

  /* "View.MemoryView":665
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo
 *     return result             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_check')
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_result);
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "View.MemoryView":662
 * 
 * @cname('__pyx_memoryview_new')
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):             # <<<<<<<<<<<<<<
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview_cwrapper", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":668
 * 
 * @cname('__pyx_memoryview_check')
 * cdef inline bint memoryview_check(object o) noexcept:             # <<<<<<<<<<<<<<
 *     return isinstance(o, memoryview)
 * 
 */

static CYTHON_INLINE int __pyx_memoryview_check(PyObject *__pyx_v_o) {
  int __pyx_r;
  int __pyx_t_1;

  /* "View.MemoryView":669
 * @cname('__pyx_memoryview_check')
 * cdef inline bint memoryview_check(object o) noexcept:
 *     return isinstance(o, memoryview)             # <<<<<<<<<<<<<<
 * 
 * cdef tuple _unellipsify(object index, int ndim):
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_o, __pyx_memoryview_type); 
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "View.MemoryView":668
 * 
 * @cname('__pyx_memoryview_check')
 * cdef inline bint memoryview_check(object o) noexcept:             # <<<<<<<<<<<<<<
 *     return isinstance(o, memoryview)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":671
 *     return isinstance(o, memoryview)
 * 
 * cdef tuple _unellipsify(object index, int ndim):             # <<<<<<<<<<<<<<
 *     """
 *     Replace all ellipses with full slices and fill incomplete indices with
 */

static PyObject *_unellipsify(PyObject *__pyx_v_index, int __pyx_v_ndim) {
  Py_ssize_t __pyx_v_idx;
  PyObject *__pyx_v_tup = NULL;
  PyObject *__pyx_v_result = NULL;
  int __pyx_v_have_slices;
  int __pyx_v_seen_ellipsis;
  PyObject *__pyx_v_item = NULL;
  Py_ssize_t __pyx_v_nslices;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_UCS4 __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_unellipsify", 1);

  /* "View.MemoryView":677
 *     """
 *     cdef Py_ssize_t idx
 *     tup = <tuple>index if isinstance(index, tuple) else (index,)             # <<<<<<<<<<<<<<
 * 
 *     result = [slice(None)] * ndim
 */
  __pyx_t_2 = PyTuple_Check(__pyx_v_index); 
  if (__pyx_t_2) {
    __Pyx_INCREF(((PyObject*)__pyx_v_index));
    __pyx_t_1 = __pyx_v_index;
  } else {
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 677, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_index);
    __Pyx_GIVEREF(__pyx_v_index);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_index)) __PYX_ERR(0, 677, __pyx_L1_error);
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  }
  __pyx_v_tup = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":679
 *     tup = <tuple>index if isinstance(index, tuple) else (index,)
 * 
 *     result = [slice(None)] * ndim             # <<<<<<<<<<<<<<
 *     have_slices = False
 *     seen_ellipsis = False
 */
  __pyx_t_1 = PyList_New(1 * ((__pyx_v_ndim<0) ? 0:__pyx_v_ndim)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 679, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  { Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < __pyx_v_ndim; __pyx_temp++) {
      __Pyx_INCREF(__pyx_slice__5);
      __Pyx_GIVEREF(__pyx_slice__5);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_1, __pyx_temp, __pyx_slice__5)) __PYX_ERR(0, 679, __pyx_L1_error);
    }
  }
  __pyx_v_result = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":680
 * 
 *     result = [slice(None)] * ndim
 *     have_slices = False             # <<<<<<<<<<<<<<
 *     seen_ellipsis = False
 *     idx = 0
 */
  __pyx_v_have_slices = 0;

  /* "View.MemoryView":681
 *     result = [slice(None)] * ndim
 *     have_slices = False
 *     seen_ellipsis = False             # <<<<<<<<<<<<<<
 *     idx = 0
 *     for item in tup:
 */
  __pyx_v_seen_ellipsis = 0;

  /* "View.MemoryView":682
 *     have_slices = False
 *     seen_ellipsis = False
 *     idx = 0             # <<<<<<<<<<<<<<
 *     for item in tup:
 *         if item is Ellipsis:
 */
  __pyx_v_idx = 0;

  /* "View.MemoryView":683
 *     seen_ellipsis = False
 *     idx = 0
 *     for item in tup:             # <<<<<<<<<<<<<<
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 */
  if (unlikely(__pyx_v_tup == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 683, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_tup; __Pyx_INCREF(__pyx_t_1);
  __pyx_t_4 = 0;
  for (;;) {
    {
      Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_1);
      #if !CYTHON_ASSUME_SAFE_MACROS
      if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 683, __pyx_L1_error)
      #endif
      if (__pyx_t_4 >= __pyx_temp) break;
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely((0 < 0))) __PYX_ERR(0, 683, __pyx_L1_error)
    #else
    __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 683, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "View.MemoryView":684
 *     idx = 0
 *     for item in tup:
 *         if item is Ellipsis:             # <<<<<<<<<<<<<<
 *             if not seen_ellipsis:
 *                 idx += ndim - len(tup)
 */
    __pyx_t_2 = (__pyx_v_item == __pyx_builtin_Ellipsis);
    if (__pyx_t_2) {

      /* "View.MemoryView":685
 *     for item in tup:
 *         if item is Ellipsis:
 *             if not seen_ellipsis:             # <<<<<<<<<<<<<<
 *                 idx += ndim - len(tup)
 *                 seen_ellipsis = True
 */
      __pyx_t_2 = (!__pyx_v_seen_ellipsis);
      if (__pyx_t_2) {

        /* "View.MemoryView":686
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 *                 idx += ndim - len(tup)             # <<<<<<<<<<<<<<
 *                 seen_ellipsis = True
 *             have_slices = True
 */
        if (unlikely(__pyx_v_tup == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
          __PYX_ERR(0, 686, __pyx_L1_error)
        }
        __pyx_t_5 = __Pyx_PyTuple_GET_SIZE(__pyx_v_tup); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 686, __pyx_L1_error)
        __pyx_v_idx = (__pyx_v_idx + (__pyx_v_ndim - __pyx_t_5));

        /* "View.MemoryView":687
 *             if not seen_ellipsis:
 *                 idx += ndim - len(tup)
 *                 seen_ellipsis = True             # <<<<<<<<<<<<<<
 *             have_slices = True
 *         else:
 */
        __pyx_v_seen_ellipsis = 1;

        /* "View.MemoryView":685
 *     for item in tup:
 *         if item is Ellipsis:
 *             if not seen_ellipsis:             # <<<<<<<<<<<<<<
 *                 idx += ndim - len(tup)
 *                 seen_ellipsis = True
 */
      }

      /* "View.MemoryView":688
 *                 idx += ndim - len(tup)
 *                 seen_ellipsis = True
 *             have_slices = True             # <<<<<<<<<<<<<<
 *         else:
 *             if isinstance(item, slice):
 */
      __pyx_v_have_slices = 1;

      /* "View.MemoryView":684
 *     idx = 0
 *     for item in tup:
 *         if item is Ellipsis:             # <<<<<<<<<<<<<<
 *             if not seen_ellipsis:
 *                 idx += ndim - len(tup)
 */
      goto __pyx_L5;
    }

    /* "View.MemoryView":690
 *             have_slices = True
 *         else:
 *             if isinstance(item, slice):             # <<<<<<<<<<<<<<
 *                 have_slices = True
 *             elif not PyIndex_Check(item):
 */
    /*else*/ {
      __pyx_t_2 = PySlice_Check(__pyx_v_item); 
      if (__pyx_t_2) {

        /* "View.MemoryView":691
 *         else:
 *             if isinstance(item, slice):
 *                 have_slices = True             # <<<<<<<<<<<<<<
 *             elif not PyIndex_Check(item):
 *                 raise TypeError, f"Cannot index with type '{type(item)}'"
 */
        __pyx_v_have_slices = 1;

        /* "View.MemoryView":690
 *             have_slices = True
 *         else:
 *             if isinstance(item, slice):             # <<<<<<<<<<<<<<
 *                 have_slices = True
 *             elif not PyIndex_Check(item):
 */
        goto __pyx_L7;
      }

      /* "View.MemoryView":692
 *             if isinstance(item, slice):
 *                 have_slices = True
 *             elif not PyIndex_Check(item):             # <<<<<<<<<<<<<<
 *                 raise TypeError, f"Cannot index with type '{type(item)}'"
 *             result[idx] = item
 */
      __pyx_t_2 = (!(PyIndex_Check(__pyx_v_item) != 0));
      if (unlikely(__pyx_t_2)) {

        /* "View.MemoryView":693
 *                 have_slices = True
 *             elif not PyIndex_Check(item):
 *                 raise TypeError, f"Cannot index with type '{type(item)}'"             # <<<<<<<<<<<<<<
 *             result[idx] = item
 *         idx += 1
 */
        __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 693, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_5 = 0;
        __pyx_t_6 = 127;
        __Pyx_INCREF(__pyx_kp_u_Cannot_index_with_type);
        __pyx_t_5 += 24;
        __Pyx_GIVEREF(__pyx_kp_u_Cannot_index_with_type);
        PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_Cannot_index_with_type);
        __pyx_t_7 = __Pyx_PyObject_FormatSimple(((PyObject *)Py_TYPE(__pyx_v_item)), __pyx_empty_unicode); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 693, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_6 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_6) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_6;
        __pyx_t_5 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_7);
        __pyx_t_7 = 0;
        __Pyx_INCREF(__pyx_kp_u__6);
        __pyx_t_5 += 1;
        __Pyx_GIVEREF(__pyx_kp_u__6);
        PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u__6);
        __pyx_t_7 = __Pyx_PyUnicode_Join(__pyx_t_3, 3, __pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 693, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_Raise(__pyx_builtin_TypeError, __pyx_t_7, 0, 0);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __PYX_ERR(0, 693, __pyx_L1_error)

        /* "View.MemoryView":692
 *             if isinstance(item, slice):
 *                 have_slices = True
 *             elif not PyIndex_Check(item):             # <<<<<<<<<<<<<<
 *                 raise TypeError, f"Cannot index with type '{type(item)}'"
 *             result[idx] = item
 */
      }
      __pyx_L7:;

      /* "View.MemoryView":694
 *             elif not PyIndex_Check(item):
 *                 raise TypeError, f"Cannot index with type '{type(item)}'"
 *             result[idx] = item             # <<<<<<<<<<<<<<
 *         idx += 1
 * 
 */
      if (unlikely((__Pyx_SetItemInt(__pyx_v_result, __pyx_v_idx, __pyx_v_item, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1) < 0))) __PYX_ERR(0, 694, __pyx_L1_error)
    }
    __pyx_L5:;

    /* "View.MemoryView":695
 *                 raise TypeError, f"Cannot index with type '{type(item)}'"
 *             result[idx] = item
 *         idx += 1             # <<<<<<<<<<<<<<
 * 
 *     nslices = ndim - idx
 */
    __pyx_v_idx = (__pyx_v_idx + 1);

    /* "View.MemoryView":683
 *     seen_ellipsis = False
 *     idx = 0
 *     for item in tup:             # <<<<<<<<<<<<<<
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "View.MemoryView":697
 *         idx += 1
 * 
 *     nslices = ndim - idx             # <<<<<<<<<<<<<<
 *     return have_slices or nslices, tuple(result)
 * 
 */
  __pyx_v_nslices = (__pyx_v_ndim - __pyx_v_idx);

  /* "View.MemoryView":698
 * 
 *     nslices = ndim - idx
 *     return have_slices or nslices, tuple(result)             # <<<<<<<<<<<<<<
 * 
 * cdef int assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim) except -1:
 */
  __Pyx_XDECREF(__pyx_r);
  if (!__pyx_v_have_slices) {
  } else {
    __pyx_t_7 = __Pyx_PyBool_FromLong(__pyx_v_have_slices); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 698, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_1 = __pyx_t_7;
    __pyx_t_7 = 0;
    goto __pyx_L9_bool_binop_done;
  }
  __pyx_t_7 = PyInt_FromSsize_t(__pyx_v_nslices); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 698, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_1 = __pyx_t_7;
  __pyx_t_7 = 0;
  __pyx_L9_bool_binop_done:;
  __pyx_t_7 = PyList_AsTuple(__pyx_v_result); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 698, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 698, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1)) __PYX_ERR(0, 698, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_7);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_7)) __PYX_ERR(0, 698, __pyx_L1_error);
  __pyx_t_1 = 0;
  __pyx_t_7 = 0;
  __pyx_r = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":671
 *     return isinstance(o, memoryview)
 * 
 * cdef tuple _unellipsify(object index, int ndim):             # <<<<<<<<<<<<<<
 *     """
 *     Replace all ellipses with full slices and fill incomplete indices with
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("View.MemoryView._unellipsify", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_tup);
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":700
 *     return have_slices or nslices, tuple(result)
 * 
 * cdef int assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim) except -1:             # <<<<<<<<<<<<<<
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 */

static int assert_direct_dimensions(Py_ssize_t *__pyx_v_suboffsets, int __pyx_v_ndim) {
  Py_ssize_t __pyx_v_suboffset;
  int __pyx_r;
  Py_ssize_t *__pyx_t_1;
  Py_ssize_t *__pyx_t_2;
  Py_ssize_t *__pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "View.MemoryView":701
 * 
 * cdef int assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim) except -1:
 *     for suboffset in suboffsets[:ndim]:             # <<<<<<<<<<<<<<
 *         if suboffset >= 0:
 *             raise ValueError, "Indirect dimensions not supported"
 */
  __pyx_t_2 = (__pyx_v_suboffsets + __pyx_v_ndim);
  for (__pyx_t_3 = __pyx_v_suboffsets; __pyx_t_3 < __pyx_t_2; __pyx_t_3++) {
    __pyx_t_1 = __pyx_t_3;
    __pyx_v_suboffset = (__pyx_t_1[0]);

    /* "View.MemoryView":702
 * cdef int assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim) except -1:
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError, "Indirect dimensions not supported"
 *     return 0  # return type just used as an error flag
 */
    __pyx_t_4 = (__pyx_v_suboffset >= 0);
    if (unlikely(__pyx_t_4)) {

      /* "View.MemoryView":703
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 *             raise ValueError, "Indirect dimensions not supported"             # <<<<<<<<<<<<<<
 *     return 0  # return type just used as an error flag
 * 
 */
      __Pyx_Raise(__pyx_builtin_ValueError, __pyx_kp_s_Indirect_dimensions_not_supporte, 0, 0);
      __PYX_ERR(0, 703, __pyx_L1_error)

      /* "View.MemoryView":702
 * cdef int assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim) except -1:
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError, "Indirect dimensions not supported"
 *     return 0  # return type just used as an error flag
 */
    }
  }

  /* "View.MemoryView":704
 *         if suboffset >= 0:
 *             raise ValueError, "Indirect dimensions not supported"
 *     return 0  # return type just used as an error flag             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "View.MemoryView":700
 *     return have_slices or nslices, tuple(result)
 * 
 * cdef int assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim) except -1:             # <<<<<<<<<<<<<<
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("View.MemoryView.assert_direct_dimensions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":711
 * 
 * @cname('__pyx_memview_slice')
 * cdef memoryview memview_slice(memoryview memview, object indices):             # <<<<<<<<<<<<<<
 *     cdef int new_ndim = 0, suboffset_dim = -1, dim
 *     cdef bint negative_step
 */

static struct __pyx_memoryview_obj *__pyx_memview_slice(struct __pyx_memoryview_obj *__pyx_v_memview, PyObject *__pyx_v_indices) {
  int __pyx_v_new_ndim;
  int __pyx_v_suboffset_dim;
  int __pyx_v_dim;
  __Pyx_memviewslice __pyx_v_src;
  __Pyx_memviewslice __pyx_v_dst;
  __Pyx_memviewslice *__pyx_v_p_src;
  struct __pyx_memoryviewslice_obj *__pyx_v_memviewsliceobj = 0;
  __Pyx_memviewslice *__pyx_v_p_dst;
  int *__pyx_v_p_suboffset_dim;
  Py_ssize_t __pyx_v_start;
  Py_ssize_t __pyx_v_stop;
  Py_ssize_t __pyx_v_step;
  Py_ssize_t __pyx_v_cindex;
  int __pyx_v_have_start;
  int __pyx_v_have_stop;
  int __pyx_v_have_step;
  PyObject *__pyx_v_index = NULL;
  struct __pyx_memoryview_obj *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  struct __pyx_memoryview_obj *__pyx_t_3;
  char *__pyx_t_4;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  int __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memview_slice", 1);

  /* "View.MemoryView":712
 * @cname('__pyx_memview_slice')
 * cdef memoryview memview_slice(memoryview memview, object indices):
 *     cdef int new_ndim = 0, suboffset_dim = -1, dim             # <<<<<<<<<<<<<<
 *     cdef bint negative_step
 *     cdef __Pyx_memviewslice src, dst
 */
  __pyx_v_new_ndim = 0;
  __pyx_v_suboffset_dim = -1;

  /* "View.MemoryView":719
 * 
 * 
 *     memset(&dst, 0, sizeof(dst))             # <<<<<<<<<<<<<<
 * 
 *     cdef _memoryviewslice memviewsliceobj
 */
  (void)(memset((&__pyx_v_dst), 0, (sizeof(__pyx_v_dst))));

  /* "View.MemoryView":723
 *     cdef _memoryviewslice memviewsliceobj
 * 
 *     assert memview.view.ndim > 0             # <<<<<<<<<<<<<<
 * 
 *     if isinstance(memview, _memoryviewslice):
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(__pyx_assertions_enabled())) {
    __pyx_t_1 = (__pyx_v_memview->view.ndim > 0);
    if (unlikely(!__pyx_t_1)) {
      __Pyx_Raise(__pyx_builtin_AssertionError, 0, 0, 0);
      __PYX_ERR(0, 723, __pyx_L1_error)
    }
  }
  #else
  if ((1)); else __PYX_ERR(0, 723, __pyx_L1_error)
  #endif

  /* "View.MemoryView":725
 *     assert memview.view.ndim > 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         memviewsliceobj = memview
 *         p_src = &memviewsliceobj.from_slice
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 
  if (__pyx_t_1) {

    /* "View.MemoryView":726
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         memviewsliceobj = memview             # <<<<<<<<<<<<<<
 *         p_src = &memviewsliceobj.from_slice
 *     else:
 */
    if (!(likely(((((PyObject *)__pyx_v_memview)) == Py_None) || likely(__Pyx_TypeTest(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type))))) __PYX_ERR(0, 726, __pyx_L1_error)
    __pyx_t_2 = ((PyObject *)__pyx_v_memview);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v_memviewsliceobj = ((struct __pyx_memoryviewslice_obj *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "View.MemoryView":727
 *     if isinstance(memview, _memoryviewslice):
 *         memviewsliceobj = memview
 *         p_src = &memviewsliceobj.from_slice             # <<<<<<<<<<<<<<
 *     else:
 *         slice_copy(memview, &src)
 */
    __pyx_v_p_src = (&__pyx_v_memviewsliceobj->from_slice);

    /* "View.MemoryView":725
 *     assert memview.view.ndim > 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         memviewsliceobj = memview
 *         p_src = &memviewsliceobj.from_slice
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":729
 *         p_src = &memviewsliceobj.from_slice
 *     else:
 *         slice_copy(memview, &src)             # <<<<<<<<<<<<<<
 *         p_src = &src
 * 
 */
  /*else*/ {
    __pyx_memoryview_slice_copy(__pyx_v_memview, (&__pyx_v_src));

    /* "View.MemoryView":730
 *     else:
 *         slice_copy(memview, &src)
 *         p_src = &src             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_v_p_src = (&__pyx_v_src);
  }
  __pyx_L3:;

  /* "View.MemoryView":736
 * 
 * 
 *     dst.memview = p_src.memview             # <<<<<<<<<<<<<<
 *     dst.data = p_src.data
 * 
 */
  __pyx_t_3 = __pyx_v_p_src->memview;
  __pyx_v_dst.memview = __pyx_t_3;

  /* "View.MemoryView":737
 * 
 *     dst.memview = p_src.memview
 *     dst.data = p_src.data             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_4 = __pyx_v_p_src->data;
  __pyx_v_dst.data = __pyx_t_4;

  /* "View.MemoryView":742
 * 
 * 
 *     cdef __Pyx_memviewslice *p_dst = &dst             # <<<<<<<<<<<<<<
 *     cdef int *p_suboffset_dim = &suboffset_dim
 *     cdef Py_ssize_t start, stop, step, cindex
 */
  __pyx_v_p_dst = (&__pyx_v_dst);

  /* "View.MemoryView":743
 * 
 *     cdef __Pyx_memviewslice *p_dst = &dst
 *     cdef int *p_suboffset_dim = &suboffset_dim             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t start, stop, step, cindex
 *     cdef bint have_start, have_stop, have_step
 */
  __pyx_v_p_suboffset_dim = (&__pyx_v_suboffset_dim);

  /* "View.MemoryView":747
 *     cdef bint have_start, have_stop, have_step
 * 
 *     for dim, index in enumerate(indices):             # <<<<<<<<<<<<<<
 *         if PyIndex_Check(index):
 *             cindex = index
 */
  __pyx_t_5 = 0;
  if (likely(PyList_CheckExact(__pyx_v_indices)) || PyTuple_CheckExact(__pyx_v_indices)) {
    __pyx_t_2 = __pyx_v_indices; __Pyx_INCREF(__pyx_t_2);
    __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_indices); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 747, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 747, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_7)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_2);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 747, __pyx_L1_error)
          #endif
          if (__pyx_t_6 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_8 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_8); __pyx_t_6++; if (unlikely((0 < 0))) __PYX_ERR(0, 747, __pyx_L1_error)
        #else
        __pyx_t_8 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 747, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_2);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 747, __pyx_L1_error)
          #endif
          if (__pyx_t_6 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_8 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_8); __pyx_t_6++; if (unlikely((0 < 0))) __PYX_ERR(0, 747, __pyx_L1_error)
        #else
        __pyx_t_8 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 747, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        #endif
      }
    } else {
      __pyx_t_8 = __pyx_t_7(__pyx_t_2);
      if (unlikely(!__pyx_t_8)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 747, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_8);
    }
    __Pyx_XDECREF_SET(__pyx_v_index, __pyx_t_8);
    __pyx_t_8 = 0;
    __pyx_v_dim = __pyx_t_5;
    __pyx_t_5 = (__pyx_t_5 + 1);

    /* "View.MemoryView":748
 * 
 *     for dim, index in enumerate(indices):
 *         if PyIndex_Check(index):             # <<<<<<<<<<<<<<
 *             cindex = index
 *             slice_memviewslice(
 */
    __pyx_t_1 = (PyIndex_Check(__pyx_v_index) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":749
 *     for dim, index in enumerate(indices):
 *         if PyIndex_Check(index):
 *             cindex = index             # <<<<<<<<<<<<<<
 *             slice_memviewslice(
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 */
      __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_v_index); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 749, __pyx_L1_error)
      __pyx_v_cindex = __pyx_t_9;

      /* "View.MemoryView":750
 *         if PyIndex_Check(index):
 *             cindex = index
 *             slice_memviewslice(             # <<<<<<<<<<<<<<
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 *                 dim, new_ndim, p_suboffset_dim,
 */
      __pyx_t_10 = __pyx_memoryview_slice_memviewslice(__pyx_v_p_dst, (__pyx_v_p_src->shape[__pyx_v_dim]), (__pyx_v_p_src->strides[__pyx_v_dim]), (__pyx_v_p_src->suboffsets[__pyx_v_dim]), __pyx_v_dim, __pyx_v_new_ndim, __pyx_v_p_suboffset_dim, __pyx_v_cindex, 0, 0, 0, 0, 0, 0); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(0, 750, __pyx_L1_error)

      /* "View.MemoryView":748
 * 
 *     for dim, index in enumerate(indices):
 *         if PyIndex_Check(index):             # <<<<<<<<<<<<<<
 *             cindex = index
 *             slice_memviewslice(
 */
      goto __pyx_L6;
    }

    /* "View.MemoryView":756
 *                 0, 0, 0, # have_{start,stop,step}
 *                 False)
 *         elif index is None:             # <<<<<<<<<<<<<<
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0
 */
    __pyx_t_1 = (__pyx_v_index == Py_None);
    if (__pyx_t_1) {

      /* "View.MemoryView":757
 *                 False)
 *         elif index is None:
 *             p_dst.shape[new_ndim] = 1             # <<<<<<<<<<<<<<
 *             p_dst.strides[new_ndim] = 0
 *             p_dst.suboffsets[new_ndim] = -1
 */
      (__pyx_v_p_dst->shape[__pyx_v_new_ndim]) = 1;

      /* "View.MemoryView":758
 *         elif index is None:
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0             # <<<<<<<<<<<<<<
 *             p_dst.suboffsets[new_ndim] = -1
 *             new_ndim += 1
 */
      (__pyx_v_p_dst->strides[__pyx_v_new_ndim]) = 0;

      /* "View.MemoryView":759
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0
 *             p_dst.suboffsets[new_ndim] = -1             # <<<<<<<<<<<<<<
 *             new_ndim += 1
 *         else:
 */
      (__pyx_v_p_dst->suboffsets[__pyx_v_new_ndim]) = -1L;

      /* "View.MemoryView":760
 *             p_dst.strides[new_ndim] = 0
 *             p_dst.suboffsets[new_ndim] = -1
 *             new_ndim += 1             # <<<<<<<<<<<<<<
 *         else:
 *             start = index.start or 0
 */
      __pyx_v_new_ndim = (__pyx_v_new_ndim + 1);

      /* "View.MemoryView":756
 *                 0, 0, 0, # have_{start,stop,step}
 *                 False)
 *         elif index is None:             # <<<<<<<<<<<<<<
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0
 */
      goto __pyx_L6;
    }

    /* "View.MemoryView":762
 *             new_ndim += 1
 *         else:
 *             start = index.start or 0             # <<<<<<<<<<<<<<
 *             stop = index.stop or 0
 *             step = index.step or 0
 */
    /*else*/ {
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_start); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 762, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 762, __pyx_L1_error)
      if (!__pyx_t_1) {
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      } else {
        __pyx_t_11 = __Pyx_PyIndex_AsSsize_t(__pyx_t_8); if (unlikely((__pyx_t_11 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 762, __pyx_L1_error)
        __pyx_t_9 = __pyx_t_11;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L7_bool_binop_done;
      }
      __pyx_t_9 = 0;
      __pyx_L7_bool_binop_done:;
      __pyx_v_start = __pyx_t_9;

      /* "View.MemoryView":763
 *         else:
 *             start = index.start or 0
 *             stop = index.stop or 0             # <<<<<<<<<<<<<<
 *             step = index.step or 0
 * 
 */
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_stop); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 763, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 763, __pyx_L1_error)
      if (!__pyx_t_1) {
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      } else {
        __pyx_t_11 = __Pyx_PyIndex_AsSsize_t(__pyx_t_8); if (unlikely((__pyx_t_11 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 763, __pyx_L1_error)
        __pyx_t_9 = __pyx_t_11;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L9_bool_binop_done;
      }
      __pyx_t_9 = 0;
      __pyx_L9_bool_binop_done:;
      __pyx_v_stop = __pyx_t_9;

      /* "View.MemoryView":764
 *             start = index.start or 0
 *             stop = index.stop or 0
 *             step = index.step or 0             # <<<<<<<<<<<<<<
 * 
 *             have_start = index.start is not None
 */
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_step); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 764, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 764, __pyx_L1_error)
      if (!__pyx_t_1) {
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      } else {
        __pyx_t_11 = __Pyx_PyIndex_AsSsize_t(__pyx_t_8); if (unlikely((__pyx_t_11 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 764, __pyx_L1_error)
        __pyx_t_9 = __pyx_t_11;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L11_bool_binop_done;
      }
      __pyx_t_9 = 0;
      __pyx_L11_bool_binop_done:;
      __pyx_v_step = __pyx_t_9;

      /* "View.MemoryView":766
 *             step = index.step or 0
 * 
 *             have_start = index.start is not None             # <<<<<<<<<<<<<<
 *             have_stop = index.stop is not None
 *             have_step = index.step is not None
 */
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_start); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 766, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_1 = (__pyx_t_8 != Py_None);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_v_have_start = __pyx_t_1;

      /* "View.MemoryView":767
 * 
 *             have_start = index.start is not None
 *             have_stop = index.stop is not None             # <<<<<<<<<<<<<<
 *             have_step = index.step is not None
 * 
 */
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_stop); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 767, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_1 = (__pyx_t_8 != Py_None);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_v_have_stop = __pyx_t_1;

      /* "View.MemoryView":768
 *             have_start = index.start is not None
 *             have_stop = index.stop is not None
 *             have_step = index.step is not None             # <<<<<<<<<<<<<<
 * 
 *             slice_memviewslice(
 */
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_step); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 768, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_1 = (__pyx_t_8 != Py_None);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_v_have_step = __pyx_t_1;

      /* "View.MemoryView":770
 *             have_step = index.step is not None
 * 
 *             slice_memviewslice(             # <<<<<<<<<<<<<<
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 *                 dim, new_ndim, p_suboffset_dim,
 */
      __pyx_t_10 = __pyx_memoryview_slice_memviewslice(__pyx_v_p_dst, (__pyx_v_p_src->shape[__pyx_v_dim]), (__pyx_v_p_src->strides[__pyx_v_dim]), (__pyx_v_p_src->suboffsets[__pyx_v_dim]), __pyx_v_dim, __pyx_v_new_ndim, __pyx_v_p_suboffset_dim, __pyx_v_start, __pyx_v_stop, __pyx_v_step, __pyx_v_have_start, __pyx_v_have_stop, __pyx_v_have_step, 1); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(0, 770, __pyx_L1_error)

      /* "View.MemoryView":776
 *                 have_start, have_stop, have_step,
 *                 True)
 *             new_ndim += 1             # <<<<<<<<<<<<<<
 * 
 *     if isinstance(memview, _memoryviewslice):
 */
      __pyx_v_new_ndim = (__pyx_v_new_ndim + 1);
    }
    __pyx_L6:;

    /* "View.MemoryView":747
 *     cdef bint have_start, have_stop, have_step
 * 
 *     for dim, index in enumerate(indices):             # <<<<<<<<<<<<<<
 *         if PyIndex_Check(index):
 *             cindex = index
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":778
 *             new_ndim += 1
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 
  if (__pyx_t_1) {

    /* "View.MemoryView":779
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         return memoryview_fromslice(dst, new_ndim,             # <<<<<<<<<<<<<<
 *                                     memviewsliceobj.to_object_func,
 *                                     memviewsliceobj.to_dtype_func,
 */
    __Pyx_XDECREF((PyObject *)__pyx_r);

    /* "View.MemoryView":780
 *     if isinstance(memview, _memoryviewslice):
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,             # <<<<<<<<<<<<<<
 *                                     memviewsliceobj.to_dtype_func,
 *                                     memview.dtype_is_object)
 */
    if (unlikely(!__pyx_v_memviewsliceobj)) { __Pyx_RaiseUnboundLocalError("memviewsliceobj"); __PYX_ERR(0, 780, __pyx_L1_error) }

    /* "View.MemoryView":781
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,
 *                                     memviewsliceobj.to_dtype_func,             # <<<<<<<<<<<<<<
 *                                     memview.dtype_is_object)
 *     else:
 */
    if (unlikely(!__pyx_v_memviewsliceobj)) { __Pyx_RaiseUnboundLocalError("memviewsliceobj"); __PYX_ERR(0, 781, __pyx_L1_error) }

    /* "View.MemoryView":779
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         return memoryview_fromslice(dst, new_ndim,             # <<<<<<<<<<<<<<
 *                                     memviewsliceobj.to_object_func,
 *                                     memviewsliceobj.to_dtype_func,
 */
    __pyx_t_2 = __pyx_memoryview_fromslice(__pyx_v_dst, __pyx_v_new_ndim, __pyx_v_memviewsliceobj->to_object_func, __pyx_v_memviewsliceobj->to_dtype_func, __pyx_v_memview->dtype_is_object); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 779, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_memoryview_type))))) __PYX_ERR(0, 779, __pyx_L1_error)
    __pyx_r = ((struct __pyx_memoryview_obj *)__pyx_t_2);
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":778
 *             new_ndim += 1
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,
 */
  }

  /* "View.MemoryView":784
 *                                     memview.dtype_is_object)
 *     else:
 *         return memoryview_fromslice(dst, new_ndim, NULL, NULL,             # <<<<<<<<<<<<<<
 *                                     memview.dtype_is_object)
 * 
 */
  /*else*/ {
    __Pyx_XDECREF((PyObject *)__pyx_r);

    /* "View.MemoryView":785
 *     else:
 *         return memoryview_fromslice(dst, new_ndim, NULL, NULL,
 *                                     memview.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_2 = __pyx_memoryview_fromslice(__pyx_v_dst, __pyx_v_new_ndim, NULL, NULL, __pyx_v_memview->dtype_is_object); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 784, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);

    /* "View.MemoryView":784
 *                                     memview.dtype_is_object)
 *     else:
 *         return memoryview_fromslice(dst, new_ndim, NULL, NULL,             # <<<<<<<<<<<<<<
 *                                     memview.dtype_is_object)
 * 
 */
    if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_memoryview_type))))) __PYX_ERR(0, 784, __pyx_L1_error)
    __pyx_r = ((struct __pyx_memoryview_obj *)__pyx_t_2);
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "View.MemoryView":711
 * 
 * @cname('__pyx_memview_slice')
 * cdef memoryview memview_slice(memoryview memview, object indices):             # <<<<<<<<<<<<<<
 *     cdef int new_ndim = 0, suboffset_dim = -1, dim
 *     cdef bint negative_step
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("View.MemoryView.memview_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_memviewsliceobj);
  __Pyx_XDECREF(__pyx_v_index);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":793
 * 
 * @cname('__pyx_memoryview_slice_memviewslice')
 * cdef int slice_memviewslice(             # <<<<<<<<<<<<<<
 *         __Pyx_memviewslice *dst,
 *         Py_ssize_t shape, Py_ssize_t stride, Py_ssize_t suboffset,
 */

static int __pyx_memoryview_slice_memviewslice(__Pyx_memviewslice *__pyx_v_dst, Py_ssize_t __pyx_v_shape, Py_ssize_t __pyx_v_stride, Py_ssize_t __pyx_v_suboffset, int __pyx_v_dim, int __pyx_v_new_ndim, int *__pyx_v_suboffset_dim, Py_ssize_t __pyx_v_start, Py_ssize_t __pyx_v_stop, Py_ssize_t __pyx_v_step, int __pyx_v_have_start, int __pyx_v_have_stop, int __pyx_v_have_step, int __pyx_v_is_slice) {
  Py_ssize_t __pyx_v_new_shape;
  int __pyx_v_negative_step;
  int __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif

  /* "View.MemoryView":813
 *     cdef bint negative_step
 * 
 *     if not is_slice:             # <<<<<<<<<<<<<<
 * 
 *         if start < 0:
 */
  __pyx_t_1 = (!__pyx_v_is_slice);
  if (__pyx_t_1) {

    /* "View.MemoryView":815
 *     if not is_slice:
 * 
 *         if start < 0:             # <<<<<<<<<<<<<<
 *             start += shape
 *         if not 0 <= start < shape:
 */
    __pyx_t_1 = (__pyx_v_start < 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":816
 * 
 *         if start < 0:
 *             start += shape             # <<<<<<<<<<<<<<
 *         if not 0 <= start < shape:
 *             _err_dim(PyExc_IndexError, "Index out of bounds (axis %d)", dim)
 */
      __pyx_v_start = (__pyx_v_start + __pyx_v_shape);

      /* "View.MemoryView":815
 *     if not is_slice:
 * 
 *         if start < 0:             # <<<<<<<<<<<<<<
 *             start += shape
 *         if not 0 <= start < shape:
 */
    }

    /* "View.MemoryView":817
 *         if start < 0:
 *             start += shape
 *         if not 0 <= start < shape:             # <<<<<<<<<<<<<<
 *             _err_dim(PyExc_IndexError, "Index out of bounds (axis %d)", dim)
 *     else:
 */
    __pyx_t_1 = (0 <= __pyx_v_start);
    if (__pyx_t_1) {
      __pyx_t_1 = (__pyx_v_start < __pyx_v_shape);
    }
    __pyx_t_2 = (!__pyx_t_1);
    if (__pyx_t_2) {

      /* "View.MemoryView":818
 *             start += shape
 *         if not 0 <= start < shape:
 *             _err_dim(PyExc_IndexError, "Index out of bounds (axis %d)", dim)             # <<<<<<<<<<<<<<
 *     else:
 * 
 */
      __pyx_t_3 = __pyx_memoryview_err_dim(PyExc_IndexError, __pyx_kp_s_Index_out_of_bounds_axis_d, __pyx_v_dim); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 818, __pyx_L1_error)

      /* "View.MemoryView":817
 *         if start < 0:
 *             start += shape
 *         if not 0 <= start < shape:             # <<<<<<<<<<<<<<
 *             _err_dim(PyExc_IndexError, "Index out of bounds (axis %d)", dim)
 *     else:
 */
    }

    /* "View.MemoryView":813
 *     cdef bint negative_step
 * 
 *     if not is_slice:             # <<<<<<<<<<<<<<
 * 
 *         if start < 0:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":821
 *     else:
 * 
 *         if have_step:             # <<<<<<<<<<<<<<
 *             negative_step = step < 0
 *             if step == 0:
 */
  /*else*/ {
    __pyx_t_2 = (__pyx_v_have_step != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":822
 * 
 *         if have_step:
 *             negative_step = step < 0             # <<<<<<<<<<<<<<
 *             if step == 0:
 *                 _err_dim(PyExc_ValueError, "Step may not be zero (axis %d)", dim)
 */
      __pyx_v_negative_step = (__pyx_v_step < 0);

      /* "View.MemoryView":823
 *         if have_step:
 *             negative_step = step < 0
 *             if step == 0:             # <<<<<<<<<<<<<<
 *                 _err_dim(PyExc_ValueError, "Step may not be zero (axis %d)", dim)
 *         else:
 */
      __pyx_t_2 = (__pyx_v_step == 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":824
 *             negative_step = step < 0
 *             if step == 0:
 *                 _err_dim(PyExc_ValueError, "Step may not be zero (axis %d)", dim)             # <<<<<<<<<<<<<<
 *         else:
 *             negative_step = False
 */
        __pyx_t_3 = __pyx_memoryview_err_dim(PyExc_ValueError, __pyx_kp_s_Step_may_not_be_zero_axis_d, __pyx_v_dim); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 824, __pyx_L1_error)

        /* "View.MemoryView":823
 *         if have_step:
 *             negative_step = step < 0
 *             if step == 0:             # <<<<<<<<<<<<<<
 *                 _err_dim(PyExc_ValueError, "Step may not be zero (axis %d)", dim)
 *         else:
 */
      }

      /* "View.MemoryView":821
 *     else:
 * 
 *         if have_step:             # <<<<<<<<<<<<<<
 *             negative_step = step < 0
 *             if step == 0:
 */
      goto __pyx_L6;
    }

    /* "View.MemoryView":826
 *                 _err_dim(PyExc_ValueError, "Step may not be zero (axis %d)", dim)
 *         else:
 *             negative_step = False             # <<<<<<<<<<<<<<
 *             step = 1
 * 
 */
    /*else*/ {
      __pyx_v_negative_step = 0;

      /* "View.MemoryView":827
 *         else:
 *             negative_step = False
 *             step = 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_step = 1;
    }
    __pyx_L6:;

    /* "View.MemoryView":830
 * 
 * 
 *         if have_start:             # <<<<<<<<<<<<<<
 *             if start < 0:
 *                 start += shape
 */
    __pyx_t_2 = (__pyx_v_have_start != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":831
 * 
 *         if have_start:
 *             if start < 0:             # <<<<<<<<<<<<<<
 *                 start += shape
 *                 if start < 0:
 */
      __pyx_t_2 = (__pyx_v_start < 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":832
 *         if have_start:
 *             if start < 0:
 *                 start += shape             # <<<<<<<<<<<<<<
 *                 if start < 0:
 *                     start = 0
 */
        __pyx_v_start = (__pyx_v_start + __pyx_v_shape);

        /* "View.MemoryView":833
 *             if start < 0:
 *                 start += shape
 *                 if start < 0:             # <<<<<<<<<<<<<<
 *                     start = 0
 *             elif start >= shape:
 */
        __pyx_t_2 = (__pyx_v_start < 0);
        if (__pyx_t_2) {

          /* "View.MemoryView":834
 *                 start += shape
 *                 if start < 0:
 *                     start = 0             # <<<<<<<<<<<<<<
 *             elif start >= shape:
 *                 if negative_step:
 */
          __pyx_v_start = 0;

          /* "View.MemoryView":833
 *             if start < 0:
 *                 start += shape
 *                 if start < 0:             # <<<<<<<<<<<<<<
 *                     start = 0
 *             elif start >= shape:
 */
        }

        /* "View.MemoryView":831
 * 
 *         if have_start:
 *             if start < 0:             # <<<<<<<<<<<<<<
 *                 start += shape
 *                 if start < 0:
 */
        goto __pyx_L9;
      }

      /* "View.MemoryView":835
 *                 if start < 0:
 *                     start = 0
 *             elif start >= shape:             # <<<<<<<<<<<<<<
 *                 if negative_step:
 *                     start = shape - 1
 */
      __pyx_t_2 = (__pyx_v_start >= __pyx_v_shape);
      if (__pyx_t_2) {

        /* "View.MemoryView":836
 *                     start = 0
 *             elif start >= shape:
 *                 if negative_step:             # <<<<<<<<<<<<<<
 *                     start = shape - 1
 *                 else:
 */
        if (__pyx_v_negative_step) {

          /* "View.MemoryView":837
 *             elif start >= shape:
 *                 if negative_step:
 *                     start = shape - 1             # <<<<<<<<<<<<<<
 *                 else:
 *                     start = shape
 */
          __pyx_v_start = (__pyx_v_shape - 1);

          /* "View.MemoryView":836
 *                     start = 0
 *             elif start >= shape:
 *                 if negative_step:             # <<<<<<<<<<<<<<
 *                     start = shape - 1
 *                 else:
 */
          goto __pyx_L11;
        }

        /* "View.MemoryView":839
 *                     start = shape - 1
 *                 else:
 *                     start = shape             # <<<<<<<<<<<<<<
 *         else:
 *             if negative_step:
 */
        /*else*/ {
          __pyx_v_start = __pyx_v_shape;
        }
        __pyx_L11:;

        /* "View.MemoryView":835
 *                 if start < 0:
 *                     start = 0
 *             elif start >= shape:             # <<<<<<<<<<<<<<
 *                 if negative_step:
 *                     start = shape - 1
 */
      }
      __pyx_L9:;

      /* "View.MemoryView":830
 * 
 * 
 *         if have_start:             # <<<<<<<<<<<<<<
 *             if start < 0:
 *                 start += shape
 */
      goto __pyx_L8;
    }

    /* "View.MemoryView":841
 *                     start = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 start = shape - 1
 *             else:
 */
    /*else*/ {
      if (__pyx_v_negative_step) {

        /* "View.MemoryView":842
 *         else:
 *             if negative_step:
 *                 start = shape - 1             # <<<<<<<<<<<<<<
 *             else:
 *                 start = 0
 */
        __pyx_v_start = (__pyx_v_shape - 1);

        /* "View.MemoryView":841
 *                     start = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 start = shape - 1
 *             else:
 */
        goto __pyx_L12;
      }

      /* "View.MemoryView":844
 *                 start = shape - 1
 *             else:
 *                 start = 0             # <<<<<<<<<<<<<<
 * 
 *         if have_stop:
 */
      /*else*/ {
        __pyx_v_start = 0;
      }
      __pyx_L12:;
    }
    __pyx_L8:;

    /* "View.MemoryView":846
 *                 start = 0
 * 
 *         if have_stop:             # <<<<<<<<<<<<<<
 *             if stop < 0:
 *                 stop += shape
 */
    __pyx_t_2 = (__pyx_v_have_stop != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":847
 * 
 *         if have_stop:
 *             if stop < 0:             # <<<<<<<<<<<<<<
 *                 stop += shape
 *                 if stop < 0:
 */
      __pyx_t_2 = (__pyx_v_stop < 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":848
 *         if have_stop:
 *             if stop < 0:
 *                 stop += shape             # <<<<<<<<<<<<<<
 *                 if stop < 0:
 *                     stop = 0
 */
        __pyx_v_stop = (__pyx_v_stop + __pyx_v_shape);

        /* "View.MemoryView":849
 *             if stop < 0:
 *                 stop += shape
 *                 if stop < 0:             # <<<<<<<<<<<<<<
 *                     stop = 0
 *             elif stop > shape:
 */
        __pyx_t_2 = (__pyx_v_stop < 0);
        if (__pyx_t_2) {

          /* "View.MemoryView":850
 *                 stop += shape
 *                 if stop < 0:
 *                     stop = 0             # <<<<<<<<<<<<<<
 *             elif stop > shape:
 *                 stop = shape
 */
          __pyx_v_stop = 0;

          /* "View.MemoryView":849
 *             if stop < 0:
 *                 stop += shape
 *                 if stop < 0:             # <<<<<<<<<<<<<<
 *                     stop = 0
 *             elif stop > shape:
 */
        }

        /* "View.MemoryView":847
 * 
 *         if have_stop:
 *             if stop < 0:             # <<<<<<<<<<<<<<
 *                 stop += shape
 *                 if stop < 0:
 */
        goto __pyx_L14;
      }

      /* "View.MemoryView":851
 *                 if stop < 0:
 *                     stop = 0
 *             elif stop > shape:             # <<<<<<<<<<<<<<
 *                 stop = shape
 *         else:
 */
      __pyx_t_2 = (__pyx_v_stop > __pyx_v_shape);
      if (__pyx_t_2) {

        /* "View.MemoryView":852
 *                     stop = 0
 *             elif stop > shape:
 *                 stop = shape             # <<<<<<<<<<<<<<
 *         else:
 *             if negative_step:
 */
        __pyx_v_stop = __pyx_v_shape;

        /* "View.MemoryView":851
 *                 if stop < 0:
 *                     stop = 0
 *             elif stop > shape:             # <<<<<<<<<<<<<<
 *                 stop = shape
 *         else:
 */
      }
      __pyx_L14:;

      /* "View.MemoryView":846
 *                 start = 0
 * 
 *         if have_stop:             # <<<<<<<<<<<<<<
 *             if stop < 0:
 *                 stop += shape
 */
      goto __pyx_L13;
    }

    /* "View.MemoryView":854
 *                 stop = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 stop = -1
 *             else:
 */
    /*else*/ {
      if (__pyx_v_negative_step) {

        /* "View.MemoryView":855
 *         else:
 *             if negative_step:
 *                 stop = -1             # <<<<<<<<<<<<<<
 *             else:
 *                 stop = shape
 */
        __pyx_v_stop = -1L;

        /* "View.MemoryView":854
 *                 stop = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 stop = -1
 *             else:
 */
        goto __pyx_L16;
      }

      /* "View.MemoryView":857
 *                 stop = -1
 *             else:
 *                 stop = shape             # <<<<<<<<<<<<<<
 * 
 * 
 */
      /*else*/ {
        __pyx_v_stop = __pyx_v_shape;
      }
      __pyx_L16:;
    }
    __pyx_L13:;

    /* "View.MemoryView":861
 * 
 *         with cython.cdivision(True):
 *             new_shape = (stop - start) // step             # <<<<<<<<<<<<<<
 * 
 *             if (stop - start) - step * new_shape:
 */
    __pyx_v_new_shape = ((__pyx_v_stop - __pyx_v_start) / __pyx_v_step);

    /* "View.MemoryView":863
 *             new_shape = (stop - start) // step
 * 
 *             if (stop - start) - step * new_shape:             # <<<<<<<<<<<<<<
 *                 new_shape += 1
 * 
 */
    __pyx_t_2 = (((__pyx_v_stop - __pyx_v_start) - (__pyx_v_step * __pyx_v_new_shape)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":864
 * 
 *             if (stop - start) - step * new_shape:
 *                 new_shape += 1             # <<<<<<<<<<<<<<
 * 
 *         if new_shape < 0:
 */
      __pyx_v_new_shape = (__pyx_v_new_shape + 1);

      /* "View.MemoryView":863
 *             new_shape = (stop - start) // step
 * 
 *             if (stop - start) - step * new_shape:             # <<<<<<<<<<<<<<
 *                 new_shape += 1
 * 
 */
    }

    /* "View.MemoryView":866
 *                 new_shape += 1
 * 
 *         if new_shape < 0:             # <<<<<<<<<<<<<<
 *             new_shape = 0
 * 
 */
    __pyx_t_2 = (__pyx_v_new_shape < 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":867
 * 
 *         if new_shape < 0:
 *             new_shape = 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_new_shape = 0;

      /* "View.MemoryView":866
 *                 new_shape += 1
 * 
 *         if new_shape < 0:             # <<<<<<<<<<<<<<
 *             new_shape = 0
 * 
 */
    }

    /* "View.MemoryView":870
 * 
 * 
 *         dst.strides[new_ndim] = stride * step             # <<<<<<<<<<<<<<
 *         dst.shape[new_ndim] = new_shape
 *         dst.suboffsets[new_ndim] = suboffset
 */
    (__pyx_v_dst->strides[__pyx_v_new_ndim]) = (__pyx_v_stride * __pyx_v_step);

    /* "View.MemoryView":871
 * 
 *         dst.strides[new_ndim] = stride * step
 *         dst.shape[new_ndim] = new_shape             # <<<<<<<<<<<<<<
 *         dst.suboffsets[new_ndim] = suboffset
 * 
 */
    (__pyx_v_dst->shape[__pyx_v_new_ndim]) = __pyx_v_new_shape;

    /* "View.MemoryView":872
 *         dst.strides[new_ndim] = stride * step
 *         dst.shape[new_ndim] = new_shape
 *         dst.suboffsets[new_ndim] = suboffset             # <<<<<<<<<<<<<<
 * 
 * 
 */
    (__pyx_v_dst->suboffsets[__pyx_v_new_ndim]) = __pyx_v_suboffset;
  }
  __pyx_L3:;

  /* "View.MemoryView":875
 * 
 * 
 *     if suboffset_dim[0] < 0:             # <<<<<<<<<<<<<<
 *         dst.data += start * stride
 *     else:
 */
  __pyx_t_2 = ((__pyx_v_suboffset_dim[0]) < 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":876
 * 
 *     if suboffset_dim[0] < 0:
 *         dst.data += start * stride             # <<<<<<<<<<<<<<
 *     else:
 *         dst.suboffsets[suboffset_dim[0]] += start * stride
 */
    __pyx_v_dst->data = (__pyx_v_dst->data + (__pyx_v_start * __pyx_v_stride));

    /* "View.MemoryView":875
 * 
 * 
 *     if suboffset_dim[0] < 0:             # <<<<<<<<<<<<<<
 *         dst.data += start * stride
 *     else:
 */
    goto __pyx_L19;
  }

  /* "View.MemoryView":878
 *         dst.data += start * stride
 *     else:
 *         dst.suboffsets[suboffset_dim[0]] += start * stride             # <<<<<<<<<<<<<<
 * 
 *     if suboffset >= 0:
 */
  /*else*/ {
    __pyx_t_3 = (__pyx_v_suboffset_dim[0]);
    (__pyx_v_dst->suboffsets[__pyx_t_3]) = ((__pyx_v_dst->suboffsets[__pyx_t_3]) + (__pyx_v_start * __pyx_v_stride));
  }
  __pyx_L19:;

  /* "View.MemoryView":880
 *         dst.suboffsets[suboffset_dim[0]] += start * stride
 * 
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         if not is_slice:
 *             if new_ndim == 0:
 */
  __pyx_t_2 = (__pyx_v_suboffset >= 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":881
 * 
 *     if suboffset >= 0:
 *         if not is_slice:             # <<<<<<<<<<<<<<
 *             if new_ndim == 0:
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 */
    __pyx_t_2 = (!__pyx_v_is_slice);
    if (__pyx_t_2) {

      /* "View.MemoryView":882
 *     if suboffset >= 0:
 *         if not is_slice:
 *             if new_ndim == 0:             # <<<<<<<<<<<<<<
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 *             else:
 */
      __pyx_t_2 = (__pyx_v_new_ndim == 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":883
 *         if not is_slice:
 *             if new_ndim == 0:
 *                 dst.data = (<char **> dst.data)[0] + suboffset             # <<<<<<<<<<<<<<
 *             else:
 *                 _err_dim(PyExc_IndexError, "All dimensions preceding dimension %d "
 */
        __pyx_v_dst->data = ((((char **)__pyx_v_dst->data)[0]) + __pyx_v_suboffset);

        /* "View.MemoryView":882
 *     if suboffset >= 0:
 *         if not is_slice:
 *             if new_ndim == 0:             # <<<<<<<<<<<<<<
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 *             else:
 */
        goto __pyx_L22;
      }

      /* "View.MemoryView":885
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 *             else:
 *                 _err_dim(PyExc_IndexError, "All dimensions preceding dimension %d "             # <<<<<<<<<<<<<<
 *                                      "must be indexed and not sliced", dim)
 *         else:
 */
      /*else*/ {

        /* "View.MemoryView":886
 *             else:
 *                 _err_dim(PyExc_IndexError, "All dimensions preceding dimension %d "
 *                                      "must be indexed and not sliced", dim)             # <<<<<<<<<<<<<<
 *         else:
 *             suboffset_dim[0] = new_ndim
 */
        __pyx_t_3 = __pyx_memoryview_err_dim(PyExc_IndexError, __pyx_kp_s_All_dimensions_preceding_dimensi, __pyx_v_dim); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 885, __pyx_L1_error)
      }
      __pyx_L22:;

      /* "View.MemoryView":881
 * 
 *     if suboffset >= 0:
 *         if not is_slice:             # <<<<<<<<<<<<<<
 *             if new_ndim == 0:
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 */
      goto __pyx_L21;
    }

    /* "View.MemoryView":888
 *                                      "must be indexed and not sliced", dim)
 *         else:
 *             suboffset_dim[0] = new_ndim             # <<<<<<<<<<<<<<
 * 
 *     return 0
 */
    /*else*/ {
      (__pyx_v_suboffset_dim[0]) = __pyx_v_new_ndim;
    }
    __pyx_L21:;

    /* "View.MemoryView":880
 *         dst.suboffsets[suboffset_dim[0]] += start * stride
 * 
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         if not is_slice:
 *             if new_ndim == 0:
 */
  }

  /* "View.MemoryView":890
 *             suboffset_dim[0] = new_ndim
 * 
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "View.MemoryView":793
 * 
 * @cname('__pyx_memoryview_slice_memviewslice')
 * cdef int slice_memviewslice(             # <<<<<<<<<<<<<<
 *         __Pyx_memviewslice *dst,
 *         Py_ssize_t shape, Py_ssize_t stride, Py_ssize_t suboffset,
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("View.MemoryView.slice_memviewslice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":896
 * 
 * @cname('__pyx_pybuffer_index')
 * cdef char *pybuffer_index(Py_buffer *view, char *bufp, Py_ssize_t index,             # <<<<<<<<<<<<<<
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1
 */

static char *__pyx_pybuffer_index(Py_buffer *__pyx_v_view, char *__pyx_v_bufp, Py_ssize_t __pyx_v_index, Py_ssize_t __pyx_v_dim) {
  Py_ssize_t __pyx_v_shape;
  Py_ssize_t __pyx_v_stride;
  Py_ssize_t __pyx_v_suboffset;
  Py_ssize_t __pyx_v_itemsize;
  char *__pyx_v_resultp;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_UCS4 __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pybuffer_index", 1);

  /* "View.MemoryView":898
 * cdef char *pybuffer_index(Py_buffer *view, char *bufp, Py_ssize_t index,
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t itemsize = view.itemsize
 *     cdef char *resultp
 */
  __pyx_v_suboffset = -1L;

  /* "View.MemoryView":899
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1
 *     cdef Py_ssize_t itemsize = view.itemsize             # <<<<<<<<<<<<<<
 *     cdef char *resultp
 * 
 */
  __pyx_t_1 = __pyx_v_view->itemsize;
  __pyx_v_itemsize = __pyx_t_1;

  /* "View.MemoryView":902
 *     cdef char *resultp
 * 
 *     if view.ndim == 0:             # <<<<<<<<<<<<<<
 *         shape = view.len // itemsize
 *         stride = itemsize
 */
  __pyx_t_2 = (__pyx_v_view->ndim == 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":903
 * 
 *     if view.ndim == 0:
 *         shape = view.len // itemsize             # <<<<<<<<<<<<<<
 *         stride = itemsize
 *     else:
 */
    if (unlikely(__pyx_v_itemsize == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      __PYX_ERR(0, 903, __pyx_L1_error)
    }
    else if (sizeof(Py_ssize_t) == sizeof(long) && (!(((Py_ssize_t)-1) > 0)) && unlikely(__pyx_v_itemsize == (Py_ssize_t)-1)  && unlikely(__Pyx_UNARY_NEG_WOULD_OVERFLOW(__pyx_v_view->len))) {
      PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
      __PYX_ERR(0, 903, __pyx_L1_error)
    }
    __pyx_v_shape = __Pyx_div_Py_ssize_t(__pyx_v_view->len, __pyx_v_itemsize);

    /* "View.MemoryView":904
 *     if view.ndim == 0:
 *         shape = view.len // itemsize
 *         stride = itemsize             # <<<<<<<<<<<<<<
 *     else:
 *         shape = view.shape[dim]
 */
    __pyx_v_stride = __pyx_v_itemsize;

    /* "View.MemoryView":902
 *     cdef char *resultp
 * 
 *     if view.ndim == 0:             # <<<<<<<<<<<<<<
 *         shape = view.len // itemsize
 *         stride = itemsize
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":906
 *         stride = itemsize
 *     else:
 *         shape = view.shape[dim]             # <<<<<<<<<<<<<<
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:
 */
  /*else*/ {
    __pyx_v_shape = (__pyx_v_view->shape[__pyx_v_dim]);

    /* "View.MemoryView":907
 *     else:
 *         shape = view.shape[dim]
 *         stride = view.strides[dim]             # <<<<<<<<<<<<<<
 *         if view.suboffsets != NULL:
 *             suboffset = view.suboffsets[dim]
 */
    __pyx_v_stride = (__pyx_v_view->strides[__pyx_v_dim]);

    /* "View.MemoryView":908
 *         shape = view.shape[dim]
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *             suboffset = view.suboffsets[dim]
 * 
 */
    __pyx_t_2 = (__pyx_v_view->suboffsets != NULL);
    if (__pyx_t_2) {

      /* "View.MemoryView":909
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:
 *             suboffset = view.suboffsets[dim]             # <<<<<<<<<<<<<<
 * 
 *     if index < 0:
 */
      __pyx_v_suboffset = (__pyx_v_view->suboffsets[__pyx_v_dim]);

      /* "View.MemoryView":908
 *         shape = view.shape[dim]
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *             suboffset = view.suboffsets[dim]
 * 
 */
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":911
 *             suboffset = view.suboffsets[dim]
 * 
 *     if index < 0:             # <<<<<<<<<<<<<<
 *         index += view.shape[dim]
 *         if index < 0:
 */
  __pyx_t_2 = (__pyx_v_index < 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":912
 * 
 *     if index < 0:
 *         index += view.shape[dim]             # <<<<<<<<<<<<<<
 *         if index < 0:
 *             raise IndexError, f"Out of bounds on buffer access (axis {dim})"
 */
    __pyx_v_index = (__pyx_v_index + (__pyx_v_view->shape[__pyx_v_dim]));

    /* "View.MemoryView":913
 *     if index < 0:
 *         index += view.shape[dim]
 *         if index < 0:             # <<<<<<<<<<<<<<
 *             raise IndexError, f"Out of bounds on buffer access (axis {dim})"
 * 
 */
    __pyx_t_2 = (__pyx_v_index < 0);
    if (unlikely(__pyx_t_2)) {

      /* "View.MemoryView":914
 *         index += view.shape[dim]
 *         if index < 0:
 *             raise IndexError, f"Out of bounds on buffer access (axis {dim})"             # <<<<<<<<<<<<<<
 * 
 *     if index >= shape:
 */
      __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 914, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_1 = 0;
      __pyx_t_4 = 127;
      __Pyx_INCREF(__pyx_kp_u_Out_of_bounds_on_buffer_access_a);
      __pyx_t_1 += 37;
      __Pyx_GIVEREF(__pyx_kp_u_Out_of_bounds_on_buffer_access_a);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_Out_of_bounds_on_buffer_access_a);
      __pyx_t_5 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_v_dim, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 914, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_5);
      __pyx_t_5 = 0;
      __Pyx_INCREF(__pyx_kp_u__7);
      __pyx_t_1 += 1;
      __Pyx_GIVEREF(__pyx_kp_u__7);
      PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u__7);
      __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_3, 3, __pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 914, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_Raise(__pyx_builtin_IndexError, __pyx_t_5, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __PYX_ERR(0, 914, __pyx_L1_error)

      /* "View.MemoryView":913
 *     if index < 0:
 *         index += view.shape[dim]
 *         if index < 0:             # <<<<<<<<<<<<<<
 *             raise IndexError, f"Out of bounds on buffer access (axis {dim})"
 * 
 */
    }

    /* "View.MemoryView":911
 *             suboffset = view.suboffsets[dim]
 * 
 *     if index < 0:             # <<<<<<<<<<<<<<
 *         index += view.shape[dim]
 *         if index < 0:
 */
  }

  /* "View.MemoryView":916
 *             raise IndexError, f"Out of bounds on buffer access (axis {dim})"
 * 
 *     if index >= shape:             # <<<<<<<<<<<<<<
 *         raise IndexError, f"Out of bounds on buffer access (axis {dim})"
 * 
 */
  __pyx_t_2 = (__pyx_v_index >= __pyx_v_shape);
  if (unlikely(__pyx_t_2)) {

    /* "View.MemoryView":917
 * 
 *     if index >= shape:
 *         raise IndexError, f"Out of bounds on buffer access (axis {dim})"             # <<<<<<<<<<<<<<
 * 
 *     resultp = bufp + index * stride
 */
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 917, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = 0;
    __pyx_t_4 = 127;
    __Pyx_INCREF(__pyx_kp_u_Out_of_bounds_on_buffer_access_a);
    __pyx_t_1 += 37;
    __Pyx_GIVEREF(__pyx_kp_u_Out_of_bounds_on_buffer_access_a);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_kp_u_Out_of_bounds_on_buffer_access_a);
    __pyx_t_3 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_v_dim, 0, ' ', 'd'); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 917, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_INCREF(__pyx_kp_u__7);
    __pyx_t_1 += 1;
    __Pyx_GIVEREF(__pyx_kp_u__7);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_kp_u__7);
    __pyx_t_3 = __Pyx_PyUnicode_Join(__pyx_t_5, 3, __pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 917, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_builtin_IndexError, __pyx_t_3, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 917, __pyx_L1_error)

    /* "View.MemoryView":916
 *             raise IndexError, f"Out of bounds on buffer access (axis {dim})"
 * 
 *     if index >= shape:             # <<<<<<<<<<<<<<
 *         raise IndexError, f"Out of bounds on buffer access (axis {dim})"
 * 
 */
  }

  /* "View.MemoryView":919
 *         raise IndexError, f"Out of bounds on buffer access (axis {dim})"
 * 
 *     resultp = bufp + index * stride             # <<<<<<<<<<<<<<
 *     if suboffset >= 0:
 *         resultp = (<char **> resultp)[0] + suboffset
 */
  __pyx_v_resultp = (__pyx_v_bufp + (__pyx_v_index * __pyx_v_stride));

  /* "View.MemoryView":920
 * 
 *     resultp = bufp + index * stride
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         resultp = (<char **> resultp)[0] + suboffset
 * 
 */
  __pyx_t_2 = (__pyx_v_suboffset >= 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":921
 *     resultp = bufp + index * stride
 *     if suboffset >= 0:
 *         resultp = (<char **> resultp)[0] + suboffset             # <<<<<<<<<<<<<<
 * 
 *     return resultp
 */
    __pyx_v_resultp = ((((char **)__pyx_v_resultp)[0]) + __pyx_v_suboffset);

    /* "View.MemoryView":920
 * 
 *     resultp = bufp + index * stride
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         resultp = (<char **> resultp)[0] + suboffset
 * 
 */
  }

  /* "View.MemoryView":923
 *         resultp = (<char **> resultp)[0] + suboffset
 * 
 *     return resultp             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_resultp;
  goto __pyx_L0;

  /* "View.MemoryView":896
 * 
 * @cname('__pyx_pybuffer_index')
 * cdef char *pybuffer_index(Py_buffer *view, char *bufp, Py_ssize_t index,             # <<<<<<<<<<<<<<
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.pybuffer_index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":929
 * 
 * @cname('__pyx_memslice_transpose')
 * cdef int transpose_memslice(__Pyx_memviewslice *memslice) except -1 nogil:             # <<<<<<<<<<<<<<
 *     cdef int ndim = memslice.memview.view.ndim
 * 
 */

static int __pyx_memslice_transpose(__Pyx_memviewslice *__pyx_v_memslice) {
  int __pyx_v_ndim;
  Py_ssize_t *__pyx_v_shape;
  Py_ssize_t *__pyx_v_strides;
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_r;
  int __pyx_t_1;
  Py_ssize_t *__pyx_t_2;
  long __pyx_t_3;
  long __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif

  /* "View.MemoryView":930
 * @cname('__pyx_memslice_transpose')
 * cdef int transpose_memslice(__Pyx_memviewslice *memslice) except -1 nogil:
 *     cdef int ndim = memslice.memview.view.ndim             # <<<<<<<<<<<<<<
 * 
 *     cdef Py_ssize_t *shape = memslice.shape
 */
  __pyx_t_1 = __pyx_v_memslice->memview->view.ndim;
  __pyx_v_ndim = __pyx_t_1;

  /* "View.MemoryView":932
 *     cdef int ndim = memslice.memview.view.ndim
 * 
 *     cdef Py_ssize_t *shape = memslice.shape             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t *strides = memslice.strides
 * 
 */
  __pyx_t_2 = __pyx_v_memslice->shape;
  __pyx_v_shape = __pyx_t_2;

  /* "View.MemoryView":933
 * 
 *     cdef Py_ssize_t *shape = memslice.shape
 *     cdef Py_ssize_t *strides = memslice.strides             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __pyx_v_memslice->strides;
  __pyx_v_strides = __pyx_t_2;

  /* "View.MemoryView":937
 * 
 *     cdef int i, j
 *     for i in range(ndim // 2):             # <<<<<<<<<<<<<<
 *         j = ndim - 1 - i
 *         strides[i], strides[j] = strides[j], strides[i]
 */
  __pyx_t_3 = __Pyx_div_long(__pyx_v_ndim, 2);
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_1 = 0; __pyx_t_1 < __pyx_t_4; __pyx_t_1+=1) {
    __pyx_v_i = __pyx_t_1;

    /* "View.MemoryView":938
 *     cdef int i, j
 *     for i in range(ndim // 2):
 *         j = ndim - 1 - i             # <<<<<<<<<<<<<<
 *         strides[i], strides[j] = strides[j], strides[i]
 *         shape[i], shape[j] = shape[j], shape[i]
 */
    __pyx_v_j = ((__pyx_v_ndim - 1) - __pyx_v_i);

    /* "View.MemoryView":939
 *     for i in range(ndim // 2):
 *         j = ndim - 1 - i
 *         strides[i], strides[j] = strides[j], strides[i]             # <<<<<<<<<<<<<<
 *         shape[i], shape[j] = shape[j], shape[i]
 * 
 */
    __pyx_t_5 = (__pyx_v_strides[__pyx_v_j]);
    __pyx_t_6 = (__pyx_v_strides[__pyx_v_i]);
    (__pyx_v_strides[__pyx_v_i]) = __pyx_t_5;
    (__pyx_v_strides[__pyx_v_j]) = __pyx_t_6;

    /* "View.MemoryView":940
 *         j = ndim - 1 - i
 *         strides[i], strides[j] = strides[j], strides[i]
 *         shape[i], shape[j] = shape[j], shape[i]             # <<<<<<<<<<<<<<
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:
 */
    __pyx_t_6 = (__pyx_v_shape[__pyx_v_j]);
    __pyx_t_5 = (__pyx_v_shape[__pyx_v_i]);
    (__pyx_v_shape[__pyx_v_i]) = __pyx_t_6;
    (__pyx_v_shape[__pyx_v_j]) = __pyx_t_5;

    /* "View.MemoryView":942
 *         shape[i], shape[j] = shape[j], shape[i]
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:             # <<<<<<<<<<<<<<
 *             _err(PyExc_ValueError, "Cannot transpose memoryview with indirect dimensions")
 * 
 */
    __pyx_t_8 = ((__pyx_v_memslice->suboffsets[__pyx_v_i]) >= 0);
    if (!__pyx_t_8) {
    } else {
      __pyx_t_7 = __pyx_t_8;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_8 = ((__pyx_v_memslice->suboffsets[__pyx_v_j]) >= 0);
    __pyx_t_7 = __pyx_t_8;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_7) {

      /* "View.MemoryView":943
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:
 *             _err(PyExc_ValueError, "Cannot transpose memoryview with indirect dimensions")             # <<<<<<<<<<<<<<
 * 
 *     return 0
 */
      __pyx_t_9 = __pyx_memoryview_err(PyExc_ValueError, __pyx_kp_s_Cannot_transpose_memoryview_with); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(0, 943, __pyx_L1_error)

      /* "View.MemoryView":942
 *         shape[i], shape[j] = shape[j], shape[i]
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:             # <<<<<<<<<<<<<<
 *             _err(PyExc_ValueError, "Cannot transpose memoryview with indirect dimensions")
 * 
 */
    }
  }

  /* "View.MemoryView":945
 *             _err(PyExc_ValueError, "Cannot transpose memoryview with indirect dimensions")
 * 
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "View.MemoryView":929
 * 
 * @cname('__pyx_memslice_transpose')
 * cdef int transpose_memslice(__Pyx_memviewslice *memslice) except -1 nogil:             # <<<<<<<<<<<<<<
 *     cdef int ndim = memslice.memview.view.ndim
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("View.MemoryView.transpose_memslice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":963
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         __PYX_XCLEAR_MEMVIEW(&self.from_slice, 1)
 * 
 */

/* Python wrapper */
static void __pyx_memoryviewslice___dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_memoryviewslice___dealloc__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_memoryviewslice___pyx_pf_15View_dot_MemoryView_16_memoryviewslice___dealloc__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_memoryviewslice___pyx_pf_15View_dot_MemoryView_16_memoryviewslice___dealloc__(struct __pyx_memoryviewslice_obj *__pyx_v_self) {

  /* "View.MemoryView":964
 * 
 *     def __dealloc__(self):
 *         __PYX_XCLEAR_MEMVIEW(&self.from_slice, 1)             # <<<<<<<<<<<<<<
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 */
  __PYX_XCLEAR_MEMVIEW((&__pyx_v_self->from_slice), 1);

  /* "View.MemoryView":963
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         __PYX_XCLEAR_MEMVIEW(&self.from_slice, 1)
 * 
 */

  /* function exit code */
}

/* "View.MemoryView":966
 *         __PYX_XCLEAR_MEMVIEW(&self.from_slice, 1)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         if self.to_object_func != NULL:
 *             return self.to_object_func(itemp)
 */

static PyObject *__pyx_memoryviewslice_convert_item_to_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("convert_item_to_object", 1);

  /* "View.MemoryView":967
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 *         if self.to_object_func != NULL:             # <<<<<<<<<<<<<<
 *             return self.to_object_func(itemp)
 *         else:
 */
  __pyx_t_1 = (__pyx_v_self->to_object_func != NULL);
  if (__pyx_t_1) {

    /* "View.MemoryView":968
 *     cdef convert_item_to_object(self, char *itemp):
 *         if self.to_object_func != NULL:
 *             return self.to_object_func(itemp)             # <<<<<<<<<<<<<<
 *         else:
 *             return memoryview.convert_item_to_object(self, itemp)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_v_self->to_object_func(__pyx_v_itemp); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 968, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":967
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 *         if self.to_object_func != NULL:             # <<<<<<<<<<<<<<
 *             return self.to_object_func(itemp)
 *         else:
 */
  }

  /* "View.MemoryView":970
 *             return self.to_object_func(itemp)
 *         else:
 *             return memoryview.convert_item_to_object(self, itemp)             # <<<<<<<<<<<<<<
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_memoryview_convert_item_to_object(((struct __pyx_memoryview_obj *)__pyx_v_self), __pyx_v_itemp); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 970, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "View.MemoryView":966
 *         __PYX_XCLEAR_MEMVIEW(&self.from_slice, 1)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         if self.to_object_func != NULL:
 *             return self.to_object_func(itemp)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.convert_item_to_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":972
 *             return memoryview.convert_item_to_object(self, itemp)
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         if self.to_dtype_func != NULL:
 *             self.to_dtype_func(itemp, value)
 */

static PyObject *__pyx_memoryviewslice_assign_item_from_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("assign_item_from_object", 1);

  /* "View.MemoryView":973
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 *         if self.to_dtype_func != NULL:             # <<<<<<<<<<<<<<
 *             self.to_dtype_func(itemp, value)
 *         else:
 */
  __pyx_t_1 = (__pyx_v_self->to_dtype_func != NULL);
  if (__pyx_t_1) {

    /* "View.MemoryView":974
 *     cdef assign_item_from_object(self, char *itemp, object value):
 *         if self.to_dtype_func != NULL:
 *             self.to_dtype_func(itemp, value)             # <<<<<<<<<<<<<<
 *         else:
 *             memoryview.assign_item_from_object(self, itemp, value)
 */
    __pyx_t_2 = __pyx_v_self->to_dtype_func(__pyx_v_itemp, __pyx_v_value); if (unlikely(__pyx_t_2 == ((int)0))) __PYX_ERR(0, 974, __pyx_L1_error)

    /* "View.MemoryView":973
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 *         if self.to_dtype_func != NULL:             # <<<<<<<<<<<<<<
 *             self.to_dtype_func(itemp, value)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":976
 *             self.to_dtype_func(itemp, value)
 *         else:
 *             memoryview.assign_item_from_object(self, itemp, value)             # <<<<<<<<<<<<<<
 * 
 *     cdef _get_base(self):
 */
  /*else*/ {
    __pyx_t_3 = __pyx_memoryview_assign_item_from_object(((struct __pyx_memoryview_obj *)__pyx_v_self), __pyx_v_itemp, __pyx_v_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 976, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_L3:;

  /* "View.MemoryView":972
 *             return memoryview.convert_item_to_object(self, itemp)
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         if self.to_dtype_func != NULL:
 *             self.to_dtype_func(itemp, value)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.assign_item_from_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":978
 *             memoryview.assign_item_from_object(self, itemp, value)
 * 
 *     cdef _get_base(self):             # <<<<<<<<<<<<<<
 *         return self.from_object
 * 
 */

static PyObject *__pyx_memoryviewslice__get_base(struct __pyx_memoryviewslice_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_base", 1);

  /* "View.MemoryView":979
 * 
 *     cdef _get_base(self):
 *         return self.from_object             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->from_object);
  __pyx_r = __pyx_v_self->from_object;
  goto __pyx_L0;

  /* "View.MemoryView":978
 *             memoryview.assign_item_from_object(self, itemp, value)
 * 
 *     cdef _get_base(self):             # <<<<<<<<<<<<<<
 *         return self.from_object
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_memoryviewslice_1__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_pw___pyx_memoryviewslice_1__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf___pyx_memoryviewslice___reduce_cython__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_memoryviewslice___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_memoryviewslice_3__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_pw___pyx_memoryviewslice_3__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(0, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf___pyx_memoryviewslice_2__setstate_cython__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_memoryviewslice_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":999
 * 
 * @cname('__pyx_memoryview_fromslice')
 * cdef memoryview_fromslice(__Pyx_memviewslice memviewslice,             # <<<<<<<<<<<<<<
 *                           int ndim,
 *                           object (*to_object_func)(char *),
 */

static PyObject *__pyx_memoryview_fromslice(__Pyx_memviewslice __pyx_v_memviewslice, int __pyx_v_ndim, PyObject *(*__pyx_v_to_object_func)(char *), int (*__pyx_v_to_dtype_func)(char *, PyObject *), int __pyx_v_dtype_is_object) {
  struct __pyx_memoryviewslice_obj *__pyx_v_result = 0;
  Py_ssize_t __pyx_v_suboffset;
  PyObject *__pyx_v_length = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_TypeInfo *__pyx_t_4;
  Py_buffer __pyx_t_5;
  Py_ssize_t *__pyx_t_6;
  Py_ssize_t *__pyx_t_7;
  Py_ssize_t *__pyx_t_8;
  Py_ssize_t __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memoryview_fromslice", 1);

  /* "View.MemoryView":1007
 *     cdef _memoryviewslice result
 * 
 *     if <PyObject *> memviewslice.memview == Py_None:             # <<<<<<<<<<<<<<
 *         return None
 * 
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_memviewslice.memview) == Py_None);
  if (__pyx_t_1) {

    /* "View.MemoryView":1008
 * 
 *     if <PyObject *> memviewslice.memview == Py_None:
 *         return None             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "View.MemoryView":1007
 *     cdef _memoryviewslice result
 * 
 *     if <PyObject *> memviewslice.memview == Py_None:             # <<<<<<<<<<<<<<
 *         return None
 * 
 */
  }

  /* "View.MemoryView":1013
 * 
 * 
 *     result = _memoryviewslice.__new__(_memoryviewslice, None, 0, dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 *     result.from_slice = memviewslice
 */
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_dtype_is_object); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1013, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1013, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, Py_None)) __PYX_ERR(0, 1013, __pyx_L1_error);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_0)) __PYX_ERR(0, 1013, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_2);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2)) __PYX_ERR(0, 1013, __pyx_L1_error);
  __pyx_t_2 = 0;
  __pyx_t_2 = ((PyObject *)__pyx_tp_new__memoryviewslice(((PyTypeObject *)__pyx_memoryviewslice_type), __pyx_t_3, NULL)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1013, __pyx_L1_error)
  __Pyx_GOTREF((PyObject *)__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_result = ((struct __pyx_memoryviewslice_obj *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":1015
 *     result = _memoryviewslice.__new__(_memoryviewslice, None, 0, dtype_is_object)
 * 
 *     result.from_slice = memviewslice             # <<<<<<<<<<<<<<
 *     __PYX_INC_MEMVIEW(&memviewslice, 1)
 * 
 */
  __pyx_v_result->from_slice = __pyx_v_memviewslice;

  /* "View.MemoryView":1016
 * 
 *     result.from_slice = memviewslice
 *     __PYX_INC_MEMVIEW(&memviewslice, 1)             # <<<<<<<<<<<<<<
 * 
 *     result.from_object = (<memoryview> memviewslice.memview)._get_base()
 */
  __PYX_INC_MEMVIEW((&__pyx_v_memviewslice), 1);

  /* "View.MemoryView":1018
 *     __PYX_INC_MEMVIEW(&memviewslice, 1)
 * 
 *     result.from_object = (<memoryview> memviewslice.memview)._get_base()             # <<<<<<<<<<<<<<
 *     result.typeinfo = memviewslice.memview.typeinfo
 * 
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)((struct __pyx_memoryview_obj *)__pyx_v_memviewslice.memview)->__pyx_vtab)->_get_base(((struct __pyx_memoryview_obj *)__pyx_v_memviewslice.memview)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1018, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_result->from_object);
  __Pyx_DECREF(__pyx_v_result->from_object);
  __pyx_v_result->from_object = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "View.MemoryView":1019
 * 
 *     result.from_object = (<memoryview> memviewslice.memview)._get_base()
 *     result.typeinfo = memviewslice.memview.typeinfo             # <<<<<<<<<<<<<<
 * 
 *     result.view = memviewslice.memview.view
 */
  __pyx_t_4 = __pyx_v_memviewslice.memview->typeinfo;
  __pyx_v_result->__pyx_base.typeinfo = __pyx_t_4;

  /* "View.MemoryView":1021
 *     result.typeinfo = memviewslice.memview.typeinfo
 * 
 *     result.view = memviewslice.memview.view             # <<<<<<<<<<<<<<
 *     result.view.buf = <void *> memviewslice.data
 *     result.view.ndim = ndim
 */
  __pyx_t_5 = __pyx_v_memviewslice.memview->view;
  __pyx_v_result->__pyx_base.view = __pyx_t_5;

  /* "View.MemoryView":1022
 * 
 *     result.view = memviewslice.memview.view
 *     result.view.buf = <void *> memviewslice.data             # <<<<<<<<<<<<<<
 *     result.view.ndim = ndim
 *     (<__pyx_buffer *> &result.view).obj = Py_None
 */
  __pyx_v_result->__pyx_base.view.buf = ((void *)__pyx_v_memviewslice.data);

  /* "View.MemoryView":1023
 *     result.view = memviewslice.memview.view
 *     result.view.buf = <void *> memviewslice.data
 *     result.view.ndim = ndim             # <<<<<<<<<<<<<<
 *     (<__pyx_buffer *> &result.view).obj = Py_None
 *     Py_INCREF(Py_None)
 */
  __pyx_v_result->__pyx_base.view.ndim = __pyx_v_ndim;

  /* "View.MemoryView":1024
 *     result.view.buf = <void *> memviewslice.data
 *     result.view.ndim = ndim
 *     (<__pyx_buffer *> &result.view).obj = Py_None             # <<<<<<<<<<<<<<
 *     Py_INCREF(Py_None)
 * 
 */
  ((Py_buffer *)(&__pyx_v_result->__pyx_base.view))->obj = Py_None;

  /* "View.MemoryView":1025
 *     result.view.ndim = ndim
 *     (<__pyx_buffer *> &result.view).obj = Py_None
 *     Py_INCREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *     if (<memoryview>memviewslice.memview).flags & PyBUF_WRITABLE:
 */
  Py_INCREF(Py_None);

  /* "View.MemoryView":1027
 *     Py_INCREF(Py_None)
 * 
 *     if (<memoryview>memviewslice.memview).flags & PyBUF_WRITABLE:             # <<<<<<<<<<<<<<
 *         result.flags = PyBUF_RECORDS
 *     else:
 */
  __pyx_t_1 = ((((struct __pyx_memoryview_obj *)__pyx_v_memviewslice.memview)->flags & PyBUF_WRITABLE) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1028
 * 
 *     if (<memoryview>memviewslice.memview).flags & PyBUF_WRITABLE:
 *         result.flags = PyBUF_RECORDS             # <<<<<<<<<<<<<<
 *     else:
 *         result.flags = PyBUF_RECORDS_RO
 */
    __pyx_v_result->__pyx_base.flags = PyBUF_RECORDS;

    /* "View.MemoryView":1027
 *     Py_INCREF(Py_None)
 * 
 *     if (<memoryview>memviewslice.memview).flags & PyBUF_WRITABLE:             # <<<<<<<<<<<<<<
 *         result.flags = PyBUF_RECORDS
 *     else:
 */
    goto __pyx_L4;
  }

  /* "View.MemoryView":1030
 *         result.flags = PyBUF_RECORDS
 *     else:
 *         result.flags = PyBUF_RECORDS_RO             # <<<<<<<<<<<<<<
 * 
 *     result.view.shape = <Py_ssize_t *> result.from_slice.shape
 */
  /*else*/ {
    __pyx_v_result->__pyx_base.flags = PyBUF_RECORDS_RO;
  }
  __pyx_L4:;

  /* "View.MemoryView":1032
 *         result.flags = PyBUF_RECORDS_RO
 * 
 *     result.view.shape = <Py_ssize_t *> result.from_slice.shape             # <<<<<<<<<<<<<<
 *     result.view.strides = <Py_ssize_t *> result.from_slice.strides
 * 
 */
  __pyx_v_result->__pyx_base.view.shape = ((Py_ssize_t *)__pyx_v_result->from_slice.shape);

  /* "View.MemoryView":1033
 * 
 *     result.view.shape = <Py_ssize_t *> result.from_slice.shape
 *     result.view.strides = <Py_ssize_t *> result.from_slice.strides             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_result->__pyx_base.view.strides = ((Py_ssize_t *)__pyx_v_result->from_slice.strides);

  /* "View.MemoryView":1036
 * 
 * 
 *     result.view.suboffsets = NULL             # <<<<<<<<<<<<<<
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:
 */
  __pyx_v_result->__pyx_base.view.suboffsets = NULL;

  /* "View.MemoryView":1037
 * 
 *     result.view.suboffsets = NULL
 *     for suboffset in result.from_slice.suboffsets[:ndim]:             # <<<<<<<<<<<<<<
 *         if suboffset >= 0:
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 */
  __pyx_t_7 = (__pyx_v_result->from_slice.suboffsets + __pyx_v_ndim);
  for (__pyx_t_8 = __pyx_v_result->from_slice.suboffsets; __pyx_t_8 < __pyx_t_7; __pyx_t_8++) {
    __pyx_t_6 = __pyx_t_8;
    __pyx_v_suboffset = (__pyx_t_6[0]);

    /* "View.MemoryView":1038
 *     result.view.suboffsets = NULL
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 *             break
 */
    __pyx_t_1 = (__pyx_v_suboffset >= 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":1039
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_result->__pyx_base.view.suboffsets = ((Py_ssize_t *)__pyx_v_result->from_slice.suboffsets);

      /* "View.MemoryView":1040
 *         if suboffset >= 0:
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 *             break             # <<<<<<<<<<<<<<
 * 
 *     result.view.len = result.view.itemsize
 */
      goto __pyx_L6_break;

      /* "View.MemoryView":1038
 *     result.view.suboffsets = NULL
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 *             break
 */
    }
  }
  __pyx_L6_break:;

  /* "View.MemoryView":1042
 *             break
 * 
 *     result.view.len = result.view.itemsize             # <<<<<<<<<<<<<<
 *     for length in result.view.shape[:ndim]:
 *         result.view.len *= length
 */
  __pyx_t_9 = __pyx_v_result->__pyx_base.view.itemsize;
  __pyx_v_result->__pyx_base.view.len = __pyx_t_9;

  /* "View.MemoryView":1043
 * 
 *     result.view.len = result.view.itemsize
 *     for length in result.view.shape[:ndim]:             # <<<<<<<<<<<<<<
 *         result.view.len *= length
 * 
 */
  __pyx_t_7 = (__pyx_v_result->__pyx_base.view.shape + __pyx_v_ndim);
  for (__pyx_t_8 = __pyx_v_result->__pyx_base.view.shape; __pyx_t_8 < __pyx_t_7; __pyx_t_8++) {
    __pyx_t_6 = __pyx_t_8;
    __pyx_t_2 = PyInt_FromSsize_t((__pyx_t_6[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1043, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_length, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "View.MemoryView":1044
 *     result.view.len = result.view.itemsize
 *     for length in result.view.shape[:ndim]:
 *         result.view.len *= length             # <<<<<<<<<<<<<<
 * 
 *     result.to_object_func = to_object_func
 */
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_result->__pyx_base.view.len); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1044, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyNumber_InPlaceMultiply(__pyx_t_2, __pyx_v_length); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1044, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_t_3); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1044, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_result->__pyx_base.view.len = __pyx_t_9;
  }

  /* "View.MemoryView":1046
 *         result.view.len *= length
 * 
 *     result.to_object_func = to_object_func             # <<<<<<<<<<<<<<
 *     result.to_dtype_func = to_dtype_func
 * 
 */
  __pyx_v_result->to_object_func = __pyx_v_to_object_func;

  /* "View.MemoryView":1047
 * 
 *     result.to_object_func = to_object_func
 *     result.to_dtype_func = to_dtype_func             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
  __pyx_v_result->to_dtype_func = __pyx_v_to_dtype_func;

  /* "View.MemoryView":1049
 *     result.to_dtype_func = to_dtype_func
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_get_slice_from_memoryview')
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_result);
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "View.MemoryView":999
 * 
 * @cname('__pyx_memoryview_fromslice')
 * cdef memoryview_fromslice(__Pyx_memviewslice memviewslice,             # <<<<<<<<<<<<<<
 *                           int ndim,
 *                           object (*to_object_func)(char *),
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview_fromslice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_length);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1052
 * 
 * @cname('__pyx_memoryview_get_slice_from_memoryview')
 * cdef __Pyx_memviewslice *get_slice_from_memview(memoryview memview,             # <<<<<<<<<<<<<<
 *                                                    __Pyx_memviewslice *mslice) except NULL:
 *     cdef _memoryviewslice obj
 */

static __Pyx_memviewslice *__pyx_memoryview_get_slice_from_memoryview(struct __pyx_memoryview_obj *__pyx_v_memview, __Pyx_memviewslice *__pyx_v_mslice) {
  struct __pyx_memoryviewslice_obj *__pyx_v_obj = 0;
  __Pyx_memviewslice *__pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_slice_from_memview", 1);

  /* "View.MemoryView":1055
 *                                                    __Pyx_memviewslice *mslice) except NULL:
 *     cdef _memoryviewslice obj
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         obj = memview
 *         return &obj.from_slice
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 
  if (__pyx_t_1) {

    /* "View.MemoryView":1056
 *     cdef _memoryviewslice obj
 *     if isinstance(memview, _memoryviewslice):
 *         obj = memview             # <<<<<<<<<<<<<<
 *         return &obj.from_slice
 *     else:
 */
    if (!(likely(((((PyObject *)__pyx_v_memview)) == Py_None) || likely(__Pyx_TypeTest(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type))))) __PYX_ERR(0, 1056, __pyx_L1_error)
    __pyx_t_2 = ((PyObject *)__pyx_v_memview);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v_obj = ((struct __pyx_memoryviewslice_obj *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "View.MemoryView":1057
 *     if isinstance(memview, _memoryviewslice):
 *         obj = memview
 *         return &obj.from_slice             # <<<<<<<<<<<<<<
 *     else:
 *         slice_copy(memview, mslice)
 */
    __pyx_r = (&__pyx_v_obj->from_slice);
    goto __pyx_L0;

    /* "View.MemoryView":1055
 *                                                    __Pyx_memviewslice *mslice) except NULL:
 *     cdef _memoryviewslice obj
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         obj = memview
 *         return &obj.from_slice
 */
  }

  /* "View.MemoryView":1059
 *         return &obj.from_slice
 *     else:
 *         slice_copy(memview, mslice)             # <<<<<<<<<<<<<<
 *         return mslice
 * 
 */
  /*else*/ {
    __pyx_memoryview_slice_copy(__pyx_v_memview, __pyx_v_mslice);

    /* "View.MemoryView":1060
 *     else:
 *         slice_copy(memview, mslice)
 *         return mslice             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_slice_copy')
 */
    __pyx_r = __pyx_v_mslice;
    goto __pyx_L0;
  }

  /* "View.MemoryView":1052
 * 
 * @cname('__pyx_memoryview_get_slice_from_memoryview')
 * cdef __Pyx_memviewslice *get_slice_from_memview(memoryview memview,             # <<<<<<<<<<<<<<
 *                                                    __Pyx_memviewslice *mslice) except NULL:
 *     cdef _memoryviewslice obj
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.get_slice_from_memview", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_obj);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1063
 * 
 * @cname('__pyx_memoryview_slice_copy')
 * cdef void slice_copy(memoryview memview, __Pyx_memviewslice *dst) noexcept:             # <<<<<<<<<<<<<<
 *     cdef int dim
 *     cdef (Py_ssize_t*) shape, strides, suboffsets
 */

static void __pyx_memoryview_slice_copy(struct __pyx_memoryview_obj *__pyx_v_memview, __Pyx_memviewslice *__pyx_v_dst) {
  int __pyx_v_dim;
  Py_ssize_t *__pyx_v_shape;
  Py_ssize_t *__pyx_v_strides;
  Py_ssize_t *__pyx_v_suboffsets;
  Py_ssize_t *__pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;

  /* "View.MemoryView":1067
 *     cdef (Py_ssize_t*) shape, strides, suboffsets
 * 
 *     shape = memview.view.shape             # <<<<<<<<<<<<<<
 *     strides = memview.view.strides
 *     suboffsets = memview.view.suboffsets
 */
  __pyx_t_1 = __pyx_v_memview->view.shape;
  __pyx_v_shape = __pyx_t_1;

  /* "View.MemoryView":1068
 * 
 *     shape = memview.view.shape
 *     strides = memview.view.strides             # <<<<<<<<<<<<<<
 *     suboffsets = memview.view.suboffsets
 * 
 */
  __pyx_t_1 = __pyx_v_memview->view.strides;
  __pyx_v_strides = __pyx_t_1;

  /* "View.MemoryView":1069
 *     shape = memview.view.shape
 *     strides = memview.view.strides
 *     suboffsets = memview.view.suboffsets             # <<<<<<<<<<<<<<
 * 
 *     dst.memview = <__pyx_memoryview *> memview
 */
  __pyx_t_1 = __pyx_v_memview->view.suboffsets;
  __pyx_v_suboffsets = __pyx_t_1;

  /* "View.MemoryView":1071
 *     suboffsets = memview.view.suboffsets
 * 
 *     dst.memview = <__pyx_memoryview *> memview             # <<<<<<<<<<<<<<
 *     dst.data = <char *> memview.view.buf
 * 
 */
  __pyx_v_dst->memview = ((struct __pyx_memoryview_obj *)__pyx_v_memview);

  /* "View.MemoryView":1072
 * 
 *     dst.memview = <__pyx_memoryview *> memview
 *     dst.data = <char *> memview.view.buf             # <<<<<<<<<<<<<<
 * 
 *     for dim in range(memview.view.ndim):
 */
  __pyx_v_dst->data = ((char *)__pyx_v_memview->view.buf);

  /* "View.MemoryView":1074
 *     dst.data = <char *> memview.view.buf
 * 
 *     for dim in range(memview.view.ndim):             # <<<<<<<<<<<<<<
 *         dst.shape[dim] = shape[dim]
 *         dst.strides[dim] = strides[dim]
 */
  __pyx_t_2 = __pyx_v_memview->view.ndim;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_dim = __pyx_t_4;

    /* "View.MemoryView":1075
 * 
 *     for dim in range(memview.view.ndim):
 *         dst.shape[dim] = shape[dim]             # <<<<<<<<<<<<<<
 *         dst.strides[dim] = strides[dim]
 *         dst.suboffsets[dim] = suboffsets[dim] if suboffsets else -1
 */
    (__pyx_v_dst->shape[__pyx_v_dim]) = (__pyx_v_shape[__pyx_v_dim]);

    /* "View.MemoryView":1076
 *     for dim in range(memview.view.ndim):
 *         dst.shape[dim] = shape[dim]
 *         dst.strides[dim] = strides[dim]             # <<<<<<<<<<<<<<
 *         dst.suboffsets[dim] = suboffsets[dim] if suboffsets else -1
 * 
 */
    (__pyx_v_dst->strides[__pyx_v_dim]) = (__pyx_v_strides[__pyx_v_dim]);

    /* "View.MemoryView":1077
 *         dst.shape[dim] = shape[dim]
 *         dst.strides[dim] = strides[dim]
 *         dst.suboffsets[dim] = suboffsets[dim] if suboffsets else -1             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_object')
 */
    __pyx_t_6 = (__pyx_v_suboffsets != 0);
    if (__pyx_t_6) {
      __pyx_t_5 = (__pyx_v_suboffsets[__pyx_v_dim]);
    } else {
      __pyx_t_5 = -1L;
    }
    (__pyx_v_dst->suboffsets[__pyx_v_dim]) = __pyx_t_5;
  }

  /* "View.MemoryView":1063
 * 
 * @cname('__pyx_memoryview_slice_copy')
 * cdef void slice_copy(memoryview memview, __Pyx_memviewslice *dst) noexcept:             # <<<<<<<<<<<<<<
 *     cdef int dim
 *     cdef (Py_ssize_t*) shape, strides, suboffsets
 */

  /* function exit code */
}

/* "View.MemoryView":1080
 * 
 * @cname('__pyx_memoryview_copy_object')
 * cdef memoryview_copy(memoryview memview):             # <<<<<<<<<<<<<<
 *     "Create a new memoryview object"
 *     cdef __Pyx_memviewslice memviewslice
 */

static PyObject *__pyx_memoryview_copy_object(struct __pyx_memoryview_obj *__pyx_v_memview) {
  __Pyx_memviewslice __pyx_v_memviewslice;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memoryview_copy", 1);

  /* "View.MemoryView":1083
 *     "Create a new memoryview object"
 *     cdef __Pyx_memviewslice memviewslice
 *     slice_copy(memview, &memviewslice)             # <<<<<<<<<<<<<<
 *     return memoryview_copy_from_slice(memview, &memviewslice)
 * 
 */
  __pyx_memoryview_slice_copy(__pyx_v_memview, (&__pyx_v_memviewslice));

  /* "View.MemoryView":1084
 *     cdef __Pyx_memviewslice memviewslice
 *     slice_copy(memview, &memviewslice)
 *     return memoryview_copy_from_slice(memview, &memviewslice)             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_object_from_slice')
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_memoryview_copy_object_from_slice(__pyx_v_memview, (&__pyx_v_memviewslice)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1084, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":1080
 * 
 * @cname('__pyx_memoryview_copy_object')
 * cdef memoryview_copy(memoryview memview):             # <<<<<<<<<<<<<<
 *     "Create a new memoryview object"
 *     cdef __Pyx_memviewslice memviewslice
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview_copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1087
 * 
 * @cname('__pyx_memoryview_copy_object_from_slice')
 * cdef memoryview_copy_from_slice(memoryview memview, __Pyx_memviewslice *memviewslice):             # <<<<<<<<<<<<<<
 *     """
 *     Create a new memoryview object from a given memoryview object and slice.
 */

static PyObject *__pyx_memoryview_copy_object_from_slice(struct __pyx_memoryview_obj *__pyx_v_memview, __Pyx_memviewslice *__pyx_v_memviewslice) {
  PyObject *(*__pyx_v_to_object_func)(char *);
  int (*__pyx_v_to_dtype_func)(char *, PyObject *);
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *(*__pyx_t_2)(char *);
  int (*__pyx_t_3)(char *, PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memoryview_copy_from_slice", 1);

  /* "View.MemoryView":1094
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         to_object_func = (<_memoryviewslice> memview).to_object_func
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 
  if (__pyx_t_1) {

    /* "View.MemoryView":1095
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         to_object_func = (<_memoryviewslice> memview).to_object_func             # <<<<<<<<<<<<<<
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 *     else:
 */
    __pyx_t_2 = ((struct __pyx_memoryviewslice_obj *)__pyx_v_memview)->to_object_func;
    __pyx_v_to_object_func = __pyx_t_2;

    /* "View.MemoryView":1096
 *     if isinstance(memview, _memoryviewslice):
 *         to_object_func = (<_memoryviewslice> memview).to_object_func
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func             # <<<<<<<<<<<<<<
 *     else:
 *         to_object_func = NULL
 */
    __pyx_t_3 = ((struct __pyx_memoryviewslice_obj *)__pyx_v_memview)->to_dtype_func;
    __pyx_v_to_dtype_func = __pyx_t_3;

    /* "View.MemoryView":1094
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         to_object_func = (<_memoryviewslice> memview).to_object_func
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1098
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 *     else:
 *         to_object_func = NULL             # <<<<<<<<<<<<<<
 *         to_dtype_func = NULL
 * 
 */
  /*else*/ {
    __pyx_v_to_object_func = NULL;

    /* "View.MemoryView":1099
 *     else:
 *         to_object_func = NULL
 *         to_dtype_func = NULL             # <<<<<<<<<<<<<<
 * 
 *     return memoryview_fromslice(memviewslice[0], memview.view.ndim,
 */
    __pyx_v_to_dtype_func = NULL;
  }
  __pyx_L3:;

  /* "View.MemoryView":1101
 *         to_dtype_func = NULL
 * 
 *     return memoryview_fromslice(memviewslice[0], memview.view.ndim,             # <<<<<<<<<<<<<<
 *                                 to_object_func, to_dtype_func,
 *                                 memview.dtype_is_object)
 */
  __Pyx_XDECREF(__pyx_r);

  /* "View.MemoryView":1103
 *     return memoryview_fromslice(memviewslice[0], memview.view.ndim,
 *                                 to_object_func, to_dtype_func,
 *                                 memview.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_4 = __pyx_memoryview_fromslice((__pyx_v_memviewslice[0]), __pyx_v_memview->view.ndim, __pyx_v_to_object_func, __pyx_v_to_dtype_func, __pyx_v_memview->dtype_is_object); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":1087
 * 
 * @cname('__pyx_memoryview_copy_object_from_slice')
 * cdef memoryview_copy_from_slice(memoryview memview, __Pyx_memviewslice *memviewslice):             # <<<<<<<<<<<<<<
 *     """
 *     Create a new memoryview object from a given memoryview object and slice.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView.memoryview_copy_from_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1109
 * 
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) noexcept nogil:             # <<<<<<<<<<<<<<
 *     return -arg if arg < 0 else arg
 * 
 */

static Py_ssize_t abs_py_ssize_t(Py_ssize_t __pyx_v_arg) {
  Py_ssize_t __pyx_r;
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;

  /* "View.MemoryView":1110
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) noexcept nogil:
 *     return -arg if arg < 0 else arg             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_get_best_slice_order')
 */
  __pyx_t_2 = (__pyx_v_arg < 0);
  if (__pyx_t_2) {
    __pyx_t_1 = (-__pyx_v_arg);
  } else {
    __pyx_t_1 = __pyx_v_arg;
  }
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "View.MemoryView":1109
 * 
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) noexcept nogil:             # <<<<<<<<<<<<<<
 *     return -arg if arg < 0 else arg
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1113
 * 
 * @cname('__pyx_get_best_slice_order')
 * cdef char get_best_order(__Pyx_memviewslice *mslice, int ndim) noexcept nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Figure out the best memory access order for a given slice.
 */

static char __pyx_get_best_slice_order(__Pyx_memviewslice *__pyx_v_mslice, int __pyx_v_ndim) {
  int __pyx_v_i;
  Py_ssize_t __pyx_v_c_stride;
  Py_ssize_t __pyx_v_f_stride;
  char __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;

  /* "View.MemoryView":1118
 *     """
 *     cdef int i
 *     cdef Py_ssize_t c_stride = 0             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t f_stride = 0
 * 
 */
  __pyx_v_c_stride = 0;

  /* "View.MemoryView":1119
 *     cdef int i
 *     cdef Py_ssize_t c_stride = 0
 *     cdef Py_ssize_t f_stride = 0             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim - 1, -1, -1):
 */
  __pyx_v_f_stride = 0;

  /* "View.MemoryView":1121
 *     cdef Py_ssize_t f_stride = 0
 * 
 *     for i in range(ndim - 1, -1, -1):             # <<<<<<<<<<<<<<
 *         if mslice.shape[i] > 1:
 *             c_stride = mslice.strides[i]
 */
  for (__pyx_t_1 = (__pyx_v_ndim - 1); __pyx_t_1 > -1; __pyx_t_1-=1) {
    __pyx_v_i = __pyx_t_1;

    /* "View.MemoryView":1122
 * 
 *     for i in range(ndim - 1, -1, -1):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             c_stride = mslice.strides[i]
 *             break
 */
    __pyx_t_2 = ((__pyx_v_mslice->shape[__pyx_v_i]) > 1);
    if (__pyx_t_2) {

      /* "View.MemoryView":1123
 *     for i in range(ndim - 1, -1, -1):
 *         if mslice.shape[i] > 1:
 *             c_stride = mslice.strides[i]             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_c_stride = (__pyx_v_mslice->strides[__pyx_v_i]);

      /* "View.MemoryView":1124
 *         if mslice.shape[i] > 1:
 *             c_stride = mslice.strides[i]
 *             break             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim):
 */
      goto __pyx_L4_break;

      /* "View.MemoryView":1122
 * 
 *     for i in range(ndim - 1, -1, -1):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             c_stride = mslice.strides[i]
 *             break
 */
    }
  }
  __pyx_L4_break:;

  /* "View.MemoryView":1126
 *             break
 * 
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         if mslice.shape[i] > 1:
 *             f_stride = mslice.strides[i]
 */
  __pyx_t_1 = __pyx_v_ndim;
  __pyx_t_3 = __pyx_t_1;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "View.MemoryView":1127
 * 
 *     for i in range(ndim):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             f_stride = mslice.strides[i]
 *             break
 */
    __pyx_t_2 = ((__pyx_v_mslice->shape[__pyx_v_i]) > 1);
    if (__pyx_t_2) {

      /* "View.MemoryView":1128
 *     for i in range(ndim):
 *         if mslice.shape[i] > 1:
 *             f_stride = mslice.strides[i]             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_f_stride = (__pyx_v_mslice->strides[__pyx_v_i]);

      /* "View.MemoryView":1129
 *         if mslice.shape[i] > 1:
 *             f_stride = mslice.strides[i]
 *             break             # <<<<<<<<<<<<<<
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):
 */
      goto __pyx_L7_break;

      /* "View.MemoryView":1127
 * 
 *     for i in range(ndim):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             f_stride = mslice.strides[i]
 *             break
 */
    }
  }
  __pyx_L7_break:;

  /* "View.MemoryView":1131
 *             break
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):             # <<<<<<<<<<<<<<
 *         return 'C'
 *     else:
 */
  __pyx_t_2 = (abs_py_ssize_t(__pyx_v_c_stride) <= abs_py_ssize_t(__pyx_v_f_stride));
  if (__pyx_t_2) {

    /* "View.MemoryView":1132
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):
 *         return 'C'             # <<<<<<<<<<<<<<
 *     else:
 *         return 'F'
 */
    __pyx_r = 'C';
    goto __pyx_L0;

    /* "View.MemoryView":1131
 *             break
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):             # <<<<<<<<<<<<<<
 *         return 'C'
 *     else:
 */
  }

  /* "View.MemoryView":1134
 *         return 'C'
 *     else:
 *         return 'F'             # <<<<<<<<<<<<<<
 * 
 * @cython.cdivision(True)
 */
  /*else*/ {
    __pyx_r = 'F';
    goto __pyx_L0;
  }

  /* "View.MemoryView":1113
 * 
 * @cname('__pyx_get_best_slice_order')
 * cdef char get_best_order(__Pyx_memviewslice *mslice, int ndim) noexcept nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Figure out the best memory access order for a given slice.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1137
 * 
 * @cython.cdivision(True)
 * cdef void _copy_strided_to_strided(char *src_data, Py_ssize_t *src_strides,             # <<<<<<<<<<<<<<
 *                                    char *dst_data, Py_ssize_t *dst_strides,
 *                                    Py_ssize_t *src_shape, Py_ssize_t *dst_shape,
 */

static void _copy_strided_to_strided(char *__pyx_v_src_data, Py_ssize_t *__pyx_v_src_strides, char *__pyx_v_dst_data, Py_ssize_t *__pyx_v_dst_strides, Py_ssize_t *__pyx_v_src_shape, Py_ssize_t *__pyx_v_dst_shape, int __pyx_v_ndim, size_t __pyx_v_itemsize) {
  CYTHON_UNUSED Py_ssize_t __pyx_v_i;
  CYTHON_UNUSED Py_ssize_t __pyx_v_src_extent;
  Py_ssize_t __pyx_v_dst_extent;
  Py_ssize_t __pyx_v_src_stride;
  Py_ssize_t __pyx_v_dst_stride;
  int __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;

  /* "View.MemoryView":1144
 * 
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t src_extent = src_shape[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t dst_extent = dst_shape[0]
 *     cdef Py_ssize_t src_stride = src_strides[0]
 */
  __pyx_v_src_extent = (__pyx_v_src_shape[0]);

  /* "View.MemoryView":1145
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t src_extent = src_shape[0]
 *     cdef Py_ssize_t dst_extent = dst_shape[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t src_stride = src_strides[0]
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 */
  __pyx_v_dst_extent = (__pyx_v_dst_shape[0]);

  /* "View.MemoryView":1146
 *     cdef Py_ssize_t src_extent = src_shape[0]
 *     cdef Py_ssize_t dst_extent = dst_shape[0]
 *     cdef Py_ssize_t src_stride = src_strides[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 * 
 */
  __pyx_v_src_stride = (__pyx_v_src_strides[0]);

  /* "View.MemoryView":1147
 *     cdef Py_ssize_t dst_extent = dst_shape[0]
 *     cdef Py_ssize_t src_stride = src_strides[0]
 *     cdef Py_ssize_t dst_stride = dst_strides[0]             # <<<<<<<<<<<<<<
 * 
 *     if ndim == 1:
 */
  __pyx_v_dst_stride = (__pyx_v_dst_strides[0]);

  /* "View.MemoryView":1149
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *         if (src_stride > 0 and dst_stride > 0 and
 *             <size_t> src_stride == itemsize == <size_t> dst_stride):
 */
  __pyx_t_1 = (__pyx_v_ndim == 1);
  if (__pyx_t_1) {

    /* "View.MemoryView":1150
 * 
 *     if ndim == 1:
 *         if (src_stride > 0 and dst_stride > 0 and             # <<<<<<<<<<<<<<
 *             <size_t> src_stride == itemsize == <size_t> dst_stride):
 *             memcpy(dst_data, src_data, itemsize * dst_extent)
 */
    __pyx_t_2 = (__pyx_v_src_stride > 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_2 = (__pyx_v_dst_stride > 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L5_bool_binop_done;
    }

    /* "View.MemoryView":1151
 *     if ndim == 1:
 *         if (src_stride > 0 and dst_stride > 0 and
 *             <size_t> src_stride == itemsize == <size_t> dst_stride):             # <<<<<<<<<<<<<<
 *             memcpy(dst_data, src_data, itemsize * dst_extent)
 *         else:
 */
    __pyx_t_2 = (((size_t)__pyx_v_src_stride) == __pyx_v_itemsize);
    if (__pyx_t_2) {
      __pyx_t_2 = (__pyx_v_itemsize == ((size_t)__pyx_v_dst_stride));
    }
    __pyx_t_1 = __pyx_t_2;
    __pyx_L5_bool_binop_done:;

    /* "View.MemoryView":1150
 * 
 *     if ndim == 1:
 *         if (src_stride > 0 and dst_stride > 0 and             # <<<<<<<<<<<<<<
 *             <size_t> src_stride == itemsize == <size_t> dst_stride):
 *             memcpy(dst_data, src_data, itemsize * dst_extent)
 */
    if (__pyx_t_1) {

      /* "View.MemoryView":1152
 *         if (src_stride > 0 and dst_stride > 0 and
 *             <size_t> src_stride == itemsize == <size_t> dst_stride):
 *             memcpy(dst_data, src_data, itemsize * dst_extent)             # <<<<<<<<<<<<<<
 *         else:
 *             for i in range(dst_extent):
 */
      (void)(memcpy(__pyx_v_dst_data, __pyx_v_src_data, (__pyx_v_itemsize * __pyx_v_dst_extent)));

      /* "View.MemoryView":1150
 * 
 *     if ndim == 1:
 *         if (src_stride > 0 and dst_stride > 0 and             # <<<<<<<<<<<<<<
 *             <size_t> src_stride == itemsize == <size_t> dst_stride):
 *             memcpy(dst_data, src_data, itemsize * dst_extent)
 */
      goto __pyx_L4;
    }

    /* "View.MemoryView":1154
 *             memcpy(dst_data, src_data, itemsize * dst_extent)
 *         else:
 *             for i in range(dst_extent):             # <<<<<<<<<<<<<<
 *                 memcpy(dst_data, src_data, itemsize)
 *                 src_data += src_stride
 */
    /*else*/ {
      __pyx_t_3 = __pyx_v_dst_extent;
      __pyx_t_4 = __pyx_t_3;
      for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
        __pyx_v_i = __pyx_t_5;

        /* "View.MemoryView":1155
 *         else:
 *             for i in range(dst_extent):
 *                 memcpy(dst_data, src_data, itemsize)             # <<<<<<<<<<<<<<
 *                 src_data += src_stride
 *                 dst_data += dst_stride
 */
        (void)(memcpy(__pyx_v_dst_data, __pyx_v_src_data, __pyx_v_itemsize));

        /* "View.MemoryView":1156
 *             for i in range(dst_extent):
 *                 memcpy(dst_data, src_data, itemsize)
 *                 src_data += src_stride             # <<<<<<<<<<<<<<
 *                 dst_data += dst_stride
 *     else:
 */
        __pyx_v_src_data = (__pyx_v_src_data + __pyx_v_src_stride);

        /* "View.MemoryView":1157
 *                 memcpy(dst_data, src_data, itemsize)
 *                 src_data += src_stride
 *                 dst_data += dst_stride             # <<<<<<<<<<<<<<
 *     else:
 *         for i in range(dst_extent):
 */
        __pyx_v_dst_data = (__pyx_v_dst_data + __pyx_v_dst_stride);
      }
    }
    __pyx_L4:;

    /* "View.MemoryView":1149
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *         if (src_stride > 0 and dst_stride > 0 and
 *             <size_t> src_stride == itemsize == <size_t> dst_stride):
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1159
 *                 dst_data += dst_stride
 *     else:
 *         for i in range(dst_extent):             # <<<<<<<<<<<<<<
 *             _copy_strided_to_strided(src_data, src_strides + 1,
 *                                      dst_data, dst_strides + 1,
 */
  /*else*/ {
    __pyx_t_3 = __pyx_v_dst_extent;
    __pyx_t_4 = __pyx_t_3;
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
      __pyx_v_i = __pyx_t_5;

      /* "View.MemoryView":1160
 *     else:
 *         for i in range(dst_extent):
 *             _copy_strided_to_strided(src_data, src_strides + 1,             # <<<<<<<<<<<<<<
 *                                      dst_data, dst_strides + 1,
 *                                      src_shape + 1, dst_shape + 1,
 */
      _copy_strided_to_strided(__pyx_v_src_data, (__pyx_v_src_strides + 1), __pyx_v_dst_data, (__pyx_v_dst_strides + 1), (__pyx_v_src_shape + 1), (__pyx_v_dst_shape + 1), (__pyx_v_ndim - 1), __pyx_v_itemsize);

      /* "View.MemoryView":1164
 *                                      src_shape + 1, dst_shape + 1,
 *                                      ndim - 1, itemsize)
 *             src_data += src_stride             # <<<<<<<<<<<<<<
 *             dst_data += dst_stride
 * 
 */
      __pyx_v_src_data = (__pyx_v_src_data + __pyx_v_src_stride);

      /* "View.MemoryView":1165
 *                                      ndim - 1, itemsize)
 *             src_data += src_stride
 *             dst_data += dst_stride             # <<<<<<<<<<<<<<
 * 
 * cdef void copy_strided_to_strided(__Pyx_memviewslice *src,
 */
      __pyx_v_dst_data = (__pyx_v_dst_data + __pyx_v_dst_stride);
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":1137
 * 
 * @cython.cdivision(True)
 * cdef void _copy_strided_to_strided(char *src_data, Py_ssize_t *src_strides,             # <<<<<<<<<<<<<<
 *                                    char *dst_data, Py_ssize_t *dst_strides,
 *                                    Py_ssize_t *src_shape, Py_ssize_t *dst_shape,
 */

  /* function exit code */
}

/* "View.MemoryView":1167
 *             dst_data += dst_stride
 * 
 * cdef void copy_strided_to_strided(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice *dst,
 *                                   int ndim, size_t itemsize) noexcept nogil:
 */

static void copy_strided_to_strided(__Pyx_memviewslice *__pyx_v_src, __Pyx_memviewslice *__pyx_v_dst, int __pyx_v_ndim, size_t __pyx_v_itemsize) {

  /* "View.MemoryView":1170
 *                                   __Pyx_memviewslice *dst,
 *                                   int ndim, size_t itemsize) noexcept nogil:
 *     _copy_strided_to_strided(src.data, src.strides, dst.data, dst.strides,             # <<<<<<<<<<<<<<
 *                              src.shape, dst.shape, ndim, itemsize)
 * 
 */
  _copy_strided_to_strided(__pyx_v_src->data, __pyx_v_src->strides, __pyx_v_dst->data, __pyx_v_dst->strides, __pyx_v_src->shape, __pyx_v_dst->shape, __pyx_v_ndim, __pyx_v_itemsize);

  /* "View.MemoryView":1167
 *             dst_data += dst_stride
 * 
 * cdef void copy_strided_to_strided(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice *dst,
 *                                   int ndim, size_t itemsize) noexcept nogil:
 */

  /* function exit code */
}

/* "View.MemoryView":1174
 * 
 * @cname('__pyx_memoryview_slice_get_size')
 * cdef Py_ssize_t slice_get_size(__Pyx_memviewslice *src, int ndim) noexcept nogil:             # <<<<<<<<<<<<<<
 *     "Return the size of the memory occupied by the slice in number of bytes"
 *     cdef Py_ssize_t shape, size = src.memview.view.itemsize
 */

static Py_ssize_t __pyx_memoryview_slice_get_size(__Pyx_memviewslice *__pyx_v_src, int __pyx_v_ndim) {
  Py_ssize_t __pyx_v_shape;
  Py_ssize_t __pyx_v_size;
  Py_ssize_t __pyx_r;
  Py_ssize_t __pyx_t_1;
  Py_ssize_t *__pyx_t_2;
  Py_ssize_t *__pyx_t_3;
  Py_ssize_t *__pyx_t_4;

  /* "View.MemoryView":1176
 * cdef Py_ssize_t slice_get_size(__Pyx_memviewslice *src, int ndim) noexcept nogil:
 *     "Return the size of the memory occupied by the slice in number of bytes"
 *     cdef Py_ssize_t shape, size = src.memview.view.itemsize             # <<<<<<<<<<<<<<
 * 
 *     for shape in src.shape[:ndim]:
 */
  __pyx_t_1 = __pyx_v_src->memview->view.itemsize;
  __pyx_v_size = __pyx_t_1;

  /* "View.MemoryView":1178
 *     cdef Py_ssize_t shape, size = src.memview.view.itemsize
 * 
 *     for shape in src.shape[:ndim]:             # <<<<<<<<<<<<<<
 *         size *= shape
 * 
 */
  __pyx_t_3 = (__pyx_v_src->shape + __pyx_v_ndim);
  for (__pyx_t_4 = __pyx_v_src->shape; __pyx_t_4 < __pyx_t_3; __pyx_t_4++) {
    __pyx_t_2 = __pyx_t_4;
    __pyx_v_shape = (__pyx_t_2[0]);

    /* "View.MemoryView":1179
 * 
 *     for shape in src.shape[:ndim]:
 *         size *= shape             # <<<<<<<<<<<<<<
 * 
 *     return size
 */
    __pyx_v_size = (__pyx_v_size * __pyx_v_shape);
  }

  /* "View.MemoryView":1181
 *         size *= shape
 * 
 *     return size             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_fill_contig_strides_array')
 */
  __pyx_r = __pyx_v_size;
  goto __pyx_L0;

  /* "View.MemoryView":1174
 * 
 * @cname('__pyx_memoryview_slice_get_size')
 * cdef Py_ssize_t slice_get_size(__Pyx_memviewslice *src, int ndim) noexcept nogil:             # <<<<<<<<<<<<<<
 *     "Return the size of the memory occupied by the slice in number of bytes"
 *     cdef Py_ssize_t shape, size = src.memview.view.itemsize
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1184
 * 
 * @cname('__pyx_fill_contig_strides_array')
 * cdef Py_ssize_t fill_contig_strides_array(             # <<<<<<<<<<<<<<
 *                 Py_ssize_t *shape, Py_ssize_t *strides, Py_ssize_t stride,
 *                 int ndim, char order) noexcept nogil:
 */

static Py_ssize_t __pyx_fill_contig_strides_array(Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, Py_ssize_t __pyx_v_stride, int __pyx_v_ndim, char __pyx_v_order) {
  int __pyx_v_idx;
  Py_ssize_t __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;

  /* "View.MemoryView":1193
 *     cdef int idx
 * 
 *     if order == 'F':             # <<<<<<<<<<<<<<
 *         for idx in range(ndim):
 *             strides[idx] = stride
 */
  __pyx_t_1 = (__pyx_v_order == 'F');
  if (__pyx_t_1) {

    /* "View.MemoryView":1194
 * 
 *     if order == 'F':
 *         for idx in range(ndim):             # <<<<<<<<<<<<<<
 *             strides[idx] = stride
 *             stride *= shape[idx]
 */
    __pyx_t_2 = __pyx_v_ndim;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_idx = __pyx_t_4;

      /* "View.MemoryView":1195
 *     if order == 'F':
 *         for idx in range(ndim):
 *             strides[idx] = stride             # <<<<<<<<<<<<<<
 *             stride *= shape[idx]
 *     else:
 */
      (__pyx_v_strides[__pyx_v_idx]) = __pyx_v_stride;

      /* "View.MemoryView":1196
 *         for idx in range(ndim):
 *             strides[idx] = stride
 *             stride *= shape[idx]             # <<<<<<<<<<<<<<
 *     else:
 *         for idx in range(ndim - 1, -1, -1):
 */
      __pyx_v_stride = (__pyx_v_stride * (__pyx_v_shape[__pyx_v_idx]));
    }

    /* "View.MemoryView":1193
 *     cdef int idx
 * 
 *     if order == 'F':             # <<<<<<<<<<<<<<
 *         for idx in range(ndim):
 *             strides[idx] = stride
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1198
 *             stride *= shape[idx]
 *     else:
 *         for idx in range(ndim - 1, -1, -1):             # <<<<<<<<<<<<<<
 *             strides[idx] = stride
 *             stride *= shape[idx]
 */
  /*else*/ {
    for (__pyx_t_2 = (__pyx_v_ndim - 1); __pyx_t_2 > -1; __pyx_t_2-=1) {
      __pyx_v_idx = __pyx_t_2;

      /* "View.MemoryView":1199
 *     else:
 *         for idx in range(ndim - 1, -1, -1):
 *             strides[idx] = stride             # <<<<<<<<<<<<<<
 *             stride *= shape[idx]
 * 
 */
      (__pyx_v_strides[__pyx_v_idx]) = __pyx_v_stride;

      /* "View.MemoryView":1200
 *         for idx in range(ndim - 1, -1, -1):
 *             strides[idx] = stride
 *             stride *= shape[idx]             # <<<<<<<<<<<<<<
 * 
 *     return stride
 */
      __pyx_v_stride = (__pyx_v_stride * (__pyx_v_shape[__pyx_v_idx]));
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":1202
 *             stride *= shape[idx]
 * 
 *     return stride             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_data_to_temp')
 */
  __pyx_r = __pyx_v_stride;
  goto __pyx_L0;

  /* "View.MemoryView":1184
 * 
 * @cname('__pyx_fill_contig_strides_array')
 * cdef Py_ssize_t fill_contig_strides_array(             # <<<<<<<<<<<<<<
 *                 Py_ssize_t *shape, Py_ssize_t *strides, Py_ssize_t stride,
 *                 int ndim, char order) noexcept nogil:
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1205
 * 
 * @cname('__pyx_memoryview_copy_data_to_temp')
 * cdef void *copy_data_to_temp(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                              __Pyx_memviewslice *tmpslice,
 *                              char order,
 */

static void *__pyx_memoryview_copy_data_to_temp(__Pyx_memviewslice *__pyx_v_src, __Pyx_memviewslice *__pyx_v_tmpslice, char __pyx_v_order, int __pyx_v_ndim) {
  int __pyx_v_i;
  void *__pyx_v_result;
  size_t __pyx_v_itemsize;
  size_t __pyx_v_size;
  void *__pyx_r;
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  struct __pyx_memoryview_obj *__pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif

  /* "View.MemoryView":1216
 *     cdef void *result
 * 
 *     cdef size_t itemsize = src.memview.view.itemsize             # <<<<<<<<<<<<<<
 *     cdef size_t size = slice_get_size(src, ndim)
 * 
 */
  __pyx_t_1 = __pyx_v_src->memview->view.itemsize;
  __pyx_v_itemsize = __pyx_t_1;

  /* "View.MemoryView":1217
 * 
 *     cdef size_t itemsize = src.memview.view.itemsize
 *     cdef size_t size = slice_get_size(src, ndim)             # <<<<<<<<<<<<<<
 * 
 *     result = malloc(size)
 */
  __pyx_v_size = __pyx_memoryview_slice_get_size(__pyx_v_src, __pyx_v_ndim);

  /* "View.MemoryView":1219
 *     cdef size_t size = slice_get_size(src, ndim)
 * 
 *     result = malloc(size)             # <<<<<<<<<<<<<<
 *     if not result:
 *         _err_no_memory()
 */
  __pyx_v_result = malloc(__pyx_v_size);

  /* "View.MemoryView":1220
 * 
 *     result = malloc(size)
 *     if not result:             # <<<<<<<<<<<<<<
 *         _err_no_memory()
 * 
 */
  __pyx_t_2 = (!(__pyx_v_result != 0));
  if (__pyx_t_2) {

    /* "View.MemoryView":1221
 *     result = malloc(size)
 *     if not result:
 *         _err_no_memory()             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = __pyx_memoryview_err_no_memory(); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 1221, __pyx_L1_error)

    /* "View.MemoryView":1220
 * 
 *     result = malloc(size)
 *     if not result:             # <<<<<<<<<<<<<<
 *         _err_no_memory()
 * 
 */
  }

  /* "View.MemoryView":1224
 * 
 * 
 *     tmpslice.data = <char *> result             # <<<<<<<<<<<<<<
 *     tmpslice.memview = src.memview
 *     for i in range(ndim):
 */
  __pyx_v_tmpslice->data = ((char *)__pyx_v_result);

  /* "View.MemoryView":1225
 * 
 *     tmpslice.data = <char *> result
 *     tmpslice.memview = src.memview             # <<<<<<<<<<<<<<
 *     for i in range(ndim):
 *         tmpslice.shape[i] = src.shape[i]
 */
  __pyx_t_4 = __pyx_v_src->memview;
  __pyx_v_tmpslice->memview = __pyx_t_4;

  /* "View.MemoryView":1226
 *     tmpslice.data = <char *> result
 *     tmpslice.memview = src.memview
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         tmpslice.shape[i] = src.shape[i]
 *         tmpslice.suboffsets[i] = -1
 */
  __pyx_t_3 = __pyx_v_ndim;
  __pyx_t_5 = __pyx_t_3;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "View.MemoryView":1227
 *     tmpslice.memview = src.memview
 *     for i in range(ndim):
 *         tmpslice.shape[i] = src.shape[i]             # <<<<<<<<<<<<<<
 *         tmpslice.suboffsets[i] = -1
 * 
 */
    (__pyx_v_tmpslice->shape[__pyx_v_i]) = (__pyx_v_src->shape[__pyx_v_i]);

    /* "View.MemoryView":1228
 *     for i in range(ndim):
 *         tmpslice.shape[i] = src.shape[i]
 *         tmpslice.suboffsets[i] = -1             # <<<<<<<<<<<<<<
 * 
 *     fill_contig_strides_array(&tmpslice.shape[0], &tmpslice.strides[0], itemsize, ndim, order)
 */
    (__pyx_v_tmpslice->suboffsets[__pyx_v_i]) = -1L;
  }

  /* "View.MemoryView":1230
 *         tmpslice.suboffsets[i] = -1
 * 
 *     fill_contig_strides_array(&tmpslice.shape[0], &tmpslice.strides[0], itemsize, ndim, order)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  (void)(__pyx_fill_contig_strides_array((&(__pyx_v_tmpslice->shape[0])), (&(__pyx_v_tmpslice->strides[0])), __pyx_v_itemsize, __pyx_v_ndim, __pyx_v_order));

  /* "View.MemoryView":1233
 * 
 * 
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         if tmpslice.shape[i] == 1:
 *             tmpslice.strides[i] = 0
 */
  __pyx_t_3 = __pyx_v_ndim;
  __pyx_t_5 = __pyx_t_3;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "View.MemoryView":1234
 * 
 *     for i in range(ndim):
 *         if tmpslice.shape[i] == 1:             # <<<<<<<<<<<<<<
 *             tmpslice.strides[i] = 0
 * 
 */
    __pyx_t_2 = ((__pyx_v_tmpslice->shape[__pyx_v_i]) == 1);
    if (__pyx_t_2) {

      /* "View.MemoryView":1235
 *     for i in range(ndim):
 *         if tmpslice.shape[i] == 1:
 *             tmpslice.strides[i] = 0             # <<<<<<<<<<<<<<
 * 
 *     if slice_is_contig(src[0], order, ndim):
 */
      (__pyx_v_tmpslice->strides[__pyx_v_i]) = 0;

      /* "View.MemoryView":1234
 * 
 *     for i in range(ndim):
 *         if tmpslice.shape[i] == 1:             # <<<<<<<<<<<<<<
 *             tmpslice.strides[i] = 0
 * 
 */
    }
  }

  /* "View.MemoryView":1237
 *             tmpslice.strides[i] = 0
 * 
 *     if slice_is_contig(src[0], order, ndim):             # <<<<<<<<<<<<<<
 *         memcpy(result, src.data, size)
 *     else:
 */
  __pyx_t_2 = __pyx_memviewslice_is_contig((__pyx_v_src[0]), __pyx_v_order, __pyx_v_ndim);
  if (__pyx_t_2) {

    /* "View.MemoryView":1238
 * 
 *     if slice_is_contig(src[0], order, ndim):
 *         memcpy(result, src.data, size)             # <<<<<<<<<<<<<<
 *     else:
 *         copy_strided_to_strided(src, tmpslice, ndim, itemsize)
 */
    (void)(memcpy(__pyx_v_result, __pyx_v_src->data, __pyx_v_size));

    /* "View.MemoryView":1237
 *             tmpslice.strides[i] = 0
 * 
 *     if slice_is_contig(src[0], order, ndim):             # <<<<<<<<<<<<<<
 *         memcpy(result, src.data, size)
 *     else:
 */
    goto __pyx_L9;
  }

  /* "View.MemoryView":1240
 *         memcpy(result, src.data, size)
 *     else:
 *         copy_strided_to_strided(src, tmpslice, ndim, itemsize)             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
  /*else*/ {
    copy_strided_to_strided(__pyx_v_src, __pyx_v_tmpslice, __pyx_v_ndim, __pyx_v_itemsize);
  }
  __pyx_L9:;

  /* "View.MemoryView":1242
 *         copy_strided_to_strided(src, tmpslice, ndim, itemsize)
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "View.MemoryView":1205
 * 
 * @cname('__pyx_memoryview_copy_data_to_temp')
 * cdef void *copy_data_to_temp(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                              __Pyx_memviewslice *tmpslice,
 *                              char order,
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("View.MemoryView.copy_data_to_temp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1247
 * 
 * @cname('__pyx_memoryview_err_extents')
 * cdef int _err_extents(int i, Py_ssize_t extent1,             # <<<<<<<<<<<<<<
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError, f"got differing extents in dimension {i} (got {extent1} and {extent2})"
 */

static int __pyx_memoryview_err_extents(int __pyx_v_i, Py_ssize_t __pyx_v_extent1, Py_ssize_t __pyx_v_extent2) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_UCS4 __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("_err_extents", 0);

  /* "View.MemoryView":1249
 * cdef int _err_extents(int i, Py_ssize_t extent1,
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError, f"got differing extents in dimension {i} (got {extent1} and {extent2})"             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_err_dim')
 */
  __pyx_t_1 = PyTuple_New(7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = 0;
  __pyx_t_3 = 127;
  __Pyx_INCREF(__pyx_kp_u_got_differing_extents_in_dimensi);
  __pyx_t_2 += 35;
  __Pyx_GIVEREF(__pyx_kp_u_got_differing_extents_in_dimensi);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_got_differing_extents_in_dimensi);
  __pyx_t_4 = __Pyx_PyUnicode_From_int(__pyx_v_i, 0, ' ', 'd'); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u_got);
  __pyx_t_2 += 6;
  __Pyx_GIVEREF(__pyx_kp_u_got);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_got);
  __pyx_t_4 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_v_extent1, 0, ' ', 'd'); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u_and);
  __pyx_t_2 += 5;
  __Pyx_GIVEREF(__pyx_kp_u_and);
  PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_kp_u_and);
  __pyx_t_4 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_v_extent2, 0, ' ', 'd'); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 5, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u__7);
  __pyx_t_2 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__7);
  PyTuple_SET_ITEM(__pyx_t_1, 6, __pyx_kp_u__7);
  __pyx_t_4 = __Pyx_PyUnicode_Join(__pyx_t_1, 7, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_Raise(__pyx_builtin_ValueError, __pyx_t_4, 0, 0);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __PYX_ERR(0, 1249, __pyx_L1_error)

  /* "View.MemoryView":1247
 * 
 * @cname('__pyx_memoryview_err_extents')
 * cdef int _err_extents(int i, Py_ssize_t extent1,             # <<<<<<<<<<<<<<
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError, f"got differing extents in dimension {i} (got {extent1} and {extent2})"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView._err_extents", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "View.MemoryView":1252
 * 
 * @cname('__pyx_memoryview_err_dim')
 * cdef int _err_dim(PyObject *error, str msg, int dim) except -1 with gil:             # <<<<<<<<<<<<<<
 *     raise <object>error, msg % dim
 * 
 */

static int __pyx_memoryview_err_dim(PyObject *__pyx_v_error, PyObject *__pyx_v_msg, int __pyx_v_dim) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("_err_dim", 0);
  __Pyx_INCREF(__pyx_v_msg);

  /* "View.MemoryView":1253
 * @cname('__pyx_memoryview_err_dim')
 * cdef int _err_dim(PyObject *error, str msg, int dim) except -1 with gil:
 *     raise <object>error, msg % dim             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_err')
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_dim); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyString_FormatSafe(__pyx_v_msg, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_Raise(((PyObject *)__pyx_v_error), __pyx_t_2, 0, 0);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __PYX_ERR(0, 1253, __pyx_L1_error)

  /* "View.MemoryView":1252
 * 
 * @cname('__pyx_memoryview_err_dim')
 * cdef int _err_dim(PyObject *error, str msg, int dim) except -1 with gil:             # <<<<<<<<<<<<<<
 *     raise <object>error, msg % dim
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView._err_dim", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_XDECREF(__pyx_v_msg);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "View.MemoryView":1256
 * 
 * @cname('__pyx_memoryview_err')
 * cdef int _err(PyObject *error, str msg) except -1 with gil:             # <<<<<<<<<<<<<<
 *     raise <object>error, msg
 * 
 */

static int __pyx_memoryview_err(PyObject *__pyx_v_error, PyObject *__pyx_v_msg) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("_err", 0);
  __Pyx_INCREF(__pyx_v_msg);

  /* "View.MemoryView":1257
 * @cname('__pyx_memoryview_err')
 * cdef int _err(PyObject *error, str msg) except -1 with gil:
 *     raise <object>error, msg             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_err_no_memory')
 */
  __Pyx_Raise(((PyObject *)__pyx_v_error), __pyx_v_msg, 0, 0);
  __PYX_ERR(0, 1257, __pyx_L1_error)

  /* "View.MemoryView":1256
 * 
 * @cname('__pyx_memoryview_err')
 * cdef int _err(PyObject *error, str msg) except -1 with gil:             # <<<<<<<<<<<<<<
 *     raise <object>error, msg
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("View.MemoryView._err", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_XDECREF(__pyx_v_msg);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "View.MemoryView":1260
 * 
 * @cname('__pyx_memoryview_err_no_memory')
 * cdef int _err_no_memory() except -1 with gil:             # <<<<<<<<<<<<<<
 *     raise MemoryError
 * 
 */

static int __pyx_memoryview_err_no_memory(void) {
  int __pyx_r;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif

  /* "View.MemoryView":1261
 * @cname('__pyx_memoryview_err_no_memory')
 * cdef int _err_no_memory() except -1 with gil:
 *     raise MemoryError             # <<<<<<<<<<<<<<
 * 
 * 
 */
  PyErr_NoMemory(); __PYX_ERR(0, 1261, __pyx_L1_error)

  /* "View.MemoryView":1260
 * 
 * @cname('__pyx_memoryview_err_no_memory')
 * cdef int _err_no_memory() except -1 with gil:             # <<<<<<<<<<<<<<
 *     raise MemoryError
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("View.MemoryView._err_no_memory", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "View.MemoryView":1265
 * 
 * @cname('__pyx_memoryview_copy_contents')
 * cdef int memoryview_copy_contents(__Pyx_memviewslice src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice dst,
 *                                   int src_ndim, int dst_ndim,
 */

static int __pyx_memoryview_copy_contents(__Pyx_memviewslice __pyx_v_src, __Pyx_memviewslice __pyx_v_dst, int __pyx_v_src_ndim, int __pyx_v_dst_ndim, int __pyx_v_dtype_is_object) {
  void *__pyx_v_tmpdata;
  size_t __pyx_v_itemsize;
  int __pyx_v_i;
  char __pyx_v_order;
  int __pyx_v_broadcasting;
  int __pyx_v_direct_copy;
  __Pyx_memviewslice __pyx_v_tmp;
  int __pyx_v_ndim;
  int __pyx_r;
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  void *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif

  /* "View.MemoryView":1273
 *     Check for overlapping memory and verify the shapes.
 *     """
 *     cdef void *tmpdata = NULL             # <<<<<<<<<<<<<<
 *     cdef size_t itemsize = src.memview.view.itemsize
 *     cdef int i
 */
  __pyx_v_tmpdata = NULL;

  /* "View.MemoryView":1274
 *     """
 *     cdef void *tmpdata = NULL
 *     cdef size_t itemsize = src.memview.view.itemsize             # <<<<<<<<<<<<<<
 *     cdef int i
 *     cdef char order = get_best_order(&src, src_ndim)
 */
  __pyx_t_1 = __pyx_v_src.memview->view.itemsize;
  __pyx_v_itemsize = __pyx_t_1;

  /* "View.MemoryView":1276
 *     cdef size_t itemsize = src.memview.view.itemsize
 *     cdef int i
 *     cdef char order = get_best_order(&src, src_ndim)             # <<<<<<<<<<<<<<
 *     cdef bint broadcasting = False
 *     cdef bint direct_copy = False
 */
  __pyx_v_order = __pyx_get_best_slice_order((&__pyx_v_src), __pyx_v_src_ndim);

  /* "View.MemoryView":1277
 *     cdef int i
 *     cdef char order = get_best_order(&src, src_ndim)
 *     cdef bint broadcasting = False             # <<<<<<<<<<<<<<
 *     cdef bint direct_copy = False
 *     cdef __Pyx_memviewslice tmp
 */
  __pyx_v_broadcasting = 0;

  /* "View.MemoryView":1278
 *     cdef char order = get_best_order(&src, src_ndim)
 *     cdef bint broadcasting = False
 *     cdef bint direct_copy = False             # <<<<<<<<<<<<<<
 *     cdef __Pyx_memviewslice tmp
 * 
 */
  __pyx_v_direct_copy = 0;

  /* "View.MemoryView":1281
 *     cdef __Pyx_memviewslice tmp
 * 
 *     if src_ndim < dst_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:
 */
  __pyx_t_2 = (__pyx_v_src_ndim < __pyx_v_dst_ndim);
  if (__pyx_t_2) {

    /* "View.MemoryView":1282
 * 
 *     if src_ndim < dst_ndim:
 *         broadcast_leading(&src, src_ndim, dst_ndim)             # <<<<<<<<<<<<<<
 *     elif dst_ndim < src_ndim:
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 */
    __pyx_memoryview_broadcast_leading((&__pyx_v_src), __pyx_v_src_ndim, __pyx_v_dst_ndim);

    /* "View.MemoryView":1281
 *     cdef __Pyx_memviewslice tmp
 * 
 *     if src_ndim < dst_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1283
 *     if src_ndim < dst_ndim:
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 * 
 */
  __pyx_t_2 = (__pyx_v_dst_ndim < __pyx_v_src_ndim);
  if (__pyx_t_2) {

    /* "View.MemoryView":1284
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:
 *         broadcast_leading(&dst, dst_ndim, src_ndim)             # <<<<<<<<<<<<<<
 * 
 *     cdef int ndim = max(src_ndim, dst_ndim)
 */
    __pyx_memoryview_broadcast_leading((&__pyx_v_dst), __pyx_v_dst_ndim, __pyx_v_src_ndim);

    /* "View.MemoryView":1283
 *     if src_ndim < dst_ndim:
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 * 
 */
  }
  __pyx_L3:;

  /* "View.MemoryView":1286
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 * 
 *     cdef int ndim = max(src_ndim, dst_ndim)             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim):
 */
  __pyx_t_3 = __pyx_v_dst_ndim;
  __pyx_t_4 = __pyx_v_src_ndim;
  __pyx_t_2 = (__pyx_t_3 > __pyx_t_4);
  if (__pyx_t_2) {
    __pyx_t_5 = __pyx_t_3;
  } else {
    __pyx_t_5 = __pyx_t_4;
  }
  __pyx_v_ndim = __pyx_t_5;

  /* "View.MemoryView":1288
 *     cdef int ndim = max(src_ndim, dst_ndim)
 * 
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:
 */
  __pyx_t_5 = __pyx_v_ndim;
  __pyx_t_3 = __pyx_t_5;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "View.MemoryView":1289
 * 
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:             # <<<<<<<<<<<<<<
 *             if src.shape[i] == 1:
 *                 broadcasting = True
 */
    __pyx_t_2 = ((__pyx_v_src.shape[__pyx_v_i]) != (__pyx_v_dst.shape[__pyx_v_i]));
    if (__pyx_t_2) {

      /* "View.MemoryView":1290
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:             # <<<<<<<<<<<<<<
 *                 broadcasting = True
 *                 src.strides[i] = 0
 */
      __pyx_t_2 = ((__pyx_v_src.shape[__pyx_v_i]) == 1);
      if (__pyx_t_2) {

        /* "View.MemoryView":1291
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:
 *                 broadcasting = True             # <<<<<<<<<<<<<<
 *                 src.strides[i] = 0
 *             else:
 */
        __pyx_v_broadcasting = 1;

        /* "View.MemoryView":1292
 *             if src.shape[i] == 1:
 *                 broadcasting = True
 *                 src.strides[i] = 0             # <<<<<<<<<<<<<<
 *             else:
 *                 _err_extents(i, dst.shape[i], src.shape[i])
 */
        (__pyx_v_src.strides[__pyx_v_i]) = 0;

        /* "View.MemoryView":1290
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:             # <<<<<<<<<<<<<<
 *                 broadcasting = True
 *                 src.strides[i] = 0
 */
        goto __pyx_L7;
      }

      /* "View.MemoryView":1294
 *                 src.strides[i] = 0
 *             else:
 *                 _err_extents(i, dst.shape[i], src.shape[i])             # <<<<<<<<<<<<<<
 * 
 *         if src.suboffsets[i] >= 0:
 */
      /*else*/ {
        __pyx_t_6 = __pyx_memoryview_err_extents(__pyx_v_i, (__pyx_v_dst.shape[__pyx_v_i]), (__pyx_v_src.shape[__pyx_v_i])); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 1294, __pyx_L1_error)
      }
      __pyx_L7:;

      /* "View.MemoryView":1289
 * 
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:             # <<<<<<<<<<<<<<
 *             if src.shape[i] == 1:
 *                 broadcasting = True
 */
    }

    /* "View.MemoryView":1296
 *                 _err_extents(i, dst.shape[i], src.shape[i])
 * 
 *         if src.suboffsets[i] >= 0:             # <<<<<<<<<<<<<<
 *             _err_dim(PyExc_ValueError, "Dimension %d is not direct", i)
 * 
 */
    __pyx_t_2 = ((__pyx_v_src.suboffsets[__pyx_v_i]) >= 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1297
 * 
 *         if src.suboffsets[i] >= 0:
 *             _err_dim(PyExc_ValueError, "Dimension %d is not direct", i)             # <<<<<<<<<<<<<<
 * 
 *     if slices_overlap(&src, &dst, ndim, itemsize):
 */
      __pyx_t_6 = __pyx_memoryview_err_dim(PyExc_ValueError, __pyx_kp_s_Dimension_d_is_not_direct, __pyx_v_i); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 1297, __pyx_L1_error)

      /* "View.MemoryView":1296
 *                 _err_extents(i, dst.shape[i], src.shape[i])
 * 
 *         if src.suboffsets[i] >= 0:             # <<<<<<<<<<<<<<
 *             _err_dim(PyExc_ValueError, "Dimension %d is not direct", i)
 * 
 */
    }
  }

  /* "View.MemoryView":1299
 *             _err_dim(PyExc_ValueError, "Dimension %d is not direct", i)
 * 
 *     if slices_overlap(&src, &dst, ndim, itemsize):             # <<<<<<<<<<<<<<
 * 
 *         if not slice_is_contig(src, order, ndim):
 */
  __pyx_t_2 = __pyx_slices_overlap((&__pyx_v_src), (&__pyx_v_dst), __pyx_v_ndim, __pyx_v_itemsize);
  if (__pyx_t_2) {

    /* "View.MemoryView":1301
 *     if slices_overlap(&src, &dst, ndim, itemsize):
 * 
 *         if not slice_is_contig(src, order, ndim):             # <<<<<<<<<<<<<<
 *             order = get_best_order(&dst, ndim)
 * 
 */
    __pyx_t_2 = (!__pyx_memviewslice_is_contig(__pyx_v_src, __pyx_v_order, __pyx_v_ndim));
    if (__pyx_t_2) {

      /* "View.MemoryView":1302
 * 
 *         if not slice_is_contig(src, order, ndim):
 *             order = get_best_order(&dst, ndim)             # <<<<<<<<<<<<<<
 * 
 *         tmpdata = copy_data_to_temp(&src, &tmp, order, ndim)
 */
      __pyx_v_order = __pyx_get_best_slice_order((&__pyx_v_dst), __pyx_v_ndim);

      /* "View.MemoryView":1301
 *     if slices_overlap(&src, &dst, ndim, itemsize):
 * 
 *         if not slice_is_contig(src, order, ndim):             # <<<<<<<<<<<<<<
 *             order = get_best_order(&dst, ndim)
 * 
 */
    }

    /* "View.MemoryView":1304
 *             order = get_best_order(&dst, ndim)
 * 
 *         tmpdata = copy_data_to_temp(&src, &tmp, order, ndim)             # <<<<<<<<<<<<<<
 *         src = tmp
 * 
 */
    __pyx_t_7 = __pyx_memoryview_copy_data_to_temp((&__pyx_v_src), (&__pyx_v_tmp), __pyx_v_order, __pyx_v_ndim); if (unlikely(__pyx_t_7 == ((void *)NULL))) __PYX_ERR(0, 1304, __pyx_L1_error)
    __pyx_v_tmpdata = __pyx_t_7;

    /* "View.MemoryView":1305
 * 
 *         tmpdata = copy_data_to_temp(&src, &tmp, order, ndim)
 *         src = tmp             # <<<<<<<<<<<<<<
 * 
 *     if not broadcasting:
 */
    __pyx_v_src = __pyx_v_tmp;

    /* "View.MemoryView":1299
 *             _err_dim(PyExc_ValueError, "Dimension %d is not direct", i)
 * 
 *     if slices_overlap(&src, &dst, ndim, itemsize):             # <<<<<<<<<<<<<<
 * 
 *         if not slice_is_contig(src, order, ndim):
 */
  }

  /* "View.MemoryView":1307
 *         src = tmp
 * 
 *     if not broadcasting:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = (!__pyx_v_broadcasting);
  if (__pyx_t_2) {

    /* "View.MemoryView":1310
 * 
 * 
 *         if slice_is_contig(src, 'C', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):
 */
    __pyx_t_2 = __pyx_memviewslice_is_contig(__pyx_v_src, 'C', __pyx_v_ndim);
    if (__pyx_t_2) {

      /* "View.MemoryView":1311
 * 
 *         if slice_is_contig(src, 'C', ndim):
 *             direct_copy = slice_is_contig(dst, 'C', ndim)             # <<<<<<<<<<<<<<
 *         elif slice_is_contig(src, 'F', ndim):
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 */
      __pyx_v_direct_copy = __pyx_memviewslice_is_contig(__pyx_v_dst, 'C', __pyx_v_ndim);

      /* "View.MemoryView":1310
 * 
 * 
 *         if slice_is_contig(src, 'C', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):
 */
      goto __pyx_L12;
    }

    /* "View.MemoryView":1312
 *         if slice_is_contig(src, 'C', ndim):
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 */
    __pyx_t_2 = __pyx_memviewslice_is_contig(__pyx_v_src, 'F', __pyx_v_ndim);
    if (__pyx_t_2) {

      /* "View.MemoryView":1313
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):
 *             direct_copy = slice_is_contig(dst, 'F', ndim)             # <<<<<<<<<<<<<<
 * 
 *         if direct_copy:
 */
      __pyx_v_direct_copy = __pyx_memviewslice_is_contig(__pyx_v_dst, 'F', __pyx_v_ndim);

      /* "View.MemoryView":1312
 *         if slice_is_contig(src, 'C', ndim):
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 */
    }
    __pyx_L12:;

    /* "View.MemoryView":1315
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 *         if direct_copy:             # <<<<<<<<<<<<<<
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, inc=False)
 */
    if (__pyx_v_direct_copy) {

      /* "View.MemoryView":1317
 *         if direct_copy:
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, inc=False)             # <<<<<<<<<<<<<<
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))
 *             refcount_copying(&dst, dtype_is_object, ndim, inc=True)
 */
      __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 0);

      /* "View.MemoryView":1318
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, inc=False)
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))             # <<<<<<<<<<<<<<
 *             refcount_copying(&dst, dtype_is_object, ndim, inc=True)
 *             free(tmpdata)
 */
      (void)(memcpy(__pyx_v_dst.data, __pyx_v_src.data, __pyx_memoryview_slice_get_size((&__pyx_v_src), __pyx_v_ndim)));

      /* "View.MemoryView":1319
 *             refcount_copying(&dst, dtype_is_object, ndim, inc=False)
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))
 *             refcount_copying(&dst, dtype_is_object, ndim, inc=True)             # <<<<<<<<<<<<<<
 *             free(tmpdata)
 *             return 0
 */
      __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 1);

      /* "View.MemoryView":1320
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))
 *             refcount_copying(&dst, dtype_is_object, ndim, inc=True)
 *             free(tmpdata)             # <<<<<<<<<<<<<<
 *             return 0
 * 
 */
      free(__pyx_v_tmpdata);

      /* "View.MemoryView":1321
 *             refcount_copying(&dst, dtype_is_object, ndim, inc=True)
 *             free(tmpdata)
 *             return 0             # <<<<<<<<<<<<<<
 * 
 *     if order == 'F' == get_best_order(&dst, ndim):
 */
      __pyx_r = 0;
      goto __pyx_L0;

      /* "View.MemoryView":1315
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 *         if direct_copy:             # <<<<<<<<<<<<<<
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, inc=False)
 */
    }

    /* "View.MemoryView":1307
 *         src = tmp
 * 
 *     if not broadcasting:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  }

  /* "View.MemoryView":1323
 *             return 0
 * 
 *     if order == 'F' == get_best_order(&dst, ndim):             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = (__pyx_v_order == 'F');
  if (__pyx_t_2) {
    __pyx_t_2 = ('F' == __pyx_get_best_slice_order((&__pyx_v_dst), __pyx_v_ndim));
  }
  if (__pyx_t_2) {

    /* "View.MemoryView":1326
 * 
 * 
 *         transpose_memslice(&src)             # <<<<<<<<<<<<<<
 *         transpose_memslice(&dst)
 * 
 */
    __pyx_t_5 = __pyx_memslice_transpose((&__pyx_v_src)); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 1326, __pyx_L1_error)

    /* "View.MemoryView":1327
 * 
 *         transpose_memslice(&src)
 *         transpose_memslice(&dst)             # <<<<<<<<<<<<<<
 * 
 *     refcount_copying(&dst, dtype_is_object, ndim, inc=False)
 */
    __pyx_t_5 = __pyx_memslice_transpose((&__pyx_v_dst)); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 1327, __pyx_L1_error)

    /* "View.MemoryView":1323
 *             return 0
 * 
 *     if order == 'F' == get_best_order(&dst, ndim):             # <<<<<<<<<<<<<<
 * 
 * 
 */
  }

  /* "View.MemoryView":1329
 *         transpose_memslice(&dst)
 * 
 *     refcount_copying(&dst, dtype_is_object, ndim, inc=False)             # <<<<<<<<<<<<<<
 *     copy_strided_to_strided(&src, &dst, ndim, itemsize)
 *     refcount_copying(&dst, dtype_is_object, ndim, inc=True)
 */
  __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 0);

  /* "View.MemoryView":1330
 * 
 *     refcount_copying(&dst, dtype_is_object, ndim, inc=False)
 *     copy_strided_to_strided(&src, &dst, ndim, itemsize)             # <<<<<<<<<<<<<<
 *     refcount_copying(&dst, dtype_is_object, ndim, inc=True)
 * 
 */
  copy_strided_to_strided((&__pyx_v_src), (&__pyx_v_dst), __pyx_v_ndim, __pyx_v_itemsize);

  /* "View.MemoryView":1331
 *     refcount_copying(&dst, dtype_is_object, ndim, inc=False)
 *     copy_strided_to_strided(&src, &dst, ndim, itemsize)
 *     refcount_copying(&dst, dtype_is_object, ndim, inc=True)             # <<<<<<<<<<<<<<
 * 
 *     free(tmpdata)
 */
  __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 1);

  /* "View.MemoryView":1333
 *     refcount_copying(&dst, dtype_is_object, ndim, inc=True)
 * 
 *     free(tmpdata)             # <<<<<<<<<<<<<<
 *     return 0
 * 
 */
  free(__pyx_v_tmpdata);

  /* "View.MemoryView":1334
 * 
 *     free(tmpdata)
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_broadcast_leading')
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "View.MemoryView":1265
 * 
 * @cname('__pyx_memoryview_copy_contents')
 * cdef int memoryview_copy_contents(__Pyx_memviewslice src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice dst,
 *                                   int src_ndim, int dst_ndim,
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("View.MemoryView.memoryview_copy_contents", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1337
 * 
 * @cname('__pyx_memoryview_broadcast_leading')
 * cdef void broadcast_leading(__Pyx_memviewslice *mslice,             # <<<<<<<<<<<<<<
 *                             int ndim,
 *                             int ndim_other) noexcept nogil:
 */

static void __pyx_memoryview_broadcast_leading(__Pyx_memviewslice *__pyx_v_mslice, int __pyx_v_ndim, int __pyx_v_ndim_other) {
  int __pyx_v_i;
  int __pyx_v_offset;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;

  /* "View.MemoryView":1341
 *                             int ndim_other) noexcept nogil:
 *     cdef int i
 *     cdef int offset = ndim_other - ndim             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim - 1, -1, -1):
 */
  __pyx_v_offset = (__pyx_v_ndim_other - __pyx_v_ndim);

  /* "View.MemoryView":1343
 *     cdef int offset = ndim_other - ndim
 * 
 *     for i in range(ndim - 1, -1, -1):             # <<<<<<<<<<<<<<
 *         mslice.shape[i + offset] = mslice.shape[i]
 *         mslice.strides[i + offset] = mslice.strides[i]
 */
  for (__pyx_t_1 = (__pyx_v_ndim - 1); __pyx_t_1 > -1; __pyx_t_1-=1) {
    __pyx_v_i = __pyx_t_1;

    /* "View.MemoryView":1344
 * 
 *     for i in range(ndim - 1, -1, -1):
 *         mslice.shape[i + offset] = mslice.shape[i]             # <<<<<<<<<<<<<<
 *         mslice.strides[i + offset] = mslice.strides[i]
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]
 */
    (__pyx_v_mslice->shape[(__pyx_v_i + __pyx_v_offset)]) = (__pyx_v_mslice->shape[__pyx_v_i]);

    /* "View.MemoryView":1345
 *     for i in range(ndim - 1, -1, -1):
 *         mslice.shape[i + offset] = mslice.shape[i]
 *         mslice.strides[i + offset] = mslice.strides[i]             # <<<<<<<<<<<<<<
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]
 * 
 */
    (__pyx_v_mslice->strides[(__pyx_v_i + __pyx_v_offset)]) = (__pyx_v_mslice->strides[__pyx_v_i]);

    /* "View.MemoryView":1346
 *         mslice.shape[i + offset] = mslice.shape[i]
 *         mslice.strides[i + offset] = mslice.strides[i]
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]             # <<<<<<<<<<<<<<
 * 
 *     for i in range(offset):
 */
    (__pyx_v_mslice->suboffsets[(__pyx_v_i + __pyx_v_offset)]) = (__pyx_v_mslice->suboffsets[__pyx_v_i]);
  }

  /* "View.MemoryView":1348
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]
 * 
 *     for i in range(offset):             # <<<<<<<<<<<<<<
 *         mslice.shape[i] = 1
 *         mslice.strides[i] = mslice.strides[0]
 */
  __pyx_t_1 = __pyx_v_offset;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "View.MemoryView":1349
 * 
 *     for i in range(offset):
 *         mslice.shape[i] = 1             # <<<<<<<<<<<<<<
 *         mslice.strides[i] = mslice.strides[0]
 *         mslice.suboffsets[i] = -1
 */
    (__pyx_v_mslice->shape[__pyx_v_i]) = 1;

    /* "View.MemoryView":1350
 *     for i in range(offset):
 *         mslice.shape[i] = 1
 *         mslice.strides[i] = mslice.strides[0]             # <<<<<<<<<<<<<<
 *         mslice.suboffsets[i] = -1
 * 
 */
    (__pyx_v_mslice->strides[__pyx_v_i]) = (__pyx_v_mslice->strides[0]);

    /* "View.MemoryView":1351
 *         mslice.shape[i] = 1
 *         mslice.strides[i] = mslice.strides[0]
 *         mslice.suboffsets[i] = -1             # <<<<<<<<<<<<<<
 * 
 * 
 */
    (__pyx_v_mslice->suboffsets[__pyx_v_i]) = -1L;
  }

  /* "View.MemoryView":1337
 * 
 * @cname('__pyx_memoryview_broadcast_leading')
 * cdef void broadcast_leading(__Pyx_memviewslice *mslice,             # <<<<<<<<<<<<<<
 *                             int ndim,
 *                             int ndim_other) noexcept nogil:
 */

  /* function exit code */
}

/* "View.MemoryView":1359
 * 
 * @cname('__pyx_memoryview_refcount_copying')
 * cdef void refcount_copying(__Pyx_memviewslice *dst, bint dtype_is_object, int ndim, bint inc) noexcept nogil:             # <<<<<<<<<<<<<<
 * 
 *     if dtype_is_object:
 */

static void __pyx_memoryview_refcount_copying(__Pyx_memviewslice *__pyx_v_dst, int __pyx_v_dtype_is_object, int __pyx_v_ndim, int __pyx_v_inc) {

  /* "View.MemoryView":1361
 * cdef void refcount_copying(__Pyx_memviewslice *dst, bint dtype_is_object, int ndim, bint inc) noexcept nogil:
 * 
 *     if dtype_is_object:             # <<<<<<<<<<<<<<
 *         refcount_objects_in_slice_with_gil(dst.data, dst.shape, dst.strides, ndim, inc)
 * 
 */
  if (__pyx_v_dtype_is_object) {

    /* "View.MemoryView":1362
 * 
 *     if dtype_is_object:
 *         refcount_objects_in_slice_with_gil(dst.data, dst.shape, dst.strides, ndim, inc)             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice_with_gil')
 */
    __pyx_memoryview_refcount_objects_in_slice_with_gil(__pyx_v_dst->data, __pyx_v_dst->shape, __pyx_v_dst->strides, __pyx_v_ndim, __pyx_v_inc);

    /* "View.MemoryView":1361
 * cdef void refcount_copying(__Pyx_memviewslice *dst, bint dtype_is_object, int ndim, bint inc) noexcept nogil:
 * 
 *     if dtype_is_object:             # <<<<<<<<<<<<<<
 *         refcount_objects_in_slice_with_gil(dst.data, dst.shape, dst.strides, ndim, inc)
 * 
 */
  }

  /* "View.MemoryView":1359
 * 
 * @cname('__pyx_memoryview_refcount_copying')
 * cdef void refcount_copying(__Pyx_memviewslice *dst, bint dtype_is_object, int ndim, bint inc) noexcept nogil:             # <<<<<<<<<<<<<<
 * 
 *     if dtype_is_object:
 */

  /* function exit code */
}

/* "View.MemoryView":1365
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice_with_gil')
 * cdef void refcount_objects_in_slice_with_gil(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                              Py_ssize_t *strides, int ndim,
 *                                              bint inc) noexcept with gil:
 */

static void __pyx_memoryview_refcount_objects_in_slice_with_gil(char *__pyx_v_data, Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, int __pyx_v_ndim, int __pyx_v_inc) {
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif

  /* "View.MemoryView":1368
 *                                              Py_ssize_t *strides, int ndim,
 *                                              bint inc) noexcept with gil:
 *     refcount_objects_in_slice(data, shape, strides, ndim, inc)             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice')
 */
  __pyx_memoryview_refcount_objects_in_slice(__pyx_v_data, __pyx_v_shape, __pyx_v_strides, __pyx_v_ndim, __pyx_v_inc);

  /* "View.MemoryView":1365
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice_with_gil')
 * cdef void refcount_objects_in_slice_with_gil(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                              Py_ssize_t *strides, int ndim,
 *                                              bint inc) noexcept with gil:
 */

  /* function exit code */
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
}

/* "View.MemoryView":1371
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice')
 * cdef void refcount_objects_in_slice(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                     Py_ssize_t *strides, int ndim, bint inc) noexcept:
 *     cdef Py_ssize_t i
 */

static void __pyx_memoryview_refcount_objects_in_slice(char *__pyx_v_data, Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, int __pyx_v_ndim, int __pyx_v_inc) {
  CYTHON_UNUSED Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_stride;
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;

  /* "View.MemoryView":1374
 *                                     Py_ssize_t *strides, int ndim, bint inc) noexcept:
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t stride = strides[0]             # <<<<<<<<<<<<<<
 * 
 *     for i in range(shape[0]):
 */
  __pyx_v_stride = (__pyx_v_strides[0]);

  /* "View.MemoryView":1376
 *     cdef Py_ssize_t stride = strides[0]
 * 
 *     for i in range(shape[0]):             # <<<<<<<<<<<<<<
 *         if ndim == 1:
 *             if inc:
 */
  __pyx_t_1 = (__pyx_v_shape[0]);
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "View.MemoryView":1377
 * 
 *     for i in range(shape[0]):
 *         if ndim == 1:             # <<<<<<<<<<<<<<
 *             if inc:
 *                 Py_INCREF((<PyObject **> data)[0])
 */
    __pyx_t_4 = (__pyx_v_ndim == 1);
    if (__pyx_t_4) {

      /* "View.MemoryView":1378
 *     for i in range(shape[0]):
 *         if ndim == 1:
 *             if inc:             # <<<<<<<<<<<<<<
 *                 Py_INCREF((<PyObject **> data)[0])
 *             else:
 */
      if (__pyx_v_inc) {

        /* "View.MemoryView":1379
 *         if ndim == 1:
 *             if inc:
 *                 Py_INCREF((<PyObject **> data)[0])             # <<<<<<<<<<<<<<
 *             else:
 *                 Py_DECREF((<PyObject **> data)[0])
 */
        Py_INCREF((((PyObject **)__pyx_v_data)[0]));

        /* "View.MemoryView":1378
 *     for i in range(shape[0]):
 *         if ndim == 1:
 *             if inc:             # <<<<<<<<<<<<<<
 *                 Py_INCREF((<PyObject **> data)[0])
 *             else:
 */
        goto __pyx_L6;
      }

      /* "View.MemoryView":1381
 *                 Py_INCREF((<PyObject **> data)[0])
 *             else:
 *                 Py_DECREF((<PyObject **> data)[0])             # <<<<<<<<<<<<<<
 *         else:
 *             refcount_objects_in_slice(data, shape + 1, strides + 1, ndim - 1, inc)
 */
      /*else*/ {
        Py_DECREF((((PyObject **)__pyx_v_data)[0]));
      }
      __pyx_L6:;

      /* "View.MemoryView":1377
 * 
 *     for i in range(shape[0]):
 *         if ndim == 1:             # <<<<<<<<<<<<<<
 *             if inc:
 *                 Py_INCREF((<PyObject **> data)[0])
 */
      goto __pyx_L5;
    }

    /* "View.MemoryView":1383
 *                 Py_DECREF((<PyObject **> data)[0])
 *         else:
 *             refcount_objects_in_slice(data, shape + 1, strides + 1, ndim - 1, inc)             # <<<<<<<<<<<<<<
 * 
 *         data += stride
 */
    /*else*/ {
      __pyx_memoryview_refcount_objects_in_slice(__pyx_v_data, (__pyx_v_shape + 1), (__pyx_v_strides + 1), (__pyx_v_ndim - 1), __pyx_v_inc);
    }
    __pyx_L5:;

    /* "View.MemoryView":1385
 *             refcount_objects_in_slice(data, shape + 1, strides + 1, ndim - 1, inc)
 * 
 *         data += stride             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_v_data = (__pyx_v_data + __pyx_v_stride);
  }

  /* "View.MemoryView":1371
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice')
 * cdef void refcount_objects_in_slice(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                     Py_ssize_t *strides, int ndim, bint inc) noexcept:
 *     cdef Py_ssize_t i
 */

  /* function exit code */
}

/* "View.MemoryView":1391
 * 
 * @cname('__pyx_memoryview_slice_assign_scalar')
 * cdef void slice_assign_scalar(__Pyx_memviewslice *dst, int ndim,             # <<<<<<<<<<<<<<
 *                               size_t itemsize, void *item,
 *                               bint dtype_is_object) noexcept nogil:
 */

static void __pyx_memoryview_slice_assign_scalar(__Pyx_memviewslice *__pyx_v_dst, int __pyx_v_ndim, size_t __pyx_v_itemsize, void *__pyx_v_item, int __pyx_v_dtype_is_object) {

  /* "View.MemoryView":1394
 *                               size_t itemsize, void *item,
 *                               bint dtype_is_object) noexcept nogil:
 *     refcount_copying(dst, dtype_is_object, ndim, inc=False)             # <<<<<<<<<<<<<<
 *     _slice_assign_scalar(dst.data, dst.shape, dst.strides, ndim, itemsize, item)
 *     refcount_copying(dst, dtype_is_object, ndim, inc=True)
 */
  __pyx_memoryview_refcount_copying(__pyx_v_dst, __pyx_v_dtype_is_object, __pyx_v_ndim, 0);

  /* "View.MemoryView":1395
 *                               bint dtype_is_object) noexcept nogil:
 *     refcount_copying(dst, dtype_is_object, ndim, inc=False)
 *     _slice_assign_scalar(dst.data, dst.shape, dst.strides, ndim, itemsize, item)             # <<<<<<<<<<<<<<
 *     refcount_copying(dst, dtype_is_object, ndim, inc=True)
 * 
 */
  __pyx_memoryview__slice_assign_scalar(__pyx_v_dst->data, __pyx_v_dst->shape, __pyx_v_dst->strides, __pyx_v_ndim, __pyx_v_itemsize, __pyx_v_item);

  /* "View.MemoryView":1396
 *     refcount_copying(dst, dtype_is_object, ndim, inc=False)
 *     _slice_assign_scalar(dst.data, dst.shape, dst.strides, ndim, itemsize, item)
 *     refcount_copying(dst, dtype_is_object, ndim, inc=True)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_memoryview_refcount_copying(__pyx_v_dst, __pyx_v_dtype_is_object, __pyx_v_ndim, 1);

  /* "View.MemoryView":1391
 * 
 * @cname('__pyx_memoryview_slice_assign_scalar')
 * cdef void slice_assign_scalar(__Pyx_memviewslice *dst, int ndim,             # <<<<<<<<<<<<<<
 *                               size_t itemsize, void *item,
 *                               bint dtype_is_object) noexcept nogil:
 */

  /* function exit code */
}

/* "View.MemoryView":1400
 * 
 * @cname('__pyx_memoryview__slice_assign_scalar')
 * cdef void _slice_assign_scalar(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                               Py_ssize_t *strides, int ndim,
 *                               size_t itemsize, void *item) noexcept nogil:
 */

static void __pyx_memoryview__slice_assign_scalar(char *__pyx_v_data, Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, int __pyx_v_ndim, size_t __pyx_v_itemsize, void *__pyx_v_item) {
  CYTHON_UNUSED Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_stride;
  Py_ssize_t __pyx_v_extent;
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;

  /* "View.MemoryView":1404
 *                               size_t itemsize, void *item) noexcept nogil:
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t stride = strides[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t extent = shape[0]
 * 
 */
  __pyx_v_stride = (__pyx_v_strides[0]);

  /* "View.MemoryView":1405
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t stride = strides[0]
 *     cdef Py_ssize_t extent = shape[0]             # <<<<<<<<<<<<<<
 * 
 *     if ndim == 1:
 */
  __pyx_v_extent = (__pyx_v_shape[0]);

  /* "View.MemoryView":1407
 *     cdef Py_ssize_t extent = shape[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)
 */
  __pyx_t_1 = (__pyx_v_ndim == 1);
  if (__pyx_t_1) {

    /* "View.MemoryView":1408
 * 
 *     if ndim == 1:
 *         for i in range(extent):             # <<<<<<<<<<<<<<
 *             memcpy(data, item, itemsize)
 *             data += stride
 */
    __pyx_t_2 = __pyx_v_extent;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "View.MemoryView":1409
 *     if ndim == 1:
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)             # <<<<<<<<<<<<<<
 *             data += stride
 *     else:
 */
      (void)(memcpy(__pyx_v_data, __pyx_v_item, __pyx_v_itemsize));

      /* "View.MemoryView":1410
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)
 *             data += stride             # <<<<<<<<<<<<<<
 *     else:
 *         for i in range(extent):
 */
      __pyx_v_data = (__pyx_v_data + __pyx_v_stride);
    }

    /* "View.MemoryView":1407
 *     cdef Py_ssize_t extent = shape[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1412
 *             data += stride
 *     else:
 *         for i in range(extent):             # <<<<<<<<<<<<<<
 *             _slice_assign_scalar(data, shape + 1, strides + 1, ndim - 1, itemsize, item)
 *             data += stride
 */
  /*else*/ {
    __pyx_t_2 = __pyx_v_extent;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "View.MemoryView":1413
 *     else:
 *         for i in range(extent):
 *             _slice_assign_scalar(data, shape + 1, strides + 1, ndim - 1, itemsize, item)             # <<<<<<<<<<<<<<
 *             data += stride
 * 
 */
      __pyx_memoryview__slice_assign_scalar(__pyx_v_data, (__pyx_v_shape + 1), (__pyx_v_strides + 1), (__pyx_v_ndim - 1), __pyx_v_itemsize, __pyx_v_item);

      /* "View.MemoryView":1414
 *         for i in range(extent):
 *             _slice_assign_scalar(data, shape + 1, strides + 1, ndim - 1, itemsize, item)
 *             data += stride             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_data = (__pyx_v_data + __pyx_v_stride);
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":1400
 * 
 * @cname('__pyx_memoryview__slice_assign_scalar')
 * cdef void _slice_assign_scalar(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                               Py_ssize_t *strides, int ndim,
 *                               size_t itemsize, void *item) noexcept nogil:
 */

  /* function exit code */
}

/* "(tree fragment)":1
 * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_1__pyx_unpickle_Enum(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_15View_dot_MemoryView_1__pyx_unpickle_Enum = {"__pyx_unpickle_Enum", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_15View_dot_MemoryView_1__pyx_unpickle_Enum, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_15View_dot_MemoryView_1__pyx_unpickle_Enum(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_Enum (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_type)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_checksum)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Enum", 1, 3, 3, 1); __PYX_ERR(0, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Enum", 1, 3, 3, 2); __PYX_ERR(0, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__pyx_unpickle_Enum") < 0)) __PYX_ERR(0, 1, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Enum", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 1, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("View.MemoryView.__pyx_unpickle_Enum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Enum", 1);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x82a3537, 0x6ae9995, 0xb068931):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x82a3537, 0x6ae9995, 0xb068931) = (name))" % __pyx_checksum
 */
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_tuple__8, Py_NE)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x82a3537, 0x6ae9995, 0xb068931):
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x82a3537, 0x6ae9995, 0xb068931) = (name))" % __pyx_checksum
 *     __pyx_result = Enum.__new__(__pyx_type)
 */
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_PickleError)) __PYX_ERR(0, 5, __pyx_L1_error);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v___pyx_PickleError = __pyx_t_1;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum not in (0x82a3537, 0x6ae9995, 0xb068931):
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x82a3537, 0x6ae9995, 0xb068931) = (name))" % __pyx_checksum             # <<<<<<<<<<<<<<
 *     __pyx_result = Enum.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_0x_x_vs_0, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_v___pyx_PickleError, __pyx_t_1, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x82a3537, 0x6ae9995, 0xb068931):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x82a3537, 0x6ae9995, 0xb068931) = (name))" % __pyx_checksum
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x82a3537, 0x6ae9995, 0xb068931) = (name))" % __pyx_checksum
 *     __pyx_result = Enum.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_MemviewEnum_type), __pyx_n_s_new); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v___pyx_type};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_v___pyx_result = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x82a3537, 0x6ae9995, 0xb068931) = (name))" % __pyx_checksum
 *     __pyx_result = Enum.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_2 = (__pyx_v___pyx_state != Py_None);
  if (__pyx_t_2) {

    /* "(tree fragment)":9
 *     __pyx_result = Enum.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v___pyx_state))) __PYX_ERR(0, 9, __pyx_L1_error)
    __pyx_t_1 = __pyx_unpickle_Enum__set_state(((struct __pyx_MemviewEnum_obj *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x82a3537, 0x6ae9995, 0xb068931) = (name))" % __pyx_checksum
 *     __pyx_result = Enum.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 *     __pyx_result.name = __pyx_state[0]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView.__pyx_unpickle_Enum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_unpickle_Enum__set_state(struct __pyx_MemviewEnum_obj *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Enum__set_state", 1);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 *     __pyx_result.name = __pyx_state[0]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->name);
  __Pyx_DECREF(__pyx_v___pyx_result->name);
  __pyx_v___pyx_result->name = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 13, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 13, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_3 > 1);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 13, __pyx_L1_error)
  __pyx_t_2 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "(tree fragment)":14
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])             # <<<<<<<<<<<<<<
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_update); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 14, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = NULL;
    __pyx_t_8 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_8 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_t_5};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 14, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("View.MemoryView.__pyx_unpickle_Enum__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":286
 * 
 *         @property
 *         cdef inline npy_intp itemsize(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             return PyDataType_ELSIZE(self)
 * 
 */

static CYTHON_INLINE npy_intp __pyx_f_5numpy_5dtype_8itemsize_itemsize(PyArray_Descr *__pyx_v_self) {
  npy_intp __pyx_r;

  /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":287
 *         @property
 *         cdef inline npy_intp itemsize(self) noexcept nogil:
 *             return PyDataType_ELSIZE(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyDataType_ELSIZE(__pyx_v_self);
  goto __pyx_L0;

  /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":286
 * 
 *         @property
 *         cdef inline npy_intp itemsize(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             return PyDataType_ELSIZE(self)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":290
 * 
 *         @property
 *         cdef inline npy_intp alignment(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             return PyDataType_ALIGNMENT(self)
 * 
 */

static CYTHON_INLINE npy_intp __pyx_f_5numpy_5dtype_9alignment_alignment(PyArray_Descr *__pyx_v_self) {
  npy_intp __pyx_r;

  /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":291
 *         @property
 *         cdef inline npy_intp alignment(self) noexcept nogil:
 *             return PyDataType_ALIGNMENT(self)             # <<<<<<<<<<<<<<
 * 
 *         # Use fields/names with care as they may be NULL.  You must check
 */
  __pyx_r = PyDataType_ALIGNMENT(__pyx_v_self);
  goto __pyx_L0;

  /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":290
 * 
 *         @property
 *         cdef inline npy_intp alignment(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             return PyDataType_ALIGNMENT(self)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":296
 *         # for this using PyDataType_HASFIELDS.
 *         @property
 *         cdef inline object fields(self):             # <<<<<<<<<<<<<<
 *             return <object>PyDataType_FIELDS(self)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_5dtype_6fields_fields(PyArray_Descr *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1;
  __Pyx_RefNannySetupContext("fields", 1);

  /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":297
 *         @property
 *         cdef inline object fields(self):
 *             return <object>PyDataType_FIELDS(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyDataType_FIELDS(__pyx_v_self);
  __Pyx_INCREF(((PyObject *)__pyx_t_1));
  __pyx_r = ((PyObject *)__pyx_t_1);
  goto __pyx_L0;

  /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":296
 *         # for this using PyDataType_HASFIELDS.
 *         @property
 *         cdef inline object fields(self):             # <<<<<<<<<<<<<<
 *             return <object>PyDataType_FIELDS(self)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":300
 * 
 *         @property
 *         cdef inline tuple names(self):             # <<<<<<<<<<<<<<
 *             return <tuple>PyDataType_NAMES(self)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_5dtype_5names_names(PyArray_Descr *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1;
  __Pyx_RefNannySetupContext("names", 1);

  /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":301
 *         @property
 *         cdef inline tuple names(self):
 *             return <tuple>PyDataType_NAMES(self)             # <<<<<<<<<<<<<<
 * 
 *         # Use PyDataType_HASSUBARRAY to test whether this field is
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyDataType_NAMES(__pyx_v_self);
  __Pyx_INCREF(((PyObject*)__pyx_t_1));
  __pyx_r = ((PyObject*)__pyx_t_1);
  goto __pyx_L0;

  /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":300
 * 
 *         @property
 *         cdef inline tuple names(self):             # <<<<<<<<<<<<<<
 *             return <tuple>PyDataType_NAMES(self)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":307
 *         # this field via the inline helper method PyDataType_SHAPE.
 *         @property
 *         cdef inline PyArray_ArrayDescr* subarray(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             return PyDataType_SUBARRAY(self)
 * 
 */

static CYTHON_INLINE PyArray_ArrayDescr *__pyx_f_5numpy_5dtype_8subarray_subarray(PyArray_Descr *__pyx_v_self) {
  PyArray_ArrayDescr *__pyx_r;

  /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":308
 *         @property
 *         cdef inline PyArray_ArrayDescr* subarray(self) noexcept nogil:
 *             return PyDataType_SUBARRAY(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyDataType_SUBARRAY(__pyx_v_self);
  goto __pyx_L0;

  /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":307
 *         # this field via the inline helper method PyDataType_SHAPE.
 *         @property
 *         cdef inline PyArray_ArrayDescr* subarray(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             return PyDataType_SUBARRAY(self)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":311
 * 
 *         @property
 *         cdef inline npy_uint64 flags(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """The data types flags."""
 *             return PyDataType_FLAGS(self)
 */

static CYTHON_INLINE npy_uint64 __pyx_f_5numpy_5dtype_5flags_flags(PyArray_Descr *__pyx_v_self) {
  npy_uint64 __pyx_r;

  /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":313
 *         cdef inline npy_uint64 flags(self) noexcept nogil:
 *             """The data types flags."""
 *             return PyDataType_FLAGS(self)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = PyDataType_FLAGS(__pyx_v_self);
  goto __pyx_L0;

  /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":311
 * 
 *         @property
 *         cdef inline npy_uint64 flags(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """The data types flags."""
 *             return PyDataType_FLAGS(self)
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":323
 * 
 *         @property
 *         cdef inline int numiter(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """The number of arrays that need to be broadcast to the same shape."""
 *             return PyArray_MultiIter_NUMITER(self)
 */

static CYTHON_INLINE int __pyx_f_5numpy_9broadcast_7numiter_numiter(PyArrayMultiIterObject *__pyx_v_self) {
  int __pyx_r;

  /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":325
 *         cdef inline int numiter(self) noexcept nogil:
 *             """The number of arrays that need to be broadcast to the same shape."""
 *             return PyArray_MultiIter_NUMITER(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyArray_MultiIter_NUMITER(__pyx_v_self);
  goto __pyx_L0;

  /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":323
 * 
 *         @property
 *         cdef inline int numiter(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """The number of arrays that need to be broadcast to the same shape."""
 *             return PyArray_MultiIter_NUMITER(self)
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":328
 * 
 *         @property
 *         cdef inline npy_intp size(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """The total broadcasted size."""
 *             return PyArray_MultiIter_SIZE(self)
 */

static CYTHON_INLINE npy_intp __pyx_f_5numpy_9broadcast_4size_size(PyArrayMultiIterObject *__pyx_v_self) {
  npy_intp __pyx_r;

  /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":330
 *         cdef inline npy_intp size(self) noexcept nogil:
 *             """The total broadcasted size."""
 *             return PyArray_MultiIter_SIZE(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyArray_MultiIter_SIZE(__pyx_v_self);
  goto __pyx_L0;

  /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":328
 * 
 *         @property
 *         cdef inline npy_intp size(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """The total broadcasted size."""
 *             return PyArray_MultiIter_SIZE(self)
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":333
 * 
 *         @property
 *         cdef inline npy_intp index(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """The current (1-d) index into the broadcasted result."""
 *             return PyArray_MultiIter_INDEX(self)
 */

static CYTHON_INLINE npy_intp __pyx_f_5numpy_9broadcast_5index_index(PyArrayMultiIterObject *__pyx_v_self) {
  npy_intp __pyx_r;

  /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":335
 *         cdef inline npy_intp index(self) noexcept nogil:
 *             """The current (1-d) index into the broadcasted result."""
 *             return PyArray_MultiIter_INDEX(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyArray_MultiIter_INDEX(__pyx_v_self);
  goto __pyx_L0;

  /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":333
 * 
 *         @property
 *         cdef inline npy_intp index(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """The current (1-d) index into the broadcasted result."""
 *             return PyArray_MultiIter_INDEX(self)
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":338
 * 
 *         @property
 *         cdef inline int nd(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """The number of dimensions in the broadcasted result."""
 *             return PyArray_MultiIter_NDIM(self)
 */

static CYTHON_INLINE int __pyx_f_5numpy_9broadcast_2nd_nd(PyArrayMultiIterObject *__pyx_v_self) {
  int __pyx_r;

  /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":340
 *         cdef inline int nd(self) noexcept nogil:
 *             """The number of dimensions in the broadcasted result."""
 *             return PyArray_MultiIter_NDIM(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyArray_MultiIter_NDIM(__pyx_v_self);
  goto __pyx_L0;

  /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":338
 * 
 *         @property
 *         cdef inline int nd(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """The number of dimensions in the broadcasted result."""
 *             return PyArray_MultiIter_NDIM(self)
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":343
 * 
 *         @property
 *         cdef inline npy_intp* dimensions(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """The shape of the broadcasted result."""
 *             return PyArray_MultiIter_DIMS(self)
 */

static CYTHON_INLINE npy_intp *__pyx_f_5numpy_9broadcast_10dimensions_dimensions(PyArrayMultiIterObject *__pyx_v_self) {
  npy_intp *__pyx_r;

  /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":345
 *         cdef inline npy_intp* dimensions(self) noexcept nogil:
 *             """The shape of the broadcasted result."""
 *             return PyArray_MultiIter_DIMS(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyArray_MultiIter_DIMS(__pyx_v_self);
  goto __pyx_L0;

  /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":343
 * 
 *         @property
 *         cdef inline npy_intp* dimensions(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """The shape of the broadcasted result."""
 *             return PyArray_MultiIter_DIMS(self)
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":348
 * 
 *         @property
 *         cdef inline void** iters(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """An array of iterator objects that holds the iterators for the arrays to be broadcast together.
 *             On return, the iterators are adjusted for broadcasting."""
 */

static CYTHON_INLINE void **__pyx_f_5numpy_9broadcast_5iters_iters(PyArrayMultiIterObject *__pyx_v_self) {
  void **__pyx_r;

  /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":351
 *             """An array of iterator objects that holds the iterators for the arrays to be broadcast together.
 *             On return, the iterators are adjusted for broadcasting."""
 *             return PyArray_MultiIter_ITERS(self)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = PyArray_MultiIter_ITERS(__pyx_v_self);
  goto __pyx_L0;

  /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":348
 * 
 *         @property
 *         cdef inline void** iters(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """An array of iterator objects that holds the iterators for the arrays to be broadcast together.
 *             On return, the iterators are adjusted for broadcasting."""
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":366
 * 
 *         @property
 *         cdef inline PyObject* base(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """Returns a borrowed reference to the object owning the data/memory.
 *             """
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_7ndarray_4base_base(PyArrayObject *__pyx_v_self) {
  PyObject *__pyx_r;

  /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":369
 *             """Returns a borrowed reference to the object owning the data/memory.
 *             """
 *             return PyArray_BASE(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyArray_BASE(__pyx_v_self);
  goto __pyx_L0;

  /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":366
 * 
 *         @property
 *         cdef inline PyObject* base(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """Returns a borrowed reference to the object owning the data/memory.
 *             """
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":372
 * 
 *         @property
 *         cdef inline dtype descr(self):             # <<<<<<<<<<<<<<
 *             """Returns an owned reference to the dtype of the array.
 *             """
 */

static CYTHON_INLINE PyArray_Descr *__pyx_f_5numpy_7ndarray_5descr_descr(PyArrayObject *__pyx_v_self) {
  PyArray_Descr *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyArray_Descr *__pyx_t_1;
  __Pyx_RefNannySetupContext("descr", 1);

  /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":375
 *             """Returns an owned reference to the dtype of the array.
 *             """
 *             return <dtype>PyArray_DESCR(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __Pyx_XDECREF((PyObject *)__pyx_r);
  __pyx_t_1 = PyArray_DESCR(__pyx_v_self);
  __Pyx_INCREF((PyObject *)((PyArray_Descr *)__pyx_t_1));
  __pyx_r = ((PyArray_Descr *)__pyx_t_1);
  goto __pyx_L0;

  /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":372
 * 
 *         @property
 *         cdef inline dtype descr(self):             # <<<<<<<<<<<<<<
 *             """Returns an owned reference to the dtype of the array.
 *             """
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":378
 * 
 *         @property
 *         cdef inline int ndim(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """Returns the number of dimensions in the array.
 *             """
 */

static CYTHON_INLINE int __pyx_f_5numpy_7ndarray_4ndim_ndim(PyArrayObject *__pyx_v_self) {
  int __pyx_r;

  /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":381
 *             """Returns the number of dimensions in the array.
 *             """
 *             return PyArray_NDIM(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyArray_NDIM(__pyx_v_self);
  goto __pyx_L0;

  /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":378
 * 
 *         @property
 *         cdef inline int ndim(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """Returns the number of dimensions in the array.
 *             """
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":384
 * 
 *         @property
 *         cdef inline npy_intp *shape(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """Returns a pointer to the dimensions/shape of the array.
 *             The number of elements matches the number of dimensions of the array (ndim).
 */

static CYTHON_INLINE npy_intp *__pyx_f_5numpy_7ndarray_5shape_shape(PyArrayObject *__pyx_v_self) {
  npy_intp *__pyx_r;

  /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":389
 *             Can return NULL for 0-dimensional arrays.
 *             """
 *             return PyArray_DIMS(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyArray_DIMS(__pyx_v_self);
  goto __pyx_L0;

  /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":384
 * 
 *         @property
 *         cdef inline npy_intp *shape(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """Returns a pointer to the dimensions/shape of the array.
 *             The number of elements matches the number of dimensions of the array (ndim).
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":392
 * 
 *         @property
 *         cdef inline npy_intp *strides(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """Returns a pointer to the strides of the array.
 *             The number of elements matches the number of dimensions of the array (ndim).
 */

static CYTHON_INLINE npy_intp *__pyx_f_5numpy_7ndarray_7strides_strides(PyArrayObject *__pyx_v_self) {
  npy_intp *__pyx_r;

  /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":396
 *             The number of elements matches the number of dimensions of the array (ndim).
 *             """
 *             return PyArray_STRIDES(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyArray_STRIDES(__pyx_v_self);
  goto __pyx_L0;

  /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":392
 * 
 *         @property
 *         cdef inline npy_intp *strides(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """Returns a pointer to the strides of the array.
 *             The number of elements matches the number of dimensions of the array (ndim).
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":399
 * 
 *         @property
 *         cdef inline npy_intp size(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """Returns the total size (in number of elements) of the array.
 *             """
 */

static CYTHON_INLINE npy_intp __pyx_f_5numpy_7ndarray_4size_size(PyArrayObject *__pyx_v_self) {
  npy_intp __pyx_r;

  /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":402
 *             """Returns the total size (in number of elements) of the array.
 *             """
 *             return PyArray_SIZE(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyArray_SIZE(__pyx_v_self);
  goto __pyx_L0;

  /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":399
 * 
 *         @property
 *         cdef inline npy_intp size(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """Returns the total size (in number of elements) of the array.
 *             """
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":405
 * 
 *         @property
 *         cdef inline char* data(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """The pointer to the data buffer as a char*.
 *             This is provided for legacy reasons to avoid direct struct field access.
 */

static CYTHON_INLINE char *__pyx_f_5numpy_7ndarray_4data_data(PyArrayObject *__pyx_v_self) {
  char *__pyx_r;

  /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":411
 *             of `PyArray_DATA()` instead, which returns a 'void*'.
 *             """
 *             return PyArray_BYTES(self)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = PyArray_BYTES(__pyx_v_self);
  goto __pyx_L0;

  /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":405
 * 
 *         @property
 *         cdef inline char* data(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """The pointer to the data buffer as a char*.
 *             This is provided for legacy reasons to avoid direct struct field access.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":807
 * ctypedef long double complex clongdouble_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 1);

  /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":808
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 808, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":807
 * ctypedef long double complex clongdouble_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":810
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 1);

  /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":811
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 811, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":810
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":813
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 1);

  /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":814
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 814, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":813
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":816
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 1);

  /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":817
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 817, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":816
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":819
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 1);

  /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":820
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 820, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":819
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":822
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyDataType_SHAPE(PyArray_Descr *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2;
  __Pyx_RefNannySetupContext("PyDataType_SHAPE", 1);

  /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":823
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  __pyx_t_1 = PyDataType_HASSUBARRAY(__pyx_v_d);
  if (__pyx_t_1) {

    /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":824
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape             # <<<<<<<<<<<<<<
 *     else:
 *         return ()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_f_5numpy_5dtype_8subarray_subarray(__pyx_v_d)->shape;
    __Pyx_INCREF(((PyObject*)__pyx_t_2));
    __pyx_r = ((PyObject*)__pyx_t_2);
    goto __pyx_L0;

    /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":823
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  }

  /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":826
 *         return <tuple>d.subarray.shape
 *     else:
 *         return ()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_empty_tuple);
    __pyx_r = __pyx_empty_tuple;
    goto __pyx_L0;
  }

  /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":822
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":1010
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base) except *:             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":1011
 * 
 * cdef inline void set_array_base(ndarray arr, object base) except *:
 *     Py_INCREF(base) # important to do this before stealing the reference below!             # <<<<<<<<<<<<<<
 *     PyArray_SetBaseObject(arr, base)
 * 
 */
  Py_INCREF(__pyx_v_base);

  /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":1012
 * cdef inline void set_array_base(ndarray arr, object base) except *:
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  __pyx_t_1 = PyArray_SetBaseObject(__pyx_v_arr, __pyx_v_base); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(2, 1012, __pyx_L1_error)

  /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":1010
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base) except *:             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("numpy.set_array_base", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
}

/* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":1014
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_v_base;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("get_array_base", 1);

  /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":1015
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)             # <<<<<<<<<<<<<<
 *     if base is NULL:
 *         return None
 */
  __pyx_v_base = PyArray_BASE(__pyx_v_arr);

  /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":1016
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  __pyx_t_1 = (__pyx_v_base == NULL);
  if (__pyx_t_1) {

    /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":1017
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     return <object>base
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":1016
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  }

  /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":1018
 *     if base is NULL:
 *         return None
 *     return <object>base             # <<<<<<<<<<<<<<
 * 
 * # Versions of the import_* functions which are more suitable for
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_base));
  __pyx_r = ((PyObject *)__pyx_v_base);
  goto __pyx_L0;

  /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":1014
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":1022
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_array(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_array", 1);

  /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":1023
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":1024
 * cdef inline int import_array() except -1:
 *     try:
 *         __pyx_import_array()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy._core.multiarray failed to import")
 */
      __pyx_t_4 = _import_array(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 1024, __pyx_L3_error)

      /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":1023
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":1025
 *     try:
 *         __pyx_import_array()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy._core.multiarray failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 1025, __pyx_L5_except_error)
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);

      /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":1026
 *         __pyx_import_array()
 *     except Exception:
 *         raise ImportError("numpy._core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 1026, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 1026, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;

    /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":1023
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":1022
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":1028
 *         raise ImportError("numpy._core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_umath(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_umath", 1);

  /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":1029
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":1030
 * cdef inline int import_umath() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy._core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 1030, __pyx_L3_error)

      /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":1029
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":1031
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy._core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 1031, __pyx_L5_except_error)
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);

      /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":1032
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy._core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 1032, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 1032, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;

    /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":1029
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":1028
 *         raise ImportError("numpy._core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":1034
 *         raise ImportError("numpy._core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_ufunc(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_ufunc", 1);

  /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":1035
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":1036
 * cdef inline int import_ufunc() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy._core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 1036, __pyx_L3_error)

      /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":1035
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":1037
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy._core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 1037, __pyx_L5_except_error)
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);

      /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":1038
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy._core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 1038, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 1038, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;

    /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":1035
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":1034
 *         raise ImportError("numpy._core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":1041
 * 
 * 
 * cdef inline bint is_timedelta64_object(object obj) noexcept:             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.timedelta64)`
 */

static CYTHON_INLINE int __pyx_f_5numpy_is_timedelta64_object(PyObject *__pyx_v_obj) {
  int __pyx_r;

  /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":1053
 *     bool
 *     """
 *     return PyObject_TypeCheck(obj, &PyTimedeltaArrType_Type)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = PyObject_TypeCheck(__pyx_v_obj, (&PyTimedeltaArrType_Type));
  goto __pyx_L0;

  /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":1041
 * 
 * 
 * cdef inline bint is_timedelta64_object(object obj) noexcept:             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.timedelta64)`
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":1056
 * 
 * 
 * cdef inline bint is_datetime64_object(object obj) noexcept:             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.datetime64)`
 */

static CYTHON_INLINE int __pyx_f_5numpy_is_datetime64_object(PyObject *__pyx_v_obj) {
  int __pyx_r;

  /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":1068
 *     bool
 *     """
 *     return PyObject_TypeCheck(obj, &PyDatetimeArrType_Type)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = PyObject_TypeCheck(__pyx_v_obj, (&PyDatetimeArrType_Type));
  goto __pyx_L0;

  /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":1056
 * 
 * 
 * cdef inline bint is_datetime64_object(object obj) noexcept:             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.datetime64)`
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":1071
 * 
 * 
 * cdef inline npy_datetime get_datetime64_value(object obj) noexcept nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy datetime64 object
 */

static CYTHON_INLINE npy_datetime __pyx_f_5numpy_get_datetime64_value(PyObject *__pyx_v_obj) {
  npy_datetime __pyx_r;

  /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":1078
 *     also needed.  That can be found using `get_datetime64_unit`.
 *     """
 *     return (<PyDatetimeScalarObject*>obj).obval             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((PyDatetimeScalarObject *)__pyx_v_obj)->obval;
  goto __pyx_L0;

  /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":1071
 * 
 * 
 * cdef inline npy_datetime get_datetime64_value(object obj) noexcept nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy datetime64 object
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":1081
 * 
 * 
 * cdef inline npy_timedelta get_timedelta64_value(object obj) noexcept nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy timedelta64 object
 */

static CYTHON_INLINE npy_timedelta __pyx_f_5numpy_get_timedelta64_value(PyObject *__pyx_v_obj) {
  npy_timedelta __pyx_r;

  /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":1085
 *     returns the int64 value underlying scalar numpy timedelta64 object
 *     """
 *     return (<PyTimedeltaScalarObject*>obj).obval             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((PyTimedeltaScalarObject *)__pyx_v_obj)->obval;
  goto __pyx_L0;

  /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":1081
 * 
 * 
 * cdef inline npy_timedelta get_timedelta64_value(object obj) noexcept nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy timedelta64 object
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":1088
 * 
 * 
 * cdef inline NPY_DATETIMEUNIT get_datetime64_unit(object obj) noexcept nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the unit part of the dtype for a numpy datetime64 object.
 */

static CYTHON_INLINE NPY_DATETIMEUNIT __pyx_f_5numpy_get_datetime64_unit(PyObject *__pyx_v_obj) {
  NPY_DATETIMEUNIT __pyx_r;

  /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":1092
 *     returns the unit part of the dtype for a numpy datetime64 object.
 *     """
 *     return <NPY_DATETIMEUNIT>(<PyDatetimeScalarObject*>obj).obmeta.base             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((NPY_DATETIMEUNIT)((PyDatetimeScalarObject *)__pyx_v_obj)->obmeta.base);
  goto __pyx_L0;

  /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":1088
 * 
 * 
 * cdef inline NPY_DATETIMEUNIT get_datetime64_unit(object obj) noexcept nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the unit part of the dtype for a numpy datetime64 object.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "miololib.pyx":38
 *     cdef mld.diagonal[double]* diagonalDouble
 * 
 *     def isMatrix(self):             # <<<<<<<<<<<<<<
 *         """
 *             Returns true if object is a miolo.Matrix.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_11mioloObject_1isMatrix(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_11mioloObject_isMatrix, "mioloObject.isMatrix(self)\n\n            Returns true if object is a miolo.Matrix.\n        ");
static PyMethodDef __pyx_mdef_5miolo_11mioloObject_1isMatrix = {"isMatrix", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_11mioloObject_1isMatrix, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_11mioloObject_isMatrix};
static PyObject *__pyx_pw_5miolo_11mioloObject_1isMatrix(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isMatrix (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("isMatrix", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "isMatrix", 0))) return NULL;
  __pyx_r = __pyx_pf_5miolo_11mioloObject_isMatrix(((struct __pyx_obj_5miolo_mioloObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_11mioloObject_isMatrix(struct __pyx_obj_5miolo_mioloObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("isMatrix", 1);

  /* "miololib.pyx":42
 *             Returns true if object is a miolo.Matrix.
 *         """
 *         if self.mtxInt is not NULL:             # <<<<<<<<<<<<<<
 *             return True
 *         if self.mtxFloat is not NULL:
 */
  __pyx_t_1 = (__pyx_v_self->mtxInt != NULL);
  if (__pyx_t_1) {

    /* "miololib.pyx":43
 *         """
 *         if self.mtxInt is not NULL:
 *             return True             # <<<<<<<<<<<<<<
 *         if self.mtxFloat is not NULL:
 *             return True
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    goto __pyx_L0;

    /* "miololib.pyx":42
 *             Returns true if object is a miolo.Matrix.
 *         """
 *         if self.mtxInt is not NULL:             # <<<<<<<<<<<<<<
 *             return True
 *         if self.mtxFloat is not NULL:
 */
  }

  /* "miololib.pyx":44
 *         if self.mtxInt is not NULL:
 *             return True
 *         if self.mtxFloat is not NULL:             # <<<<<<<<<<<<<<
 *             return True
 *         if self.mtxDouble is not NULL:
 */
  __pyx_t_1 = (__pyx_v_self->mtxFloat != NULL);
  if (__pyx_t_1) {

    /* "miololib.pyx":45
 *             return True
 *         if self.mtxFloat is not NULL:
 *             return True             # <<<<<<<<<<<<<<
 *         if self.mtxDouble is not NULL:
 *             return True
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    goto __pyx_L0;

    /* "miololib.pyx":44
 *         if self.mtxInt is not NULL:
 *             return True
 *         if self.mtxFloat is not NULL:             # <<<<<<<<<<<<<<
 *             return True
 *         if self.mtxDouble is not NULL:
 */
  }

  /* "miololib.pyx":46
 *         if self.mtxFloat is not NULL:
 *             return True
 *         if self.mtxDouble is not NULL:             # <<<<<<<<<<<<<<
 *             return True
 *         return False
 */
  __pyx_t_1 = (__pyx_v_self->mtxDouble != NULL);
  if (__pyx_t_1) {

    /* "miololib.pyx":47
 *             return True
 *         if self.mtxDouble is not NULL:
 *             return True             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    goto __pyx_L0;

    /* "miololib.pyx":46
 *         if self.mtxFloat is not NULL:
 *             return True
 *         if self.mtxDouble is not NULL:             # <<<<<<<<<<<<<<
 *             return True
 *         return False
 */
  }

  /* "miololib.pyx":48
 *         if self.mtxDouble is not NULL:
 *             return True
 *         return False             # <<<<<<<<<<<<<<
 * 
 *     def isGraph(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_False);
  __pyx_r = Py_False;
  goto __pyx_L0;

  /* "miololib.pyx":38
 *     cdef mld.diagonal[double]* diagonalDouble
 * 
 *     def isMatrix(self):             # <<<<<<<<<<<<<<
 *         """
 *             Returns true if object is a miolo.Matrix.
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":50
 *         return False
 * 
 *     def isGraph(self):             # <<<<<<<<<<<<<<
 *         """
 *             Returns true if object is miolo.Graph.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_11mioloObject_3isGraph(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_11mioloObject_2isGraph, "mioloObject.isGraph(self)\n\n            Returns true if object is miolo.Graph.\n        ");
static PyMethodDef __pyx_mdef_5miolo_11mioloObject_3isGraph = {"isGraph", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_11mioloObject_3isGraph, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_11mioloObject_2isGraph};
static PyObject *__pyx_pw_5miolo_11mioloObject_3isGraph(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isGraph (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("isGraph", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "isGraph", 0))) return NULL;
  __pyx_r = __pyx_pf_5miolo_11mioloObject_2isGraph(((struct __pyx_obj_5miolo_mioloObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_11mioloObject_2isGraph(struct __pyx_obj_5miolo_mioloObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("isGraph", 1);

  /* "miololib.pyx":54
 *             Returns true if object is miolo.Graph.
 *         """
 *         if self.graphInt is not NULL:             # <<<<<<<<<<<<<<
 *             return True
 *         if self.graphFloat is not NULL:
 */
  __pyx_t_1 = (__pyx_v_self->graphInt != NULL);
  if (__pyx_t_1) {

    /* "miololib.pyx":55
 *         """
 *         if self.graphInt is not NULL:
 *             return True             # <<<<<<<<<<<<<<
 *         if self.graphFloat is not NULL:
 *             return True
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    goto __pyx_L0;

    /* "miololib.pyx":54
 *             Returns true if object is miolo.Graph.
 *         """
 *         if self.graphInt is not NULL:             # <<<<<<<<<<<<<<
 *             return True
 *         if self.graphFloat is not NULL:
 */
  }

  /* "miololib.pyx":56
 *         if self.graphInt is not NULL:
 *             return True
 *         if self.graphFloat is not NULL:             # <<<<<<<<<<<<<<
 *             return True
 *         if self.graphDouble is not NULL:
 */
  __pyx_t_1 = (__pyx_v_self->graphFloat != NULL);
  if (__pyx_t_1) {

    /* "miololib.pyx":57
 *             return True
 *         if self.graphFloat is not NULL:
 *             return True             # <<<<<<<<<<<<<<
 *         if self.graphDouble is not NULL:
 *             return True
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    goto __pyx_L0;

    /* "miololib.pyx":56
 *         if self.graphInt is not NULL:
 *             return True
 *         if self.graphFloat is not NULL:             # <<<<<<<<<<<<<<
 *             return True
 *         if self.graphDouble is not NULL:
 */
  }

  /* "miololib.pyx":58
 *         if self.graphFloat is not NULL:
 *             return True
 *         if self.graphDouble is not NULL:             # <<<<<<<<<<<<<<
 *             return True
 *         return False
 */
  __pyx_t_1 = (__pyx_v_self->graphDouble != NULL);
  if (__pyx_t_1) {

    /* "miololib.pyx":59
 *             return True
 *         if self.graphDouble is not NULL:
 *             return True             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    goto __pyx_L0;

    /* "miololib.pyx":58
 *         if self.graphFloat is not NULL:
 *             return True
 *         if self.graphDouble is not NULL:             # <<<<<<<<<<<<<<
 *             return True
 *         return False
 */
  }

  /* "miololib.pyx":60
 *         if self.graphDouble is not NULL:
 *             return True
 *         return False             # <<<<<<<<<<<<<<
 * 
 *     def isDigraph(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_False);
  __pyx_r = Py_False;
  goto __pyx_L0;

  /* "miololib.pyx":50
 *         return False
 * 
 *     def isGraph(self):             # <<<<<<<<<<<<<<
 *         """
 *             Returns true if object is miolo.Graph.
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":62
 *         return False
 * 
 *     def isDigraph(self):             # <<<<<<<<<<<<<<
 *         """
 *             Returns true if object is miolo.Digraph
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_11mioloObject_5isDigraph(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_11mioloObject_4isDigraph, "mioloObject.isDigraph(self)\n \n            Returns true if object is miolo.Digraph\n        ");
static PyMethodDef __pyx_mdef_5miolo_11mioloObject_5isDigraph = {"isDigraph", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_11mioloObject_5isDigraph, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_11mioloObject_4isDigraph};
static PyObject *__pyx_pw_5miolo_11mioloObject_5isDigraph(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isDigraph (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("isDigraph", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "isDigraph", 0))) return NULL;
  __pyx_r = __pyx_pf_5miolo_11mioloObject_4isDigraph(((struct __pyx_obj_5miolo_mioloObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_11mioloObject_4isDigraph(struct __pyx_obj_5miolo_mioloObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("isDigraph", 1);

  /* "miololib.pyx":66
 *             Returns true if object is miolo.Digraph
 *         """
 *         if self.digraphInt is not NULL:             # <<<<<<<<<<<<<<
 *             return True
 *         if self.digraphFloat is not NULL:
 */
  __pyx_t_1 = (__pyx_v_self->digraphInt != NULL);
  if (__pyx_t_1) {

    /* "miololib.pyx":67
 *         """
 *         if self.digraphInt is not NULL:
 *             return True             # <<<<<<<<<<<<<<
 *         if self.digraphFloat is not NULL:
 *             return True
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    goto __pyx_L0;

    /* "miololib.pyx":66
 *             Returns true if object is miolo.Digraph
 *         """
 *         if self.digraphInt is not NULL:             # <<<<<<<<<<<<<<
 *             return True
 *         if self.digraphFloat is not NULL:
 */
  }

  /* "miololib.pyx":68
 *         if self.digraphInt is not NULL:
 *             return True
 *         if self.digraphFloat is not NULL:             # <<<<<<<<<<<<<<
 *             return True
 *         if self.digraphDouble is not NULL:
 */
  __pyx_t_1 = (__pyx_v_self->digraphFloat != NULL);
  if (__pyx_t_1) {

    /* "miololib.pyx":69
 *             return True
 *         if self.digraphFloat is not NULL:
 *             return True             # <<<<<<<<<<<<<<
 *         if self.digraphDouble is not NULL:
 *             return True
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    goto __pyx_L0;

    /* "miololib.pyx":68
 *         if self.digraphInt is not NULL:
 *             return True
 *         if self.digraphFloat is not NULL:             # <<<<<<<<<<<<<<
 *             return True
 *         if self.digraphDouble is not NULL:
 */
  }

  /* "miololib.pyx":70
 *         if self.digraphFloat is not NULL:
 *             return True
 *         if self.digraphDouble is not NULL:             # <<<<<<<<<<<<<<
 *             return True
 *         return False
 */
  __pyx_t_1 = (__pyx_v_self->digraphDouble != NULL);
  if (__pyx_t_1) {

    /* "miololib.pyx":71
 *             return True
 *         if self.digraphDouble is not NULL:
 *             return True             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    goto __pyx_L0;

    /* "miololib.pyx":70
 *         if self.digraphFloat is not NULL:
 *             return True
 *         if self.digraphDouble is not NULL:             # <<<<<<<<<<<<<<
 *             return True
 *         return False
 */
  }

  /* "miololib.pyx":72
 *         if self.digraphDouble is not NULL:
 *             return True
 *         return False             # <<<<<<<<<<<<<<
 * 
 *     def isDiagonal(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_False);
  __pyx_r = Py_False;
  goto __pyx_L0;

  /* "miololib.pyx":62
 *         return False
 * 
 *     def isDigraph(self):             # <<<<<<<<<<<<<<
 *         """
 *             Returns true if object is miolo.Digraph
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":74
 *         return False
 * 
 *     def isDiagonal(self):             # <<<<<<<<<<<<<<
 *         """
 *             Returns true if object is miolo.Diagonal
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_11mioloObject_7isDiagonal(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_11mioloObject_6isDiagonal, "mioloObject.isDiagonal(self)\n \n            Returns true if object is miolo.Diagonal\n        ");
static PyMethodDef __pyx_mdef_5miolo_11mioloObject_7isDiagonal = {"isDiagonal", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_11mioloObject_7isDiagonal, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_11mioloObject_6isDiagonal};
static PyObject *__pyx_pw_5miolo_11mioloObject_7isDiagonal(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isDiagonal (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("isDiagonal", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "isDiagonal", 0))) return NULL;
  __pyx_r = __pyx_pf_5miolo_11mioloObject_6isDiagonal(((struct __pyx_obj_5miolo_mioloObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_11mioloObject_6isDiagonal(struct __pyx_obj_5miolo_mioloObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("isDiagonal", 1);

  /* "miololib.pyx":78
 *             Returns true if object is miolo.Diagonal
 *         """
 *         if self.diagonalInt is not NULL:             # <<<<<<<<<<<<<<
 *             return True
 *         if self.digraphFloat is not NULL:
 */
  __pyx_t_1 = (__pyx_v_self->diagonalInt != NULL);
  if (__pyx_t_1) {

    /* "miololib.pyx":79
 *         """
 *         if self.diagonalInt is not NULL:
 *             return True             # <<<<<<<<<<<<<<
 *         if self.digraphFloat is not NULL:
 *             return True
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    goto __pyx_L0;

    /* "miololib.pyx":78
 *             Returns true if object is miolo.Diagonal
 *         """
 *         if self.diagonalInt is not NULL:             # <<<<<<<<<<<<<<
 *             return True
 *         if self.digraphFloat is not NULL:
 */
  }

  /* "miololib.pyx":80
 *         if self.diagonalInt is not NULL:
 *             return True
 *         if self.digraphFloat is not NULL:             # <<<<<<<<<<<<<<
 *             return True
 *         if self.digraphDouble is not NULL:
 */
  __pyx_t_1 = (__pyx_v_self->digraphFloat != NULL);
  if (__pyx_t_1) {

    /* "miololib.pyx":81
 *             return True
 *         if self.digraphFloat is not NULL:
 *             return True             # <<<<<<<<<<<<<<
 *         if self.digraphDouble is not NULL:
 *             return True
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    goto __pyx_L0;

    /* "miololib.pyx":80
 *         if self.diagonalInt is not NULL:
 *             return True
 *         if self.digraphFloat is not NULL:             # <<<<<<<<<<<<<<
 *             return True
 *         if self.digraphDouble is not NULL:
 */
  }

  /* "miololib.pyx":82
 *         if self.digraphFloat is not NULL:
 *             return True
 *         if self.digraphDouble is not NULL:             # <<<<<<<<<<<<<<
 *             return True
 *         return False
 */
  __pyx_t_1 = (__pyx_v_self->digraphDouble != NULL);
  if (__pyx_t_1) {

    /* "miololib.pyx":83
 *             return True
 *         if self.digraphDouble is not NULL:
 *             return True             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    goto __pyx_L0;

    /* "miololib.pyx":82
 *         if self.digraphFloat is not NULL:
 *             return True
 *         if self.digraphDouble is not NULL:             # <<<<<<<<<<<<<<
 *             return True
 *         return False
 */
  }

  /* "miololib.pyx":84
 *         if self.digraphDouble is not NULL:
 *             return True
 *         return False             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_False);
  __pyx_r = Py_False;
  goto __pyx_L0;

  /* "miololib.pyx":74
 *         return False
 * 
 *     def isDiagonal(self):             # <<<<<<<<<<<<<<
 *         """
 *             Returns true if object is miolo.Diagonal
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":86
 *         return False
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def ctype(self):
 *         pass
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_11mioloObject_5ctype_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5miolo_11mioloObject_5ctype_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5miolo_11mioloObject_5ctype___get__(((struct __pyx_obj_5miolo_mioloObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_11mioloObject_5ctype___get__(CYTHON_UNUSED struct __pyx_obj_5miolo_mioloObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 1);

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":89
 *     def ctype(self):
 *         pass
 *     @property             # <<<<<<<<<<<<<<
 *     def rows(self):
 *         pass
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_11mioloObject_4rows_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5miolo_11mioloObject_4rows_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5miolo_11mioloObject_4rows___get__(((struct __pyx_obj_5miolo_mioloObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_11mioloObject_4rows___get__(CYTHON_UNUSED struct __pyx_obj_5miolo_mioloObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 1);

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":92
 *     def rows(self):
 *         pass
 *     @property             # <<<<<<<<<<<<<<
 *     def cols(self):
 *         pass
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_11mioloObject_4cols_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5miolo_11mioloObject_4cols_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5miolo_11mioloObject_4cols___get__(((struct __pyx_obj_5miolo_mioloObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_11mioloObject_4cols___get__(CYTHON_UNUSED struct __pyx_obj_5miolo_mioloObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 1);

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":95
 *     def cols(self):
 *         pass
 *     @property             # <<<<<<<<<<<<<<
 *     def nodes(self):
 *         pass
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_11mioloObject_5nodes_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5miolo_11mioloObject_5nodes_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5miolo_11mioloObject_5nodes___get__(((struct __pyx_obj_5miolo_mioloObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_11mioloObject_5nodes___get__(CYTHON_UNUSED struct __pyx_obj_5miolo_mioloObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 1);

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":98
 *     def nodes(self):
 *         pass
 *     @property             # <<<<<<<<<<<<<<
 *     def dim(self):
 *         pass
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_11mioloObject_3dim_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5miolo_11mioloObject_3dim_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5miolo_11mioloObject_3dim___get__(((struct __pyx_obj_5miolo_mioloObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_11mioloObject_3dim___get__(CYTHON_UNUSED struct __pyx_obj_5miolo_mioloObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 1);

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.diagonalDouble,self.diagonalFloat,self.diagonalInt,self.digraphDouble,self.digraphFloat,self.digraphInt,self.graphDouble,self.graphFloat,self.graphInt,self.mtxDouble,self.mtxFloat,self.mtxInt cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_11mioloObject_9__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_11mioloObject_8__reduce_cython__, "mioloObject.__reduce_cython__(self)");
static PyMethodDef __pyx_mdef_5miolo_11mioloObject_9__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_11mioloObject_9__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_11mioloObject_8__reduce_cython__};
static PyObject *__pyx_pw_5miolo_11mioloObject_9__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_5miolo_11mioloObject_8__reduce_cython__(((struct __pyx_obj_5miolo_mioloObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_11mioloObject_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_mioloObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self.diagonalDouble,self.diagonalFloat,self.diagonalInt,self.digraphDouble,self.digraphFloat,self.digraphInt,self.graphDouble,self.graphFloat,self.graphInt,self.mtxDouble,self.mtxFloat,self.mtxInt cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.diagonalDouble,self.diagonalFloat,self.diagonalInt,self.digraphDouble,self.digraphFloat,self.digraphInt,self.graphDouble,self.graphFloat,self.graphInt,self.mtxDouble,self.mtxFloat,self.mtxInt cannot be converted to a Python object for pickling"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_diagonalDouble_self_diagona, 0, 0);
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.diagonalDouble,self.diagonalFloat,self.diagonalInt,self.digraphDouble,self.digraphFloat,self.digraphInt,self.graphDouble,self.graphFloat,self.graphInt,self.mtxDouble,self.mtxFloat,self.mtxInt cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("miolo.mioloObject.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.diagonalDouble,self.diagonalFloat,self.diagonalInt,self.digraphDouble,self.digraphFloat,self.digraphInt,self.graphDouble,self.graphFloat,self.graphInt,self.mtxDouble,self.mtxFloat,self.mtxInt cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.diagonalDouble,self.diagonalFloat,self.diagonalInt,self.digraphDouble,self.digraphFloat,self.digraphInt,self.graphDouble,self.graphFloat,self.graphInt,self.mtxDouble,self.mtxFloat,self.mtxInt cannot be converted to a Python object for pickling"
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_11mioloObject_11__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_11mioloObject_10__setstate_cython__, "mioloObject.__setstate_cython__(self, __pyx_state)");
static PyMethodDef __pyx_mdef_5miolo_11mioloObject_11__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_11mioloObject_11__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_11mioloObject_10__setstate_cython__};
static PyObject *__pyx_pw_5miolo_11mioloObject_11__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(0, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.mioloObject.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5miolo_11mioloObject_10__setstate_cython__(((struct __pyx_obj_5miolo_mioloObject *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_11mioloObject_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_mioloObject *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "self.diagonalDouble,self.diagonalFloat,self.diagonalInt,self.digraphDouble,self.digraphFloat,self.digraphInt,self.graphDouble,self.graphFloat,self.graphInt,self.mtxDouble,self.mtxFloat,self.mtxInt cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.diagonalDouble,self.diagonalFloat,self.diagonalInt,self.digraphDouble,self.digraphFloat,self.digraphInt,self.graphDouble,self.graphFloat,self.graphInt,self.mtxDouble,self.mtxFloat,self.mtxInt cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_diagonalDouble_self_diagona, 0, 0);
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.diagonalDouble,self.diagonalFloat,self.diagonalInt,self.digraphDouble,self.digraphFloat,self.digraphInt,self.graphDouble,self.graphFloat,self.graphInt,self.mtxDouble,self.mtxFloat,self.mtxInt cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.diagonalDouble,self.diagonalFloat,self.diagonalInt,self.digraphDouble,self.digraphFloat,self.digraphInt,self.graphDouble,self.graphFloat,self.graphInt,self.mtxDouble,self.mtxFloat,self.mtxInt cannot be converted to a Python object for pickling"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("miolo.mioloObject.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":127
 *     cdef object cType
 * 
 *     def __cinit__(self, unsigned long rows=0, unsigned long cols=0, init=0,             # <<<<<<<<<<<<<<
 *         ctype=global_ctype):
 *         if ctype in ctypes:
 */

/* Python wrapper */
static int __pyx_pw_5miolo_6Matrix_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5miolo_6Matrix_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  unsigned long __pyx_v_rows;
  unsigned long __pyx_v_cols;
  PyObject *__pyx_v_init = 0;
  PyObject *__pyx_v_ctype = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_rows,&__pyx_n_s_cols,&__pyx_n_s_init,&__pyx_n_s_ctype,0};
    values[2] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)__pyx_int_0));
    values[3] = __Pyx_Arg_NewRef_VARARGS(__pyx_k__11);
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_VARARGS(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_rows);
          if (value) { values[0] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 127, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_cols);
          if (value) { values[1] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 127, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_init);
          if (value) { values[2] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 127, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_ctype);
          if (value) { values[3] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 127, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__cinit__") < 0)) __PYX_ERR(1, 127, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_VARARGS(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_rows = __Pyx_PyInt_As_unsigned_long(values[0]); if (unlikely((__pyx_v_rows == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(1, 127, __pyx_L3_error)
    } else {
      __pyx_v_rows = ((unsigned long)0);
    }
    if (values[1]) {
      __pyx_v_cols = __Pyx_PyInt_As_unsigned_long(values[1]); if (unlikely((__pyx_v_cols == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(1, 127, __pyx_L3_error)
    } else {
      __pyx_v_cols = ((unsigned long)0);
    }
    __pyx_v_init = values[2];
    __pyx_v_ctype = values[3];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 4, __pyx_nargs); __PYX_ERR(1, 127, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.Matrix.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5miolo_6Matrix___cinit__(((struct __pyx_obj_5miolo_Matrix *)__pyx_v_self), __pyx_v_rows, __pyx_v_cols, __pyx_v_init, __pyx_v_ctype);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5miolo_6Matrix___cinit__(struct __pyx_obj_5miolo_Matrix *__pyx_v_self, unsigned long __pyx_v_rows, unsigned long __pyx_v_cols, PyObject *__pyx_v_init, PyObject *__pyx_v_ctype) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  float __pyx_t_5;
  double __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 1);

  /* "miololib.pyx":129
 *     def __cinit__(self, unsigned long rows=0, unsigned long cols=0, init=0,
 *         ctype=global_ctype):
 *         if ctype in ctypes:             # <<<<<<<<<<<<<<
 *             self.cType = ctype
 *             if rows>0 and cols>0:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_ctypes); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_v_ctype, __pyx_t_1, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 129, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(__pyx_t_2)) {

    /* "miololib.pyx":130
 *         ctype=global_ctype):
 *         if ctype in ctypes:
 *             self.cType = ctype             # <<<<<<<<<<<<<<
 *             if rows>0 and cols>0:
 *                 if ctype=="int":
 */
    __Pyx_INCREF(__pyx_v_ctype);
    __Pyx_GIVEREF(__pyx_v_ctype);
    __Pyx_GOTREF(__pyx_v_self->cType);
    __Pyx_DECREF(__pyx_v_self->cType);
    __pyx_v_self->cType = __pyx_v_ctype;

    /* "miololib.pyx":131
 *         if ctype in ctypes:
 *             self.cType = ctype
 *             if rows>0 and cols>0:             # <<<<<<<<<<<<<<
 *                 if ctype=="int":
 *                     self.mtxInt = new mld.mtx[int](rows,cols,init)
 */
    __pyx_t_3 = (__pyx_v_rows > 0);
    if (__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_3 = (__pyx_v_cols > 0);
    __pyx_t_2 = __pyx_t_3;
    __pyx_L5_bool_binop_done:;
    if (__pyx_t_2) {

      /* "miololib.pyx":132
 *             self.cType = ctype
 *             if rows>0 and cols>0:
 *                 if ctype=="int":             # <<<<<<<<<<<<<<
 *                     self.mtxInt = new mld.mtx[int](rows,cols,init)
 *                 if ctype=="float":
 */
      __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_ctype, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 132, __pyx_L1_error)
      if (__pyx_t_2) {

        /* "miololib.pyx":133
 *             if rows>0 and cols>0:
 *                 if ctype=="int":
 *                     self.mtxInt = new mld.mtx[int](rows,cols,init)             # <<<<<<<<<<<<<<
 *                 if ctype=="float":
 *                     self.mtxFloat = new mld.mtx[float](rows,cols,init)
 */
        __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_init); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 133, __pyx_L1_error)
        __pyx_v_self->__pyx_base.mtxInt = new mtx<int> (__pyx_v_rows, __pyx_v_cols, __pyx_t_4);

        /* "miololib.pyx":132
 *             self.cType = ctype
 *             if rows>0 and cols>0:
 *                 if ctype=="int":             # <<<<<<<<<<<<<<
 *                     self.mtxInt = new mld.mtx[int](rows,cols,init)
 *                 if ctype=="float":
 */
      }

      /* "miololib.pyx":134
 *                 if ctype=="int":
 *                     self.mtxInt = new mld.mtx[int](rows,cols,init)
 *                 if ctype=="float":             # <<<<<<<<<<<<<<
 *                     self.mtxFloat = new mld.mtx[float](rows,cols,init)
 *                 if ctype=="double":
 */
      __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_ctype, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 134, __pyx_L1_error)
      if (__pyx_t_2) {

        /* "miololib.pyx":135
 *                     self.mtxInt = new mld.mtx[int](rows,cols,init)
 *                 if ctype=="float":
 *                     self.mtxFloat = new mld.mtx[float](rows,cols,init)             # <<<<<<<<<<<<<<
 *                 if ctype=="double":
 *                     self.mtxDouble = new mld.mtx[double](rows,cols,init)
 */
        __pyx_t_5 = __pyx_PyFloat_AsFloat(__pyx_v_init); if (unlikely((__pyx_t_5 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 135, __pyx_L1_error)
        __pyx_v_self->__pyx_base.mtxFloat = new mtx<float> (__pyx_v_rows, __pyx_v_cols, __pyx_t_5);

        /* "miololib.pyx":134
 *                 if ctype=="int":
 *                     self.mtxInt = new mld.mtx[int](rows,cols,init)
 *                 if ctype=="float":             # <<<<<<<<<<<<<<
 *                     self.mtxFloat = new mld.mtx[float](rows,cols,init)
 *                 if ctype=="double":
 */
      }

      /* "miololib.pyx":136
 *                 if ctype=="float":
 *                     self.mtxFloat = new mld.mtx[float](rows,cols,init)
 *                 if ctype=="double":             # <<<<<<<<<<<<<<
 *                     self.mtxDouble = new mld.mtx[double](rows,cols,init)
 *             else:
 */
      __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_ctype, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 136, __pyx_L1_error)
      if (__pyx_t_2) {

        /* "miololib.pyx":137
 *                     self.mtxFloat = new mld.mtx[float](rows,cols,init)
 *                 if ctype=="double":
 *                     self.mtxDouble = new mld.mtx[double](rows,cols,init)             # <<<<<<<<<<<<<<
 *             else:
 *                 if ctype=="int":
 */
        __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_v_init); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 137, __pyx_L1_error)
        __pyx_v_self->__pyx_base.mtxDouble = new mtx<double> (__pyx_v_rows, __pyx_v_cols, __pyx_t_6);

        /* "miololib.pyx":136
 *                 if ctype=="float":
 *                     self.mtxFloat = new mld.mtx[float](rows,cols,init)
 *                 if ctype=="double":             # <<<<<<<<<<<<<<
 *                     self.mtxDouble = new mld.mtx[double](rows,cols,init)
 *             else:
 */
      }

      /* "miololib.pyx":131
 *         if ctype in ctypes:
 *             self.cType = ctype
 *             if rows>0 and cols>0:             # <<<<<<<<<<<<<<
 *                 if ctype=="int":
 *                     self.mtxInt = new mld.mtx[int](rows,cols,init)
 */
      goto __pyx_L4;
    }

    /* "miololib.pyx":139
 *                     self.mtxDouble = new mld.mtx[double](rows,cols,init)
 *             else:
 *                 if ctype=="int":             # <<<<<<<<<<<<<<
 *                     self.mtxInt = NULL
 *                 if ctype=="float":
 */
    /*else*/ {
      __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_ctype, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 139, __pyx_L1_error)
      if (__pyx_t_2) {

        /* "miololib.pyx":140
 *             else:
 *                 if ctype=="int":
 *                     self.mtxInt = NULL             # <<<<<<<<<<<<<<
 *                 if ctype=="float":
 *                     self.mtxFloat = NULL
 */
        __pyx_v_self->__pyx_base.mtxInt = NULL;

        /* "miololib.pyx":139
 *                     self.mtxDouble = new mld.mtx[double](rows,cols,init)
 *             else:
 *                 if ctype=="int":             # <<<<<<<<<<<<<<
 *                     self.mtxInt = NULL
 *                 if ctype=="float":
 */
      }

      /* "miololib.pyx":141
 *                 if ctype=="int":
 *                     self.mtxInt = NULL
 *                 if ctype=="float":             # <<<<<<<<<<<<<<
 *                     self.mtxFloat = NULL
 *                 if ctype=="double":
 */
      __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_ctype, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 141, __pyx_L1_error)
      if (__pyx_t_2) {

        /* "miololib.pyx":142
 *                     self.mtxInt = NULL
 *                 if ctype=="float":
 *                     self.mtxFloat = NULL             # <<<<<<<<<<<<<<
 *                 if ctype=="double":
 *                     self.mtxDouble = NULL
 */
        __pyx_v_self->__pyx_base.mtxFloat = NULL;

        /* "miololib.pyx":141
 *                 if ctype=="int":
 *                     self.mtxInt = NULL
 *                 if ctype=="float":             # <<<<<<<<<<<<<<
 *                     self.mtxFloat = NULL
 *                 if ctype=="double":
 */
      }

      /* "miololib.pyx":143
 *                 if ctype=="float":
 *                     self.mtxFloat = NULL
 *                 if ctype=="double":             # <<<<<<<<<<<<<<
 *                     self.mtxDouble = NULL
 *         else:
 */
      __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_ctype, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 143, __pyx_L1_error)
      if (__pyx_t_2) {

        /* "miololib.pyx":144
 *                     self.mtxFloat = NULL
 *                 if ctype=="double":
 *                     self.mtxDouble = NULL             # <<<<<<<<<<<<<<
 *         else:
 *             raise Exception("Unknown ctype.")
 */
        __pyx_v_self->__pyx_base.mtxDouble = NULL;

        /* "miololib.pyx":143
 *                 if ctype=="float":
 *                     self.mtxFloat = NULL
 *                 if ctype=="double":             # <<<<<<<<<<<<<<
 *                     self.mtxDouble = NULL
 *         else:
 */
      }
    }
    __pyx_L4:;

    /* "miololib.pyx":129
 *     def __cinit__(self, unsigned long rows=0, unsigned long cols=0, init=0,
 *         ctype=global_ctype):
 *         if ctype in ctypes:             # <<<<<<<<<<<<<<
 *             self.cType = ctype
 *             if rows>0 and cols>0:
 */
    goto __pyx_L3;
  }

  /* "miololib.pyx":146
 *                     self.mtxDouble = NULL
 *         else:
 *             raise Exception("Unknown ctype.")             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 146, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "miololib.pyx":127
 *     cdef object cType
 * 
 *     def __cinit__(self, unsigned long rows=0, unsigned long cols=0, init=0,             # <<<<<<<<<<<<<<
 *         ctype=global_ctype):
 *         if ctype in ctypes:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("miolo.Matrix.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":148
 *             raise Exception("Unknown ctype.")
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.ctype=="int":
 *             del self.mtxInt
 */

/* Python wrapper */
static void __pyx_pw_5miolo_6Matrix_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_5miolo_6Matrix_3__dealloc__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_pf_5miolo_6Matrix_2__dealloc__(((struct __pyx_obj_5miolo_Matrix *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5miolo_6Matrix_2__dealloc__(struct __pyx_obj_5miolo_Matrix *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__dealloc__", 1);

  /* "miololib.pyx":149
 * 
 *     def __dealloc__(self):
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             del self.mtxInt
 *         if self.ctype=="float":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 149, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":150
 *     def __dealloc__(self):
 *         if self.ctype=="int":
 *             del self.mtxInt             # <<<<<<<<<<<<<<
 *         if self.ctype=="float":
 *             del self.mtxFloat
 */
    delete __pyx_v_self->__pyx_base.mtxInt;

    /* "miololib.pyx":149
 * 
 *     def __dealloc__(self):
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             del self.mtxInt
 *         if self.ctype=="float":
 */
  }

  /* "miololib.pyx":151
 *         if self.ctype=="int":
 *             del self.mtxInt
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             del self.mtxFloat
 *         if self.ctype=="double":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 151, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":152
 *             del self.mtxInt
 *         if self.ctype=="float":
 *             del self.mtxFloat             # <<<<<<<<<<<<<<
 *         if self.ctype=="double":
 *             del self.mtxDouble
 */
    delete __pyx_v_self->__pyx_base.mtxFloat;

    /* "miololib.pyx":151
 *         if self.ctype=="int":
 *             del self.mtxInt
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             del self.mtxFloat
 *         if self.ctype=="double":
 */
  }

  /* "miololib.pyx":153
 *         if self.ctype=="float":
 *             del self.mtxFloat
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             del self.mtxDouble
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 153, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":154
 *             del self.mtxFloat
 *         if self.ctype=="double":
 *             del self.mtxDouble             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
    delete __pyx_v_self->__pyx_base.mtxDouble;

    /* "miololib.pyx":153
 *         if self.ctype=="float":
 *             del self.mtxFloat
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             del self.mtxDouble
 * 
 */
  }

  /* "miololib.pyx":148
 *             raise Exception("Unknown ctype.")
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.ctype=="int":
 *             del self.mtxInt
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_WriteUnraisable("miolo.Matrix.__dealloc__", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "miololib.pyx":156
 *             del self.mtxDouble
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def null(self):
 *         if not self.isMatrix():
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_6Matrix_4null_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5miolo_6Matrix_4null_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5miolo_6Matrix_4null___get__(((struct __pyx_obj_5miolo_Matrix *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_6Matrix_4null___get__(struct __pyx_obj_5miolo_Matrix *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "miololib.pyx":158
 *     @property
 *     def null(self):
 *         if not self.isMatrix():             # <<<<<<<<<<<<<<
 *             return True
 *         else:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_isMatrix); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 158, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(1, 158, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = (!__pyx_t_5);
  if (__pyx_t_6) {

    /* "miololib.pyx":159
 *     def null(self):
 *         if not self.isMatrix():
 *             return True             # <<<<<<<<<<<<<<
 *         else:
 *             if self.mtxInt is not NULL and self.mtxInt.null():
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    goto __pyx_L0;

    /* "miololib.pyx":158
 *     @property
 *     def null(self):
 *         if not self.isMatrix():             # <<<<<<<<<<<<<<
 *             return True
 *         else:
 */
  }

  /* "miololib.pyx":161
 *             return True
 *         else:
 *             if self.mtxInt is not NULL and self.mtxInt.null():             # <<<<<<<<<<<<<<
 *                 return True
 *             if self.mtxFloat is not NULL and self.mtxFloat.null():
 */
  /*else*/ {
    __pyx_t_5 = (__pyx_v_self->__pyx_base.mtxInt != NULL);
    if (__pyx_t_5) {
    } else {
      __pyx_t_6 = __pyx_t_5;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_5 = __pyx_v_self->__pyx_base.mtxInt->null();
    __pyx_t_6 = __pyx_t_5;
    __pyx_L5_bool_binop_done:;
    if (__pyx_t_6) {

      /* "miololib.pyx":162
 *         else:
 *             if self.mtxInt is not NULL and self.mtxInt.null():
 *                 return True             # <<<<<<<<<<<<<<
 *             if self.mtxFloat is not NULL and self.mtxFloat.null():
 *                 return True
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_True);
      __pyx_r = Py_True;
      goto __pyx_L0;

      /* "miololib.pyx":161
 *             return True
 *         else:
 *             if self.mtxInt is not NULL and self.mtxInt.null():             # <<<<<<<<<<<<<<
 *                 return True
 *             if self.mtxFloat is not NULL and self.mtxFloat.null():
 */
    }

    /* "miololib.pyx":163
 *             if self.mtxInt is not NULL and self.mtxInt.null():
 *                 return True
 *             if self.mtxFloat is not NULL and self.mtxFloat.null():             # <<<<<<<<<<<<<<
 *                 return True
 *             if self.mtxDouble is not NULL and self.mtxDouble.null():
 */
    __pyx_t_5 = (__pyx_v_self->__pyx_base.mtxFloat != NULL);
    if (__pyx_t_5) {
    } else {
      __pyx_t_6 = __pyx_t_5;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_5 = __pyx_v_self->__pyx_base.mtxFloat->null();
    __pyx_t_6 = __pyx_t_5;
    __pyx_L8_bool_binop_done:;
    if (__pyx_t_6) {

      /* "miololib.pyx":164
 *                 return True
 *             if self.mtxFloat is not NULL and self.mtxFloat.null():
 *                 return True             # <<<<<<<<<<<<<<
 *             if self.mtxDouble is not NULL and self.mtxDouble.null():
 *                 return True
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_True);
      __pyx_r = Py_True;
      goto __pyx_L0;

      /* "miololib.pyx":163
 *             if self.mtxInt is not NULL and self.mtxInt.null():
 *                 return True
 *             if self.mtxFloat is not NULL and self.mtxFloat.null():             # <<<<<<<<<<<<<<
 *                 return True
 *             if self.mtxDouble is not NULL and self.mtxDouble.null():
 */
    }

    /* "miololib.pyx":165
 *             if self.mtxFloat is not NULL and self.mtxFloat.null():
 *                 return True
 *             if self.mtxDouble is not NULL and self.mtxDouble.null():             # <<<<<<<<<<<<<<
 *                 return True
 *             return False
 */
    __pyx_t_5 = (__pyx_v_self->__pyx_base.mtxDouble != NULL);
    if (__pyx_t_5) {
    } else {
      __pyx_t_6 = __pyx_t_5;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_5 = __pyx_v_self->__pyx_base.mtxDouble->null();
    __pyx_t_6 = __pyx_t_5;
    __pyx_L11_bool_binop_done:;
    if (__pyx_t_6) {

      /* "miololib.pyx":166
 *                 return True
 *             if self.mtxDouble is not NULL and self.mtxDouble.null():
 *                 return True             # <<<<<<<<<<<<<<
 *             return False
 * 
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_True);
      __pyx_r = Py_True;
      goto __pyx_L0;

      /* "miololib.pyx":165
 *             if self.mtxFloat is not NULL and self.mtxFloat.null():
 *                 return True
 *             if self.mtxDouble is not NULL and self.mtxDouble.null():             # <<<<<<<<<<<<<<
 *                 return True
 *             return False
 */
    }

    /* "miololib.pyx":167
 *             if self.mtxDouble is not NULL and self.mtxDouble.null():
 *                 return True
 *             return False             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    goto __pyx_L0;
  }

  /* "miololib.pyx":156
 *             del self.mtxDouble
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def null(self):
 *         if not self.isMatrix():
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("miolo.Matrix.null.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":169
 *             return False
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def ctype(self):
 *         return str(self.cType)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_6Matrix_5ctype_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5miolo_6Matrix_5ctype_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5miolo_6Matrix_5ctype___get__(((struct __pyx_obj_5miolo_Matrix *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_6Matrix_5ctype___get__(struct __pyx_obj_5miolo_Matrix *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "miololib.pyx":171
 *     @property
 *     def ctype(self):
 *         return str(self.cType)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Str(__pyx_v_self->cType); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "miololib.pyx":169
 *             return False
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def ctype(self):
 *         return str(self.cType)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("miolo.Matrix.ctype.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":173
 *         return str(self.cType)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def rows(self):
 *         if self.null:
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_6Matrix_4rows_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5miolo_6Matrix_4rows_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5miolo_6Matrix_4rows___get__(((struct __pyx_obj_5miolo_Matrix *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_6Matrix_4rows___get__(struct __pyx_obj_5miolo_Matrix *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "miololib.pyx":175
 *     @property
 *     def rows(self):
 *         if self.null:             # <<<<<<<<<<<<<<
 *             pass
 *         if self.ctype=="int":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_null); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 175, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {
  }

  /* "miololib.pyx":177
 *         if self.null:
 *             pass
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             return self.mtxInt.rows
 *         if self.ctype=="float":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 177, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":178
 *             pass
 *         if self.ctype=="int":
 *             return self.mtxInt.rows             # <<<<<<<<<<<<<<
 *         if self.ctype=="float":
 *             return self.mtxFloat.rows
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_From_unsigned_long(__pyx_v_self->__pyx_base.mtxInt->rows); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 178, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "miololib.pyx":177
 *         if self.null:
 *             pass
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             return self.mtxInt.rows
 *         if self.ctype=="float":
 */
  }

  /* "miololib.pyx":179
 *         if self.ctype=="int":
 *             return self.mtxInt.rows
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             return self.mtxFloat.rows
 *         if self.ctype=="double":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 179, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 179, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":180
 *             return self.mtxInt.rows
 *         if self.ctype=="float":
 *             return self.mtxFloat.rows             # <<<<<<<<<<<<<<
 *         if self.ctype=="double":
 *             return self.mtxDouble.rows
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_From_unsigned_long(__pyx_v_self->__pyx_base.mtxFloat->rows); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 180, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "miololib.pyx":179
 *         if self.ctype=="int":
 *             return self.mtxInt.rows
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             return self.mtxFloat.rows
 *         if self.ctype=="double":
 */
  }

  /* "miololib.pyx":181
 *         if self.ctype=="float":
 *             return self.mtxFloat.rows
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             return self.mtxDouble.rows
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 181, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 181, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":182
 *             return self.mtxFloat.rows
 *         if self.ctype=="double":
 *             return self.mtxDouble.rows             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_From_unsigned_long(__pyx_v_self->__pyx_base.mtxDouble->rows); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 182, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "miololib.pyx":181
 *         if self.ctype=="float":
 *             return self.mtxFloat.rows
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             return self.mtxDouble.rows
 * 
 */
  }

  /* "miololib.pyx":173
 *         return str(self.cType)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def rows(self):
 *         if self.null:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("miolo.Matrix.rows.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":184
 *             return self.mtxDouble.rows
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def cols(self):
 *         if self.null:
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_6Matrix_4cols_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5miolo_6Matrix_4cols_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5miolo_6Matrix_4cols___get__(((struct __pyx_obj_5miolo_Matrix *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_6Matrix_4cols___get__(struct __pyx_obj_5miolo_Matrix *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "miololib.pyx":186
 *     @property
 *     def cols(self):
 *         if self.null:             # <<<<<<<<<<<<<<
 *             pass
 *         if self.ctype=="int":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_null); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 186, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 186, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {
  }

  /* "miololib.pyx":188
 *         if self.null:
 *             pass
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             return self.mtxInt.cols
 *         if self.ctype=="float":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 188, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":189
 *             pass
 *         if self.ctype=="int":
 *             return self.mtxInt.cols             # <<<<<<<<<<<<<<
 *         if self.ctype=="float":
 *             return self.mtxFloat.cols
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_From_unsigned_long(__pyx_v_self->__pyx_base.mtxInt->cols); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 189, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "miololib.pyx":188
 *         if self.null:
 *             pass
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             return self.mtxInt.cols
 *         if self.ctype=="float":
 */
  }

  /* "miololib.pyx":190
 *         if self.ctype=="int":
 *             return self.mtxInt.cols
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             return self.mtxFloat.cols
 *         if self.ctype=="double":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 190, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":191
 *             return self.mtxInt.cols
 *         if self.ctype=="float":
 *             return self.mtxFloat.cols             # <<<<<<<<<<<<<<
 *         if self.ctype=="double":
 *             return self.mtxDouble.cols
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_From_unsigned_long(__pyx_v_self->__pyx_base.mtxFloat->cols); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 191, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "miololib.pyx":190
 *         if self.ctype=="int":
 *             return self.mtxInt.cols
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             return self.mtxFloat.cols
 *         if self.ctype=="double":
 */
  }

  /* "miololib.pyx":192
 *         if self.ctype=="float":
 *             return self.mtxFloat.cols
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             return self.mtxDouble.cols
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 192, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":193
 *             return self.mtxFloat.cols
 *         if self.ctype=="double":
 *             return self.mtxDouble.cols             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_From_unsigned_long(__pyx_v_self->__pyx_base.mtxDouble->cols); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 193, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "miololib.pyx":192
 *         if self.ctype=="float":
 *             return self.mtxFloat.cols
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             return self.mtxDouble.cols
 * 
 */
  }

  /* "miololib.pyx":184
 *             return self.mtxDouble.rows
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def cols(self):
 *         if self.null:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("miolo.Matrix.cols.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":195
 *             return self.mtxDouble.cols
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def numpy(self):
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_6Matrix_5numpy_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5miolo_6Matrix_5numpy_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5miolo_6Matrix_5numpy___get__(((struct __pyx_obj_5miolo_Matrix *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_6Matrix_5numpy___get__(struct __pyx_obj_5miolo_Matrix *__pyx_v_self) {
  unsigned long __pyx_v_i;
  unsigned long __pyx_v_j;
  PyObject *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  unsigned long __pyx_t_8;
  unsigned long __pyx_t_9;
  unsigned long __pyx_t_10;
  unsigned long __pyx_t_11;
  unsigned long __pyx_t_12;
  unsigned long __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "miololib.pyx":201
 *         """
 *         cdef unsigned long i, j
 *         out = np.empty((self.rows,self.cols))             # <<<<<<<<<<<<<<
 *         if self.ctype == "int":
 *             for i in range(self.mtxInt.rows):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 201, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 201, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_rows); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 201, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_cols); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 201, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 201, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_2);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2)) __PYX_ERR(1, 201, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4)) __PYX_ERR(1, 201, __pyx_L1_error);
  __pyx_t_2 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  __pyx_t_6 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_6 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_t_5};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 201, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_v_out = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "miololib.pyx":202
 *         cdef unsigned long i, j
 *         out = np.empty((self.rows,self.cols))
 *         if self.ctype == "int":             # <<<<<<<<<<<<<<
 *             for i in range(self.mtxInt.rows):
 *                 for j in range(self.mtxInt.cols):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(1, 202, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_7) {

    /* "miololib.pyx":203
 *         out = np.empty((self.rows,self.cols))
 *         if self.ctype == "int":
 *             for i in range(self.mtxInt.rows):             # <<<<<<<<<<<<<<
 *                 for j in range(self.mtxInt.cols):
 *                     out[i][j] = self.mtxInt.data[i*self.mtxInt.cols+j]
 */
    __pyx_t_8 = __pyx_v_self->__pyx_base.mtxInt->rows;
    __pyx_t_9 = __pyx_t_8;
    for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
      __pyx_v_i = __pyx_t_10;

      /* "miololib.pyx":204
 *         if self.ctype == "int":
 *             for i in range(self.mtxInt.rows):
 *                 for j in range(self.mtxInt.cols):             # <<<<<<<<<<<<<<
 *                     out[i][j] = self.mtxInt.data[i*self.mtxInt.cols+j]
 *         if self.ctype == "float":
 */
      __pyx_t_11 = __pyx_v_self->__pyx_base.mtxInt->cols;
      __pyx_t_12 = __pyx_t_11;
      for (__pyx_t_13 = 0; __pyx_t_13 < __pyx_t_12; __pyx_t_13+=1) {
        __pyx_v_j = __pyx_t_13;

        /* "miololib.pyx":205
 *             for i in range(self.mtxInt.rows):
 *                 for j in range(self.mtxInt.cols):
 *                     out[i][j] = self.mtxInt.data[i*self.mtxInt.cols+j]             # <<<<<<<<<<<<<<
 *         if self.ctype == "float":
 *             for i in range(self.mtxFloat.rows):
 */
        __pyx_t_1 = __Pyx_PyInt_From_int((__pyx_v_self->__pyx_base.mtxInt->data[((__pyx_v_i * __pyx_v_self->__pyx_base.mtxInt->cols) + __pyx_v_j)])); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 205, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_out, __pyx_v_i, unsigned long, 0, __Pyx_PyInt_From_unsigned_long, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 205, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        if (unlikely((__Pyx_SetItemInt(__pyx_t_3, __pyx_v_j, __pyx_t_1, unsigned long, 0, __Pyx_PyInt_From_unsigned_long, 0, 0, 0) < 0))) __PYX_ERR(1, 205, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
    }

    /* "miololib.pyx":202
 *         cdef unsigned long i, j
 *         out = np.empty((self.rows,self.cols))
 *         if self.ctype == "int":             # <<<<<<<<<<<<<<
 *             for i in range(self.mtxInt.rows):
 *                 for j in range(self.mtxInt.cols):
 */
  }

  /* "miololib.pyx":206
 *                 for j in range(self.mtxInt.cols):
 *                     out[i][j] = self.mtxInt.data[i*self.mtxInt.cols+j]
 *         if self.ctype == "float":             # <<<<<<<<<<<<<<
 *             for i in range(self.mtxFloat.rows):
 *                 for j in range(self.mtxFloat.cols):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(1, 206, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_7) {

    /* "miololib.pyx":207
 *                     out[i][j] = self.mtxInt.data[i*self.mtxInt.cols+j]
 *         if self.ctype == "float":
 *             for i in range(self.mtxFloat.rows):             # <<<<<<<<<<<<<<
 *                 for j in range(self.mtxFloat.cols):
 *                     out[i][j] = self.mtxFloat.data[i*self.mtxFloat.cols+j]
 */
    __pyx_t_8 = __pyx_v_self->__pyx_base.mtxFloat->rows;
    __pyx_t_9 = __pyx_t_8;
    for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
      __pyx_v_i = __pyx_t_10;

      /* "miololib.pyx":208
 *         if self.ctype == "float":
 *             for i in range(self.mtxFloat.rows):
 *                 for j in range(self.mtxFloat.cols):             # <<<<<<<<<<<<<<
 *                     out[i][j] = self.mtxFloat.data[i*self.mtxFloat.cols+j]
 *         if self.ctype == "double":
 */
      __pyx_t_11 = __pyx_v_self->__pyx_base.mtxFloat->cols;
      __pyx_t_12 = __pyx_t_11;
      for (__pyx_t_13 = 0; __pyx_t_13 < __pyx_t_12; __pyx_t_13+=1) {
        __pyx_v_j = __pyx_t_13;

        /* "miololib.pyx":209
 *             for i in range(self.mtxFloat.rows):
 *                 for j in range(self.mtxFloat.cols):
 *                     out[i][j] = self.mtxFloat.data[i*self.mtxFloat.cols+j]             # <<<<<<<<<<<<<<
 *         if self.ctype == "double":
 *             for i in range(self.mtxDouble.rows):
 */
        __pyx_t_1 = PyFloat_FromDouble((__pyx_v_self->__pyx_base.mtxFloat->data[((__pyx_v_i * __pyx_v_self->__pyx_base.mtxFloat->cols) + __pyx_v_j)])); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 209, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_out, __pyx_v_i, unsigned long, 0, __Pyx_PyInt_From_unsigned_long, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 209, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        if (unlikely((__Pyx_SetItemInt(__pyx_t_3, __pyx_v_j, __pyx_t_1, unsigned long, 0, __Pyx_PyInt_From_unsigned_long, 0, 0, 0) < 0))) __PYX_ERR(1, 209, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
    }

    /* "miololib.pyx":206
 *                 for j in range(self.mtxInt.cols):
 *                     out[i][j] = self.mtxInt.data[i*self.mtxInt.cols+j]
 *         if self.ctype == "float":             # <<<<<<<<<<<<<<
 *             for i in range(self.mtxFloat.rows):
 *                 for j in range(self.mtxFloat.cols):
 */
  }

  /* "miololib.pyx":210
 *                 for j in range(self.mtxFloat.cols):
 *                     out[i][j] = self.mtxFloat.data[i*self.mtxFloat.cols+j]
 *         if self.ctype == "double":             # <<<<<<<<<<<<<<
 *             for i in range(self.mtxDouble.rows):
 *                 for j in range(self.mtxDouble.cols):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 210, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(1, 210, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_7) {

    /* "miololib.pyx":211
 *                     out[i][j] = self.mtxFloat.data[i*self.mtxFloat.cols+j]
 *         if self.ctype == "double":
 *             for i in range(self.mtxDouble.rows):             # <<<<<<<<<<<<<<
 *                 for j in range(self.mtxDouble.cols):
 *                     out[i][j] = self.mtxDouble.data[i*self.mtxDouble.cols+j]
 */
    __pyx_t_8 = __pyx_v_self->__pyx_base.mtxDouble->rows;
    __pyx_t_9 = __pyx_t_8;
    for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
      __pyx_v_i = __pyx_t_10;

      /* "miololib.pyx":212
 *         if self.ctype == "double":
 *             for i in range(self.mtxDouble.rows):
 *                 for j in range(self.mtxDouble.cols):             # <<<<<<<<<<<<<<
 *                     out[i][j] = self.mtxDouble.data[i*self.mtxDouble.cols+j]
 *         return out
 */
      __pyx_t_11 = __pyx_v_self->__pyx_base.mtxDouble->cols;
      __pyx_t_12 = __pyx_t_11;
      for (__pyx_t_13 = 0; __pyx_t_13 < __pyx_t_12; __pyx_t_13+=1) {
        __pyx_v_j = __pyx_t_13;

        /* "miololib.pyx":213
 *             for i in range(self.mtxDouble.rows):
 *                 for j in range(self.mtxDouble.cols):
 *                     out[i][j] = self.mtxDouble.data[i*self.mtxDouble.cols+j]             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
        __pyx_t_1 = PyFloat_FromDouble((__pyx_v_self->__pyx_base.mtxDouble->data[((__pyx_v_i * __pyx_v_self->__pyx_base.mtxDouble->cols) + __pyx_v_j)])); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 213, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_out, __pyx_v_i, unsigned long, 0, __Pyx_PyInt_From_unsigned_long, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 213, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        if (unlikely((__Pyx_SetItemInt(__pyx_t_3, __pyx_v_j, __pyx_t_1, unsigned long, 0, __Pyx_PyInt_From_unsigned_long, 0, 0, 0) < 0))) __PYX_ERR(1, 213, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
    }

    /* "miololib.pyx":210
 *                 for j in range(self.mtxFloat.cols):
 *                     out[i][j] = self.mtxFloat.data[i*self.mtxFloat.cols+j]
 *         if self.ctype == "double":             # <<<<<<<<<<<<<<
 *             for i in range(self.mtxDouble.rows):
 *                 for j in range(self.mtxDouble.cols):
 */
  }

  /* "miololib.pyx":214
 *                 for j in range(self.mtxDouble.cols):
 *                     out[i][j] = self.mtxDouble.data[i*self.mtxDouble.cols+j]
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     @numpy.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_out);
  __pyx_r = __pyx_v_out;
  goto __pyx_L0;

  /* "miololib.pyx":195
 *             return self.mtxDouble.cols
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def numpy(self):
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("miolo.Matrix.numpy.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":216
 *         return out
 * 
 *     @numpy.setter             # <<<<<<<<<<<<<<
 *     def numpy(self, data):
 *         cdef unsigned long i, j
 */

/* Python wrapper */
static int __pyx_pw_5miolo_6Matrix_5numpy_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_data); /*proto*/
static int __pyx_pw_5miolo_6Matrix_5numpy_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_data) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5miolo_6Matrix_5numpy_2__set__(((struct __pyx_obj_5miolo_Matrix *)__pyx_v_self), ((PyObject *)__pyx_v_data));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5miolo_6Matrix_5numpy_2__set__(struct __pyx_obj_5miolo_Matrix *__pyx_v_self, PyObject *__pyx_v_data) {
  unsigned long __pyx_v_i;
  unsigned long __pyx_v_j;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  unsigned long __pyx_t_7;
  unsigned long __pyx_t_8;
  unsigned long __pyx_t_9;
  unsigned long __pyx_t_10;
  unsigned long __pyx_t_11;
  unsigned long __pyx_t_12;
  float __pyx_t_13;
  double __pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 1);

  /* "miololib.pyx":219
 *     def numpy(self, data):
 *         cdef unsigned long i, j
 *         if np.shape(data)!=(self.rows,self.cols):             # <<<<<<<<<<<<<<
 *             raise Exception("Incompatible shape for miolo.Matrix data.")
 *         if self.ctype == "int":
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 219, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_shape); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 219, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_data};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 219, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_rows); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 219, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_cols); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 219, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 219, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_3);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3)) __PYX_ERR(1, 219, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_2);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2)) __PYX_ERR(1, 219, __pyx_L1_error);
  __pyx_t_3 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_t_5, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 219, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(1, 219, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(__pyx_t_6)) {

    /* "miololib.pyx":220
 *         cdef unsigned long i, j
 *         if np.shape(data)!=(self.rows,self.cols):
 *             raise Exception("Incompatible shape for miolo.Matrix data.")             # <<<<<<<<<<<<<<
 *         if self.ctype == "int":
 *             for i in range(self.mtxInt.rows):
 */
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 220, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 220, __pyx_L1_error)

    /* "miololib.pyx":219
 *     def numpy(self, data):
 *         cdef unsigned long i, j
 *         if np.shape(data)!=(self.rows,self.cols):             # <<<<<<<<<<<<<<
 *             raise Exception("Incompatible shape for miolo.Matrix data.")
 *         if self.ctype == "int":
 */
  }

  /* "miololib.pyx":221
 *         if np.shape(data)!=(self.rows,self.cols):
 *             raise Exception("Incompatible shape for miolo.Matrix data.")
 *         if self.ctype == "int":             # <<<<<<<<<<<<<<
 *             for i in range(self.mtxInt.rows):
 *                 for j in range(self.mtxInt.cols):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 221, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(1, 221, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_6) {

    /* "miololib.pyx":222
 *             raise Exception("Incompatible shape for miolo.Matrix data.")
 *         if self.ctype == "int":
 *             for i in range(self.mtxInt.rows):             # <<<<<<<<<<<<<<
 *                 for j in range(self.mtxInt.cols):
 *                     self.mtxInt.data[i*self.mtxInt.cols+j] = <int>data[i][j]
 */
    __pyx_t_7 = __pyx_v_self->__pyx_base.mtxInt->rows;
    __pyx_t_8 = __pyx_t_7;
    for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
      __pyx_v_i = __pyx_t_9;

      /* "miololib.pyx":223
 *         if self.ctype == "int":
 *             for i in range(self.mtxInt.rows):
 *                 for j in range(self.mtxInt.cols):             # <<<<<<<<<<<<<<
 *                     self.mtxInt.data[i*self.mtxInt.cols+j] = <int>data[i][j]
 *         if self.ctype == "float":
 */
      __pyx_t_10 = __pyx_v_self->__pyx_base.mtxInt->cols;
      __pyx_t_11 = __pyx_t_10;
      for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_11; __pyx_t_12+=1) {
        __pyx_v_j = __pyx_t_12;

        /* "miololib.pyx":224
 *             for i in range(self.mtxInt.rows):
 *                 for j in range(self.mtxInt.cols):
 *                     self.mtxInt.data[i*self.mtxInt.cols+j] = <int>data[i][j]             # <<<<<<<<<<<<<<
 *         if self.ctype == "float":
 *             for i in range(self.mtxFloat.rows):
 */
        __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_data, __pyx_v_i, unsigned long, 0, __Pyx_PyInt_From_unsigned_long, 0, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 224, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_2, __pyx_v_j, unsigned long, 0, __Pyx_PyInt_From_unsigned_long, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 224, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_5); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 224, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        (__pyx_v_self->__pyx_base.mtxInt->data[((__pyx_v_i * __pyx_v_self->__pyx_base.mtxInt->cols) + __pyx_v_j)]) = ((int)__pyx_t_4);
      }
    }

    /* "miololib.pyx":221
 *         if np.shape(data)!=(self.rows,self.cols):
 *             raise Exception("Incompatible shape for miolo.Matrix data.")
 *         if self.ctype == "int":             # <<<<<<<<<<<<<<
 *             for i in range(self.mtxInt.rows):
 *                 for j in range(self.mtxInt.cols):
 */
  }

  /* "miololib.pyx":225
 *                 for j in range(self.mtxInt.cols):
 *                     self.mtxInt.data[i*self.mtxInt.cols+j] = <int>data[i][j]
 *         if self.ctype == "float":             # <<<<<<<<<<<<<<
 *             for i in range(self.mtxFloat.rows):
 *                 for j in range(self.mtxFloat.cols):
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = (__Pyx_PyString_Equals(__pyx_t_5, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(1, 225, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_6) {

    /* "miololib.pyx":226
 *                     self.mtxInt.data[i*self.mtxInt.cols+j] = <int>data[i][j]
 *         if self.ctype == "float":
 *             for i in range(self.mtxFloat.rows):             # <<<<<<<<<<<<<<
 *                 for j in range(self.mtxFloat.cols):
 *                     self.mtxFloat.data[i*self.mtxFloat.cols+j] = <float>data[i][j]
 */
    __pyx_t_7 = __pyx_v_self->__pyx_base.mtxFloat->rows;
    __pyx_t_8 = __pyx_t_7;
    for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
      __pyx_v_i = __pyx_t_9;

      /* "miololib.pyx":227
 *         if self.ctype == "float":
 *             for i in range(self.mtxFloat.rows):
 *                 for j in range(self.mtxFloat.cols):             # <<<<<<<<<<<<<<
 *                     self.mtxFloat.data[i*self.mtxFloat.cols+j] = <float>data[i][j]
 *         if self.ctype == "double":
 */
      __pyx_t_10 = __pyx_v_self->__pyx_base.mtxFloat->cols;
      __pyx_t_11 = __pyx_t_10;
      for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_11; __pyx_t_12+=1) {
        __pyx_v_j = __pyx_t_12;

        /* "miololib.pyx":228
 *             for i in range(self.mtxFloat.rows):
 *                 for j in range(self.mtxFloat.cols):
 *                     self.mtxFloat.data[i*self.mtxFloat.cols+j] = <float>data[i][j]             # <<<<<<<<<<<<<<
 *         if self.ctype == "double":
 *             for i in range(self.mtxDouble.rows):
 */
        __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_data, __pyx_v_i, unsigned long, 0, __Pyx_PyInt_From_unsigned_long, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 228, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_5, __pyx_v_j, unsigned long, 0, __Pyx_PyInt_From_unsigned_long, 0, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 228, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_13 = __pyx_PyFloat_AsFloat(__pyx_t_2); if (unlikely((__pyx_t_13 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 228, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        (__pyx_v_self->__pyx_base.mtxFloat->data[((__pyx_v_i * __pyx_v_self->__pyx_base.mtxFloat->cols) + __pyx_v_j)]) = ((float)__pyx_t_13);
      }
    }

    /* "miololib.pyx":225
 *                 for j in range(self.mtxInt.cols):
 *                     self.mtxInt.data[i*self.mtxInt.cols+j] = <int>data[i][j]
 *         if self.ctype == "float":             # <<<<<<<<<<<<<<
 *             for i in range(self.mtxFloat.rows):
 *                 for j in range(self.mtxFloat.cols):
 */
  }

  /* "miololib.pyx":229
 *                 for j in range(self.mtxFloat.cols):
 *                     self.mtxFloat.data[i*self.mtxFloat.cols+j] = <float>data[i][j]
 *         if self.ctype == "double":             # <<<<<<<<<<<<<<
 *             for i in range(self.mtxDouble.rows):
 *                 for j in range(self.mtxDouble.cols):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(1, 229, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_6) {

    /* "miololib.pyx":230
 *                     self.mtxFloat.data[i*self.mtxFloat.cols+j] = <float>data[i][j]
 *         if self.ctype == "double":
 *             for i in range(self.mtxDouble.rows):             # <<<<<<<<<<<<<<
 *                 for j in range(self.mtxDouble.cols):
 *                     self.mtxDouble.data[i*self.mtxDouble.cols+j] = <double>data[i][j]
 */
    __pyx_t_7 = __pyx_v_self->__pyx_base.mtxDouble->rows;
    __pyx_t_8 = __pyx_t_7;
    for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
      __pyx_v_i = __pyx_t_9;

      /* "miololib.pyx":231
 *         if self.ctype == "double":
 *             for i in range(self.mtxDouble.rows):
 *                 for j in range(self.mtxDouble.cols):             # <<<<<<<<<<<<<<
 *                     self.mtxDouble.data[i*self.mtxDouble.cols+j] = <double>data[i][j]
 * 
 */
      __pyx_t_10 = __pyx_v_self->__pyx_base.mtxDouble->cols;
      __pyx_t_11 = __pyx_t_10;
      for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_11; __pyx_t_12+=1) {
        __pyx_v_j = __pyx_t_12;

        /* "miololib.pyx":232
 *             for i in range(self.mtxDouble.rows):
 *                 for j in range(self.mtxDouble.cols):
 *                     self.mtxDouble.data[i*self.mtxDouble.cols+j] = <double>data[i][j]             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
        __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_data, __pyx_v_i, unsigned long, 0, __Pyx_PyInt_From_unsigned_long, 0, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 232, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_2, __pyx_v_j, unsigned long, 0, __Pyx_PyInt_From_unsigned_long, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 232, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_14 = __pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_14 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 232, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        (__pyx_v_self->__pyx_base.mtxDouble->data[((__pyx_v_i * __pyx_v_self->__pyx_base.mtxDouble->cols) + __pyx_v_j)]) = ((double)__pyx_t_14);
      }
    }

    /* "miololib.pyx":229
 *                 for j in range(self.mtxFloat.cols):
 *                     self.mtxFloat.data[i*self.mtxFloat.cols+j] = <float>data[i][j]
 *         if self.ctype == "double":             # <<<<<<<<<<<<<<
 *             for i in range(self.mtxDouble.rows):
 *                 for j in range(self.mtxDouble.cols):
 */
  }

  /* "miololib.pyx":216
 *         return out
 * 
 *     @numpy.setter             # <<<<<<<<<<<<<<
 *     def numpy(self, data):
 *         cdef unsigned long i, j
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("miolo.Matrix.numpy.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":234
 *                     self.mtxDouble.data[i*self.mtxDouble.cols+j] = <double>data[i][j]
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.rows*self.cols
 * 
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_5miolo_6Matrix_5__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_5miolo_6Matrix_5__len__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5miolo_6Matrix_4__len__(((struct __pyx_obj_5miolo_Matrix *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_5miolo_6Matrix_4__len__(struct __pyx_obj_5miolo_Matrix *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__len__", 1);

  /* "miololib.pyx":235
 * 
 *     def __len__(self):
 *         return self.rows*self.cols             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, unsigned long k):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_rows); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_cols); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyIndex_AsSsize_t(__pyx_t_3); if (unlikely((__pyx_t_4 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 235, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  goto __pyx_L0;

  /* "miololib.pyx":234
 *                     self.mtxDouble.data[i*self.mtxDouble.cols+j] = <double>data[i][j]
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.rows*self.cols
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("miolo.Matrix.__len__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":237
 *         return self.rows*self.cols
 * 
 *     def __getitem__(self, unsigned long k):             # <<<<<<<<<<<<<<
 *         if k >= <unsigned long>self.rows*self.cols:
 *             raise Exception("Index k is out of bounds.")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_6Matrix_7__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_k); /*proto*/
static PyObject *__pyx_pw_5miolo_6Matrix_7__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_k) {
  unsigned long __pyx_v_k;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  assert(__pyx_arg_k); {
    __pyx_v_k = __Pyx_PyInt_As_unsigned_long(__pyx_arg_k); if (unlikely((__pyx_v_k == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(1, 237, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("miolo.Matrix.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5miolo_6Matrix_6__getitem__(((struct __pyx_obj_5miolo_Matrix *)__pyx_v_self), ((unsigned long)__pyx_v_k));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_6Matrix_6__getitem__(struct __pyx_obj_5miolo_Matrix *__pyx_v_self, unsigned long __pyx_v_k) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  unsigned long __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 1);

  /* "miololib.pyx":238
 * 
 *     def __getitem__(self, unsigned long k):
 *         if k >= <unsigned long>self.rows*self.cols:             # <<<<<<<<<<<<<<
 *             raise Exception("Index k is out of bounds.")
 *         if self.ctype=="int":
 */
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_long(__pyx_v_k); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_rows); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_long(__pyx_t_2); if (unlikely((__pyx_t_3 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(1, 238, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_unsigned_long(((unsigned long)__pyx_t_3)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_cols); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyNumber_Multiply(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_1, __pyx_t_5, Py_GE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 238, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(1, 238, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(__pyx_t_6)) {

    /* "miololib.pyx":239
 *     def __getitem__(self, unsigned long k):
 *         if k >= <unsigned long>self.rows*self.cols:
 *             raise Exception("Index k is out of bounds.")             # <<<<<<<<<<<<<<
 *         if self.ctype=="int":
 *             return self.mtxInt.data[k]
 */
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 239, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(1, 239, __pyx_L1_error)

    /* "miololib.pyx":238
 * 
 *     def __getitem__(self, unsigned long k):
 *         if k >= <unsigned long>self.rows*self.cols:             # <<<<<<<<<<<<<<
 *             raise Exception("Index k is out of bounds.")
 *         if self.ctype=="int":
 */
  }

  /* "miololib.pyx":240
 *         if k >= <unsigned long>self.rows*self.cols:
 *             raise Exception("Index k is out of bounds.")
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             return self.mtxInt.data[k]
 *         if self.ctype=="float":
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = (__Pyx_PyString_Equals(__pyx_t_4, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(1, 240, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_6) {

    /* "miololib.pyx":241
 *             raise Exception("Index k is out of bounds.")
 *         if self.ctype=="int":
 *             return self.mtxInt.data[k]             # <<<<<<<<<<<<<<
 *         if self.ctype=="float":
 *             return self.mtxFloat.data[k]
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyInt_From_int((__pyx_v_self->__pyx_base.mtxInt->data[__pyx_v_k])); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 241, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "miololib.pyx":240
 *         if k >= <unsigned long>self.rows*self.cols:
 *             raise Exception("Index k is out of bounds.")
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             return self.mtxInt.data[k]
 *         if self.ctype=="float":
 */
  }

  /* "miololib.pyx":242
 *         if self.ctype=="int":
 *             return self.mtxInt.data[k]
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             return self.mtxFloat.data[k]
 *         if self.ctype=="double":
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 242, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = (__Pyx_PyString_Equals(__pyx_t_4, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(1, 242, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_6) {

    /* "miololib.pyx":243
 *             return self.mtxInt.data[k]
 *         if self.ctype=="float":
 *             return self.mtxFloat.data[k]             # <<<<<<<<<<<<<<
 *         if self.ctype=="double":
 *             return self.mtxDouble.data[k]
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = PyFloat_FromDouble((__pyx_v_self->__pyx_base.mtxFloat->data[__pyx_v_k])); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 243, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "miololib.pyx":242
 *         if self.ctype=="int":
 *             return self.mtxInt.data[k]
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             return self.mtxFloat.data[k]
 *         if self.ctype=="double":
 */
  }

  /* "miololib.pyx":244
 *         if self.ctype=="float":
 *             return self.mtxFloat.data[k]
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             return self.mtxDouble.data[k]
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 244, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = (__Pyx_PyString_Equals(__pyx_t_4, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(1, 244, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_6) {

    /* "miololib.pyx":245
 *             return self.mtxFloat.data[k]
 *         if self.ctype=="double":
 *             return self.mtxDouble.data[k]             # <<<<<<<<<<<<<<
 * 
 *     def __setitem__(self, unsigned long k, double value):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = PyFloat_FromDouble((__pyx_v_self->__pyx_base.mtxDouble->data[__pyx_v_k])); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 245, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "miololib.pyx":244
 *         if self.ctype=="float":
 *             return self.mtxFloat.data[k]
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             return self.mtxDouble.data[k]
 * 
 */
  }

  /* "miololib.pyx":237
 *         return self.rows*self.cols
 * 
 *     def __getitem__(self, unsigned long k):             # <<<<<<<<<<<<<<
 *         if k >= <unsigned long>self.rows*self.cols:
 *             raise Exception("Index k is out of bounds.")
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("miolo.Matrix.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":247
 *             return self.mtxDouble.data[k]
 * 
 *     def __setitem__(self, unsigned long k, double value):             # <<<<<<<<<<<<<<
 *         if k >= <unsigned long>self.rows*self.cols:
 *             raise Exception("Index k is out of bounds.")
 */

/* Python wrapper */
static int __pyx_pw_5miolo_6Matrix_9__setitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_k, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_5miolo_6Matrix_9__setitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_k, PyObject *__pyx_arg_value) {
  unsigned long __pyx_v_k;
  double __pyx_v_value;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  assert(__pyx_arg_k); {
    __pyx_v_k = __Pyx_PyInt_As_unsigned_long(__pyx_arg_k); if (unlikely((__pyx_v_k == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(1, 247, __pyx_L3_error)
  }
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsDouble(__pyx_arg_value); if (unlikely((__pyx_v_value == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 247, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("miolo.Matrix.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5miolo_6Matrix_8__setitem__(((struct __pyx_obj_5miolo_Matrix *)__pyx_v_self), ((unsigned long)__pyx_v_k), ((double)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5miolo_6Matrix_8__setitem__(struct __pyx_obj_5miolo_Matrix *__pyx_v_self, unsigned long __pyx_v_k, double __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  unsigned long __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setitem__", 1);

  /* "miololib.pyx":248
 * 
 *     def __setitem__(self, unsigned long k, double value):
 *         if k >= <unsigned long>self.rows*self.cols:             # <<<<<<<<<<<<<<
 *             raise Exception("Index k is out of bounds.")
 *         if self.ctype=="int":
 */
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_long(__pyx_v_k); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_rows); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_long(__pyx_t_2); if (unlikely((__pyx_t_3 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(1, 248, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_unsigned_long(((unsigned long)__pyx_t_3)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_cols); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyNumber_Multiply(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_1, __pyx_t_5, Py_GE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 248, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(1, 248, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(__pyx_t_6)) {

    /* "miololib.pyx":249
 *     def __setitem__(self, unsigned long k, double value):
 *         if k >= <unsigned long>self.rows*self.cols:
 *             raise Exception("Index k is out of bounds.")             # <<<<<<<<<<<<<<
 *         if self.ctype=="int":
 *             self.mtxInt.data[k] = <int>value
 */
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 249, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(1, 249, __pyx_L1_error)

    /* "miololib.pyx":248
 * 
 *     def __setitem__(self, unsigned long k, double value):
 *         if k >= <unsigned long>self.rows*self.cols:             # <<<<<<<<<<<<<<
 *             raise Exception("Index k is out of bounds.")
 *         if self.ctype=="int":
 */
  }

  /* "miololib.pyx":250
 *         if k >= <unsigned long>self.rows*self.cols:
 *             raise Exception("Index k is out of bounds.")
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             self.mtxInt.data[k] = <int>value
 *         if self.ctype=="float":
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 250, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = (__Pyx_PyString_Equals(__pyx_t_4, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(1, 250, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_6) {

    /* "miololib.pyx":251
 *             raise Exception("Index k is out of bounds.")
 *         if self.ctype=="int":
 *             self.mtxInt.data[k] = <int>value             # <<<<<<<<<<<<<<
 *         if self.ctype=="float":
 *             self.mtxFloat.data[k] = <float>value
 */
    (__pyx_v_self->__pyx_base.mtxInt->data[__pyx_v_k]) = ((int)__pyx_v_value);

    /* "miololib.pyx":250
 *         if k >= <unsigned long>self.rows*self.cols:
 *             raise Exception("Index k is out of bounds.")
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             self.mtxInt.data[k] = <int>value
 *         if self.ctype=="float":
 */
  }

  /* "miololib.pyx":252
 *         if self.ctype=="int":
 *             self.mtxInt.data[k] = <int>value
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             self.mtxFloat.data[k] = <float>value
 *         if self.ctype=="double":
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 252, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = (__Pyx_PyString_Equals(__pyx_t_4, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(1, 252, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_6) {

    /* "miololib.pyx":253
 *             self.mtxInt.data[k] = <int>value
 *         if self.ctype=="float":
 *             self.mtxFloat.data[k] = <float>value             # <<<<<<<<<<<<<<
 *         if self.ctype=="double":
 *             self.mtxDouble.data[k] = value
 */
    (__pyx_v_self->__pyx_base.mtxFloat->data[__pyx_v_k]) = ((float)__pyx_v_value);

    /* "miololib.pyx":252
 *         if self.ctype=="int":
 *             self.mtxInt.data[k] = <int>value
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             self.mtxFloat.data[k] = <float>value
 *         if self.ctype=="double":
 */
  }

  /* "miololib.pyx":254
 *         if self.ctype=="float":
 *             self.mtxFloat.data[k] = <float>value
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             self.mtxDouble.data[k] = value
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = (__Pyx_PyString_Equals(__pyx_t_4, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(1, 254, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_6) {

    /* "miololib.pyx":255
 *             self.mtxFloat.data[k] = <float>value
 *         if self.ctype=="double":
 *             self.mtxDouble.data[k] = value             # <<<<<<<<<<<<<<
 * 
 *     def copy(self, Matrix M, unsigned long[:] only=None):
 */
    (__pyx_v_self->__pyx_base.mtxDouble->data[__pyx_v_k]) = __pyx_v_value;

    /* "miololib.pyx":254
 *         if self.ctype=="float":
 *             self.mtxFloat.data[k] = <float>value
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             self.mtxDouble.data[k] = value
 * 
 */
  }

  /* "miololib.pyx":247
 *             return self.mtxDouble.data[k]
 * 
 *     def __setitem__(self, unsigned long k, double value):             # <<<<<<<<<<<<<<
 *         if k >= <unsigned long>self.rows*self.cols:
 *             raise Exception("Index k is out of bounds.")
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("miolo.Matrix.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":257
 *             self.mtxDouble.data[k] = value
 * 
 *     def copy(self, Matrix M, unsigned long[:] only=None):             # <<<<<<<<<<<<<<
 *         """
 *             Copies M into self if both have same shape.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_6Matrix_11copy(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_6Matrix_10copy, "Matrix.copy(self, Matrix M, unsigned long[:] only=None)\n\n            Copies M into self if both have same shape.\n            only: if not None, copies only rows in only.\n        ");
static PyMethodDef __pyx_mdef_5miolo_6Matrix_11copy = {"copy", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_6Matrix_11copy, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_6Matrix_10copy};
static PyObject *__pyx_pw_5miolo_6Matrix_11copy(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_M = 0;
  __Pyx_memviewslice __pyx_v_only = { 0, 0, { 0 }, { 0 }, { 0 } };
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_M,&__pyx_n_s_only,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_M)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 257, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_only);
          if (value) { values[1] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 257, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "copy") < 0)) __PYX_ERR(1, 257, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_M = ((struct __pyx_obj_5miolo_Matrix *)values[0]);
    if (values[1]) {
      __pyx_v_only = __Pyx_PyObject_to_MemoryviewSlice_ds_unsigned_long(values[1], PyBUF_WRITABLE); if (unlikely(!__pyx_v_only.memview)) __PYX_ERR(1, 257, __pyx_L3_error)
    } else {
      __pyx_v_only = __pyx_k__15;
      __PYX_INC_MEMVIEW(&__pyx_v_only, 1);
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("copy", 0, 1, 2, __pyx_nargs); __PYX_ERR(1, 257, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __PYX_XCLEAR_MEMVIEW(&__pyx_v_only, 1);
  __Pyx_AddTraceback("miolo.Matrix.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_M), __pyx_ptype_5miolo_Matrix, 1, "M", 0))) __PYX_ERR(1, 257, __pyx_L1_error)
  __pyx_r = __pyx_pf_5miolo_6Matrix_10copy(((struct __pyx_obj_5miolo_Matrix *)__pyx_v_self), __pyx_v_M, __pyx_v_only);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XCLEAR_MEMVIEW(&__pyx_v_only, 1);
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_6Matrix_10copy(struct __pyx_obj_5miolo_Matrix *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_M, __Pyx_memviewslice __pyx_v_only) {
  unsigned long __pyx_v_n;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  unsigned long __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("copy", 1);

  /* "miololib.pyx":263
 *         """
 *         cdef unsigned long n
 *         if M.rows!=self.rows or M.cols!=self.cols:             # <<<<<<<<<<<<<<
 *             raise Exception("Matrices must have same shape.")
 *         if self.ctype!=M.ctype:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_rows); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_rows); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_2, __pyx_t_3, Py_NE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 263, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(1, 263, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!__pyx_t_5) {
  } else {
    __pyx_t_1 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_cols); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_cols); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_4, __pyx_t_3, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 263, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(1, 263, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_1 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "miololib.pyx":264
 *         cdef unsigned long n
 *         if M.rows!=self.rows or M.cols!=self.cols:
 *             raise Exception("Matrices must have same shape.")             # <<<<<<<<<<<<<<
 *         if self.ctype!=M.ctype:
 *             raise TypeError("Matrices must share same ctype.")
 */
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 264, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 264, __pyx_L1_error)

    /* "miololib.pyx":263
 *         """
 *         cdef unsigned long n
 *         if M.rows!=self.rows or M.cols!=self.cols:             # <<<<<<<<<<<<<<
 *             raise Exception("Matrices must have same shape.")
 *         if self.ctype!=M.ctype:
 */
  }

  /* "miololib.pyx":265
 *         if M.rows!=self.rows or M.cols!=self.cols:
 *             raise Exception("Matrices must have same shape.")
 *         if self.ctype!=M.ctype:             # <<<<<<<<<<<<<<
 *             raise TypeError("Matrices must share same ctype.")
 *         if only is None:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_2, __pyx_t_3, Py_NE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 265, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 265, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(__pyx_t_1)) {

    /* "miololib.pyx":266
 *             raise Exception("Matrices must have same shape.")
 *         if self.ctype!=M.ctype:
 *             raise TypeError("Matrices must share same ctype.")             # <<<<<<<<<<<<<<
 *         if only is None:
 *             if self.ctype=="int":
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 266, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(1, 266, __pyx_L1_error)

    /* "miololib.pyx":265
 *         if M.rows!=self.rows or M.cols!=self.cols:
 *             raise Exception("Matrices must have same shape.")
 *         if self.ctype!=M.ctype:             # <<<<<<<<<<<<<<
 *             raise TypeError("Matrices must share same ctype.")
 *         if only is None:
 */
  }

  /* "miololib.pyx":267
 *         if self.ctype!=M.ctype:
 *             raise TypeError("Matrices must share same ctype.")
 *         if only is None:             # <<<<<<<<<<<<<<
 *             if self.ctype=="int":
 *                 self.mtxInt.copy(drf(M.mtxInt))
 */
  __pyx_t_1 = (((PyObject *) __pyx_v_only.memview) == Py_None);
  if (__pyx_t_1) {

    /* "miololib.pyx":268
 *             raise TypeError("Matrices must share same ctype.")
 *         if only is None:
 *             if self.ctype=="int":             # <<<<<<<<<<<<<<
 *                 self.mtxInt.copy(drf(M.mtxInt))
 *             if self.ctype=="float":
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 268, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_t_4, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 268, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_1) {

      /* "miololib.pyx":269
 *         if only is None:
 *             if self.ctype=="int":
 *                 self.mtxInt.copy(drf(M.mtxInt))             # <<<<<<<<<<<<<<
 *             if self.ctype=="float":
 *                 self.mtxFloat.copy(drf(M.mtxFloat))
 */
      __pyx_v_self->__pyx_base.mtxInt->copy((*__pyx_v_M->__pyx_base.mtxInt));

      /* "miololib.pyx":268
 *             raise TypeError("Matrices must share same ctype.")
 *         if only is None:
 *             if self.ctype=="int":             # <<<<<<<<<<<<<<
 *                 self.mtxInt.copy(drf(M.mtxInt))
 *             if self.ctype=="float":
 */
    }

    /* "miololib.pyx":270
 *             if self.ctype=="int":
 *                 self.mtxInt.copy(drf(M.mtxInt))
 *             if self.ctype=="float":             # <<<<<<<<<<<<<<
 *                 self.mtxFloat.copy(drf(M.mtxFloat))
 *             if self.ctype=="double":
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 270, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_t_4, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 270, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_1) {

      /* "miololib.pyx":271
 *                 self.mtxInt.copy(drf(M.mtxInt))
 *             if self.ctype=="float":
 *                 self.mtxFloat.copy(drf(M.mtxFloat))             # <<<<<<<<<<<<<<
 *             if self.ctype=="double":
 *                 self.mtxDouble.copy(drf(M.mtxDouble))
 */
      __pyx_v_self->__pyx_base.mtxFloat->copy((*__pyx_v_M->__pyx_base.mtxFloat));

      /* "miololib.pyx":270
 *             if self.ctype=="int":
 *                 self.mtxInt.copy(drf(M.mtxInt))
 *             if self.ctype=="float":             # <<<<<<<<<<<<<<
 *                 self.mtxFloat.copy(drf(M.mtxFloat))
 *             if self.ctype=="double":
 */
    }

    /* "miololib.pyx":272
 *             if self.ctype=="float":
 *                 self.mtxFloat.copy(drf(M.mtxFloat))
 *             if self.ctype=="double":             # <<<<<<<<<<<<<<
 *                 self.mtxDouble.copy(drf(M.mtxDouble))
 *         else:
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 272, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_t_4, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 272, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_1) {

      /* "miololib.pyx":273
 *                 self.mtxFloat.copy(drf(M.mtxFloat))
 *             if self.ctype=="double":
 *                 self.mtxDouble.copy(drf(M.mtxDouble))             # <<<<<<<<<<<<<<
 *         else:
 *             if np.max(only)+1>self.rows:
 */
      __pyx_v_self->__pyx_base.mtxDouble->copy((*__pyx_v_M->__pyx_base.mtxDouble));

      /* "miololib.pyx":272
 *             if self.ctype=="float":
 *                 self.mtxFloat.copy(drf(M.mtxFloat))
 *             if self.ctype=="double":             # <<<<<<<<<<<<<<
 *                 self.mtxDouble.copy(drf(M.mtxDouble))
 *         else:
 */
    }

    /* "miololib.pyx":267
 *         if self.ctype!=M.ctype:
 *             raise TypeError("Matrices must share same ctype.")
 *         if only is None:             # <<<<<<<<<<<<<<
 *             if self.ctype=="int":
 *                 self.mtxInt.copy(drf(M.mtxInt))
 */
    goto __pyx_L7;
  }

  /* "miololib.pyx":275
 *                 self.mtxDouble.copy(drf(M.mtxDouble))
 *         else:
 *             if np.max(only)+1>self.rows:             # <<<<<<<<<<<<<<
 *                 raise Exception("Entries of only exceed self.rows.")
 *             n = only.size
 */
  /*else*/ {
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 275, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_max); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 275, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_only, 1, (PyObject *(*)(char *)) __pyx_memview_get_unsigned_long, (int (*)(char *, PyObject *)) __pyx_memview_set_unsigned_long, 0);; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 275, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = NULL;
    __pyx_t_7 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_7 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_t_3};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 275, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_t_2 = __Pyx_PyInt_AddObjC(__pyx_t_4, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 275, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_rows); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 275, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, __pyx_t_4, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 275, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 275, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(__pyx_t_1)) {

      /* "miololib.pyx":276
 *         else:
 *             if np.max(only)+1>self.rows:
 *                 raise Exception("Entries of only exceed self.rows.")             # <<<<<<<<<<<<<<
 *             n = only.size
 *             if self.ctype=="int":
 */
      __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 276, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(1, 276, __pyx_L1_error)

      /* "miololib.pyx":275
 *                 self.mtxDouble.copy(drf(M.mtxDouble))
 *         else:
 *             if np.max(only)+1>self.rows:             # <<<<<<<<<<<<<<
 *                 raise Exception("Entries of only exceed self.rows.")
 *             n = only.size
 */
    }

    /* "miololib.pyx":277
 *             if np.max(only)+1>self.rows:
 *                 raise Exception("Entries of only exceed self.rows.")
 *             n = only.size             # <<<<<<<<<<<<<<
 *             if self.ctype=="int":
 *                 self.mtxInt.copy(drf(M.mtxInt),&only[0],n)
 */
    __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_only, 1, (PyObject *(*)(char *)) __pyx_memview_get_unsigned_long, (int (*)(char *, PyObject *)) __pyx_memview_set_unsigned_long, 0);; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 277, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_size); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 277, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_8 = __Pyx_PyInt_As_unsigned_long(__pyx_t_4); if (unlikely((__pyx_t_8 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(1, 277, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_n = __pyx_t_8;

    /* "miololib.pyx":278
 *                 raise Exception("Entries of only exceed self.rows.")
 *             n = only.size
 *             if self.ctype=="int":             # <<<<<<<<<<<<<<
 *                 self.mtxInt.copy(drf(M.mtxInt),&only[0],n)
 *             if self.ctype=="float":
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 278, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_t_4, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 278, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_1) {

      /* "miololib.pyx":279
 *             n = only.size
 *             if self.ctype=="int":
 *                 self.mtxInt.copy(drf(M.mtxInt),&only[0],n)             # <<<<<<<<<<<<<<
 *             if self.ctype=="float":
 *                 self.mtxFloat.copy(drf(M.mtxFloat),&only[0],n)
 */
      __pyx_t_9 = 0;
      if (__pyx_t_9 < 0) __pyx_t_9 += __pyx_v_only.shape[0];
      __pyx_v_self->__pyx_base.mtxInt->copy((*__pyx_v_M->__pyx_base.mtxInt), (&(*((unsigned long *) ( /* dim=0 */ (__pyx_v_only.data + __pyx_t_9 * __pyx_v_only.strides[0]) )))), __pyx_v_n);

      /* "miololib.pyx":278
 *                 raise Exception("Entries of only exceed self.rows.")
 *             n = only.size
 *             if self.ctype=="int":             # <<<<<<<<<<<<<<
 *                 self.mtxInt.copy(drf(M.mtxInt),&only[0],n)
 *             if self.ctype=="float":
 */
    }

    /* "miololib.pyx":280
 *             if self.ctype=="int":
 *                 self.mtxInt.copy(drf(M.mtxInt),&only[0],n)
 *             if self.ctype=="float":             # <<<<<<<<<<<<<<
 *                 self.mtxFloat.copy(drf(M.mtxFloat),&only[0],n)
 *             if self.ctype=="double":
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 280, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_t_4, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 280, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_1) {

      /* "miololib.pyx":281
 *                 self.mtxInt.copy(drf(M.mtxInt),&only[0],n)
 *             if self.ctype=="float":
 *                 self.mtxFloat.copy(drf(M.mtxFloat),&only[0],n)             # <<<<<<<<<<<<<<
 *             if self.ctype=="double":
 *                 self.mtxDouble.copy(drf(M.mtxDouble),&only[0],n)
 */
      __pyx_t_9 = 0;
      if (__pyx_t_9 < 0) __pyx_t_9 += __pyx_v_only.shape[0];
      __pyx_v_self->__pyx_base.mtxFloat->copy((*__pyx_v_M->__pyx_base.mtxFloat), (&(*((unsigned long *) ( /* dim=0 */ (__pyx_v_only.data + __pyx_t_9 * __pyx_v_only.strides[0]) )))), __pyx_v_n);

      /* "miololib.pyx":280
 *             if self.ctype=="int":
 *                 self.mtxInt.copy(drf(M.mtxInt),&only[0],n)
 *             if self.ctype=="float":             # <<<<<<<<<<<<<<
 *                 self.mtxFloat.copy(drf(M.mtxFloat),&only[0],n)
 *             if self.ctype=="double":
 */
    }

    /* "miololib.pyx":282
 *             if self.ctype=="float":
 *                 self.mtxFloat.copy(drf(M.mtxFloat),&only[0],n)
 *             if self.ctype=="double":             # <<<<<<<<<<<<<<
 *                 self.mtxDouble.copy(drf(M.mtxDouble),&only[0],n)
 * 
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 282, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_t_4, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 282, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_1) {

      /* "miololib.pyx":283
 *                 self.mtxFloat.copy(drf(M.mtxFloat),&only[0],n)
 *             if self.ctype=="double":
 *                 self.mtxDouble.copy(drf(M.mtxDouble),&only[0],n)             # <<<<<<<<<<<<<<
 * 
 *     def print(self):
 */
      __pyx_t_9 = 0;
      if (__pyx_t_9 < 0) __pyx_t_9 += __pyx_v_only.shape[0];
      __pyx_v_self->__pyx_base.mtxDouble->copy((*__pyx_v_M->__pyx_base.mtxDouble), (&(*((unsigned long *) ( /* dim=0 */ (__pyx_v_only.data + __pyx_t_9 * __pyx_v_only.strides[0]) )))), __pyx_v_n);

      /* "miololib.pyx":282
 *             if self.ctype=="float":
 *                 self.mtxFloat.copy(drf(M.mtxFloat),&only[0],n)
 *             if self.ctype=="double":             # <<<<<<<<<<<<<<
 *                 self.mtxDouble.copy(drf(M.mtxDouble),&only[0],n)
 * 
 */
    }
  }
  __pyx_L7:;

  /* "miololib.pyx":257
 *             self.mtxDouble.data[k] = value
 * 
 *     def copy(self, Matrix M, unsigned long[:] only=None):             # <<<<<<<<<<<<<<
 *         """
 *             Copies M into self if both have same shape.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("miolo.Matrix.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":285
 *                 self.mtxDouble.copy(drf(M.mtxDouble),&only[0],n)
 * 
 *     def print(self):             # <<<<<<<<<<<<<<
 *         if self.ctype=="int":
 *             self.mtxInt.print()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_6Matrix_13print(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_6Matrix_12print, "Matrix.print(self)");
static PyMethodDef __pyx_mdef_5miolo_6Matrix_13print = {"print", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_6Matrix_13print, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_6Matrix_12print};
static PyObject *__pyx_pw_5miolo_6Matrix_13print(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("print (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("print", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "print", 0))) return NULL;
  __pyx_r = __pyx_pf_5miolo_6Matrix_12print(((struct __pyx_obj_5miolo_Matrix *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_6Matrix_12print(struct __pyx_obj_5miolo_Matrix *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("print", 1);

  /* "miololib.pyx":286
 * 
 *     def print(self):
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             self.mtxInt.print()
 *         if self.ctype=="float":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 286, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":287
 *     def print(self):
 *         if self.ctype=="int":
 *             self.mtxInt.print()             # <<<<<<<<<<<<<<
 *         if self.ctype=="float":
 *             self.mtxFloat.print()
 */
    __pyx_v_self->__pyx_base.mtxInt->print();

    /* "miololib.pyx":286
 * 
 *     def print(self):
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             self.mtxInt.print()
 *         if self.ctype=="float":
 */
  }

  /* "miololib.pyx":288
 *         if self.ctype=="int":
 *             self.mtxInt.print()
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             self.mtxFloat.print()
 *         if self.ctype=="double":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 288, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":289
 *             self.mtxInt.print()
 *         if self.ctype=="float":
 *             self.mtxFloat.print()             # <<<<<<<<<<<<<<
 *         if self.ctype=="double":
 *             self.mtxDouble.print()
 */
    __pyx_v_self->__pyx_base.mtxFloat->print();

    /* "miololib.pyx":288
 *         if self.ctype=="int":
 *             self.mtxInt.print()
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             self.mtxFloat.print()
 *         if self.ctype=="double":
 */
  }

  /* "miololib.pyx":290
 *         if self.ctype=="float":
 *             self.mtxFloat.print()
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             self.mtxDouble.print()
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 290, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 290, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":291
 *             self.mtxFloat.print()
 *         if self.ctype=="double":
 *             self.mtxDouble.print()             # <<<<<<<<<<<<<<
 * 
 *     def cut(self, rowMin, rowMax, colMin,colMax):
 */
    __pyx_v_self->__pyx_base.mtxDouble->print();

    /* "miololib.pyx":290
 *         if self.ctype=="float":
 *             self.mtxFloat.print()
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             self.mtxDouble.print()
 * 
 */
  }

  /* "miololib.pyx":285
 *                 self.mtxDouble.copy(drf(M.mtxDouble),&only[0],n)
 * 
 *     def print(self):             # <<<<<<<<<<<<<<
 *         if self.ctype=="int":
 *             self.mtxInt.print()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("miolo.Matrix.print", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":293
 *             self.mtxDouble.print()
 * 
 *     def cut(self, rowMin, rowMax, colMin,colMax):             # <<<<<<<<<<<<<<
 *         """
 *             Cuts the window [rowMin,rowMax) x [colMin,colMax) from self and
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_6Matrix_15cut(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_6Matrix_14cut, "Matrix.cut(self, rowMin, rowMax, colMin, colMax)\n\n            Cuts the window [rowMin,rowMax) x [colMin,colMax) from self and \n            returns a new Matrix.\n        ");
static PyMethodDef __pyx_mdef_5miolo_6Matrix_15cut = {"cut", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_6Matrix_15cut, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_6Matrix_14cut};
static PyObject *__pyx_pw_5miolo_6Matrix_15cut(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_rowMin = 0;
  PyObject *__pyx_v_rowMax = 0;
  PyObject *__pyx_v_colMin = 0;
  PyObject *__pyx_v_colMax = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cut (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_rowMin,&__pyx_n_s_rowMax,&__pyx_n_s_colMin,&__pyx_n_s_colMax,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_rowMin)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 293, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_rowMax)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 293, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("cut", 1, 4, 4, 1); __PYX_ERR(1, 293, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_colMin)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 293, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("cut", 1, 4, 4, 2); __PYX_ERR(1, 293, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_colMax)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[3]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 293, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("cut", 1, 4, 4, 3); __PYX_ERR(1, 293, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "cut") < 0)) __PYX_ERR(1, 293, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 4)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
      values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
    }
    __pyx_v_rowMin = values[0];
    __pyx_v_rowMax = values[1];
    __pyx_v_colMin = values[2];
    __pyx_v_colMax = values[3];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("cut", 1, 4, 4, __pyx_nargs); __PYX_ERR(1, 293, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.Matrix.cut", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5miolo_6Matrix_14cut(((struct __pyx_obj_5miolo_Matrix *)__pyx_v_self), __pyx_v_rowMin, __pyx_v_rowMax, __pyx_v_colMin, __pyx_v_colMax);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_6Matrix_14cut(struct __pyx_obj_5miolo_Matrix *__pyx_v_self, PyObject *__pyx_v_rowMin, PyObject *__pyx_v_rowMax, PyObject *__pyx_v_colMin, PyObject *__pyx_v_colMax) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  unsigned long __pyx_t_5;
  unsigned long __pyx_t_6;
  unsigned long __pyx_t_7;
  unsigned long __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("cut", 1);

  /* "miololib.pyx":298
 *             returns a new Matrix.
 *         """
 *         if rowMin<0 or rowMax>self.rows:             # <<<<<<<<<<<<<<
 *             raise Exception("Row range is out of bounds.")
 *         if colMin<0 or colMax>self.cols:
 */
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_rowMin, __pyx_int_0, Py_LT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 298, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 298, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_rows); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 298, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyObject_RichCompare(__pyx_v_rowMax, __pyx_t_2, Py_GT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 298, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 298, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_1 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "miololib.pyx":299
 *         """
 *         if rowMin<0 or rowMax>self.rows:
 *             raise Exception("Row range is out of bounds.")             # <<<<<<<<<<<<<<
 *         if colMin<0 or colMax>self.cols:
 *             raise Exception("Col range is out of bounds.")
 */
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 299, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(1, 299, __pyx_L1_error)

    /* "miololib.pyx":298
 *             returns a new Matrix.
 *         """
 *         if rowMin<0 or rowMax>self.rows:             # <<<<<<<<<<<<<<
 *             raise Exception("Row range is out of bounds.")
 *         if colMin<0 or colMax>self.cols:
 */
  }

  /* "miololib.pyx":300
 *         if rowMin<0 or rowMax>self.rows:
 *             raise Exception("Row range is out of bounds.")
 *         if colMin<0 or colMax>self.cols:             # <<<<<<<<<<<<<<
 *             raise Exception("Col range is out of bounds.")
 *         out = Matrix(ctype=self.ctype)
 */
  __pyx_t_4 = PyObject_RichCompare(__pyx_v_colMin, __pyx_int_0, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 300, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 300, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L7_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_cols); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_colMax, __pyx_t_4, Py_GT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 300, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 300, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_1 = __pyx_t_3;
  __pyx_L7_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "miololib.pyx":301
 *             raise Exception("Row range is out of bounds.")
 *         if colMin<0 or colMax>self.cols:
 *             raise Exception("Col range is out of bounds.")             # <<<<<<<<<<<<<<
 *         out = Matrix(ctype=self.ctype)
 *         if self.ctype=="int":
 */
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 301, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 301, __pyx_L1_error)

    /* "miololib.pyx":300
 *         if rowMin<0 or rowMax>self.rows:
 *             raise Exception("Row range is out of bounds.")
 *         if colMin<0 or colMax>self.cols:             # <<<<<<<<<<<<<<
 *             raise Exception("Col range is out of bounds.")
 *         out = Matrix(ctype=self.ctype)
 */
  }

  /* "miololib.pyx":302
 *         if colMin<0 or colMax>self.cols:
 *             raise Exception("Col range is out of bounds.")
 *         out = Matrix(ctype=self.ctype)             # <<<<<<<<<<<<<<
 *         if self.ctype=="int":
 *             out.mtxInt = self.mtxInt.cut(rowMin,rowMax,colMin,colMax)
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 302, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 302, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_ctype, __pyx_t_4) < 0) __PYX_ERR(1, 302, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Matrix), __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 302, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_out = ((struct __pyx_obj_5miolo_Matrix *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "miololib.pyx":303
 *             raise Exception("Col range is out of bounds.")
 *         out = Matrix(ctype=self.ctype)
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.mtxInt = self.mtxInt.cut(rowMin,rowMax,colMin,colMax)
 *         if self.ctype=="float":
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 303, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_t_4, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 303, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_1) {

    /* "miololib.pyx":304
 *         out = Matrix(ctype=self.ctype)
 *         if self.ctype=="int":
 *             out.mtxInt = self.mtxInt.cut(rowMin,rowMax,colMin,colMax)             # <<<<<<<<<<<<<<
 *         if self.ctype=="float":
 *             out.mtxFloat = self.mtxFloat.cut(rowMin,rowMax,colMin,colMax)
 */
    __pyx_t_5 = __Pyx_PyInt_As_unsigned_long(__pyx_v_rowMin); if (unlikely((__pyx_t_5 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(1, 304, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyInt_As_unsigned_long(__pyx_v_rowMax); if (unlikely((__pyx_t_6 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(1, 304, __pyx_L1_error)
    __pyx_t_7 = __Pyx_PyInt_As_unsigned_long(__pyx_v_colMin); if (unlikely((__pyx_t_7 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(1, 304, __pyx_L1_error)
    __pyx_t_8 = __Pyx_PyInt_As_unsigned_long(__pyx_v_colMax); if (unlikely((__pyx_t_8 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(1, 304, __pyx_L1_error)
    __pyx_v_out->__pyx_base.mtxInt = __pyx_v_self->__pyx_base.mtxInt->cut(__pyx_t_5, __pyx_t_6, __pyx_t_7, __pyx_t_8);

    /* "miololib.pyx":303
 *             raise Exception("Col range is out of bounds.")
 *         out = Matrix(ctype=self.ctype)
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.mtxInt = self.mtxInt.cut(rowMin,rowMax,colMin,colMax)
 *         if self.ctype=="float":
 */
  }

  /* "miololib.pyx":305
 *         if self.ctype=="int":
 *             out.mtxInt = self.mtxInt.cut(rowMin,rowMax,colMin,colMax)
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.mtxFloat = self.mtxFloat.cut(rowMin,rowMax,colMin,colMax)
 *         if self.ctype=="double":
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 305, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_t_4, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 305, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_1) {

    /* "miololib.pyx":306
 *             out.mtxInt = self.mtxInt.cut(rowMin,rowMax,colMin,colMax)
 *         if self.ctype=="float":
 *             out.mtxFloat = self.mtxFloat.cut(rowMin,rowMax,colMin,colMax)             # <<<<<<<<<<<<<<
 *         if self.ctype=="double":
 *             out.mtxDouble = self.mtxDouble.cut(rowMin,rowMax,colMin,colMax)
 */
    __pyx_t_8 = __Pyx_PyInt_As_unsigned_long(__pyx_v_rowMin); if (unlikely((__pyx_t_8 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(1, 306, __pyx_L1_error)
    __pyx_t_7 = __Pyx_PyInt_As_unsigned_long(__pyx_v_rowMax); if (unlikely((__pyx_t_7 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(1, 306, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyInt_As_unsigned_long(__pyx_v_colMin); if (unlikely((__pyx_t_6 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(1, 306, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyInt_As_unsigned_long(__pyx_v_colMax); if (unlikely((__pyx_t_5 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(1, 306, __pyx_L1_error)
    __pyx_v_out->__pyx_base.mtxFloat = __pyx_v_self->__pyx_base.mtxFloat->cut(__pyx_t_8, __pyx_t_7, __pyx_t_6, __pyx_t_5);

    /* "miololib.pyx":305
 *         if self.ctype=="int":
 *             out.mtxInt = self.mtxInt.cut(rowMin,rowMax,colMin,colMax)
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.mtxFloat = self.mtxFloat.cut(rowMin,rowMax,colMin,colMax)
 *         if self.ctype=="double":
 */
  }

  /* "miololib.pyx":307
 *         if self.ctype=="float":
 *             out.mtxFloat = self.mtxFloat.cut(rowMin,rowMax,colMin,colMax)
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.mtxDouble = self.mtxDouble.cut(rowMin,rowMax,colMin,colMax)
 *         return out
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 307, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_t_4, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 307, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_1) {

    /* "miololib.pyx":308
 *             out.mtxFloat = self.mtxFloat.cut(rowMin,rowMax,colMin,colMax)
 *         if self.ctype=="double":
 *             out.mtxDouble = self.mtxDouble.cut(rowMin,rowMax,colMin,colMax)             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
    __pyx_t_5 = __Pyx_PyInt_As_unsigned_long(__pyx_v_rowMin); if (unlikely((__pyx_t_5 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(1, 308, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyInt_As_unsigned_long(__pyx_v_rowMax); if (unlikely((__pyx_t_6 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(1, 308, __pyx_L1_error)
    __pyx_t_7 = __Pyx_PyInt_As_unsigned_long(__pyx_v_colMin); if (unlikely((__pyx_t_7 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(1, 308, __pyx_L1_error)
    __pyx_t_8 = __Pyx_PyInt_As_unsigned_long(__pyx_v_colMax); if (unlikely((__pyx_t_8 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(1, 308, __pyx_L1_error)
    __pyx_v_out->__pyx_base.mtxDouble = __pyx_v_self->__pyx_base.mtxDouble->cut(__pyx_t_5, __pyx_t_6, __pyx_t_7, __pyx_t_8);

    /* "miololib.pyx":307
 *         if self.ctype=="float":
 *             out.mtxFloat = self.mtxFloat.cut(rowMin,rowMax,colMin,colMax)
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.mtxDouble = self.mtxDouble.cut(rowMin,rowMax,colMin,colMax)
 *         return out
 */
  }

  /* "miololib.pyx":309
 *         if self.ctype=="double":
 *             out.mtxDouble = self.mtxDouble.cut(rowMin,rowMax,colMin,colMax)
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     #---------------------------------------------------------------------------
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_out);
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "miololib.pyx":293
 *             self.mtxDouble.print()
 * 
 *     def cut(self, rowMin, rowMax, colMin,colMax):             # <<<<<<<<<<<<<<
 *         """
 *             Cuts the window [rowMin,rowMax) x [colMin,colMax) from self and
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("miolo.Matrix.cut", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":315
 *     #---------------------------------------------------------------------------
 * 
 *     def max(self):             # <<<<<<<<<<<<<<
 *         """
 *             Returns max value in matrix.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_6Matrix_17max(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_6Matrix_16max, "Matrix.max(self)\n\n            Returns max value in matrix.\n        ");
static PyMethodDef __pyx_mdef_5miolo_6Matrix_17max = {"max", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_6Matrix_17max, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_6Matrix_16max};
static PyObject *__pyx_pw_5miolo_6Matrix_17max(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("max (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("max", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "max", 0))) return NULL;
  __pyx_r = __pyx_pf_5miolo_6Matrix_16max(((struct __pyx_obj_5miolo_Matrix *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_6Matrix_16max(struct __pyx_obj_5miolo_Matrix *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("max", 1);

  /* "miololib.pyx":319
 *             Returns max value in matrix.
 *         """
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             return self.mtxInt.max()
 *         if self.ctype=="float":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 319, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":320
 *         """
 *         if self.ctype=="int":
 *             return self.mtxInt.max()             # <<<<<<<<<<<<<<
 *         if self.ctype=="float":
 *             return self.mtxFloat.max()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->__pyx_base.mtxInt->max()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 320, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "miololib.pyx":319
 *             Returns max value in matrix.
 *         """
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             return self.mtxInt.max()
 *         if self.ctype=="float":
 */
  }

  /* "miololib.pyx":321
 *         if self.ctype=="int":
 *             return self.mtxInt.max()
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             return self.mtxFloat.max()
 *         if self.ctype=="double":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 321, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 321, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":322
 *             return self.mtxInt.max()
 *         if self.ctype=="float":
 *             return self.mtxFloat.max()             # <<<<<<<<<<<<<<
 *         if self.ctype=="double":
 *             return self.mtxDouble.max()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.mtxFloat->max()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 322, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "miololib.pyx":321
 *         if self.ctype=="int":
 *             return self.mtxInt.max()
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             return self.mtxFloat.max()
 *         if self.ctype=="double":
 */
  }

  /* "miololib.pyx":323
 *         if self.ctype=="float":
 *             return self.mtxFloat.max()
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             return self.mtxDouble.max()
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 323, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 323, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":324
 *             return self.mtxFloat.max()
 *         if self.ctype=="double":
 *             return self.mtxDouble.max()             # <<<<<<<<<<<<<<
 * 
 *     def min(self):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.mtxDouble->max()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 324, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "miololib.pyx":323
 *         if self.ctype=="float":
 *             return self.mtxFloat.max()
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             return self.mtxDouble.max()
 * 
 */
  }

  /* "miololib.pyx":315
 *     #---------------------------------------------------------------------------
 * 
 *     def max(self):             # <<<<<<<<<<<<<<
 *         """
 *             Returns max value in matrix.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("miolo.Matrix.max", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":326
 *             return self.mtxDouble.max()
 * 
 *     def min(self):             # <<<<<<<<<<<<<<
 *         """
 *             Returns min value in matrix.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_6Matrix_19min(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_6Matrix_18min, "Matrix.min(self)\n\n            Returns min value in matrix.\n        ");
static PyMethodDef __pyx_mdef_5miolo_6Matrix_19min = {"min", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_6Matrix_19min, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_6Matrix_18min};
static PyObject *__pyx_pw_5miolo_6Matrix_19min(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("min (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("min", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "min", 0))) return NULL;
  __pyx_r = __pyx_pf_5miolo_6Matrix_18min(((struct __pyx_obj_5miolo_Matrix *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_6Matrix_18min(struct __pyx_obj_5miolo_Matrix *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("min", 1);

  /* "miololib.pyx":330
 *             Returns min value in matrix.
 *         """
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             return self.mtxInt.min()
 *         if self.ctype=="float":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 330, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 330, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":331
 *         """
 *         if self.ctype=="int":
 *             return self.mtxInt.min()             # <<<<<<<<<<<<<<
 *         if self.ctype=="float":
 *             return self.mtxFloat.min()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->__pyx_base.mtxInt->min()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 331, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "miololib.pyx":330
 *             Returns min value in matrix.
 *         """
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             return self.mtxInt.min()
 *         if self.ctype=="float":
 */
  }

  /* "miololib.pyx":332
 *         if self.ctype=="int":
 *             return self.mtxInt.min()
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             return self.mtxFloat.min()
 *         if self.ctype=="double":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 332, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 332, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":333
 *             return self.mtxInt.min()
 *         if self.ctype=="float":
 *             return self.mtxFloat.min()             # <<<<<<<<<<<<<<
 *         if self.ctype=="double":
 *             return self.mtxDouble.min()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.mtxFloat->min()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 333, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "miololib.pyx":332
 *         if self.ctype=="int":
 *             return self.mtxInt.min()
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             return self.mtxFloat.min()
 *         if self.ctype=="double":
 */
  }

  /* "miololib.pyx":334
 *         if self.ctype=="float":
 *             return self.mtxFloat.min()
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             return self.mtxDouble.min()
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 334, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 334, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":335
 *             return self.mtxFloat.min()
 *         if self.ctype=="double":
 *             return self.mtxDouble.min()             # <<<<<<<<<<<<<<
 * 
 *     def argkmax(self, k=1):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.mtxDouble->min()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 335, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "miololib.pyx":334
 *         if self.ctype=="float":
 *             return self.mtxFloat.min()
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             return self.mtxDouble.min()
 * 
 */
  }

  /* "miololib.pyx":326
 *             return self.mtxDouble.max()
 * 
 *     def min(self):             # <<<<<<<<<<<<<<
 *         """
 *             Returns min value in matrix.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("miolo.Matrix.min", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":337
 *             return self.mtxDouble.min()
 * 
 *     def argkmax(self, k=1):             # <<<<<<<<<<<<<<
 *         """
 *             Returns index of k largest values in each row.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_6Matrix_21argkmax(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_6Matrix_20argkmax, "Matrix.argkmax(self, k=1)\n\n            Returns index of k largest values in each row.\n        ");
static PyMethodDef __pyx_mdef_5miolo_6Matrix_21argkmax = {"argkmax", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_6Matrix_21argkmax, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_6Matrix_20argkmax};
static PyObject *__pyx_pw_5miolo_6Matrix_21argkmax(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_k = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("argkmax (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_k,0};
    values[0] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)__pyx_int_1));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_k);
          if (value) { values[0] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 337, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "argkmax") < 0)) __PYX_ERR(1, 337, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_k = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("argkmax", 0, 0, 1, __pyx_nargs); __PYX_ERR(1, 337, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.Matrix.argkmax", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5miolo_6Matrix_20argkmax(((struct __pyx_obj_5miolo_Matrix *)__pyx_v_self), __pyx_v_k);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_6Matrix_20argkmax(struct __pyx_obj_5miolo_Matrix *__pyx_v_self, PyObject *__pyx_v_k) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("argkmax", 1);

  /* "miololib.pyx":341
 *             Returns index of k largest values in each row.
 *         """
 *         out = Matrix(ctype="int")             # <<<<<<<<<<<<<<
 *         if self.ctype=="int":
 *             out.mtxInt = mld.argkmax(drf(self.mtxInt),k)
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 341, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ctype, __pyx_n_s_int) < 0) __PYX_ERR(1, 341, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Matrix), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 341, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_out = ((struct __pyx_obj_5miolo_Matrix *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "miololib.pyx":342
 *         """
 *         out = Matrix(ctype="int")
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.mtxInt = mld.argkmax(drf(self.mtxInt),k)
 *         if self.ctype=="float":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 342, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":343
 *         out = Matrix(ctype="int")
 *         if self.ctype=="int":
 *             out.mtxInt = mld.argkmax(drf(self.mtxInt),k)             # <<<<<<<<<<<<<<
 *         if self.ctype=="float":
 *             out.mtxInt = mld.argkmax(drf(self.mtxFloat),k)
 */
    __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_k); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 343, __pyx_L1_error)
    __pyx_v_out->__pyx_base.mtxInt = argkmax<int>((*__pyx_v_self->__pyx_base.mtxInt), __pyx_t_4);

    /* "miololib.pyx":342
 *         """
 *         out = Matrix(ctype="int")
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.mtxInt = mld.argkmax(drf(self.mtxInt),k)
 *         if self.ctype=="float":
 */
  }

  /* "miololib.pyx":344
 *         if self.ctype=="int":
 *             out.mtxInt = mld.argkmax(drf(self.mtxInt),k)
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.mtxInt = mld.argkmax(drf(self.mtxFloat),k)
 *         if self.ctype=="double":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 344, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 344, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":345
 *             out.mtxInt = mld.argkmax(drf(self.mtxInt),k)
 *         if self.ctype=="float":
 *             out.mtxInt = mld.argkmax(drf(self.mtxFloat),k)             # <<<<<<<<<<<<<<
 *         if self.ctype=="double":
 *             out.mtxInt = mld.argkmax(drf(self.mtxDouble),k)
 */
    __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_k); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 345, __pyx_L1_error)
    __pyx_v_out->__pyx_base.mtxInt = argkmax<float>((*__pyx_v_self->__pyx_base.mtxFloat), __pyx_t_4);

    /* "miololib.pyx":344
 *         if self.ctype=="int":
 *             out.mtxInt = mld.argkmax(drf(self.mtxInt),k)
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.mtxInt = mld.argkmax(drf(self.mtxFloat),k)
 *         if self.ctype=="double":
 */
  }

  /* "miololib.pyx":346
 *         if self.ctype=="float":
 *             out.mtxInt = mld.argkmax(drf(self.mtxFloat),k)
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.mtxInt = mld.argkmax(drf(self.mtxDouble),k)
 *         return out
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 346, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 346, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":347
 *             out.mtxInt = mld.argkmax(drf(self.mtxFloat),k)
 *         if self.ctype=="double":
 *             out.mtxInt = mld.argkmax(drf(self.mtxDouble),k)             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
    __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_k); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 347, __pyx_L1_error)
    __pyx_v_out->__pyx_base.mtxInt = argkmax<double>((*__pyx_v_self->__pyx_base.mtxDouble), __pyx_t_4);

    /* "miololib.pyx":346
 *         if self.ctype=="float":
 *             out.mtxInt = mld.argkmax(drf(self.mtxFloat),k)
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.mtxInt = mld.argkmax(drf(self.mtxDouble),k)
 *         return out
 */
  }

  /* "miololib.pyx":348
 *         if self.ctype=="double":
 *             out.mtxInt = mld.argkmax(drf(self.mtxDouble),k)
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     def argkmin(self, k=1):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_out);
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "miololib.pyx":337
 *             return self.mtxDouble.min()
 * 
 *     def argkmax(self, k=1):             # <<<<<<<<<<<<<<
 *         """
 *             Returns index of k largest values in each row.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("miolo.Matrix.argkmax", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":350
 *         return out
 * 
 *     def argkmin(self, k=1):             # <<<<<<<<<<<<<<
 *         """
 *             Returns index of k smallest values in each row.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_6Matrix_23argkmin(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_6Matrix_22argkmin, "Matrix.argkmin(self, k=1)\n\n            Returns index of k smallest values in each row.\n        ");
static PyMethodDef __pyx_mdef_5miolo_6Matrix_23argkmin = {"argkmin", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_6Matrix_23argkmin, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_6Matrix_22argkmin};
static PyObject *__pyx_pw_5miolo_6Matrix_23argkmin(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_k = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("argkmin (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_k,0};
    values[0] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)__pyx_int_1));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_k);
          if (value) { values[0] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 350, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "argkmin") < 0)) __PYX_ERR(1, 350, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_k = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("argkmin", 0, 0, 1, __pyx_nargs); __PYX_ERR(1, 350, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.Matrix.argkmin", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5miolo_6Matrix_22argkmin(((struct __pyx_obj_5miolo_Matrix *)__pyx_v_self), __pyx_v_k);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_6Matrix_22argkmin(struct __pyx_obj_5miolo_Matrix *__pyx_v_self, PyObject *__pyx_v_k) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("argkmin", 1);

  /* "miololib.pyx":354
 *             Returns index of k smallest values in each row.
 *         """
 *         out = Matrix(ctype="int")             # <<<<<<<<<<<<<<
 *         if self.ctype=="int":
 *             out.mtxInt = mld.argkmin(drf(self.mtxInt),k)
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 354, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ctype, __pyx_n_s_int) < 0) __PYX_ERR(1, 354, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Matrix), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 354, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_out = ((struct __pyx_obj_5miolo_Matrix *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "miololib.pyx":355
 *         """
 *         out = Matrix(ctype="int")
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.mtxInt = mld.argkmin(drf(self.mtxInt),k)
 *         if self.ctype=="float":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 355, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 355, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":356
 *         out = Matrix(ctype="int")
 *         if self.ctype=="int":
 *             out.mtxInt = mld.argkmin(drf(self.mtxInt),k)             # <<<<<<<<<<<<<<
 *         if self.ctype=="float":
 *             out.mtxInt = mld.argkmin(drf(self.mtxFloat),k)
 */
    __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_k); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 356, __pyx_L1_error)
    __pyx_v_out->__pyx_base.mtxInt = argkmin<int>((*__pyx_v_self->__pyx_base.mtxInt), __pyx_t_4);

    /* "miololib.pyx":355
 *         """
 *         out = Matrix(ctype="int")
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.mtxInt = mld.argkmin(drf(self.mtxInt),k)
 *         if self.ctype=="float":
 */
  }

  /* "miololib.pyx":357
 *         if self.ctype=="int":
 *             out.mtxInt = mld.argkmin(drf(self.mtxInt),k)
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.mtxInt = mld.argkmin(drf(self.mtxFloat),k)
 *         if self.ctype=="double":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 357, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 357, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":358
 *             out.mtxInt = mld.argkmin(drf(self.mtxInt),k)
 *         if self.ctype=="float":
 *             out.mtxInt = mld.argkmin(drf(self.mtxFloat),k)             # <<<<<<<<<<<<<<
 *         if self.ctype=="double":
 *             out.mtxInt = mld.argkmin(drf(self.mtxDouble),k)
 */
    __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_k); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 358, __pyx_L1_error)
    __pyx_v_out->__pyx_base.mtxInt = argkmin<float>((*__pyx_v_self->__pyx_base.mtxFloat), __pyx_t_4);

    /* "miololib.pyx":357
 *         if self.ctype=="int":
 *             out.mtxInt = mld.argkmin(drf(self.mtxInt),k)
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.mtxInt = mld.argkmin(drf(self.mtxFloat),k)
 *         if self.ctype=="double":
 */
  }

  /* "miololib.pyx":359
 *         if self.ctype=="float":
 *             out.mtxInt = mld.argkmin(drf(self.mtxFloat),k)
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.mtxInt = mld.argkmin(drf(self.mtxDouble),k)
 *         return out
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 359, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 359, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":360
 *             out.mtxInt = mld.argkmin(drf(self.mtxFloat),k)
 *         if self.ctype=="double":
 *             out.mtxInt = mld.argkmin(drf(self.mtxDouble),k)             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
    __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_k); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 360, __pyx_L1_error)
    __pyx_v_out->__pyx_base.mtxInt = argkmin<double>((*__pyx_v_self->__pyx_base.mtxDouble), __pyx_t_4);

    /* "miololib.pyx":359
 *         if self.ctype=="float":
 *             out.mtxInt = mld.argkmin(drf(self.mtxFloat),k)
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.mtxInt = mld.argkmin(drf(self.mtxDouble),k)
 *         return out
 */
  }

  /* "miololib.pyx":361
 *         if self.ctype=="double":
 *             out.mtxInt = mld.argkmin(drf(self.mtxDouble),k)
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     def normalize(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_out);
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "miololib.pyx":350
 *         return out
 * 
 *     def argkmin(self, k=1):             # <<<<<<<<<<<<<<
 *         """
 *             Returns index of k smallest values in each row.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("miolo.Matrix.argkmin", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":363
 *         return out
 * 
 *     def normalize(self):             # <<<<<<<<<<<<<<
 *         """
 *             Row normalization in to make elements in the same row sum to 1.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_6Matrix_25normalize(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_6Matrix_24normalize, "Matrix.normalize(self)\n\n            Row normalization in to make elements in the same row sum to 1.\n            This operation is done inplace.\n        ");
static PyMethodDef __pyx_mdef_5miolo_6Matrix_25normalize = {"normalize", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_6Matrix_25normalize, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_6Matrix_24normalize};
static PyObject *__pyx_pw_5miolo_6Matrix_25normalize(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("normalize (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("normalize", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "normalize", 0))) return NULL;
  __pyx_r = __pyx_pf_5miolo_6Matrix_24normalize(((struct __pyx_obj_5miolo_Matrix *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_6Matrix_24normalize(struct __pyx_obj_5miolo_Matrix *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("normalize", 1);

  /* "miololib.pyx":368
 *             This operation is done inplace.
 *         """
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             self.mtxInt.normalize()
 *         if self.ctype=="float":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 368, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 368, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":369
 *         """
 *         if self.ctype=="int":
 *             self.mtxInt.normalize()             # <<<<<<<<<<<<<<
 *         if self.ctype=="float":
 *             self.mtxFloat.normalize()
 */
    __pyx_v_self->__pyx_base.mtxInt->normalize();

    /* "miololib.pyx":368
 *             This operation is done inplace.
 *         """
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             self.mtxInt.normalize()
 *         if self.ctype=="float":
 */
  }

  /* "miololib.pyx":370
 *         if self.ctype=="int":
 *             self.mtxInt.normalize()
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             self.mtxFloat.normalize()
 *         if self.ctype=="double":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 370, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 370, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":371
 *             self.mtxInt.normalize()
 *         if self.ctype=="float":
 *             self.mtxFloat.normalize()             # <<<<<<<<<<<<<<
 *         if self.ctype=="double":
 *             self.mtxDouble.normalize()
 */
    __pyx_v_self->__pyx_base.mtxFloat->normalize();

    /* "miololib.pyx":370
 *         if self.ctype=="int":
 *             self.mtxInt.normalize()
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             self.mtxFloat.normalize()
 *         if self.ctype=="double":
 */
  }

  /* "miololib.pyx":372
 *         if self.ctype=="float":
 *             self.mtxFloat.normalize()
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             self.mtxDouble.normalize()
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 372, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 372, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":373
 *             self.mtxFloat.normalize()
 *         if self.ctype=="double":
 *             self.mtxDouble.normalize()             # <<<<<<<<<<<<<<
 * 
 *     def transpose(self):
 */
    __pyx_v_self->__pyx_base.mtxDouble->normalize();

    /* "miololib.pyx":372
 *         if self.ctype=="float":
 *             self.mtxFloat.normalize()
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             self.mtxDouble.normalize()
 * 
 */
  }

  /* "miololib.pyx":363
 *         return out
 * 
 *     def normalize(self):             # <<<<<<<<<<<<<<
 *         """
 *             Row normalization in to make elements in the same row sum to 1.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("miolo.Matrix.normalize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":375
 *             self.mtxDouble.normalize()
 * 
 *     def transpose(self):             # <<<<<<<<<<<<<<
 *         """
 *             Returns the transpose of a Matrix.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_6Matrix_27transpose(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_6Matrix_26transpose, "Matrix.transpose(self)\n\n            Returns the transpose of a Matrix.\n        ");
static PyMethodDef __pyx_mdef_5miolo_6Matrix_27transpose = {"transpose", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_6Matrix_27transpose, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_6Matrix_26transpose};
static PyObject *__pyx_pw_5miolo_6Matrix_27transpose(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("transpose (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("transpose", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "transpose", 0))) return NULL;
  __pyx_r = __pyx_pf_5miolo_6Matrix_26transpose(((struct __pyx_obj_5miolo_Matrix *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_6Matrix_26transpose(struct __pyx_obj_5miolo_Matrix *__pyx_v_self) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("transpose", 1);

  /* "miololib.pyx":379
 *             Returns the transpose of a Matrix.
 *         """
 *         out = Matrix(ctype=self.ctype)             # <<<<<<<<<<<<<<
 *         if self.ctype == "int":
 *             out.mtxInt = self.mtxInt.transpose()
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 379, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 379, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ctype, __pyx_t_2) < 0) __PYX_ERR(1, 379, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Matrix), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 379, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_out = ((struct __pyx_obj_5miolo_Matrix *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "miololib.pyx":380
 *         """
 *         out = Matrix(ctype=self.ctype)
 *         if self.ctype == "int":             # <<<<<<<<<<<<<<
 *             out.mtxInt = self.mtxInt.transpose()
 *         if self.ctype == "float":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 380, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 380, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":381
 *         out = Matrix(ctype=self.ctype)
 *         if self.ctype == "int":
 *             out.mtxInt = self.mtxInt.transpose()             # <<<<<<<<<<<<<<
 *         if self.ctype == "float":
 *             out.mtxFloat = self.mtxFloat.transpose()
 */
    __pyx_v_out->__pyx_base.mtxInt = __pyx_v_self->__pyx_base.mtxInt->transpose();

    /* "miololib.pyx":380
 *         """
 *         out = Matrix(ctype=self.ctype)
 *         if self.ctype == "int":             # <<<<<<<<<<<<<<
 *             out.mtxInt = self.mtxInt.transpose()
 *         if self.ctype == "float":
 */
  }

  /* "miololib.pyx":382
 *         if self.ctype == "int":
 *             out.mtxInt = self.mtxInt.transpose()
 *         if self.ctype == "float":             # <<<<<<<<<<<<<<
 *             out.mtxFloat = self.mtxFloat.transpose()
 *         if self.ctype == "double":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 382, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 382, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":383
 *             out.mtxInt = self.mtxInt.transpose()
 *         if self.ctype == "float":
 *             out.mtxFloat = self.mtxFloat.transpose()             # <<<<<<<<<<<<<<
 *         if self.ctype == "double":
 *             out.mtxDouble = self.mtxDouble.transpose()
 */
    __pyx_v_out->__pyx_base.mtxFloat = __pyx_v_self->__pyx_base.mtxFloat->transpose();

    /* "miololib.pyx":382
 *         if self.ctype == "int":
 *             out.mtxInt = self.mtxInt.transpose()
 *         if self.ctype == "float":             # <<<<<<<<<<<<<<
 *             out.mtxFloat = self.mtxFloat.transpose()
 *         if self.ctype == "double":
 */
  }

  /* "miololib.pyx":384
 *         if self.ctype == "float":
 *             out.mtxFloat = self.mtxFloat.transpose()
 *         if self.ctype == "double":             # <<<<<<<<<<<<<<
 *             out.mtxDouble = self.mtxDouble.transpose()
 *         return out
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 384, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 384, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":385
 *             out.mtxFloat = self.mtxFloat.transpose()
 *         if self.ctype == "double":
 *             out.mtxDouble = self.mtxDouble.transpose()             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
    __pyx_v_out->__pyx_base.mtxDouble = __pyx_v_self->__pyx_base.mtxDouble->transpose();

    /* "miololib.pyx":384
 *         if self.ctype == "float":
 *             out.mtxFloat = self.mtxFloat.transpose()
 *         if self.ctype == "double":             # <<<<<<<<<<<<<<
 *             out.mtxDouble = self.mtxDouble.transpose()
 *         return out
 */
  }

  /* "miololib.pyx":386
 *         if self.ctype == "double":
 *             out.mtxDouble = self.mtxDouble.transpose()
 *         return out             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_out);
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "miololib.pyx":375
 *             self.mtxDouble.normalize()
 * 
 *     def transpose(self):             # <<<<<<<<<<<<<<
 *         """
 *             Returns the transpose of a Matrix.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("miolo.Matrix.transpose", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":389
 * 
 * 
 *     def flatten(self, bool rows=True):             # <<<<<<<<<<<<<<
 *         """
 *             Inplace flattening of a Matrix.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_6Matrix_29flatten(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_6Matrix_28flatten, "Matrix.flatten(self, bool rows=True)\n\n            Inplace flattening of a Matrix.\n            If rows is True, Matrix is flattened to have a single row. If rows\n            is False, flattened to a single column.\n            NOTE: This only changes a view on the Matrix data. No changes are\n            made on stored data.\n        ");
static PyMethodDef __pyx_mdef_5miolo_6Matrix_29flatten = {"flatten", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_6Matrix_29flatten, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_6Matrix_28flatten};
static PyObject *__pyx_pw_5miolo_6Matrix_29flatten(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  bool __pyx_v_rows;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("flatten (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_rows,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_rows);
          if (value) { values[0] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 389, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "flatten") < 0)) __PYX_ERR(1, 389, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_rows = __Pyx_PyObject_IsTrue(values[0]); if (unlikely((__pyx_v_rows == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 389, __pyx_L3_error)
    } else {
      __pyx_v_rows = ((bool)1);
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("flatten", 0, 0, 1, __pyx_nargs); __PYX_ERR(1, 389, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.Matrix.flatten", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5miolo_6Matrix_28flatten(((struct __pyx_obj_5miolo_Matrix *)__pyx_v_self), __pyx_v_rows);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_6Matrix_28flatten(struct __pyx_obj_5miolo_Matrix *__pyx_v_self, bool __pyx_v_rows) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("flatten", 1);

  /* "miololib.pyx":397
 *             made on stored data.
 *         """
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             self.mtxInt.flatten(rows)
 *         if self.ctype=="float":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 397, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 397, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":398
 *         """
 *         if self.ctype=="int":
 *             self.mtxInt.flatten(rows)             # <<<<<<<<<<<<<<
 *         if self.ctype=="float":
 *             self.mtxFloat.flatten(rows)
 */
    __pyx_v_self->__pyx_base.mtxInt->flatten(__pyx_v_rows);

    /* "miololib.pyx":397
 *             made on stored data.
 *         """
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             self.mtxInt.flatten(rows)
 *         if self.ctype=="float":
 */
  }

  /* "miololib.pyx":399
 *         if self.ctype=="int":
 *             self.mtxInt.flatten(rows)
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             self.mtxFloat.flatten(rows)
 *         if self.ctype=="int":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 399, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":400
 *             self.mtxInt.flatten(rows)
 *         if self.ctype=="float":
 *             self.mtxFloat.flatten(rows)             # <<<<<<<<<<<<<<
 *         if self.ctype=="int":
 *             self.mtxDouble.flatten(rows)
 */
    __pyx_v_self->__pyx_base.mtxFloat->flatten(__pyx_v_rows);

    /* "miololib.pyx":399
 *         if self.ctype=="int":
 *             self.mtxInt.flatten(rows)
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             self.mtxFloat.flatten(rows)
 *         if self.ctype=="int":
 */
  }

  /* "miololib.pyx":401
 *         if self.ctype=="float":
 *             self.mtxFloat.flatten(rows)
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             self.mtxDouble.flatten(rows)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 401, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 401, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":402
 *             self.mtxFloat.flatten(rows)
 *         if self.ctype=="int":
 *             self.mtxDouble.flatten(rows)             # <<<<<<<<<<<<<<
 * 
 *     def reshape(self, unsigned long rows, unsigned long cols):
 */
    __pyx_v_self->__pyx_base.mtxDouble->flatten(__pyx_v_rows);

    /* "miololib.pyx":401
 *         if self.ctype=="float":
 *             self.mtxFloat.flatten(rows)
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             self.mtxDouble.flatten(rows)
 * 
 */
  }

  /* "miololib.pyx":389
 * 
 * 
 *     def flatten(self, bool rows=True):             # <<<<<<<<<<<<<<
 *         """
 *             Inplace flattening of a Matrix.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("miolo.Matrix.flatten", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":404
 *             self.mtxDouble.flatten(rows)
 * 
 *     def reshape(self, unsigned long rows, unsigned long cols):             # <<<<<<<<<<<<<<
 *         """
 *             Inplace reshape of a Matrix. Can be done only if rows*cols is equal
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_6Matrix_31reshape(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_6Matrix_30reshape, "Matrix.reshape(self, unsigned long rows, unsigned long cols)\n\n            Inplace reshape of a Matrix. Can be done only if rows*cols is equal\n            to self.rows*self.cols.\n            NOTE: This only changes a 'view' on the Matrix data. No changes are\n            made on stored data.\n        ");
static PyMethodDef __pyx_mdef_5miolo_6Matrix_31reshape = {"reshape", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_6Matrix_31reshape, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_6Matrix_30reshape};
static PyObject *__pyx_pw_5miolo_6Matrix_31reshape(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  unsigned long __pyx_v_rows;
  unsigned long __pyx_v_cols;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("reshape (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_rows,&__pyx_n_s_cols,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_rows)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 404, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_cols)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 404, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("reshape", 1, 2, 2, 1); __PYX_ERR(1, 404, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "reshape") < 0)) __PYX_ERR(1, 404, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_rows = __Pyx_PyInt_As_unsigned_long(values[0]); if (unlikely((__pyx_v_rows == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(1, 404, __pyx_L3_error)
    __pyx_v_cols = __Pyx_PyInt_As_unsigned_long(values[1]); if (unlikely((__pyx_v_cols == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(1, 404, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("reshape", 1, 2, 2, __pyx_nargs); __PYX_ERR(1, 404, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.Matrix.reshape", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5miolo_6Matrix_30reshape(((struct __pyx_obj_5miolo_Matrix *)__pyx_v_self), __pyx_v_rows, __pyx_v_cols);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_6Matrix_30reshape(struct __pyx_obj_5miolo_Matrix *__pyx_v_self, unsigned long __pyx_v_rows, unsigned long __pyx_v_cols) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("reshape", 1);

  /* "miololib.pyx":411
 *             made on stored data.
 *         """
 *         if self.rows*self.cols!=rows*cols:             # <<<<<<<<<<<<<<
 *             raise Exception("Invalid new shape.")
 *         if self.ctype=="int":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_rows); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 411, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_cols); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 411, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 411, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_unsigned_long((__pyx_v_rows * __pyx_v_cols)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 411, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_3, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 411, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 411, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(__pyx_t_4)) {

    /* "miololib.pyx":412
 *         """
 *         if self.rows*self.cols!=rows*cols:
 *             raise Exception("Invalid new shape.")             # <<<<<<<<<<<<<<
 *         if self.ctype=="int":
 *             self.mtxInt.reshape(rows,cols)
 */
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 412, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 412, __pyx_L1_error)

    /* "miololib.pyx":411
 *             made on stored data.
 *         """
 *         if self.rows*self.cols!=rows*cols:             # <<<<<<<<<<<<<<
 *             raise Exception("Invalid new shape.")
 *         if self.ctype=="int":
 */
  }

  /* "miololib.pyx":413
 *         if self.rows*self.cols!=rows*cols:
 *             raise Exception("Invalid new shape.")
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             self.mtxInt.reshape(rows,cols)
 *         if self.ctype=="float":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 413, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 413, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "miololib.pyx":414
 *             raise Exception("Invalid new shape.")
 *         if self.ctype=="int":
 *             self.mtxInt.reshape(rows,cols)             # <<<<<<<<<<<<<<
 *         if self.ctype=="float":
 *             self.mtxFloat.reshape(rows,cols)
 */
    __pyx_v_self->__pyx_base.mtxInt->reshape(__pyx_v_rows, __pyx_v_cols);

    /* "miololib.pyx":413
 *         if self.rows*self.cols!=rows*cols:
 *             raise Exception("Invalid new shape.")
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             self.mtxInt.reshape(rows,cols)
 *         if self.ctype=="float":
 */
  }

  /* "miololib.pyx":415
 *         if self.ctype=="int":
 *             self.mtxInt.reshape(rows,cols)
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             self.mtxFloat.reshape(rows,cols)
 *         if self.ctype=="int":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 415, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 415, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "miololib.pyx":416
 *             self.mtxInt.reshape(rows,cols)
 *         if self.ctype=="float":
 *             self.mtxFloat.reshape(rows,cols)             # <<<<<<<<<<<<<<
 *         if self.ctype=="int":
 *             self.mtxDouble.reshape(rows,cols)
 */
    __pyx_v_self->__pyx_base.mtxFloat->reshape(__pyx_v_rows, __pyx_v_cols);

    /* "miololib.pyx":415
 *         if self.ctype=="int":
 *             self.mtxInt.reshape(rows,cols)
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             self.mtxFloat.reshape(rows,cols)
 *         if self.ctype=="int":
 */
  }

  /* "miololib.pyx":417
 *         if self.ctype=="float":
 *             self.mtxFloat.reshape(rows,cols)
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             self.mtxDouble.reshape(rows,cols)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 417, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 417, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "miololib.pyx":418
 *             self.mtxFloat.reshape(rows,cols)
 *         if self.ctype=="int":
 *             self.mtxDouble.reshape(rows,cols)             # <<<<<<<<<<<<<<
 * 
 *     def sparsifyThreshold(self, Threshold, output="Graph"):
 */
    __pyx_v_self->__pyx_base.mtxDouble->reshape(__pyx_v_rows, __pyx_v_cols);

    /* "miololib.pyx":417
 *         if self.ctype=="float":
 *             self.mtxFloat.reshape(rows,cols)
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             self.mtxDouble.reshape(rows,cols)
 * 
 */
  }

  /* "miololib.pyx":404
 *             self.mtxDouble.flatten(rows)
 * 
 *     def reshape(self, unsigned long rows, unsigned long cols):             # <<<<<<<<<<<<<<
 *         """
 *             Inplace reshape of a Matrix. Can be done only if rows*cols is equal
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("miolo.Matrix.reshape", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":420
 *             self.mtxDouble.reshape(rows,cols)
 * 
 *     def sparsifyThreshold(self, Threshold, output="Graph"):             # <<<<<<<<<<<<<<
 *         """
 *             If self is a square matrix, returns a Graph with only the entries
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_6Matrix_33sparsifyThreshold(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_6Matrix_32sparsifyThreshold, "Matrix.sparsifyThreshold(self, Threshold, output='Graph')\n\n            If self is a square matrix, returns a Graph with only the entries\n            that are smaller than Threshold. \n            Args:\n                Threshold: lower bound on entries.\n                output: can return Graph or Digraph.\n            Returns:\n                Graph, Digraph or None in case output is unknown.\n        ");
static PyMethodDef __pyx_mdef_5miolo_6Matrix_33sparsifyThreshold = {"sparsifyThreshold", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_6Matrix_33sparsifyThreshold, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_6Matrix_32sparsifyThreshold};
static PyObject *__pyx_pw_5miolo_6Matrix_33sparsifyThreshold(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_Threshold = 0;
  PyObject *__pyx_v_output = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sparsifyThreshold (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_Threshold,&__pyx_n_s_output,0};
    values[1] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)__pyx_n_s_Graph));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_Threshold)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 420, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_output);
          if (value) { values[1] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 420, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "sparsifyThreshold") < 0)) __PYX_ERR(1, 420, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_Threshold = values[0];
    __pyx_v_output = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sparsifyThreshold", 0, 1, 2, __pyx_nargs); __PYX_ERR(1, 420, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.Matrix.sparsifyThreshold", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5miolo_6Matrix_32sparsifyThreshold(((struct __pyx_obj_5miolo_Matrix *)__pyx_v_self), __pyx_v_Threshold, __pyx_v_output);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_6Matrix_32sparsifyThreshold(struct __pyx_obj_5miolo_Matrix *__pyx_v_self, PyObject *__pyx_v_Threshold, PyObject *__pyx_v_output) {
  struct __pyx_obj_5miolo_mioloObject *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  double __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("sparsifyThreshold", 1);

  /* "miololib.pyx":430
 *                 Graph, Digraph or None in case output is unknown.
 *         """
 *         if self.rows!=self.cols:             # <<<<<<<<<<<<<<
 *             raise Exception("Only square matrices can be sparsified.")
 *         if output=="Graph":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_rows); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 430, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_cols); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 430, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 430, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 430, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(__pyx_t_4)) {

    /* "miololib.pyx":431
 *         """
 *         if self.rows!=self.cols:
 *             raise Exception("Only square matrices can be sparsified.")             # <<<<<<<<<<<<<<
 *         if output=="Graph":
 *             out = Graph(ctype=self.ctype)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 431, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 431, __pyx_L1_error)

    /* "miololib.pyx":430
 *                 Graph, Digraph or None in case output is unknown.
 *         """
 *         if self.rows!=self.cols:             # <<<<<<<<<<<<<<
 *             raise Exception("Only square matrices can be sparsified.")
 *         if output=="Graph":
 */
  }

  /* "miololib.pyx":432
 *         if self.rows!=self.cols:
 *             raise Exception("Only square matrices can be sparsified.")
 *         if output=="Graph":             # <<<<<<<<<<<<<<
 *             out = Graph(ctype=self.ctype)
 *             if out.ctype=="int":
 */
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_output, __pyx_n_s_Graph, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 432, __pyx_L1_error)
  if (__pyx_t_4) {

    /* "miololib.pyx":433
 *             raise Exception("Only square matrices can be sparsified.")
 *         if output=="Graph":
 *             out = Graph(ctype=self.ctype)             # <<<<<<<<<<<<<<
 *             if out.ctype=="int":
 *                 out.graphInt = mld.sparsifyGraphThreshold(drf(self.mtxInt),Threshold)
 */
    __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 433, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 433, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_ctype, __pyx_t_2) < 0) __PYX_ERR(1, 433, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Graph), __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 433, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_out = ((struct __pyx_obj_5miolo_mioloObject *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "miololib.pyx":434
 *         if output=="Graph":
 *             out = Graph(ctype=self.ctype)
 *             if out.ctype=="int":             # <<<<<<<<<<<<<<
 *                 out.graphInt = mld.sparsifyGraphThreshold(drf(self.mtxInt),Threshold)
 *             if out.ctype=="float":
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 434, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 434, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_4) {

      /* "miololib.pyx":435
 *             out = Graph(ctype=self.ctype)
 *             if out.ctype=="int":
 *                 out.graphInt = mld.sparsifyGraphThreshold(drf(self.mtxInt),Threshold)             # <<<<<<<<<<<<<<
 *             if out.ctype=="float":
 *                 out.graphFloat = mld.sparsifyGraphThreshold(drf(self.mtxFloat),Threshold)
 */
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_Threshold); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 435, __pyx_L1_error)
      __pyx_v_out->graphInt = sparsifyGraphThreshold<int>((*__pyx_v_self->__pyx_base.mtxInt), __pyx_t_5);

      /* "miololib.pyx":434
 *         if output=="Graph":
 *             out = Graph(ctype=self.ctype)
 *             if out.ctype=="int":             # <<<<<<<<<<<<<<
 *                 out.graphInt = mld.sparsifyGraphThreshold(drf(self.mtxInt),Threshold)
 *             if out.ctype=="float":
 */
    }

    /* "miololib.pyx":436
 *             if out.ctype=="int":
 *                 out.graphInt = mld.sparsifyGraphThreshold(drf(self.mtxInt),Threshold)
 *             if out.ctype=="float":             # <<<<<<<<<<<<<<
 *                 out.graphFloat = mld.sparsifyGraphThreshold(drf(self.mtxFloat),Threshold)
 *             if out.ctype=="double":
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 436, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 436, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_4) {

      /* "miololib.pyx":437
 *                 out.graphInt = mld.sparsifyGraphThreshold(drf(self.mtxInt),Threshold)
 *             if out.ctype=="float":
 *                 out.graphFloat = mld.sparsifyGraphThreshold(drf(self.mtxFloat),Threshold)             # <<<<<<<<<<<<<<
 *             if out.ctype=="double":
 *                 out.graphDouble = mld.sparsifyGraphThreshold(drf(self.mtxDouble),Threshold)
 */
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_Threshold); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 437, __pyx_L1_error)
      __pyx_v_out->graphFloat = sparsifyGraphThreshold<float>((*__pyx_v_self->__pyx_base.mtxFloat), __pyx_t_5);

      /* "miololib.pyx":436
 *             if out.ctype=="int":
 *                 out.graphInt = mld.sparsifyGraphThreshold(drf(self.mtxInt),Threshold)
 *             if out.ctype=="float":             # <<<<<<<<<<<<<<
 *                 out.graphFloat = mld.sparsifyGraphThreshold(drf(self.mtxFloat),Threshold)
 *             if out.ctype=="double":
 */
    }

    /* "miololib.pyx":438
 *             if out.ctype=="float":
 *                 out.graphFloat = mld.sparsifyGraphThreshold(drf(self.mtxFloat),Threshold)
 *             if out.ctype=="double":             # <<<<<<<<<<<<<<
 *                 out.graphDouble = mld.sparsifyGraphThreshold(drf(self.mtxDouble),Threshold)
 *             return out
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 438, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 438, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_4) {

      /* "miololib.pyx":439
 *                 out.graphFloat = mld.sparsifyGraphThreshold(drf(self.mtxFloat),Threshold)
 *             if out.ctype=="double":
 *                 out.graphDouble = mld.sparsifyGraphThreshold(drf(self.mtxDouble),Threshold)             # <<<<<<<<<<<<<<
 *             return out
 *         if output=="Digraph":
 */
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_Threshold); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 439, __pyx_L1_error)
      __pyx_v_out->graphDouble = sparsifyGraphThreshold<double>((*__pyx_v_self->__pyx_base.mtxDouble), __pyx_t_5);

      /* "miololib.pyx":438
 *             if out.ctype=="float":
 *                 out.graphFloat = mld.sparsifyGraphThreshold(drf(self.mtxFloat),Threshold)
 *             if out.ctype=="double":             # <<<<<<<<<<<<<<
 *                 out.graphDouble = mld.sparsifyGraphThreshold(drf(self.mtxDouble),Threshold)
 *             return out
 */
    }

    /* "miololib.pyx":440
 *             if out.ctype=="double":
 *                 out.graphDouble = mld.sparsifyGraphThreshold(drf(self.mtxDouble),Threshold)
 *             return out             # <<<<<<<<<<<<<<
 *         if output=="Digraph":
 *             out = Digraph(ctype=self.ctype)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_out);
    __pyx_r = ((PyObject *)__pyx_v_out);
    goto __pyx_L0;

    /* "miololib.pyx":432
 *         if self.rows!=self.cols:
 *             raise Exception("Only square matrices can be sparsified.")
 *         if output=="Graph":             # <<<<<<<<<<<<<<
 *             out = Graph(ctype=self.ctype)
 *             if out.ctype=="int":
 */
  }

  /* "miololib.pyx":441
 *                 out.graphDouble = mld.sparsifyGraphThreshold(drf(self.mtxDouble),Threshold)
 *             return out
 *         if output=="Digraph":             # <<<<<<<<<<<<<<
 *             out = Digraph(ctype=self.ctype)
 *             if out.ctype=="int":
 */
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_output, __pyx_n_s_Digraph, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 441, __pyx_L1_error)
  if (__pyx_t_4) {

    /* "miololib.pyx":442
 *             return out
 *         if output=="Digraph":
 *             out = Digraph(ctype=self.ctype)             # <<<<<<<<<<<<<<
 *             if out.ctype=="int":
 *                 out.digraphInt = mld.sparsifyDigraphThreshold(drf(self.mtxInt),Threshold)
 */
    __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 442, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 442, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_ctype, __pyx_t_3) < 0) __PYX_ERR(1, 442, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Digraph), __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 442, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_out = ((struct __pyx_obj_5miolo_mioloObject *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "miololib.pyx":443
 *         if output=="Digraph":
 *             out = Digraph(ctype=self.ctype)
 *             if out.ctype=="int":             # <<<<<<<<<<<<<<
 *                 out.digraphInt = mld.sparsifyDigraphThreshold(drf(self.mtxInt),Threshold)
 *             if out.ctype=="float":
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 443, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 443, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_4) {

      /* "miololib.pyx":444
 *             out = Digraph(ctype=self.ctype)
 *             if out.ctype=="int":
 *                 out.digraphInt = mld.sparsifyDigraphThreshold(drf(self.mtxInt),Threshold)             # <<<<<<<<<<<<<<
 *             if out.ctype=="float":
 *                 out.digraphFloat = mld.sparsifyDigraphThreshold(drf(self.mtxFloat),Threshold)
 */
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_Threshold); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 444, __pyx_L1_error)
      __pyx_v_out->digraphInt = sparsifyDigraphThreshold<int>((*__pyx_v_self->__pyx_base.mtxInt), __pyx_t_5);

      /* "miololib.pyx":443
 *         if output=="Digraph":
 *             out = Digraph(ctype=self.ctype)
 *             if out.ctype=="int":             # <<<<<<<<<<<<<<
 *                 out.digraphInt = mld.sparsifyDigraphThreshold(drf(self.mtxInt),Threshold)
 *             if out.ctype=="float":
 */
    }

    /* "miololib.pyx":445
 *             if out.ctype=="int":
 *                 out.digraphInt = mld.sparsifyDigraphThreshold(drf(self.mtxInt),Threshold)
 *             if out.ctype=="float":             # <<<<<<<<<<<<<<
 *                 out.digraphFloat = mld.sparsifyDigraphThreshold(drf(self.mtxFloat),Threshold)
 *             if out.ctype=="double":
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 445, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 445, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_4) {

      /* "miololib.pyx":446
 *                 out.digraphInt = mld.sparsifyDigraphThreshold(drf(self.mtxInt),Threshold)
 *             if out.ctype=="float":
 *                 out.digraphFloat = mld.sparsifyDigraphThreshold(drf(self.mtxFloat),Threshold)             # <<<<<<<<<<<<<<
 *             if out.ctype=="double":
 *                 out.digraphDouble = mld.sparsifyDigraphThreshold(drf(self.mtxDouble),Threshold)
 */
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_Threshold); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 446, __pyx_L1_error)
      __pyx_v_out->digraphFloat = sparsifyDigraphThreshold<float>((*__pyx_v_self->__pyx_base.mtxFloat), __pyx_t_5);

      /* "miololib.pyx":445
 *             if out.ctype=="int":
 *                 out.digraphInt = mld.sparsifyDigraphThreshold(drf(self.mtxInt),Threshold)
 *             if out.ctype=="float":             # <<<<<<<<<<<<<<
 *                 out.digraphFloat = mld.sparsifyDigraphThreshold(drf(self.mtxFloat),Threshold)
 *             if out.ctype=="double":
 */
    }

    /* "miololib.pyx":447
 *             if out.ctype=="float":
 *                 out.digraphFloat = mld.sparsifyDigraphThreshold(drf(self.mtxFloat),Threshold)
 *             if out.ctype=="double":             # <<<<<<<<<<<<<<
 *                 out.digraphDouble = mld.sparsifyDigraphThreshold(drf(self.mtxDouble),Threshold)
 *             return out
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 447, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 447, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_4) {

      /* "miololib.pyx":448
 *                 out.digraphFloat = mld.sparsifyDigraphThreshold(drf(self.mtxFloat),Threshold)
 *             if out.ctype=="double":
 *                 out.digraphDouble = mld.sparsifyDigraphThreshold(drf(self.mtxDouble),Threshold)             # <<<<<<<<<<<<<<
 *             return out
 * 
 */
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_Threshold); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 448, __pyx_L1_error)
      __pyx_v_out->digraphDouble = sparsifyDigraphThreshold<double>((*__pyx_v_self->__pyx_base.mtxDouble), __pyx_t_5);

      /* "miololib.pyx":447
 *             if out.ctype=="float":
 *                 out.digraphFloat = mld.sparsifyDigraphThreshold(drf(self.mtxFloat),Threshold)
 *             if out.ctype=="double":             # <<<<<<<<<<<<<<
 *                 out.digraphDouble = mld.sparsifyDigraphThreshold(drf(self.mtxDouble),Threshold)
 *             return out
 */
    }

    /* "miololib.pyx":449
 *             if out.ctype=="double":
 *                 out.digraphDouble = mld.sparsifyDigraphThreshold(drf(self.mtxDouble),Threshold)
 *             return out             # <<<<<<<<<<<<<<
 * 
 *     def sparsifyKNN(self, k, output="Digraph"):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_out);
    __pyx_r = ((PyObject *)__pyx_v_out);
    goto __pyx_L0;

    /* "miololib.pyx":441
 *                 out.graphDouble = mld.sparsifyGraphThreshold(drf(self.mtxDouble),Threshold)
 *             return out
 *         if output=="Digraph":             # <<<<<<<<<<<<<<
 *             out = Digraph(ctype=self.ctype)
 *             if out.ctype=="int":
 */
  }

  /* "miololib.pyx":420
 *             self.mtxDouble.reshape(rows,cols)
 * 
 *     def sparsifyThreshold(self, Threshold, output="Graph"):             # <<<<<<<<<<<<<<
 *         """
 *             If self is a square matrix, returns a Graph with only the entries
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("miolo.Matrix.sparsifyThreshold", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":451
 *             return out
 * 
 *     def sparsifyKNN(self, k, output="Digraph"):             # <<<<<<<<<<<<<<
 *         if self.rows!=self.cols:
 *             raise Exception("Only square matrices can be sparsified.")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_6Matrix_35sparsifyKNN(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_6Matrix_34sparsifyKNN, "Matrix.sparsifyKNN(self, k, output='Digraph')");
static PyMethodDef __pyx_mdef_5miolo_6Matrix_35sparsifyKNN = {"sparsifyKNN", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_6Matrix_35sparsifyKNN, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_6Matrix_34sparsifyKNN};
static PyObject *__pyx_pw_5miolo_6Matrix_35sparsifyKNN(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_k = 0;
  PyObject *__pyx_v_output = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sparsifyKNN (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_k,&__pyx_n_s_output,0};
    values[1] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)__pyx_n_s_Digraph));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_k)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 451, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_output);
          if (value) { values[1] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 451, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "sparsifyKNN") < 0)) __PYX_ERR(1, 451, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_k = values[0];
    __pyx_v_output = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sparsifyKNN", 0, 1, 2, __pyx_nargs); __PYX_ERR(1, 451, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.Matrix.sparsifyKNN", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5miolo_6Matrix_34sparsifyKNN(((struct __pyx_obj_5miolo_Matrix *)__pyx_v_self), __pyx_v_k, __pyx_v_output);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_6Matrix_34sparsifyKNN(struct __pyx_obj_5miolo_Matrix *__pyx_v_self, PyObject *__pyx_v_k, PyObject *__pyx_v_output) {
  struct __pyx_obj_5miolo_Digraph *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  double __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("sparsifyKNN", 1);

  /* "miololib.pyx":452
 * 
 *     def sparsifyKNN(self, k, output="Digraph"):
 *         if self.rows!=self.cols:             # <<<<<<<<<<<<<<
 *             raise Exception("Only square matrices can be sparsified.")
 *         out = Digraph(ctype=self.ctype)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_rows); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 452, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_cols); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 452, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 452, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 452, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(__pyx_t_4)) {

    /* "miololib.pyx":453
 *     def sparsifyKNN(self, k, output="Digraph"):
 *         if self.rows!=self.cols:
 *             raise Exception("Only square matrices can be sparsified.")             # <<<<<<<<<<<<<<
 *         out = Digraph(ctype=self.ctype)
 *         if out.ctype=="int":
 */
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 453, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 453, __pyx_L1_error)

    /* "miololib.pyx":452
 * 
 *     def sparsifyKNN(self, k, output="Digraph"):
 *         if self.rows!=self.cols:             # <<<<<<<<<<<<<<
 *             raise Exception("Only square matrices can be sparsified.")
 *         out = Digraph(ctype=self.ctype)
 */
  }

  /* "miololib.pyx":454
 *         if self.rows!=self.cols:
 *             raise Exception("Only square matrices can be sparsified.")
 *         out = Digraph(ctype=self.ctype)             # <<<<<<<<<<<<<<
 *         if out.ctype=="int":
 *             out.digraphInt = mld.sparsifyDigraphKNN(drf(self.mtxInt),k)
 */
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 454, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 454, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_ctype, __pyx_t_2) < 0) __PYX_ERR(1, 454, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Digraph), __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 454, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_out = ((struct __pyx_obj_5miolo_Digraph *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "miololib.pyx":455
 *             raise Exception("Only square matrices can be sparsified.")
 *         out = Digraph(ctype=self.ctype)
 *         if out.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.digraphInt = mld.sparsifyDigraphKNN(drf(self.mtxInt),k)
 *         if out.ctype=="float":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 455, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 455, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "miololib.pyx":456
 *         out = Digraph(ctype=self.ctype)
 *         if out.ctype=="int":
 *             out.digraphInt = mld.sparsifyDigraphKNN(drf(self.mtxInt),k)             # <<<<<<<<<<<<<<
 *         if out.ctype=="float":
 *             out.digraphFloat = mld.sparsifyDigraphKNN(drf(self.mtxFloat),k)
 */
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_k); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 456, __pyx_L1_error)
    __pyx_v_out->__pyx_base.digraphInt = sparsifyDigraphKNN<int>((*__pyx_v_self->__pyx_base.mtxInt), __pyx_t_5);

    /* "miololib.pyx":455
 *             raise Exception("Only square matrices can be sparsified.")
 *         out = Digraph(ctype=self.ctype)
 *         if out.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.digraphInt = mld.sparsifyDigraphKNN(drf(self.mtxInt),k)
 *         if out.ctype=="float":
 */
  }

  /* "miololib.pyx":457
 *         if out.ctype=="int":
 *             out.digraphInt = mld.sparsifyDigraphKNN(drf(self.mtxInt),k)
 *         if out.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.digraphFloat = mld.sparsifyDigraphKNN(drf(self.mtxFloat),k)
 *         if out.ctype=="double":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 457, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 457, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "miololib.pyx":458
 *             out.digraphInt = mld.sparsifyDigraphKNN(drf(self.mtxInt),k)
 *         if out.ctype=="float":
 *             out.digraphFloat = mld.sparsifyDigraphKNN(drf(self.mtxFloat),k)             # <<<<<<<<<<<<<<
 *         if out.ctype=="double":
 *             out.digraphDouble = mld.sparsifyDigraphKNN(drf(self.mtxDouble),k)
 */
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_k); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 458, __pyx_L1_error)
    __pyx_v_out->__pyx_base.digraphFloat = sparsifyDigraphKNN<float>((*__pyx_v_self->__pyx_base.mtxFloat), __pyx_t_5);

    /* "miololib.pyx":457
 *         if out.ctype=="int":
 *             out.digraphInt = mld.sparsifyDigraphKNN(drf(self.mtxInt),k)
 *         if out.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.digraphFloat = mld.sparsifyDigraphKNN(drf(self.mtxFloat),k)
 *         if out.ctype=="double":
 */
  }

  /* "miololib.pyx":459
 *         if out.ctype=="float":
 *             out.digraphFloat = mld.sparsifyDigraphKNN(drf(self.mtxFloat),k)
 *         if out.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.digraphDouble = mld.sparsifyDigraphKNN(drf(self.mtxDouble),k)
 *         if output=="Digraph":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 459, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 459, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "miololib.pyx":460
 *             out.digraphFloat = mld.sparsifyDigraphKNN(drf(self.mtxFloat),k)
 *         if out.ctype=="double":
 *             out.digraphDouble = mld.sparsifyDigraphKNN(drf(self.mtxDouble),k)             # <<<<<<<<<<<<<<
 *         if output=="Digraph":
 *             return out
 */
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_k); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 460, __pyx_L1_error)
    __pyx_v_out->__pyx_base.digraphDouble = sparsifyDigraphKNN<double>((*__pyx_v_self->__pyx_base.mtxDouble), __pyx_t_5);

    /* "miololib.pyx":459
 *         if out.ctype=="float":
 *             out.digraphFloat = mld.sparsifyDigraphKNN(drf(self.mtxFloat),k)
 *         if out.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.digraphDouble = mld.sparsifyDigraphKNN(drf(self.mtxDouble),k)
 *         if output=="Digraph":
 */
  }

  /* "miololib.pyx":461
 *         if out.ctype=="double":
 *             out.digraphDouble = mld.sparsifyDigraphKNN(drf(self.mtxDouble),k)
 *         if output=="Digraph":             # <<<<<<<<<<<<<<
 *             return out
 *         else:
 */
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_output, __pyx_n_s_Digraph, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 461, __pyx_L1_error)
  if (__pyx_t_4) {

    /* "miololib.pyx":462
 *             out.digraphDouble = mld.sparsifyDigraphKNN(drf(self.mtxDouble),k)
 *         if output=="Digraph":
 *             return out             # <<<<<<<<<<<<<<
 *         else:
 *             return out.toGraph()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_out);
    __pyx_r = ((PyObject *)__pyx_v_out);
    goto __pyx_L0;

    /* "miololib.pyx":461
 *         if out.ctype=="double":
 *             out.digraphDouble = mld.sparsifyDigraphKNN(drf(self.mtxDouble),k)
 *         if output=="Digraph":             # <<<<<<<<<<<<<<
 *             return out
 *         else:
 */
  }

  /* "miololib.pyx":464
 *             return out
 *         else:
 *             return out.toGraph()             # <<<<<<<<<<<<<<
 * 
 *     #---------------------------------------------------------------------------
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_toGraph); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 464, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = NULL;
    __pyx_t_6 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_6 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_1, NULL};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 464, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "miololib.pyx":451
 *             return out
 * 
 *     def sparsifyKNN(self, k, output="Digraph"):             # <<<<<<<<<<<<<<
 *         if self.rows!=self.cols:
 *             raise Exception("Only square matrices can be sparsified.")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("miolo.Matrix.sparsifyKNN", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":470
 *     #---------------------------------------------------------------------------
 * 
 *     def __add__(self, Matrix A):             # <<<<<<<<<<<<<<
 *         if self.ctype!=A.ctype:
 *             raise Exception("Matrix operations require same ctype.")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_6Matrix_37__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_A); /*proto*/
static PyObject *__pyx_pw_5miolo_6Matrix_37__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_A) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__add__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_A), __pyx_ptype_5miolo_Matrix, 1, "A", 0))) __PYX_ERR(1, 470, __pyx_L1_error)
  __pyx_r = __pyx_pf_5miolo_6Matrix_36__add__(((struct __pyx_obj_5miolo_Matrix *)__pyx_v_self), ((struct __pyx_obj_5miolo_Matrix *)__pyx_v_A));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_6Matrix_36__add__(struct __pyx_obj_5miolo_Matrix *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_A) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__add__", 1);

  /* "miololib.pyx":471
 * 
 *     def __add__(self, Matrix A):
 *         if self.ctype!=A.ctype:             # <<<<<<<<<<<<<<
 *             raise Exception("Matrix operations require same ctype.")
 *         if self.rows!=A.rows or self.cols!=A.cols:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 471, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_A), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 471, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 471, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 471, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(__pyx_t_4)) {

    /* "miololib.pyx":472
 *     def __add__(self, Matrix A):
 *         if self.ctype!=A.ctype:
 *             raise Exception("Matrix operations require same ctype.")             # <<<<<<<<<<<<<<
 *         if self.rows!=A.rows or self.cols!=A.cols:
 *             raise Exception("Incompatible shape for Matrix addition.")
 */
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__23, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 472, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 472, __pyx_L1_error)

    /* "miololib.pyx":471
 * 
 *     def __add__(self, Matrix A):
 *         if self.ctype!=A.ctype:             # <<<<<<<<<<<<<<
 *             raise Exception("Matrix operations require same ctype.")
 *         if self.rows!=A.rows or self.cols!=A.cols:
 */
  }

  /* "miololib.pyx":473
 *         if self.ctype!=A.ctype:
 *             raise Exception("Matrix operations require same ctype.")
 *         if self.rows!=A.rows or self.cols!=A.cols:             # <<<<<<<<<<<<<<
 *             raise Exception("Incompatible shape for Matrix addition.")
 *         if self.ctype=="int":
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_rows); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 473, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_A), __pyx_n_s_rows); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 473, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_3, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 473, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(1, 473, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!__pyx_t_5) {
  } else {
    __pyx_t_4 = __pyx_t_5;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_cols); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 473, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_A), __pyx_n_s_cols); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 473, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 473, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(1, 473, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __pyx_t_5;
  __pyx_L5_bool_binop_done:;
  if (unlikely(__pyx_t_4)) {

    /* "miololib.pyx":474
 *             raise Exception("Matrix operations require same ctype.")
 *         if self.rows!=A.rows or self.cols!=A.cols:
 *             raise Exception("Incompatible shape for Matrix addition.")             # <<<<<<<<<<<<<<
 *         if self.ctype=="int":
 *             out = Matrix(ctype="int")
 */
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__24, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 474, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 474, __pyx_L1_error)

    /* "miololib.pyx":473
 *         if self.ctype!=A.ctype:
 *             raise Exception("Matrix operations require same ctype.")
 *         if self.rows!=A.rows or self.cols!=A.cols:             # <<<<<<<<<<<<<<
 *             raise Exception("Incompatible shape for Matrix addition.")
 *         if self.ctype=="int":
 */
  }

  /* "miololib.pyx":475
 *         if self.rows!=A.rows or self.cols!=A.cols:
 *             raise Exception("Incompatible shape for Matrix addition.")
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             out = Matrix(ctype="int")
 *             out.mtxInt = self.mtxInt.add(A.mtxInt)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 475, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 475, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_4) {

    /* "miololib.pyx":476
 *             raise Exception("Incompatible shape for Matrix addition.")
 *         if self.ctype=="int":
 *             out = Matrix(ctype="int")             # <<<<<<<<<<<<<<
 *             out.mtxInt = self.mtxInt.add(A.mtxInt)
 *             return out
 */
    __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 476, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_ctype, __pyx_n_s_int) < 0) __PYX_ERR(1, 476, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Matrix), __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 476, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_out = ((struct __pyx_obj_5miolo_Matrix *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "miololib.pyx":477
 *         if self.ctype=="int":
 *             out = Matrix(ctype="int")
 *             out.mtxInt = self.mtxInt.add(A.mtxInt)             # <<<<<<<<<<<<<<
 *             return out
 *         if self.ctype=="float":
 */
    __pyx_v_out->__pyx_base.mtxInt = __pyx_v_self->__pyx_base.mtxInt->add(__pyx_v_A->__pyx_base.mtxInt);

    /* "miololib.pyx":478
 *             out = Matrix(ctype="int")
 *             out.mtxInt = self.mtxInt.add(A.mtxInt)
 *             return out             # <<<<<<<<<<<<<<
 *         if self.ctype=="float":
 *             out = Matrix(ctype="float")
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_out);
    __pyx_r = ((PyObject *)__pyx_v_out);
    goto __pyx_L0;

    /* "miololib.pyx":475
 *         if self.rows!=A.rows or self.cols!=A.cols:
 *             raise Exception("Incompatible shape for Matrix addition.")
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             out = Matrix(ctype="int")
 *             out.mtxInt = self.mtxInt.add(A.mtxInt)
 */
  }

  /* "miololib.pyx":479
 *             out.mtxInt = self.mtxInt.add(A.mtxInt)
 *             return out
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             out = Matrix(ctype="float")
 *             out.mtxFloat = self.mtxFloat.add(A.mtxFloat)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 479, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 479, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "miololib.pyx":480
 *             return out
 *         if self.ctype=="float":
 *             out = Matrix(ctype="float")             # <<<<<<<<<<<<<<
 *             out.mtxFloat = self.mtxFloat.add(A.mtxFloat)
 *             return out
 */
    __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 480, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_ctype, __pyx_n_s_float) < 0) __PYX_ERR(1, 480, __pyx_L1_error)
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Matrix), __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 480, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_out = ((struct __pyx_obj_5miolo_Matrix *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "miololib.pyx":481
 *         if self.ctype=="float":
 *             out = Matrix(ctype="float")
 *             out.mtxFloat = self.mtxFloat.add(A.mtxFloat)             # <<<<<<<<<<<<<<
 *             return out
 *         if self.ctype=="double":
 */
    __pyx_v_out->__pyx_base.mtxFloat = __pyx_v_self->__pyx_base.mtxFloat->add(__pyx_v_A->__pyx_base.mtxFloat);

    /* "miololib.pyx":482
 *             out = Matrix(ctype="float")
 *             out.mtxFloat = self.mtxFloat.add(A.mtxFloat)
 *             return out             # <<<<<<<<<<<<<<
 *         if self.ctype=="double":
 *             out = Matrix(ctype="double")
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_out);
    __pyx_r = ((PyObject *)__pyx_v_out);
    goto __pyx_L0;

    /* "miololib.pyx":479
 *             out.mtxInt = self.mtxInt.add(A.mtxInt)
 *             return out
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             out = Matrix(ctype="float")
 *             out.mtxFloat = self.mtxFloat.add(A.mtxFloat)
 */
  }

  /* "miololib.pyx":483
 *             out.mtxFloat = self.mtxFloat.add(A.mtxFloat)
 *             return out
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             out = Matrix(ctype="double")
 *             out.mtxDouble = self.mtxDouble.add(A.mtxDouble)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 483, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 483, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_4) {

    /* "miololib.pyx":484
 *             return out
 *         if self.ctype=="double":
 *             out = Matrix(ctype="double")             # <<<<<<<<<<<<<<
 *             out.mtxDouble = self.mtxDouble.add(A.mtxDouble)
 *             return out
 */
    __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 484, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_ctype, __pyx_n_s_double) < 0) __PYX_ERR(1, 484, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Matrix), __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 484, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_out = ((struct __pyx_obj_5miolo_Matrix *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "miololib.pyx":485
 *         if self.ctype=="double":
 *             out = Matrix(ctype="double")
 *             out.mtxDouble = self.mtxDouble.add(A.mtxDouble)             # <<<<<<<<<<<<<<
 *             return out
 * 
 */
    __pyx_v_out->__pyx_base.mtxDouble = __pyx_v_self->__pyx_base.mtxDouble->add(__pyx_v_A->__pyx_base.mtxDouble);

    /* "miololib.pyx":486
 *             out = Matrix(ctype="double")
 *             out.mtxDouble = self.mtxDouble.add(A.mtxDouble)
 *             return out             # <<<<<<<<<<<<<<
 * 
 *     def __sub__(self, Matrix A):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_out);
    __pyx_r = ((PyObject *)__pyx_v_out);
    goto __pyx_L0;

    /* "miololib.pyx":483
 *             out.mtxFloat = self.mtxFloat.add(A.mtxFloat)
 *             return out
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             out = Matrix(ctype="double")
 *             out.mtxDouble = self.mtxDouble.add(A.mtxDouble)
 */
  }

  /* "miololib.pyx":470
 *     #---------------------------------------------------------------------------
 * 
 *     def __add__(self, Matrix A):             # <<<<<<<<<<<<<<
 *         if self.ctype!=A.ctype:
 *             raise Exception("Matrix operations require same ctype.")
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("miolo.Matrix.__add__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":488
 *             return out
 * 
 *     def __sub__(self, Matrix A):             # <<<<<<<<<<<<<<
 *         if self.ctype!=A.ctype:
 *             raise Exception("Matrix operations require same ctype.")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_6Matrix_39__sub__(PyObject *__pyx_v_self, PyObject *__pyx_v_A); /*proto*/
static PyObject *__pyx_pw_5miolo_6Matrix_39__sub__(PyObject *__pyx_v_self, PyObject *__pyx_v_A) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__sub__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_A), __pyx_ptype_5miolo_Matrix, 1, "A", 0))) __PYX_ERR(1, 488, __pyx_L1_error)
  __pyx_r = __pyx_pf_5miolo_6Matrix_38__sub__(((struct __pyx_obj_5miolo_Matrix *)__pyx_v_self), ((struct __pyx_obj_5miolo_Matrix *)__pyx_v_A));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_6Matrix_38__sub__(struct __pyx_obj_5miolo_Matrix *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_A) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__sub__", 1);

  /* "miololib.pyx":489
 * 
 *     def __sub__(self, Matrix A):
 *         if self.ctype!=A.ctype:             # <<<<<<<<<<<<<<
 *             raise Exception("Matrix operations require same ctype.")
 *         if self.rows!=A.rows or self.cols!=A.cols:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 489, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_A), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 489, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 489, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 489, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(__pyx_t_4)) {

    /* "miololib.pyx":490
 *     def __sub__(self, Matrix A):
 *         if self.ctype!=A.ctype:
 *             raise Exception("Matrix operations require same ctype.")             # <<<<<<<<<<<<<<
 *         if self.rows!=A.rows or self.cols!=A.cols:
 *             raise Exception("Incompatible shape for Matrix subtraction.")
 */
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__23, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 490, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 490, __pyx_L1_error)

    /* "miololib.pyx":489
 * 
 *     def __sub__(self, Matrix A):
 *         if self.ctype!=A.ctype:             # <<<<<<<<<<<<<<
 *             raise Exception("Matrix operations require same ctype.")
 *         if self.rows!=A.rows or self.cols!=A.cols:
 */
  }

  /* "miololib.pyx":491
 *         if self.ctype!=A.ctype:
 *             raise Exception("Matrix operations require same ctype.")
 *         if self.rows!=A.rows or self.cols!=A.cols:             # <<<<<<<<<<<<<<
 *             raise Exception("Incompatible shape for Matrix subtraction.")
 *         if self.ctype=="int":
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_rows); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 491, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_A), __pyx_n_s_rows); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 491, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_3, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 491, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(1, 491, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!__pyx_t_5) {
  } else {
    __pyx_t_4 = __pyx_t_5;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_cols); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 491, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_A), __pyx_n_s_cols); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 491, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 491, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(1, 491, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __pyx_t_5;
  __pyx_L5_bool_binop_done:;
  if (unlikely(__pyx_t_4)) {

    /* "miololib.pyx":492
 *             raise Exception("Matrix operations require same ctype.")
 *         if self.rows!=A.rows or self.cols!=A.cols:
 *             raise Exception("Incompatible shape for Matrix subtraction.")             # <<<<<<<<<<<<<<
 *         if self.ctype=="int":
 *             out = Matrix(ctype="int")
 */
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__25, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 492, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 492, __pyx_L1_error)

    /* "miololib.pyx":491
 *         if self.ctype!=A.ctype:
 *             raise Exception("Matrix operations require same ctype.")
 *         if self.rows!=A.rows or self.cols!=A.cols:             # <<<<<<<<<<<<<<
 *             raise Exception("Incompatible shape for Matrix subtraction.")
 *         if self.ctype=="int":
 */
  }

  /* "miololib.pyx":493
 *         if self.rows!=A.rows or self.cols!=A.cols:
 *             raise Exception("Incompatible shape for Matrix subtraction.")
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             out = Matrix(ctype="int")
 *             out.mtxInt = self.mtxInt.sub(A.mtxInt)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 493, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 493, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_4) {

    /* "miololib.pyx":494
 *             raise Exception("Incompatible shape for Matrix subtraction.")
 *         if self.ctype=="int":
 *             out = Matrix(ctype="int")             # <<<<<<<<<<<<<<
 *             out.mtxInt = self.mtxInt.sub(A.mtxInt)
 *             return out
 */
    __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 494, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_ctype, __pyx_n_s_int) < 0) __PYX_ERR(1, 494, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Matrix), __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 494, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_out = ((struct __pyx_obj_5miolo_Matrix *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "miololib.pyx":495
 *         if self.ctype=="int":
 *             out = Matrix(ctype="int")
 *             out.mtxInt = self.mtxInt.sub(A.mtxInt)             # <<<<<<<<<<<<<<
 *             return out
 *         if self.ctype=="float":
 */
    __pyx_v_out->__pyx_base.mtxInt = __pyx_v_self->__pyx_base.mtxInt->sub(__pyx_v_A->__pyx_base.mtxInt);

    /* "miololib.pyx":496
 *             out = Matrix(ctype="int")
 *             out.mtxInt = self.mtxInt.sub(A.mtxInt)
 *             return out             # <<<<<<<<<<<<<<
 *         if self.ctype=="float":
 *             out = Matrix(ctype="float")
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_out);
    __pyx_r = ((PyObject *)__pyx_v_out);
    goto __pyx_L0;

    /* "miololib.pyx":493
 *         if self.rows!=A.rows or self.cols!=A.cols:
 *             raise Exception("Incompatible shape for Matrix subtraction.")
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             out = Matrix(ctype="int")
 *             out.mtxInt = self.mtxInt.sub(A.mtxInt)
 */
  }

  /* "miololib.pyx":497
 *             out.mtxInt = self.mtxInt.sub(A.mtxInt)
 *             return out
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             out = Matrix(ctype="float")
 *             out.mtxFloat = self.mtxFloat.sub(A.mtxFloat)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 497, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 497, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "miololib.pyx":498
 *             return out
 *         if self.ctype=="float":
 *             out = Matrix(ctype="float")             # <<<<<<<<<<<<<<
 *             out.mtxFloat = self.mtxFloat.sub(A.mtxFloat)
 *             return out
 */
    __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 498, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_ctype, __pyx_n_s_float) < 0) __PYX_ERR(1, 498, __pyx_L1_error)
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Matrix), __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 498, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_out = ((struct __pyx_obj_5miolo_Matrix *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "miololib.pyx":499
 *         if self.ctype=="float":
 *             out = Matrix(ctype="float")
 *             out.mtxFloat = self.mtxFloat.sub(A.mtxFloat)             # <<<<<<<<<<<<<<
 *             return out
 *         if self.ctype=="double":
 */
    __pyx_v_out->__pyx_base.mtxFloat = __pyx_v_self->__pyx_base.mtxFloat->sub(__pyx_v_A->__pyx_base.mtxFloat);

    /* "miololib.pyx":500
 *             out = Matrix(ctype="float")
 *             out.mtxFloat = self.mtxFloat.sub(A.mtxFloat)
 *             return out             # <<<<<<<<<<<<<<
 *         if self.ctype=="double":
 *             out = Matrix(ctype="double")
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_out);
    __pyx_r = ((PyObject *)__pyx_v_out);
    goto __pyx_L0;

    /* "miololib.pyx":497
 *             out.mtxInt = self.mtxInt.sub(A.mtxInt)
 *             return out
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             out = Matrix(ctype="float")
 *             out.mtxFloat = self.mtxFloat.sub(A.mtxFloat)
 */
  }

  /* "miololib.pyx":501
 *             out.mtxFloat = self.mtxFloat.sub(A.mtxFloat)
 *             return out
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             out = Matrix(ctype="double")
 *             out.mtxDouble = self.mtxDouble.sub(A.mtxDouble)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 501, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_4) {

    /* "miololib.pyx":502
 *             return out
 *         if self.ctype=="double":
 *             out = Matrix(ctype="double")             # <<<<<<<<<<<<<<
 *             out.mtxDouble = self.mtxDouble.sub(A.mtxDouble)
 *             return out
 */
    __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 502, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_ctype, __pyx_n_s_double) < 0) __PYX_ERR(1, 502, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Matrix), __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 502, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_out = ((struct __pyx_obj_5miolo_Matrix *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "miololib.pyx":503
 *         if self.ctype=="double":
 *             out = Matrix(ctype="double")
 *             out.mtxDouble = self.mtxDouble.sub(A.mtxDouble)             # <<<<<<<<<<<<<<
 *             return out
 * 
 */
    __pyx_v_out->__pyx_base.mtxDouble = __pyx_v_self->__pyx_base.mtxDouble->sub(__pyx_v_A->__pyx_base.mtxDouble);

    /* "miololib.pyx":504
 *             out = Matrix(ctype="double")
 *             out.mtxDouble = self.mtxDouble.sub(A.mtxDouble)
 *             return out             # <<<<<<<<<<<<<<
 * 
 *     def __mul__(self, value):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_out);
    __pyx_r = ((PyObject *)__pyx_v_out);
    goto __pyx_L0;

    /* "miololib.pyx":501
 *             out.mtxFloat = self.mtxFloat.sub(A.mtxFloat)
 *             return out
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             out = Matrix(ctype="double")
 *             out.mtxDouble = self.mtxDouble.sub(A.mtxDouble)
 */
  }

  /* "miololib.pyx":488
 *             return out
 * 
 *     def __sub__(self, Matrix A):             # <<<<<<<<<<<<<<
 *         if self.ctype!=A.ctype:
 *             raise Exception("Matrix operations require same ctype.")
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("miolo.Matrix.__sub__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":506
 *             return out
 * 
 *     def __mul__(self, value):             # <<<<<<<<<<<<<<
 *         if self.ctype=="int":
 *             out = Matrix(ctype="int")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_6Matrix_41__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static PyObject *__pyx_pw_5miolo_6Matrix_41__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__mul__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5miolo_6Matrix_40__mul__(((struct __pyx_obj_5miolo_Matrix *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_6Matrix_40__mul__(struct __pyx_obj_5miolo_Matrix *__pyx_v_self, PyObject *__pyx_v_value) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  float __pyx_t_5;
  double __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__mul__", 1);

  /* "miololib.pyx":507
 * 
 *     def __mul__(self, value):
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             out = Matrix(ctype="int")
 *             out.mtxInt = self.mtxInt.smul(value)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 507, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 507, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":508
 *     def __mul__(self, value):
 *         if self.ctype=="int":
 *             out = Matrix(ctype="int")             # <<<<<<<<<<<<<<
 *             out.mtxInt = self.mtxInt.smul(value)
 *             return out
 */
    __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 508, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ctype, __pyx_n_s_int) < 0) __PYX_ERR(1, 508, __pyx_L1_error)
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Matrix), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 508, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_out = ((struct __pyx_obj_5miolo_Matrix *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "miololib.pyx":509
 *         if self.ctype=="int":
 *             out = Matrix(ctype="int")
 *             out.mtxInt = self.mtxInt.smul(value)             # <<<<<<<<<<<<<<
 *             return out
 *         if self.ctype=="float":
 */
    __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 509, __pyx_L1_error)
    __pyx_v_out->__pyx_base.mtxInt = __pyx_v_self->__pyx_base.mtxInt->smul(__pyx_t_4);

    /* "miololib.pyx":510
 *             out = Matrix(ctype="int")
 *             out.mtxInt = self.mtxInt.smul(value)
 *             return out             # <<<<<<<<<<<<<<
 *         if self.ctype=="float":
 *             out = Matrix(ctype="float")
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_out);
    __pyx_r = ((PyObject *)__pyx_v_out);
    goto __pyx_L0;

    /* "miololib.pyx":507
 * 
 *     def __mul__(self, value):
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             out = Matrix(ctype="int")
 *             out.mtxInt = self.mtxInt.smul(value)
 */
  }

  /* "miololib.pyx":511
 *             out.mtxInt = self.mtxInt.smul(value)
 *             return out
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             out = Matrix(ctype="float")
 *             out.mtxFloat = self.mtxFloat.smul(value)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 511, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 511, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":512
 *             return out
 *         if self.ctype=="float":
 *             out = Matrix(ctype="float")             # <<<<<<<<<<<<<<
 *             out.mtxFloat = self.mtxFloat.smul(value)
 *             return out
 */
    __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 512, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_ctype, __pyx_n_s_float) < 0) __PYX_ERR(1, 512, __pyx_L1_error)
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Matrix), __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 512, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_out = ((struct __pyx_obj_5miolo_Matrix *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "miololib.pyx":513
 *         if self.ctype=="float":
 *             out = Matrix(ctype="float")
 *             out.mtxFloat = self.mtxFloat.smul(value)             # <<<<<<<<<<<<<<
 *             return out
 *         if self.ctype=="double":
 */
    __pyx_t_5 = __pyx_PyFloat_AsFloat(__pyx_v_value); if (unlikely((__pyx_t_5 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 513, __pyx_L1_error)
    __pyx_v_out->__pyx_base.mtxFloat = __pyx_v_self->__pyx_base.mtxFloat->smul(__pyx_t_5);

    /* "miololib.pyx":514
 *             out = Matrix(ctype="float")
 *             out.mtxFloat = self.mtxFloat.smul(value)
 *             return out             # <<<<<<<<<<<<<<
 *         if self.ctype=="double":
 *             out = Matrix(ctype="double")
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_out);
    __pyx_r = ((PyObject *)__pyx_v_out);
    goto __pyx_L0;

    /* "miololib.pyx":511
 *             out.mtxInt = self.mtxInt.smul(value)
 *             return out
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             out = Matrix(ctype="float")
 *             out.mtxFloat = self.mtxFloat.smul(value)
 */
  }

  /* "miololib.pyx":515
 *             out.mtxFloat = self.mtxFloat.smul(value)
 *             return out
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             out = Matrix(ctype="double")
 *             out.mtxDouble = self.mtxDouble.smul(value)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 515, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 515, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":516
 *             return out
 *         if self.ctype=="double":
 *             out = Matrix(ctype="double")             # <<<<<<<<<<<<<<
 *             out.mtxDouble = self.mtxDouble.smul(value)
 *             return out
 */
    __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 516, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ctype, __pyx_n_s_double) < 0) __PYX_ERR(1, 516, __pyx_L1_error)
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Matrix), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 516, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_out = ((struct __pyx_obj_5miolo_Matrix *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "miololib.pyx":517
 *         if self.ctype=="double":
 *             out = Matrix(ctype="double")
 *             out.mtxDouble = self.mtxDouble.smul(value)             # <<<<<<<<<<<<<<
 *             return out
 * 
 */
    __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 517, __pyx_L1_error)
    __pyx_v_out->__pyx_base.mtxDouble = __pyx_v_self->__pyx_base.mtxDouble->smul(__pyx_t_6);

    /* "miololib.pyx":518
 *             out = Matrix(ctype="double")
 *             out.mtxDouble = self.mtxDouble.smul(value)
 *             return out             # <<<<<<<<<<<<<<
 * 
 *     def __rmul__(self, value):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_out);
    __pyx_r = ((PyObject *)__pyx_v_out);
    goto __pyx_L0;

    /* "miololib.pyx":515
 *             out.mtxFloat = self.mtxFloat.smul(value)
 *             return out
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             out = Matrix(ctype="double")
 *             out.mtxDouble = self.mtxDouble.smul(value)
 */
  }

  /* "miololib.pyx":506
 *             return out
 * 
 *     def __mul__(self, value):             # <<<<<<<<<<<<<<
 *         if self.ctype=="int":
 *             out = Matrix(ctype="int")
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("miolo.Matrix.__mul__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":520
 *             return out
 * 
 *     def __rmul__(self, value):             # <<<<<<<<<<<<<<
 *         return self*value
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_6Matrix_43__rmul__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static PyObject *__pyx_pw_5miolo_6Matrix_43__rmul__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__rmul__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5miolo_6Matrix_42__rmul__(((struct __pyx_obj_5miolo_Matrix *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_6Matrix_42__rmul__(struct __pyx_obj_5miolo_Matrix *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__rmul__", 1);

  /* "miololib.pyx":521
 * 
 *     def __rmul__(self, value):
 *         return self*value             # <<<<<<<<<<<<<<
 * 
 *     def __truediv__(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyNumber_Multiply(((PyObject *)__pyx_v_self), __pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 521, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "miololib.pyx":520
 *             return out
 * 
 *     def __rmul__(self, value):             # <<<<<<<<<<<<<<
 *         return self*value
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("miolo.Matrix.__rmul__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":523
 *         return self*value
 * 
 *     def __truediv__(self, value):             # <<<<<<<<<<<<<<
 *         if value==0:
 *             raise ValueError("Attempting division by zero.")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_6Matrix_45__truediv__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static PyObject *__pyx_pw_5miolo_6Matrix_45__truediv__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__truediv__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5miolo_6Matrix_44__truediv__(((struct __pyx_obj_5miolo_Matrix *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_6Matrix_44__truediv__(struct __pyx_obj_5miolo_Matrix *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__truediv__", 1);

  /* "miololib.pyx":524
 * 
 *     def __truediv__(self, value):
 *         if value==0:             # <<<<<<<<<<<<<<
 *             raise ValueError("Attempting division by zero.")
 *         return self*(1./value)
 */
  __pyx_t_1 = (__Pyx_PyInt_BoolEqObjC(__pyx_v_value, __pyx_int_0, 0, 0)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 524, __pyx_L1_error)
  if (unlikely(__pyx_t_1)) {

    /* "miololib.pyx":525
 *     def __truediv__(self, value):
 *         if value==0:
 *             raise ValueError("Attempting division by zero.")             # <<<<<<<<<<<<<<
 *         return self*(1./value)
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__26, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 525, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 525, __pyx_L1_error)

    /* "miololib.pyx":524
 * 
 *     def __truediv__(self, value):
 *         if value==0:             # <<<<<<<<<<<<<<
 *             raise ValueError("Attempting division by zero.")
 *         return self*(1./value)
 */
  }

  /* "miololib.pyx":526
 *         if value==0:
 *             raise ValueError("Attempting division by zero.")
 *         return self*(1./value)             # <<<<<<<<<<<<<<
 * 
 *     def __and__(self, Matrix A):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyFloat_TrueDivideCObj(__pyx_float_1_, __pyx_v_value, 1., 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 526, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Multiply(((PyObject *)__pyx_v_self), __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 526, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "miololib.pyx":523
 *         return self*value
 * 
 *     def __truediv__(self, value):             # <<<<<<<<<<<<<<
 *         if value==0:
 *             raise ValueError("Attempting division by zero.")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("miolo.Matrix.__truediv__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":528
 *         return self*(1./value)
 * 
 *     def __and__(self, Matrix A):             # <<<<<<<<<<<<<<
 *         if self.ctype!=A.ctype:
 *             raise Exception("Matrix operations require same ctype.")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_6Matrix_47__and__(PyObject *__pyx_v_self, PyObject *__pyx_v_A); /*proto*/
static PyObject *__pyx_pw_5miolo_6Matrix_47__and__(PyObject *__pyx_v_self, PyObject *__pyx_v_A) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__and__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_A), __pyx_ptype_5miolo_Matrix, 1, "A", 0))) __PYX_ERR(1, 528, __pyx_L1_error)
  __pyx_r = __pyx_pf_5miolo_6Matrix_46__and__(((struct __pyx_obj_5miolo_Matrix *)__pyx_v_self), ((struct __pyx_obj_5miolo_Matrix *)__pyx_v_A));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_6Matrix_46__and__(struct __pyx_obj_5miolo_Matrix *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_A) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__and__", 1);

  /* "miololib.pyx":529
 * 
 *     def __and__(self, Matrix A):
 *         if self.ctype!=A.ctype:             # <<<<<<<<<<<<<<
 *             raise Exception("Matrix operations require same ctype.")
 *         if self.cols!=A.rows:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 529, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_A), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 529, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 529, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 529, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(__pyx_t_4)) {

    /* "miololib.pyx":530
 *     def __and__(self, Matrix A):
 *         if self.ctype!=A.ctype:
 *             raise Exception("Matrix operations require same ctype.")             # <<<<<<<<<<<<<<
 *         if self.cols!=A.rows:
 *             raise Exception("Incompatible shape for Matrix product.")
 */
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__23, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 530, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 530, __pyx_L1_error)

    /* "miololib.pyx":529
 * 
 *     def __and__(self, Matrix A):
 *         if self.ctype!=A.ctype:             # <<<<<<<<<<<<<<
 *             raise Exception("Matrix operations require same ctype.")
 *         if self.cols!=A.rows:
 */
  }

  /* "miololib.pyx":531
 *         if self.ctype!=A.ctype:
 *             raise Exception("Matrix operations require same ctype.")
 *         if self.cols!=A.rows:             # <<<<<<<<<<<<<<
 *             raise Exception("Incompatible shape for Matrix product.")
 *         if self.ctype=="int":
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_cols); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 531, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_A), __pyx_n_s_rows); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 531, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_3, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 531, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 531, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(__pyx_t_4)) {

    /* "miololib.pyx":532
 *             raise Exception("Matrix operations require same ctype.")
 *         if self.cols!=A.rows:
 *             raise Exception("Incompatible shape for Matrix product.")             # <<<<<<<<<<<<<<
 *         if self.ctype=="int":
 *             out = Matrix(ctype="int")
 */
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__27, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 532, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 532, __pyx_L1_error)

    /* "miololib.pyx":531
 *         if self.ctype!=A.ctype:
 *             raise Exception("Matrix operations require same ctype.")
 *         if self.cols!=A.rows:             # <<<<<<<<<<<<<<
 *             raise Exception("Incompatible shape for Matrix product.")
 *         if self.ctype=="int":
 */
  }

  /* "miololib.pyx":533
 *         if self.cols!=A.rows:
 *             raise Exception("Incompatible shape for Matrix product.")
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             out = Matrix(ctype="int")
 *             out.mtxInt = self.mtxInt.mmul(A.mtxInt)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 533, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 533, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "miololib.pyx":534
 *             raise Exception("Incompatible shape for Matrix product.")
 *         if self.ctype=="int":
 *             out = Matrix(ctype="int")             # <<<<<<<<<<<<<<
 *             out.mtxInt = self.mtxInt.mmul(A.mtxInt)
 *             return out
 */
    __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 534, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ctype, __pyx_n_s_int) < 0) __PYX_ERR(1, 534, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Matrix), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 534, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_out = ((struct __pyx_obj_5miolo_Matrix *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "miololib.pyx":535
 *         if self.ctype=="int":
 *             out = Matrix(ctype="int")
 *             out.mtxInt = self.mtxInt.mmul(A.mtxInt)             # <<<<<<<<<<<<<<
 *             return out
 *         if self.ctype=="float":
 */
    __pyx_v_out->__pyx_base.mtxInt = __pyx_v_self->__pyx_base.mtxInt->mmul(__pyx_v_A->__pyx_base.mtxInt);

    /* "miololib.pyx":536
 *             out = Matrix(ctype="int")
 *             out.mtxInt = self.mtxInt.mmul(A.mtxInt)
 *             return out             # <<<<<<<<<<<<<<
 *         if self.ctype=="float":
 *             out = Matrix(ctype="float")
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_out);
    __pyx_r = ((PyObject *)__pyx_v_out);
    goto __pyx_L0;

    /* "miololib.pyx":533
 *         if self.cols!=A.rows:
 *             raise Exception("Incompatible shape for Matrix product.")
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             out = Matrix(ctype="int")
 *             out.mtxInt = self.mtxInt.mmul(A.mtxInt)
 */
  }

  /* "miololib.pyx":537
 *             out.mtxInt = self.mtxInt.mmul(A.mtxInt)
 *             return out
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             out = Matrix(ctype="float")
 *             out.mtxFloat = self.mtxFloat.mmul(A.mtxFloat)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 537, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 537, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "miololib.pyx":538
 *             return out
 *         if self.ctype=="float":
 *             out = Matrix(ctype="float")             # <<<<<<<<<<<<<<
 *             out.mtxFloat = self.mtxFloat.mmul(A.mtxFloat)
 *             return out
 */
    __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 538, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_ctype, __pyx_n_s_float) < 0) __PYX_ERR(1, 538, __pyx_L1_error)
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Matrix), __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 538, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_out = ((struct __pyx_obj_5miolo_Matrix *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "miololib.pyx":539
 *         if self.ctype=="float":
 *             out = Matrix(ctype="float")
 *             out.mtxFloat = self.mtxFloat.mmul(A.mtxFloat)             # <<<<<<<<<<<<<<
 *             return out
 *         if self.ctype=="double":
 */
    __pyx_v_out->__pyx_base.mtxFloat = __pyx_v_self->__pyx_base.mtxFloat->mmul(__pyx_v_A->__pyx_base.mtxFloat);

    /* "miololib.pyx":540
 *             out = Matrix(ctype="float")
 *             out.mtxFloat = self.mtxFloat.mmul(A.mtxFloat)
 *             return out             # <<<<<<<<<<<<<<
 *         if self.ctype=="double":
 *             out = Matrix(ctype="double")
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_out);
    __pyx_r = ((PyObject *)__pyx_v_out);
    goto __pyx_L0;

    /* "miololib.pyx":537
 *             out.mtxInt = self.mtxInt.mmul(A.mtxInt)
 *             return out
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             out = Matrix(ctype="float")
 *             out.mtxFloat = self.mtxFloat.mmul(A.mtxFloat)
 */
  }

  /* "miololib.pyx":541
 *             out.mtxFloat = self.mtxFloat.mmul(A.mtxFloat)
 *             return out
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             out = Matrix(ctype="double")
 *             out.mtxDouble = self.mtxDouble.mmul(A.mtxDouble)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 541, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 541, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "miololib.pyx":542
 *             return out
 *         if self.ctype=="double":
 *             out = Matrix(ctype="double")             # <<<<<<<<<<<<<<
 *             out.mtxDouble = self.mtxDouble.mmul(A.mtxDouble)
 *             return out
 */
    __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 542, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ctype, __pyx_n_s_double) < 0) __PYX_ERR(1, 542, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Matrix), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 542, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_out = ((struct __pyx_obj_5miolo_Matrix *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "miololib.pyx":543
 *         if self.ctype=="double":
 *             out = Matrix(ctype="double")
 *             out.mtxDouble = self.mtxDouble.mmul(A.mtxDouble)             # <<<<<<<<<<<<<<
 *             return out
 * 
 */
    __pyx_v_out->__pyx_base.mtxDouble = __pyx_v_self->__pyx_base.mtxDouble->mmul(__pyx_v_A->__pyx_base.mtxDouble);

    /* "miololib.pyx":544
 *             out = Matrix(ctype="double")
 *             out.mtxDouble = self.mtxDouble.mmul(A.mtxDouble)
 *             return out             # <<<<<<<<<<<<<<
 * 
 *     def __mod__(self, Matrix A):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_out);
    __pyx_r = ((PyObject *)__pyx_v_out);
    goto __pyx_L0;

    /* "miololib.pyx":541
 *             out.mtxFloat = self.mtxFloat.mmul(A.mtxFloat)
 *             return out
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             out = Matrix(ctype="double")
 *             out.mtxDouble = self.mtxDouble.mmul(A.mtxDouble)
 */
  }

  /* "miololib.pyx":528
 *         return self*(1./value)
 * 
 *     def __and__(self, Matrix A):             # <<<<<<<<<<<<<<
 *         if self.ctype!=A.ctype:
 *             raise Exception("Matrix operations require same ctype.")
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("miolo.Matrix.__and__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":546
 *             return out
 * 
 *     def __mod__(self, Matrix A):             # <<<<<<<<<<<<<<
 *         """
 *             Hadamard (element-wise) product.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_6Matrix_49__mod__(PyObject *__pyx_v_self, PyObject *__pyx_v_A); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_6Matrix_48__mod__, "\n            Hadamard (element-wise) product.\n        ");
#if CYTHON_UPDATE_DESCRIPTOR_DOC
struct wrapperbase __pyx_wrapperbase_5miolo_6Matrix_48__mod__;
#endif
static PyObject *__pyx_pw_5miolo_6Matrix_49__mod__(PyObject *__pyx_v_self, PyObject *__pyx_v_A) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__mod__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_A), __pyx_ptype_5miolo_Matrix, 1, "A", 0))) __PYX_ERR(1, 546, __pyx_L1_error)
  __pyx_r = __pyx_pf_5miolo_6Matrix_48__mod__(((struct __pyx_obj_5miolo_Matrix *)__pyx_v_self), ((struct __pyx_obj_5miolo_Matrix *)__pyx_v_A));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_6Matrix_48__mod__(struct __pyx_obj_5miolo_Matrix *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_A) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__mod__", 1);

  /* "miololib.pyx":550
 *             Hadamard (element-wise) product.
 *         """
 *         if self.ctype!=A.ctype:             # <<<<<<<<<<<<<<
 *             raise Exception("Matrix operations require same ctype.")
 *         if self.rows!=A.rows or self.cols!=A.cols:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 550, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_A), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 550, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 550, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 550, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(__pyx_t_4)) {

    /* "miololib.pyx":551
 *         """
 *         if self.ctype!=A.ctype:
 *             raise Exception("Matrix operations require same ctype.")             # <<<<<<<<<<<<<<
 *         if self.rows!=A.rows or self.cols!=A.cols:
 *             raise Exception("Incompatible shape for Hadamard product.")
 */
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__23, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 551, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 551, __pyx_L1_error)

    /* "miololib.pyx":550
 *             Hadamard (element-wise) product.
 *         """
 *         if self.ctype!=A.ctype:             # <<<<<<<<<<<<<<
 *             raise Exception("Matrix operations require same ctype.")
 *         if self.rows!=A.rows or self.cols!=A.cols:
 */
  }

  /* "miololib.pyx":552
 *         if self.ctype!=A.ctype:
 *             raise Exception("Matrix operations require same ctype.")
 *         if self.rows!=A.rows or self.cols!=A.cols:             # <<<<<<<<<<<<<<
 *             raise Exception("Incompatible shape for Hadamard product.")
 *         if self.ctype=="int":
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_rows); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 552, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_A), __pyx_n_s_rows); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 552, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_3, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 552, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(1, 552, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!__pyx_t_5) {
  } else {
    __pyx_t_4 = __pyx_t_5;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_cols); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 552, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_A), __pyx_n_s_cols); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 552, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 552, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(1, 552, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __pyx_t_5;
  __pyx_L5_bool_binop_done:;
  if (unlikely(__pyx_t_4)) {

    /* "miololib.pyx":553
 *             raise Exception("Matrix operations require same ctype.")
 *         if self.rows!=A.rows or self.cols!=A.cols:
 *             raise Exception("Incompatible shape for Hadamard product.")             # <<<<<<<<<<<<<<
 *         if self.ctype=="int":
 *             out = Matrix(ctype="int")
 */
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__28, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 553, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 553, __pyx_L1_error)

    /* "miololib.pyx":552
 *         if self.ctype!=A.ctype:
 *             raise Exception("Matrix operations require same ctype.")
 *         if self.rows!=A.rows or self.cols!=A.cols:             # <<<<<<<<<<<<<<
 *             raise Exception("Incompatible shape for Hadamard product.")
 *         if self.ctype=="int":
 */
  }

  /* "miololib.pyx":554
 *         if self.rows!=A.rows or self.cols!=A.cols:
 *             raise Exception("Incompatible shape for Hadamard product.")
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             out = Matrix(ctype="int")
 *             out.mtxInt = self.mtxInt.hmul(A.mtxInt)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 554, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 554, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_4) {

    /* "miololib.pyx":555
 *             raise Exception("Incompatible shape for Hadamard product.")
 *         if self.ctype=="int":
 *             out = Matrix(ctype="int")             # <<<<<<<<<<<<<<
 *             out.mtxInt = self.mtxInt.hmul(A.mtxInt)
 *             return out
 */
    __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 555, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_ctype, __pyx_n_s_int) < 0) __PYX_ERR(1, 555, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Matrix), __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 555, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_out = ((struct __pyx_obj_5miolo_Matrix *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "miololib.pyx":556
 *         if self.ctype=="int":
 *             out = Matrix(ctype="int")
 *             out.mtxInt = self.mtxInt.hmul(A.mtxInt)             # <<<<<<<<<<<<<<
 *             return out
 *         if self.ctype=="float":
 */
    __pyx_v_out->__pyx_base.mtxInt = __pyx_v_self->__pyx_base.mtxInt->hmul(__pyx_v_A->__pyx_base.mtxInt);

    /* "miololib.pyx":557
 *             out = Matrix(ctype="int")
 *             out.mtxInt = self.mtxInt.hmul(A.mtxInt)
 *             return out             # <<<<<<<<<<<<<<
 *         if self.ctype=="float":
 *             out = Matrix(ctype="float")
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_out);
    __pyx_r = ((PyObject *)__pyx_v_out);
    goto __pyx_L0;

    /* "miololib.pyx":554
 *         if self.rows!=A.rows or self.cols!=A.cols:
 *             raise Exception("Incompatible shape for Hadamard product.")
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             out = Matrix(ctype="int")
 *             out.mtxInt = self.mtxInt.hmul(A.mtxInt)
 */
  }

  /* "miololib.pyx":558
 *             out.mtxInt = self.mtxInt.hmul(A.mtxInt)
 *             return out
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             out = Matrix(ctype="float")
 *             out.mtxFloat = (self.mtxFloat.hmul(A.mtxFloat))
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 558, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 558, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "miololib.pyx":559
 *             return out
 *         if self.ctype=="float":
 *             out = Matrix(ctype="float")             # <<<<<<<<<<<<<<
 *             out.mtxFloat = (self.mtxFloat.hmul(A.mtxFloat))
 *             return out
 */
    __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 559, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_ctype, __pyx_n_s_float) < 0) __PYX_ERR(1, 559, __pyx_L1_error)
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Matrix), __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 559, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_out = ((struct __pyx_obj_5miolo_Matrix *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "miololib.pyx":560
 *         if self.ctype=="float":
 *             out = Matrix(ctype="float")
 *             out.mtxFloat = (self.mtxFloat.hmul(A.mtxFloat))             # <<<<<<<<<<<<<<
 *             return out
 *         if self.ctype=="double":
 */
    __pyx_v_out->__pyx_base.mtxFloat = __pyx_v_self->__pyx_base.mtxFloat->hmul(__pyx_v_A->__pyx_base.mtxFloat);

    /* "miololib.pyx":561
 *             out = Matrix(ctype="float")
 *             out.mtxFloat = (self.mtxFloat.hmul(A.mtxFloat))
 *             return out             # <<<<<<<<<<<<<<
 *         if self.ctype=="double":
 *             out = Matrix(ctype="double")
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_out);
    __pyx_r = ((PyObject *)__pyx_v_out);
    goto __pyx_L0;

    /* "miololib.pyx":558
 *             out.mtxInt = self.mtxInt.hmul(A.mtxInt)
 *             return out
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             out = Matrix(ctype="float")
 *             out.mtxFloat = (self.mtxFloat.hmul(A.mtxFloat))
 */
  }

  /* "miololib.pyx":562
 *             out.mtxFloat = (self.mtxFloat.hmul(A.mtxFloat))
 *             return out
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             out = Matrix(ctype="double")
 *             out.mtxDouble = (self.mtxDouble.hmul(A.mtxDouble))
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 562, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 562, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_4) {

    /* "miololib.pyx":563
 *             return out
 *         if self.ctype=="double":
 *             out = Matrix(ctype="double")             # <<<<<<<<<<<<<<
 *             out.mtxDouble = (self.mtxDouble.hmul(A.mtxDouble))
 *             return out
 */
    __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 563, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_ctype, __pyx_n_s_double) < 0) __PYX_ERR(1, 563, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Matrix), __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 563, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_out = ((struct __pyx_obj_5miolo_Matrix *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "miololib.pyx":564
 *         if self.ctype=="double":
 *             out = Matrix(ctype="double")
 *             out.mtxDouble = (self.mtxDouble.hmul(A.mtxDouble))             # <<<<<<<<<<<<<<
 *             return out
 * 
 */
    __pyx_v_out->__pyx_base.mtxDouble = __pyx_v_self->__pyx_base.mtxDouble->hmul(__pyx_v_A->__pyx_base.mtxDouble);

    /* "miololib.pyx":565
 *             out = Matrix(ctype="double")
 *             out.mtxDouble = (self.mtxDouble.hmul(A.mtxDouble))
 *             return out             # <<<<<<<<<<<<<<
 * 
 *     def __abs__(self):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_out);
    __pyx_r = ((PyObject *)__pyx_v_out);
    goto __pyx_L0;

    /* "miololib.pyx":562
 *             out.mtxFloat = (self.mtxFloat.hmul(A.mtxFloat))
 *             return out
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             out = Matrix(ctype="double")
 *             out.mtxDouble = (self.mtxDouble.hmul(A.mtxDouble))
 */
  }

  /* "miololib.pyx":546
 *             return out
 * 
 *     def __mod__(self, Matrix A):             # <<<<<<<<<<<<<<
 *         """
 *             Hadamard (element-wise) product.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("miolo.Matrix.__mod__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":567
 *             return out
 * 
 *     def __abs__(self):             # <<<<<<<<<<<<<<
 *         if self.ctype=="int":
 *             return self.mtxInt.norm()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_6Matrix_51__abs__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5miolo_6Matrix_51__abs__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__abs__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5miolo_6Matrix_50__abs__(((struct __pyx_obj_5miolo_Matrix *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_6Matrix_50__abs__(struct __pyx_obj_5miolo_Matrix *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__abs__", 1);

  /* "miololib.pyx":568
 * 
 *     def __abs__(self):
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             return self.mtxInt.norm()
 *         if self.ctype=="float":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 568, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 568, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":569
 *     def __abs__(self):
 *         if self.ctype=="int":
 *             return self.mtxInt.norm()             # <<<<<<<<<<<<<<
 *         if self.ctype=="float":
 *             return self.mtxFloat.norm()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->__pyx_base.mtxInt->norm()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 569, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "miololib.pyx":568
 * 
 *     def __abs__(self):
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             return self.mtxInt.norm()
 *         if self.ctype=="float":
 */
  }

  /* "miololib.pyx":570
 *         if self.ctype=="int":
 *             return self.mtxInt.norm()
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             return self.mtxFloat.norm()
 *         if self.ctype=="double":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 570, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 570, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":571
 *             return self.mtxInt.norm()
 *         if self.ctype=="float":
 *             return self.mtxFloat.norm()             # <<<<<<<<<<<<<<
 *         if self.ctype=="double":
 *             return self.mtxDouble.norm()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.mtxFloat->norm()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 571, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "miololib.pyx":570
 *         if self.ctype=="int":
 *             return self.mtxInt.norm()
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             return self.mtxFloat.norm()
 *         if self.ctype=="double":
 */
  }

  /* "miololib.pyx":572
 *         if self.ctype=="float":
 *             return self.mtxFloat.norm()
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             return self.mtxDouble.norm()
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 572, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 572, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":573
 *             return self.mtxFloat.norm()
 *         if self.ctype=="double":
 *             return self.mtxDouble.norm()             # <<<<<<<<<<<<<<
 * 
 *     #---------------------------------------------------------------------------
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.mtxDouble->norm()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 573, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "miololib.pyx":572
 *         if self.ctype=="float":
 *             return self.mtxFloat.norm()
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             return self.mtxDouble.norm()
 * 
 */
  }

  /* "miololib.pyx":567
 *             return out
 * 
 *     def __abs__(self):             # <<<<<<<<<<<<<<
 *         if self.ctype=="int":
 *             return self.mtxInt.norm()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("miolo.Matrix.__abs__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":579
 *     #---------------------------------------------------------------------------
 * 
 *     def argmax(self):             # <<<<<<<<<<<<<<
 *         """
 *             Returns the argmax of each row.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_6Matrix_53argmax(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_6Matrix_52argmax, "Matrix.argmax(self)\n\n            Returns the argmax of each row.\n        ");
static PyMethodDef __pyx_mdef_5miolo_6Matrix_53argmax = {"argmax", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_6Matrix_53argmax, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_6Matrix_52argmax};
static PyObject *__pyx_pw_5miolo_6Matrix_53argmax(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("argmax (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("argmax", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "argmax", 0))) return NULL;
  __pyx_r = __pyx_pf_5miolo_6Matrix_52argmax(((struct __pyx_obj_5miolo_Matrix *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_6Matrix_52argmax(struct __pyx_obj_5miolo_Matrix *__pyx_v_self) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("argmax", 1);

  /* "miololib.pyx":583
 *             Returns the argmax of each row.
 *         """
 *         out = Matrix(ctype="int")             # <<<<<<<<<<<<<<
 *         if self.ctype=="int":
 *             out.mtxInt = mld.argmax(self.mtxInt)
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 583, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ctype, __pyx_n_s_int) < 0) __PYX_ERR(1, 583, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Matrix), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 583, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_out = ((struct __pyx_obj_5miolo_Matrix *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "miololib.pyx":584
 *         """
 *         out = Matrix(ctype="int")
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.mtxInt = mld.argmax(self.mtxInt)
 *         if self.ctype=="float":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 584, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 584, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":585
 *         out = Matrix(ctype="int")
 *         if self.ctype=="int":
 *             out.mtxInt = mld.argmax(self.mtxInt)             # <<<<<<<<<<<<<<
 *         if self.ctype=="float":
 *             out.mtxInt = mld.argmax(self.mtxFloat)
 */
    __pyx_v_out->__pyx_base.mtxInt = argmax<int>(__pyx_v_self->__pyx_base.mtxInt);

    /* "miololib.pyx":584
 *         """
 *         out = Matrix(ctype="int")
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.mtxInt = mld.argmax(self.mtxInt)
 *         if self.ctype=="float":
 */
  }

  /* "miololib.pyx":586
 *         if self.ctype=="int":
 *             out.mtxInt = mld.argmax(self.mtxInt)
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.mtxInt = mld.argmax(self.mtxFloat)
 *         if self.ctype=="double":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 586, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 586, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":587
 *             out.mtxInt = mld.argmax(self.mtxInt)
 *         if self.ctype=="float":
 *             out.mtxInt = mld.argmax(self.mtxFloat)             # <<<<<<<<<<<<<<
 *         if self.ctype=="double":
 *             out.mtxInt = mld.argmax(self.mtxDouble)
 */
    __pyx_v_out->__pyx_base.mtxInt = argmax<float>(__pyx_v_self->__pyx_base.mtxFloat);

    /* "miololib.pyx":586
 *         if self.ctype=="int":
 *             out.mtxInt = mld.argmax(self.mtxInt)
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.mtxInt = mld.argmax(self.mtxFloat)
 *         if self.ctype=="double":
 */
  }

  /* "miololib.pyx":588
 *         if self.ctype=="float":
 *             out.mtxInt = mld.argmax(self.mtxFloat)
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.mtxInt = mld.argmax(self.mtxDouble)
 *         return out
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 588, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 588, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":589
 *             out.mtxInt = mld.argmax(self.mtxFloat)
 *         if self.ctype=="double":
 *             out.mtxInt = mld.argmax(self.mtxDouble)             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
    __pyx_v_out->__pyx_base.mtxInt = argmax<double>(__pyx_v_self->__pyx_base.mtxDouble);

    /* "miololib.pyx":588
 *         if self.ctype=="float":
 *             out.mtxInt = mld.argmax(self.mtxFloat)
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.mtxInt = mld.argmax(self.mtxDouble)
 *         return out
 */
  }

  /* "miololib.pyx":590
 *         if self.ctype=="double":
 *             out.mtxInt = mld.argmax(self.mtxDouble)
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     def argmin(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_out);
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "miololib.pyx":579
 *     #---------------------------------------------------------------------------
 * 
 *     def argmax(self):             # <<<<<<<<<<<<<<
 *         """
 *             Returns the argmax of each row.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("miolo.Matrix.argmax", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":592
 *         return out
 * 
 *     def argmin(self):             # <<<<<<<<<<<<<<
 *         """
 *             Returns the argmin of each row.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_6Matrix_55argmin(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_6Matrix_54argmin, "Matrix.argmin(self)\n\n            Returns the argmin of each row.\n        ");
static PyMethodDef __pyx_mdef_5miolo_6Matrix_55argmin = {"argmin", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_6Matrix_55argmin, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_6Matrix_54argmin};
static PyObject *__pyx_pw_5miolo_6Matrix_55argmin(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("argmin (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("argmin", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "argmin", 0))) return NULL;
  __pyx_r = __pyx_pf_5miolo_6Matrix_54argmin(((struct __pyx_obj_5miolo_Matrix *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_6Matrix_54argmin(struct __pyx_obj_5miolo_Matrix *__pyx_v_self) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("argmin", 1);

  /* "miololib.pyx":596
 *             Returns the argmin of each row.
 *         """
 *         out = Matrix(ctype="int")             # <<<<<<<<<<<<<<
 *         if self.ctype=="int":
 *             out.mtxInt = mld.argmin(self.mtxInt)
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 596, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ctype, __pyx_n_s_int) < 0) __PYX_ERR(1, 596, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Matrix), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 596, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_out = ((struct __pyx_obj_5miolo_Matrix *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "miololib.pyx":597
 *         """
 *         out = Matrix(ctype="int")
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.mtxInt = mld.argmin(self.mtxInt)
 *         if self.ctype=="float":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 597, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 597, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":598
 *         out = Matrix(ctype="int")
 *         if self.ctype=="int":
 *             out.mtxInt = mld.argmin(self.mtxInt)             # <<<<<<<<<<<<<<
 *         if self.ctype=="float":
 *             out.mtxInt = mld.argmin(self.mtxFloat)
 */
    __pyx_v_out->__pyx_base.mtxInt = argmin<int>(__pyx_v_self->__pyx_base.mtxInt);

    /* "miololib.pyx":597
 *         """
 *         out = Matrix(ctype="int")
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.mtxInt = mld.argmin(self.mtxInt)
 *         if self.ctype=="float":
 */
  }

  /* "miololib.pyx":599
 *         if self.ctype=="int":
 *             out.mtxInt = mld.argmin(self.mtxInt)
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.mtxInt = mld.argmin(self.mtxFloat)
 *         if self.ctype=="double":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 599, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 599, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":600
 *             out.mtxInt = mld.argmin(self.mtxInt)
 *         if self.ctype=="float":
 *             out.mtxInt = mld.argmin(self.mtxFloat)             # <<<<<<<<<<<<<<
 *         if self.ctype=="double":
 *             out.mtxInt = mld.argmin(self.mtxDouble)
 */
    __pyx_v_out->__pyx_base.mtxInt = argmin<float>(__pyx_v_self->__pyx_base.mtxFloat);

    /* "miololib.pyx":599
 *         if self.ctype=="int":
 *             out.mtxInt = mld.argmin(self.mtxInt)
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.mtxInt = mld.argmin(self.mtxFloat)
 *         if self.ctype=="double":
 */
  }

  /* "miololib.pyx":601
 *         if self.ctype=="float":
 *             out.mtxInt = mld.argmin(self.mtxFloat)
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.mtxInt = mld.argmin(self.mtxDouble)
 *         return out
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 601, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 601, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":602
 *             out.mtxInt = mld.argmin(self.mtxFloat)
 *         if self.ctype=="double":
 *             out.mtxInt = mld.argmin(self.mtxDouble)             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
    __pyx_v_out->__pyx_base.mtxInt = argmin<double>(__pyx_v_self->__pyx_base.mtxDouble);

    /* "miololib.pyx":601
 *         if self.ctype=="float":
 *             out.mtxInt = mld.argmin(self.mtxFloat)
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.mtxInt = mld.argmin(self.mtxDouble)
 *         return out
 */
  }

  /* "miololib.pyx":603
 *         if self.ctype=="double":
 *             out.mtxInt = mld.argmin(self.mtxDouble)
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     def rowDistance(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_out);
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "miololib.pyx":592
 *         return out
 * 
 *     def argmin(self):             # <<<<<<<<<<<<<<
 *         """
 *             Returns the argmin of each row.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("miolo.Matrix.argmin", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":605
 *         return out
 * 
 *     def rowDistance(self):             # <<<<<<<<<<<<<<
 *         """
 *             Returns the self.rows x self.rows Matrix for which each entry (i,j)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_6Matrix_57rowDistance(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_6Matrix_56rowDistance, "Matrix.rowDistance(self)\n\n            Returns the self.rows x self.rows Matrix for which each entry (i,j)\n            is the euclidean distance between rows i and j of self.\n        ");
static PyMethodDef __pyx_mdef_5miolo_6Matrix_57rowDistance = {"rowDistance", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_6Matrix_57rowDistance, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_6Matrix_56rowDistance};
static PyObject *__pyx_pw_5miolo_6Matrix_57rowDistance(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("rowDistance (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("rowDistance", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "rowDistance", 0))) return NULL;
  __pyx_r = __pyx_pf_5miolo_6Matrix_56rowDistance(((struct __pyx_obj_5miolo_Matrix *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_6Matrix_56rowDistance(struct __pyx_obj_5miolo_Matrix *__pyx_v_self) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("rowDistance", 1);

  /* "miololib.pyx":610
 *             is the euclidean distance between rows i and j of self.
 *         """
 *         out = Matrix(ctype=self.ctype)             # <<<<<<<<<<<<<<
 *         if self.ctype=="int":
 *             out.mtxInt = self.mtxInt.rowDistance()
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 610, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 610, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ctype, __pyx_t_2) < 0) __PYX_ERR(1, 610, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Matrix), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 610, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_out = ((struct __pyx_obj_5miolo_Matrix *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "miololib.pyx":611
 *         """
 *         out = Matrix(ctype=self.ctype)
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.mtxInt = self.mtxInt.rowDistance()
 *         if self.ctype=="float":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 611, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 611, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":612
 *         out = Matrix(ctype=self.ctype)
 *         if self.ctype=="int":
 *             out.mtxInt = self.mtxInt.rowDistance()             # <<<<<<<<<<<<<<
 *         if self.ctype=="float":
 *             out.mtxFloat = self.mtxFloat.rowDistance()
 */
    __pyx_v_out->__pyx_base.mtxInt = __pyx_v_self->__pyx_base.mtxInt->rowDistance();

    /* "miololib.pyx":611
 *         """
 *         out = Matrix(ctype=self.ctype)
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.mtxInt = self.mtxInt.rowDistance()
 *         if self.ctype=="float":
 */
  }

  /* "miololib.pyx":613
 *         if self.ctype=="int":
 *             out.mtxInt = self.mtxInt.rowDistance()
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.mtxFloat = self.mtxFloat.rowDistance()
 *         if self.ctype=="double":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 613, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 613, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":614
 *             out.mtxInt = self.mtxInt.rowDistance()
 *         if self.ctype=="float":
 *             out.mtxFloat = self.mtxFloat.rowDistance()             # <<<<<<<<<<<<<<
 *         if self.ctype=="double":
 *             out.mtxDouble = self.mtxDouble.rowDistance()
 */
    __pyx_v_out->__pyx_base.mtxFloat = __pyx_v_self->__pyx_base.mtxFloat->rowDistance();

    /* "miololib.pyx":613
 *         if self.ctype=="int":
 *             out.mtxInt = self.mtxInt.rowDistance()
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.mtxFloat = self.mtxFloat.rowDistance()
 *         if self.ctype=="double":
 */
  }

  /* "miololib.pyx":615
 *         if self.ctype=="float":
 *             out.mtxFloat = self.mtxFloat.rowDistance()
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.mtxDouble = self.mtxDouble.rowDistance()
 *         return out
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 615, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 615, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":616
 *             out.mtxFloat = self.mtxFloat.rowDistance()
 *         if self.ctype=="double":
 *             out.mtxDouble = self.mtxDouble.rowDistance()             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
    __pyx_v_out->__pyx_base.mtxDouble = __pyx_v_self->__pyx_base.mtxDouble->rowDistance();

    /* "miololib.pyx":615
 *         if self.ctype=="float":
 *             out.mtxFloat = self.mtxFloat.rowDistance()
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.mtxDouble = self.mtxDouble.rowDistance()
 *         return out
 */
  }

  /* "miololib.pyx":617
 *         if self.ctype=="double":
 *             out.mtxDouble = self.mtxDouble.rowDistance()
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     def sumAll(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_out);
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "miololib.pyx":605
 *         return out
 * 
 *     def rowDistance(self):             # <<<<<<<<<<<<<<
 *         """
 *             Returns the self.rows x self.rows Matrix for which each entry (i,j)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("miolo.Matrix.rowDistance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":619
 *         return out
 * 
 *     def sumAll(self):             # <<<<<<<<<<<<<<
 *         """
 *             Returns the sum of all elements in a Matrix.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_6Matrix_59sumAll(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_6Matrix_58sumAll, "Matrix.sumAll(self)\n\n            Returns the sum of all elements in a Matrix.\n        ");
static PyMethodDef __pyx_mdef_5miolo_6Matrix_59sumAll = {"sumAll", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_6Matrix_59sumAll, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_6Matrix_58sumAll};
static PyObject *__pyx_pw_5miolo_6Matrix_59sumAll(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sumAll (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("sumAll", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "sumAll", 0))) return NULL;
  __pyx_r = __pyx_pf_5miolo_6Matrix_58sumAll(((struct __pyx_obj_5miolo_Matrix *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_6Matrix_58sumAll(struct __pyx_obj_5miolo_Matrix *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("sumAll", 1);

  /* "miololib.pyx":623
 *             Returns the sum of all elements in a Matrix.
 *         """
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             return self.mtxInt.sumAll()
 *         if self.ctype=="float":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 623, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 623, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":624
 *         """
 *         if self.ctype=="int":
 *             return self.mtxInt.sumAll()             # <<<<<<<<<<<<<<
 *         if self.ctype=="float":
 *             return self.mtxFloat.sumAll()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->__pyx_base.mtxInt->sumAll()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 624, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "miololib.pyx":623
 *             Returns the sum of all elements in a Matrix.
 *         """
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             return self.mtxInt.sumAll()
 *         if self.ctype=="float":
 */
  }

  /* "miololib.pyx":625
 *         if self.ctype=="int":
 *             return self.mtxInt.sumAll()
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             return self.mtxFloat.sumAll()
 *         if self.ctype=="double":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 625, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 625, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":626
 *             return self.mtxInt.sumAll()
 *         if self.ctype=="float":
 *             return self.mtxFloat.sumAll()             # <<<<<<<<<<<<<<
 *         if self.ctype=="double":
 *             return self.mtxDouble.sumAll()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.mtxFloat->sumAll()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 626, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "miololib.pyx":625
 *         if self.ctype=="int":
 *             return self.mtxInt.sumAll()
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             return self.mtxFloat.sumAll()
 *         if self.ctype=="double":
 */
  }

  /* "miololib.pyx":627
 *         if self.ctype=="float":
 *             return self.mtxFloat.sumAll()
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             return self.mtxDouble.sumAll()
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 627, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 627, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":628
 *             return self.mtxFloat.sumAll()
 *         if self.ctype=="double":
 *             return self.mtxDouble.sumAll()             # <<<<<<<<<<<<<<
 * 
 *     def partition(self, int[:] labels, int targetLabel):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.mtxDouble->sumAll()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 628, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "miololib.pyx":627
 *         if self.ctype=="float":
 *             return self.mtxFloat.sumAll()
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             return self.mtxDouble.sumAll()
 * 
 */
  }

  /* "miololib.pyx":619
 *         return out
 * 
 *     def sumAll(self):             # <<<<<<<<<<<<<<
 *         """
 *             Returns the sum of all elements in a Matrix.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("miolo.Matrix.sumAll", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":630
 *             return self.mtxDouble.sumAll()
 * 
 *     def partition(self, int[:] labels, int targetLabel):             # <<<<<<<<<<<<<<
 *         """
 *             Returns the rows of self with label equal to target. Useful for
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_6Matrix_61partition(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_6Matrix_60partition, "Matrix.partition(self, int[:] labels, int targetLabel)\n\n            Returns the rows of self with label equal to target. Useful for \n            implementing k-means.\n            @params:\n                labels: array of labels. Must have length equal to self.rows.\n                targetLabel: targeted label for extraction.\n        ");
static PyMethodDef __pyx_mdef_5miolo_6Matrix_61partition = {"partition", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_6Matrix_61partition, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_6Matrix_60partition};
static PyObject *__pyx_pw_5miolo_6Matrix_61partition(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  __Pyx_memviewslice __pyx_v_labels = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_v_targetLabel;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("partition (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_labels,&__pyx_n_s_targetLabel,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_labels)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 630, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_targetLabel)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 630, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("partition", 1, 2, 2, 1); __PYX_ERR(1, 630, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "partition") < 0)) __PYX_ERR(1, 630, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_labels = __Pyx_PyObject_to_MemoryviewSlice_ds_int(values[0], PyBUF_WRITABLE); if (unlikely(!__pyx_v_labels.memview)) __PYX_ERR(1, 630, __pyx_L3_error)
    __pyx_v_targetLabel = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_targetLabel == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 630, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("partition", 1, 2, 2, __pyx_nargs); __PYX_ERR(1, 630, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __PYX_XCLEAR_MEMVIEW(&__pyx_v_labels, 1);
  __Pyx_AddTraceback("miolo.Matrix.partition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5miolo_6Matrix_60partition(((struct __pyx_obj_5miolo_Matrix *)__pyx_v_self), __pyx_v_labels, __pyx_v_targetLabel);

  /* function exit code */
  __PYX_XCLEAR_MEMVIEW(&__pyx_v_labels, 1);
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_6Matrix_60partition(struct __pyx_obj_5miolo_Matrix *__pyx_v_self, __Pyx_memviewslice __pyx_v_labels, int __pyx_v_targetLabel) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("partition", 1);

  /* "miololib.pyx":638
 *                 targetLabel: targeted label for extraction.
 *         """
 *         if labels.size!=self.rows:             # <<<<<<<<<<<<<<
 *             raise Exception("labels must have size equal to self.rows.")
 *         out = Matrix(ctype=self.ctype)
 */
  __pyx_t_1 = __pyx_memoryview_fromslice(__pyx_v_labels, 1, (PyObject *(*)(char *)) __pyx_memview_get_int, (int (*)(char *, PyObject *)) __pyx_memview_set_int, 0);; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 638, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_size); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 638, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_rows); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 638, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, __pyx_t_1, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 638, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 638, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(__pyx_t_4)) {

    /* "miololib.pyx":639
 *         """
 *         if labels.size!=self.rows:
 *             raise Exception("labels must have size equal to self.rows.")             # <<<<<<<<<<<<<<
 *         out = Matrix(ctype=self.ctype)
 *         if out.ctype=="int":
 */
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__29, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 639, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 639, __pyx_L1_error)

    /* "miololib.pyx":638
 *                 targetLabel: targeted label for extraction.
 *         """
 *         if labels.size!=self.rows:             # <<<<<<<<<<<<<<
 *             raise Exception("labels must have size equal to self.rows.")
 *         out = Matrix(ctype=self.ctype)
 */
  }

  /* "miololib.pyx":640
 *         if labels.size!=self.rows:
 *             raise Exception("labels must have size equal to self.rows.")
 *         out = Matrix(ctype=self.ctype)             # <<<<<<<<<<<<<<
 *         if out.ctype=="int":
 *             out.mtxInt = self.mtxInt.partition(&labels[0],targetLabel)
 */
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 640, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 640, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_ctype, __pyx_t_1) < 0) __PYX_ERR(1, 640, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Matrix), __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 640, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_out = ((struct __pyx_obj_5miolo_Matrix *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "miololib.pyx":641
 *             raise Exception("labels must have size equal to self.rows.")
 *         out = Matrix(ctype=self.ctype)
 *         if out.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.mtxInt = self.mtxInt.partition(&labels[0],targetLabel)
 *         if out.ctype=="float":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 641, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 641, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "miololib.pyx":642
 *         out = Matrix(ctype=self.ctype)
 *         if out.ctype=="int":
 *             out.mtxInt = self.mtxInt.partition(&labels[0],targetLabel)             # <<<<<<<<<<<<<<
 *         if out.ctype=="float":
 *             out.mtxFloat = self.mtxFloat.partition(&labels[0],targetLabel)
 */
    __pyx_t_5 = 0;
    if (__pyx_t_5 < 0) __pyx_t_5 += __pyx_v_labels.shape[0];
    __pyx_v_out->__pyx_base.mtxInt = __pyx_v_self->__pyx_base.mtxInt->partition((&(*((int *) ( /* dim=0 */ (__pyx_v_labels.data + __pyx_t_5 * __pyx_v_labels.strides[0]) )))), __pyx_v_targetLabel);

    /* "miololib.pyx":641
 *             raise Exception("labels must have size equal to self.rows.")
 *         out = Matrix(ctype=self.ctype)
 *         if out.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.mtxInt = self.mtxInt.partition(&labels[0],targetLabel)
 *         if out.ctype=="float":
 */
  }

  /* "miololib.pyx":643
 *         if out.ctype=="int":
 *             out.mtxInt = self.mtxInt.partition(&labels[0],targetLabel)
 *         if out.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.mtxFloat = self.mtxFloat.partition(&labels[0],targetLabel)
 *         if out.ctype=="double":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 643, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 643, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "miololib.pyx":644
 *             out.mtxInt = self.mtxInt.partition(&labels[0],targetLabel)
 *         if out.ctype=="float":
 *             out.mtxFloat = self.mtxFloat.partition(&labels[0],targetLabel)             # <<<<<<<<<<<<<<
 *         if out.ctype=="double":
 *             out.mtxDouble = self.mtxDouble.partition(&labels[0],targetLabel)
 */
    __pyx_t_5 = 0;
    if (__pyx_t_5 < 0) __pyx_t_5 += __pyx_v_labels.shape[0];
    __pyx_v_out->__pyx_base.mtxFloat = __pyx_v_self->__pyx_base.mtxFloat->partition((&(*((int *) ( /* dim=0 */ (__pyx_v_labels.data + __pyx_t_5 * __pyx_v_labels.strides[0]) )))), __pyx_v_targetLabel);

    /* "miololib.pyx":643
 *         if out.ctype=="int":
 *             out.mtxInt = self.mtxInt.partition(&labels[0],targetLabel)
 *         if out.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.mtxFloat = self.mtxFloat.partition(&labels[0],targetLabel)
 *         if out.ctype=="double":
 */
  }

  /* "miololib.pyx":645
 *         if out.ctype=="float":
 *             out.mtxFloat = self.mtxFloat.partition(&labels[0],targetLabel)
 *         if out.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.mtxDouble = self.mtxDouble.partition(&labels[0],targetLabel)
 *         return out
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 645, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 645, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "miololib.pyx":646
 *             out.mtxFloat = self.mtxFloat.partition(&labels[0],targetLabel)
 *         if out.ctype=="double":
 *             out.mtxDouble = self.mtxDouble.partition(&labels[0],targetLabel)             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
    __pyx_t_5 = 0;
    if (__pyx_t_5 < 0) __pyx_t_5 += __pyx_v_labels.shape[0];
    __pyx_v_out->__pyx_base.mtxDouble = __pyx_v_self->__pyx_base.mtxDouble->partition((&(*((int *) ( /* dim=0 */ (__pyx_v_labels.data + __pyx_t_5 * __pyx_v_labels.strides[0]) )))), __pyx_v_targetLabel);

    /* "miololib.pyx":645
 *         if out.ctype=="float":
 *             out.mtxFloat = self.mtxFloat.partition(&labels[0],targetLabel)
 *         if out.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.mtxDouble = self.mtxDouble.partition(&labels[0],targetLabel)
 *         return out
 */
  }

  /* "miololib.pyx":647
 *         if out.ctype=="double":
 *             out.mtxDouble = self.mtxDouble.partition(&labels[0],targetLabel)
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     def trace(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_out);
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "miololib.pyx":630
 *             return self.mtxDouble.sumAll()
 * 
 *     def partition(self, int[:] labels, int targetLabel):             # <<<<<<<<<<<<<<
 *         """
 *             Returns the rows of self with label equal to target. Useful for
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("miolo.Matrix.partition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":649
 *         return out
 * 
 *     def trace(self):             # <<<<<<<<<<<<<<
 *         """
 *             Sum of the elements with row index equal to column index. This is
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_6Matrix_63trace(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_6Matrix_62trace, "Matrix.trace(self)\n\n            Sum of the elements with row index equal to column index. This is\n            a generalization of trace operation to non-square matrices.\n        ");
static PyMethodDef __pyx_mdef_5miolo_6Matrix_63trace = {"trace", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_6Matrix_63trace, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_6Matrix_62trace};
static PyObject *__pyx_pw_5miolo_6Matrix_63trace(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("trace (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("trace", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "trace", 0))) return NULL;
  __pyx_r = __pyx_pf_5miolo_6Matrix_62trace(((struct __pyx_obj_5miolo_Matrix *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_6Matrix_62trace(struct __pyx_obj_5miolo_Matrix *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("trace", 1);

  /* "miololib.pyx":654
 *             a generalization of trace operation to non-square matrices.
 *         """
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             return self.mtxInt.trace()
 *         if self.ctype=="float":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 654, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 654, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":655
 *         """
 *         if self.ctype=="int":
 *             return self.mtxInt.trace()             # <<<<<<<<<<<<<<
 *         if self.ctype=="float":
 *             return self.mtxFloat.trace()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->__pyx_base.mtxInt->trace()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 655, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "miololib.pyx":654
 *             a generalization of trace operation to non-square matrices.
 *         """
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             return self.mtxInt.trace()
 *         if self.ctype=="float":
 */
  }

  /* "miololib.pyx":656
 *         if self.ctype=="int":
 *             return self.mtxInt.trace()
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             return self.mtxFloat.trace()
 *         if self.ctype=="double":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 656, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 656, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":657
 *             return self.mtxInt.trace()
 *         if self.ctype=="float":
 *             return self.mtxFloat.trace()             # <<<<<<<<<<<<<<
 *         if self.ctype=="double":
 *             return self.mtxDouble.trace()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.mtxFloat->trace()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 657, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "miololib.pyx":656
 *         if self.ctype=="int":
 *             return self.mtxInt.trace()
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             return self.mtxFloat.trace()
 *         if self.ctype=="double":
 */
  }

  /* "miololib.pyx":658
 *         if self.ctype=="float":
 *             return self.mtxFloat.trace()
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             return self.mtxDouble.trace()
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 658, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":659
 *             return self.mtxFloat.trace()
 *         if self.ctype=="double":
 *             return self.mtxDouble.trace()             # <<<<<<<<<<<<<<
 * 
 * def dot(Matrix A, Matrix B):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.mtxDouble->trace()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 659, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "miololib.pyx":658
 *         if self.ctype=="float":
 *             return self.mtxFloat.trace()
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             return self.mtxDouble.trace()
 * 
 */
  }

  /* "miololib.pyx":649
 *         return out
 * 
 *     def trace(self):             # <<<<<<<<<<<<<<
 *         """
 *             Sum of the elements with row index equal to column index. This is
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("miolo.Matrix.trace", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_6Matrix_65__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_6Matrix_64__reduce_cython__, "Matrix.__reduce_cython__(self)");
static PyMethodDef __pyx_mdef_5miolo_6Matrix_65__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_6Matrix_65__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_6Matrix_64__reduce_cython__};
static PyObject *__pyx_pw_5miolo_6Matrix_65__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_5miolo_6Matrix_64__reduce_cython__(((struct __pyx_obj_5miolo_Matrix *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_6Matrix_64__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_Matrix *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("miolo.Matrix.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_6Matrix_67__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_6Matrix_66__setstate_cython__, "Matrix.__setstate_cython__(self, __pyx_state)");
static PyMethodDef __pyx_mdef_5miolo_6Matrix_67__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_6Matrix_67__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_6Matrix_66__setstate_cython__};
static PyObject *__pyx_pw_5miolo_6Matrix_67__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(0, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.Matrix.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5miolo_6Matrix_66__setstate_cython__(((struct __pyx_obj_5miolo_Matrix *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_6Matrix_66__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_Matrix *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("miolo.Matrix.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":661
 *             return self.mtxDouble.trace()
 * 
 * def dot(Matrix A, Matrix B):             # <<<<<<<<<<<<<<
 *     """
 *         Frobenius dot product between two matrices.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_1dot(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_dot, "dot(Matrix A, Matrix B)\n\n        Frobenius dot product between two matrices.\n    ");
static PyMethodDef __pyx_mdef_5miolo_1dot = {"dot", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_1dot, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_dot};
static PyObject *__pyx_pw_5miolo_1dot(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_A = 0;
  struct __pyx_obj_5miolo_Matrix *__pyx_v_B = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dot (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_A,&__pyx_n_s_B,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_A)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 661, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_B)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 661, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("dot", 1, 2, 2, 1); __PYX_ERR(1, 661, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "dot") < 0)) __PYX_ERR(1, 661, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_A = ((struct __pyx_obj_5miolo_Matrix *)values[0]);
    __pyx_v_B = ((struct __pyx_obj_5miolo_Matrix *)values[1]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("dot", 1, 2, 2, __pyx_nargs); __PYX_ERR(1, 661, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.dot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_A), __pyx_ptype_5miolo_Matrix, 1, "A", 0))) __PYX_ERR(1, 661, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_B), __pyx_ptype_5miolo_Matrix, 1, "B", 0))) __PYX_ERR(1, 661, __pyx_L1_error)
  __pyx_r = __pyx_pf_5miolo_dot(__pyx_self, __pyx_v_A, __pyx_v_B);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_dot(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_A, struct __pyx_obj_5miolo_Matrix *__pyx_v_B) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("dot", 1);

  /* "miololib.pyx":665
 *         Frobenius dot product between two matrices.
 *     """
 *     if A.ctype!=B.ctype:             # <<<<<<<<<<<<<<
 *         raise TypeError("Matrices must have the same ctype.")
 *     if A.ctype=="int":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_A), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 665, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_B), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 665, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 665, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 665, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(__pyx_t_4)) {

    /* "miololib.pyx":666
 *     """
 *     if A.ctype!=B.ctype:
 *         raise TypeError("Matrices must have the same ctype.")             # <<<<<<<<<<<<<<
 *     if A.ctype=="int":
 *         return A.mtxInt.dot(B.mtxInt)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__30, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 666, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 666, __pyx_L1_error)

    /* "miololib.pyx":665
 *         Frobenius dot product between two matrices.
 *     """
 *     if A.ctype!=B.ctype:             # <<<<<<<<<<<<<<
 *         raise TypeError("Matrices must have the same ctype.")
 *     if A.ctype=="int":
 */
  }

  /* "miololib.pyx":667
 *     if A.ctype!=B.ctype:
 *         raise TypeError("Matrices must have the same ctype.")
 *     if A.ctype=="int":             # <<<<<<<<<<<<<<
 *         return A.mtxInt.dot(B.mtxInt)
 *     if A.ctype=="float":
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_A), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 667, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 667, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_4) {

    /* "miololib.pyx":668
 *         raise TypeError("Matrices must have the same ctype.")
 *     if A.ctype=="int":
 *         return A.mtxInt.dot(B.mtxInt)             # <<<<<<<<<<<<<<
 *     if A.ctype=="float":
 *         return A.mtxFloat.dot(B.mtxFloat)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_A->__pyx_base.mtxInt->dot(__pyx_v_B->__pyx_base.mtxInt)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 668, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "miololib.pyx":667
 *     if A.ctype!=B.ctype:
 *         raise TypeError("Matrices must have the same ctype.")
 *     if A.ctype=="int":             # <<<<<<<<<<<<<<
 *         return A.mtxInt.dot(B.mtxInt)
 *     if A.ctype=="float":
 */
  }

  /* "miololib.pyx":669
 *     if A.ctype=="int":
 *         return A.mtxInt.dot(B.mtxInt)
 *     if A.ctype=="float":             # <<<<<<<<<<<<<<
 *         return A.mtxFloat.dot(B.mtxFloat)
 *     if A.ctype=="double":
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_A), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 669, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 669, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_4) {

    /* "miololib.pyx":670
 *         return A.mtxInt.dot(B.mtxInt)
 *     if A.ctype=="float":
 *         return A.mtxFloat.dot(B.mtxFloat)             # <<<<<<<<<<<<<<
 *     if A.ctype=="double":
 *         return A.mtxDouble.dot(B.mtxDouble)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = PyFloat_FromDouble(__pyx_v_A->__pyx_base.mtxFloat->dot(__pyx_v_B->__pyx_base.mtxFloat)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 670, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "miololib.pyx":669
 *     if A.ctype=="int":
 *         return A.mtxInt.dot(B.mtxInt)
 *     if A.ctype=="float":             # <<<<<<<<<<<<<<
 *         return A.mtxFloat.dot(B.mtxFloat)
 *     if A.ctype=="double":
 */
  }

  /* "miololib.pyx":671
 *     if A.ctype=="float":
 *         return A.mtxFloat.dot(B.mtxFloat)
 *     if A.ctype=="double":             # <<<<<<<<<<<<<<
 *         return A.mtxDouble.dot(B.mtxDouble)
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_A), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 671, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 671, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_4) {

    /* "miololib.pyx":672
 *         return A.mtxFloat.dot(B.mtxFloat)
 *     if A.ctype=="double":
 *         return A.mtxDouble.dot(B.mtxDouble)             # <<<<<<<<<<<<<<
 * 
 * def concat(Matrix A, Matrix B):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = PyFloat_FromDouble(__pyx_v_A->__pyx_base.mtxDouble->dot(__pyx_v_B->__pyx_base.mtxDouble)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 672, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "miololib.pyx":671
 *     if A.ctype=="float":
 *         return A.mtxFloat.dot(B.mtxFloat)
 *     if A.ctype=="double":             # <<<<<<<<<<<<<<
 *         return A.mtxDouble.dot(B.mtxDouble)
 * 
 */
  }

  /* "miololib.pyx":661
 *             return self.mtxDouble.trace()
 * 
 * def dot(Matrix A, Matrix B):             # <<<<<<<<<<<<<<
 *     """
 *         Frobenius dot product between two matrices.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("miolo.dot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":674
 *         return A.mtxDouble.dot(B.mtxDouble)
 * 
 * def concat(Matrix A, Matrix B):             # <<<<<<<<<<<<<<
 *     """
 *         Concatenates A and B if both have same number of columns and share same
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_3concat(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_2concat, "concat(Matrix A, Matrix B)\n\n        Concatenates A and B if both have same number of columns and share same\n        ctype. Rowise concatenation is performed.\n    ");
static PyMethodDef __pyx_mdef_5miolo_3concat = {"concat", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_3concat, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_2concat};
static PyObject *__pyx_pw_5miolo_3concat(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_A = 0;
  struct __pyx_obj_5miolo_Matrix *__pyx_v_B = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("concat (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_A,&__pyx_n_s_B,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_A)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 674, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_B)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 674, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("concat", 1, 2, 2, 1); __PYX_ERR(1, 674, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "concat") < 0)) __PYX_ERR(1, 674, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_A = ((struct __pyx_obj_5miolo_Matrix *)values[0]);
    __pyx_v_B = ((struct __pyx_obj_5miolo_Matrix *)values[1]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("concat", 1, 2, 2, __pyx_nargs); __PYX_ERR(1, 674, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.concat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_A), __pyx_ptype_5miolo_Matrix, 1, "A", 0))) __PYX_ERR(1, 674, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_B), __pyx_ptype_5miolo_Matrix, 1, "B", 0))) __PYX_ERR(1, 674, __pyx_L1_error)
  __pyx_r = __pyx_pf_5miolo_2concat(__pyx_self, __pyx_v_A, __pyx_v_B);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_2concat(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_A, struct __pyx_obj_5miolo_Matrix *__pyx_v_B) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("concat", 1);

  /* "miololib.pyx":679
 *         ctype. Rowise concatenation is performed.
 *     """
 *     if A.ctype!=B.ctype:             # <<<<<<<<<<<<<<
 *         raise TypeError("A and B must have same ctype.")
 *     if A.cols!=B.cols:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_A), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 679, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_B), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 679, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 679, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 679, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(__pyx_t_4)) {

    /* "miololib.pyx":680
 *     """
 *     if A.ctype!=B.ctype:
 *         raise TypeError("A and B must have same ctype.")             # <<<<<<<<<<<<<<
 *     if A.cols!=B.cols:
 *         raise Exception("A and B must have same number of columns.")
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__31, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 680, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 680, __pyx_L1_error)

    /* "miololib.pyx":679
 *         ctype. Rowise concatenation is performed.
 *     """
 *     if A.ctype!=B.ctype:             # <<<<<<<<<<<<<<
 *         raise TypeError("A and B must have same ctype.")
 *     if A.cols!=B.cols:
 */
  }

  /* "miololib.pyx":681
 *     if A.ctype!=B.ctype:
 *         raise TypeError("A and B must have same ctype.")
 *     if A.cols!=B.cols:             # <<<<<<<<<<<<<<
 *         raise Exception("A and B must have same number of columns.")
 *     if A.null:
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_A), __pyx_n_s_cols); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 681, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_B), __pyx_n_s_cols); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 681, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_3, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 681, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 681, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(__pyx_t_4)) {

    /* "miololib.pyx":682
 *         raise TypeError("A and B must have same ctype.")
 *     if A.cols!=B.cols:
 *         raise Exception("A and B must have same number of columns.")             # <<<<<<<<<<<<<<
 *     if A.null:
 *         return B
 */
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__32, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 682, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 682, __pyx_L1_error)

    /* "miololib.pyx":681
 *     if A.ctype!=B.ctype:
 *         raise TypeError("A and B must have same ctype.")
 *     if A.cols!=B.cols:             # <<<<<<<<<<<<<<
 *         raise Exception("A and B must have same number of columns.")
 *     if A.null:
 */
  }

  /* "miololib.pyx":683
 *     if A.cols!=B.cols:
 *         raise Exception("A and B must have same number of columns.")
 *     if A.null:             # <<<<<<<<<<<<<<
 *         return B
 *     if B.null:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_A), __pyx_n_s_null); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 683, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 683, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "miololib.pyx":684
 *         raise Exception("A and B must have same number of columns.")
 *     if A.null:
 *         return B             # <<<<<<<<<<<<<<
 *     if B.null:
 *         return A
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_B);
    __pyx_r = ((PyObject *)__pyx_v_B);
    goto __pyx_L0;

    /* "miololib.pyx":683
 *     if A.cols!=B.cols:
 *         raise Exception("A and B must have same number of columns.")
 *     if A.null:             # <<<<<<<<<<<<<<
 *         return B
 *     if B.null:
 */
  }

  /* "miololib.pyx":685
 *     if A.null:
 *         return B
 *     if B.null:             # <<<<<<<<<<<<<<
 *         return A
 *     out = Matrix(ctype=A.ctype)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_B), __pyx_n_s_null); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 685, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 685, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "miololib.pyx":686
 *         return B
 *     if B.null:
 *         return A             # <<<<<<<<<<<<<<
 *     out = Matrix(ctype=A.ctype)
 *     if out.ctype=="int":
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_A);
    __pyx_r = ((PyObject *)__pyx_v_A);
    goto __pyx_L0;

    /* "miololib.pyx":685
 *     if A.null:
 *         return B
 *     if B.null:             # <<<<<<<<<<<<<<
 *         return A
 *     out = Matrix(ctype=A.ctype)
 */
  }

  /* "miololib.pyx":687
 *     if B.null:
 *         return A
 *     out = Matrix(ctype=A.ctype)             # <<<<<<<<<<<<<<
 *     if out.ctype=="int":
 *         out.mtxInt = mld.concat(drf(A.mtxInt),drf(B.mtxInt))
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 687, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_A), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 687, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ctype, __pyx_t_2) < 0) __PYX_ERR(1, 687, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Matrix), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 687, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_out = ((struct __pyx_obj_5miolo_Matrix *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "miololib.pyx":688
 *         return A
 *     out = Matrix(ctype=A.ctype)
 *     if out.ctype=="int":             # <<<<<<<<<<<<<<
 *         out.mtxInt = mld.concat(drf(A.mtxInt),drf(B.mtxInt))
 *     if out.ctype=="float":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 688, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 688, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "miololib.pyx":689
 *     out = Matrix(ctype=A.ctype)
 *     if out.ctype=="int":
 *         out.mtxInt = mld.concat(drf(A.mtxInt),drf(B.mtxInt))             # <<<<<<<<<<<<<<
 *     if out.ctype=="float":
 *         out.mtxFloat = mld.concat(drf(A.mtxFloat),drf(B.mtxFloat))
 */
    __pyx_v_out->__pyx_base.mtxInt = concat<int>((*__pyx_v_A->__pyx_base.mtxInt), (*__pyx_v_B->__pyx_base.mtxInt));

    /* "miololib.pyx":688
 *         return A
 *     out = Matrix(ctype=A.ctype)
 *     if out.ctype=="int":             # <<<<<<<<<<<<<<
 *         out.mtxInt = mld.concat(drf(A.mtxInt),drf(B.mtxInt))
 *     if out.ctype=="float":
 */
  }

  /* "miololib.pyx":690
 *     if out.ctype=="int":
 *         out.mtxInt = mld.concat(drf(A.mtxInt),drf(B.mtxInt))
 *     if out.ctype=="float":             # <<<<<<<<<<<<<<
 *         out.mtxFloat = mld.concat(drf(A.mtxFloat),drf(B.mtxFloat))
 *     if out.ctype=="double":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 690, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 690, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "miololib.pyx":691
 *         out.mtxInt = mld.concat(drf(A.mtxInt),drf(B.mtxInt))
 *     if out.ctype=="float":
 *         out.mtxFloat = mld.concat(drf(A.mtxFloat),drf(B.mtxFloat))             # <<<<<<<<<<<<<<
 *     if out.ctype=="double":
 *         out.mtxDouble = mld.concat(drf(A.mtxDouble),drf(B.mtxDouble))
 */
    __pyx_v_out->__pyx_base.mtxFloat = concat<float>((*__pyx_v_A->__pyx_base.mtxFloat), (*__pyx_v_B->__pyx_base.mtxFloat));

    /* "miololib.pyx":690
 *     if out.ctype=="int":
 *         out.mtxInt = mld.concat(drf(A.mtxInt),drf(B.mtxInt))
 *     if out.ctype=="float":             # <<<<<<<<<<<<<<
 *         out.mtxFloat = mld.concat(drf(A.mtxFloat),drf(B.mtxFloat))
 *     if out.ctype=="double":
 */
  }

  /* "miololib.pyx":692
 *     if out.ctype=="float":
 *         out.mtxFloat = mld.concat(drf(A.mtxFloat),drf(B.mtxFloat))
 *     if out.ctype=="double":             # <<<<<<<<<<<<<<
 *         out.mtxDouble = mld.concat(drf(A.mtxDouble),drf(B.mtxDouble))
 *     return out
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 692, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 692, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "miololib.pyx":693
 *         out.mtxFloat = mld.concat(drf(A.mtxFloat),drf(B.mtxFloat))
 *     if out.ctype=="double":
 *         out.mtxDouble = mld.concat(drf(A.mtxDouble),drf(B.mtxDouble))             # <<<<<<<<<<<<<<
 *     return out
 * 
 */
    __pyx_v_out->__pyx_base.mtxDouble = concat<double>((*__pyx_v_A->__pyx_base.mtxDouble), (*__pyx_v_B->__pyx_base.mtxDouble));

    /* "miololib.pyx":692
 *     if out.ctype=="float":
 *         out.mtxFloat = mld.concat(drf(A.mtxFloat),drf(B.mtxFloat))
 *     if out.ctype=="double":             # <<<<<<<<<<<<<<
 *         out.mtxDouble = mld.concat(drf(A.mtxDouble),drf(B.mtxDouble))
 *     return out
 */
  }

  /* "miololib.pyx":694
 *     if out.ctype=="double":
 *         out.mtxDouble = mld.concat(drf(A.mtxDouble),drf(B.mtxDouble))
 *     return out             # <<<<<<<<<<<<<<
 * 
 * #-------------------------------------------------------------------------------
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_out);
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "miololib.pyx":674
 *         return A.mtxDouble.dot(B.mtxDouble)
 * 
 * def concat(Matrix A, Matrix B):             # <<<<<<<<<<<<<<
 *     """
 *         Concatenates A and B if both have same number of columns and share same
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("miolo.concat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":720
 *     cdef object cType
 * 
 *     def __cinit__(self, unsigned long nodes=0, unsigned long edges=0,             # <<<<<<<<<<<<<<
 *         ctype=global_ctype):
 *         if ctype in ctypes:
 */

/* Python wrapper */
static int __pyx_pw_5miolo_5Graph_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5miolo_5Graph_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  unsigned long __pyx_v_nodes;
  unsigned long __pyx_v_edges;
  PyObject *__pyx_v_ctype = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_nodes,&__pyx_n_s_edges,&__pyx_n_s_ctype,0};
    values[2] = __Pyx_Arg_NewRef_VARARGS(__pyx_k__33);
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_nodes);
          if (value) { values[0] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 720, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_edges);
          if (value) { values[1] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 720, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_ctype);
          if (value) { values[2] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 720, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__cinit__") < 0)) __PYX_ERR(1, 720, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_nodes = __Pyx_PyInt_As_unsigned_long(values[0]); if (unlikely((__pyx_v_nodes == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(1, 720, __pyx_L3_error)
    } else {
      __pyx_v_nodes = ((unsigned long)0);
    }
    if (values[1]) {
      __pyx_v_edges = __Pyx_PyInt_As_unsigned_long(values[1]); if (unlikely((__pyx_v_edges == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(1, 720, __pyx_L3_error)
    } else {
      __pyx_v_edges = ((unsigned long)0);
    }
    __pyx_v_ctype = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 3, __pyx_nargs); __PYX_ERR(1, 720, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.Graph.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5miolo_5Graph___cinit__(((struct __pyx_obj_5miolo_Graph *)__pyx_v_self), __pyx_v_nodes, __pyx_v_edges, __pyx_v_ctype);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5miolo_5Graph___cinit__(struct __pyx_obj_5miolo_Graph *__pyx_v_self, unsigned long __pyx_v_nodes, unsigned long __pyx_v_edges, PyObject *__pyx_v_ctype) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 1);

  /* "miololib.pyx":722
 *     def __cinit__(self, unsigned long nodes=0, unsigned long edges=0,
 *         ctype=global_ctype):
 *         if ctype in ctypes:             # <<<<<<<<<<<<<<
 *             self.cType = ctype
 *             if nodes>0 and edges>0:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_ctypes); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 722, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_v_ctype, __pyx_t_1, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 722, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(__pyx_t_2)) {

    /* "miololib.pyx":723
 *         ctype=global_ctype):
 *         if ctype in ctypes:
 *             self.cType = ctype             # <<<<<<<<<<<<<<
 *             if nodes>0 and edges>0:
 *                 if ctype=="int":
 */
    __Pyx_INCREF(__pyx_v_ctype);
    __Pyx_GIVEREF(__pyx_v_ctype);
    __Pyx_GOTREF(__pyx_v_self->cType);
    __Pyx_DECREF(__pyx_v_self->cType);
    __pyx_v_self->cType = __pyx_v_ctype;

    /* "miololib.pyx":724
 *         if ctype in ctypes:
 *             self.cType = ctype
 *             if nodes>0 and edges>0:             # <<<<<<<<<<<<<<
 *                 if ctype=="int":
 *                     self.graphInt = new mld.graph[int](nodes,edges,1)
 */
    __pyx_t_3 = (__pyx_v_nodes > 0);
    if (__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_3 = (__pyx_v_edges > 0);
    __pyx_t_2 = __pyx_t_3;
    __pyx_L5_bool_binop_done:;
    if (__pyx_t_2) {

      /* "miololib.pyx":725
 *             self.cType = ctype
 *             if nodes>0 and edges>0:
 *                 if ctype=="int":             # <<<<<<<<<<<<<<
 *                     self.graphInt = new mld.graph[int](nodes,edges,1)
 *                 if ctype=="float":
 */
      __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_ctype, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 725, __pyx_L1_error)
      if (__pyx_t_2) {

        /* "miololib.pyx":726
 *             if nodes>0 and edges>0:
 *                 if ctype=="int":
 *                     self.graphInt = new mld.graph[int](nodes,edges,1)             # <<<<<<<<<<<<<<
 *                 if ctype=="float":
 *                     self.graphFloat = new mld.graph[float](nodes,edges,1)
 */
        __pyx_v_self->__pyx_base.graphInt = new graph<int> (__pyx_v_nodes, __pyx_v_edges, 1);

        /* "miololib.pyx":725
 *             self.cType = ctype
 *             if nodes>0 and edges>0:
 *                 if ctype=="int":             # <<<<<<<<<<<<<<
 *                     self.graphInt = new mld.graph[int](nodes,edges,1)
 *                 if ctype=="float":
 */
      }

      /* "miololib.pyx":727
 *                 if ctype=="int":
 *                     self.graphInt = new mld.graph[int](nodes,edges,1)
 *                 if ctype=="float":             # <<<<<<<<<<<<<<
 *                     self.graphFloat = new mld.graph[float](nodes,edges,1)
 *                 if ctype=="double":
 */
      __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_ctype, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 727, __pyx_L1_error)
      if (__pyx_t_2) {

        /* "miololib.pyx":728
 *                     self.graphInt = new mld.graph[int](nodes,edges,1)
 *                 if ctype=="float":
 *                     self.graphFloat = new mld.graph[float](nodes,edges,1)             # <<<<<<<<<<<<<<
 *                 if ctype=="double":
 *                     self.graphDouble = new mld.graph[double](nodes,edges,1)
 */
        __pyx_v_self->__pyx_base.graphFloat = new graph<float> (__pyx_v_nodes, __pyx_v_edges, 1.0);

        /* "miololib.pyx":727
 *                 if ctype=="int":
 *                     self.graphInt = new mld.graph[int](nodes,edges,1)
 *                 if ctype=="float":             # <<<<<<<<<<<<<<
 *                     self.graphFloat = new mld.graph[float](nodes,edges,1)
 *                 if ctype=="double":
 */
      }

      /* "miololib.pyx":729
 *                 if ctype=="float":
 *                     self.graphFloat = new mld.graph[float](nodes,edges,1)
 *                 if ctype=="double":             # <<<<<<<<<<<<<<
 *                     self.graphDouble = new mld.graph[double](nodes,edges,1)
 *             else:
 */
      __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_ctype, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 729, __pyx_L1_error)
      if (__pyx_t_2) {

        /* "miololib.pyx":730
 *                     self.graphFloat = new mld.graph[float](nodes,edges,1)
 *                 if ctype=="double":
 *                     self.graphDouble = new mld.graph[double](nodes,edges,1)             # <<<<<<<<<<<<<<
 *             else:
 *                 if ctype=="int":
 */
        __pyx_v_self->__pyx_base.graphDouble = new graph<double> (__pyx_v_nodes, __pyx_v_edges, 1.0);

        /* "miololib.pyx":729
 *                 if ctype=="float":
 *                     self.graphFloat = new mld.graph[float](nodes,edges,1)
 *                 if ctype=="double":             # <<<<<<<<<<<<<<
 *                     self.graphDouble = new mld.graph[double](nodes,edges,1)
 *             else:
 */
      }

      /* "miololib.pyx":724
 *         if ctype in ctypes:
 *             self.cType = ctype
 *             if nodes>0 and edges>0:             # <<<<<<<<<<<<<<
 *                 if ctype=="int":
 *                     self.graphInt = new mld.graph[int](nodes,edges,1)
 */
      goto __pyx_L4;
    }

    /* "miololib.pyx":732
 *                     self.graphDouble = new mld.graph[double](nodes,edges,1)
 *             else:
 *                 if ctype=="int":             # <<<<<<<<<<<<<<
 *                     self.graphInt = NULL
 *                 if ctype=="float":
 */
    /*else*/ {
      __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_ctype, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 732, __pyx_L1_error)
      if (__pyx_t_2) {

        /* "miololib.pyx":733
 *             else:
 *                 if ctype=="int":
 *                     self.graphInt = NULL             # <<<<<<<<<<<<<<
 *                 if ctype=="float":
 *                     self.graphFloat = NULL
 */
        __pyx_v_self->__pyx_base.graphInt = NULL;

        /* "miololib.pyx":732
 *                     self.graphDouble = new mld.graph[double](nodes,edges,1)
 *             else:
 *                 if ctype=="int":             # <<<<<<<<<<<<<<
 *                     self.graphInt = NULL
 *                 if ctype=="float":
 */
      }

      /* "miololib.pyx":734
 *                 if ctype=="int":
 *                     self.graphInt = NULL
 *                 if ctype=="float":             # <<<<<<<<<<<<<<
 *                     self.graphFloat = NULL
 *                 if ctype=="double":
 */
      __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_ctype, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 734, __pyx_L1_error)
      if (__pyx_t_2) {

        /* "miololib.pyx":735
 *                     self.graphInt = NULL
 *                 if ctype=="float":
 *                     self.graphFloat = NULL             # <<<<<<<<<<<<<<
 *                 if ctype=="double":
 *                     self.graphDouble = NULL
 */
        __pyx_v_self->__pyx_base.graphFloat = NULL;

        /* "miololib.pyx":734
 *                 if ctype=="int":
 *                     self.graphInt = NULL
 *                 if ctype=="float":             # <<<<<<<<<<<<<<
 *                     self.graphFloat = NULL
 *                 if ctype=="double":
 */
      }

      /* "miololib.pyx":736
 *                 if ctype=="float":
 *                     self.graphFloat = NULL
 *                 if ctype=="double":             # <<<<<<<<<<<<<<
 *                     self.graphDouble = NULL
 *         else:
 */
      __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_ctype, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 736, __pyx_L1_error)
      if (__pyx_t_2) {

        /* "miololib.pyx":737
 *                     self.graphFloat = NULL
 *                 if ctype=="double":
 *                     self.graphDouble = NULL             # <<<<<<<<<<<<<<
 *         else:
 *             raise Exception("Unknown ctype.")
 */
        __pyx_v_self->__pyx_base.graphDouble = NULL;

        /* "miololib.pyx":736
 *                 if ctype=="float":
 *                     self.graphFloat = NULL
 *                 if ctype=="double":             # <<<<<<<<<<<<<<
 *                     self.graphDouble = NULL
 *         else:
 */
      }
    }
    __pyx_L4:;

    /* "miololib.pyx":722
 *     def __cinit__(self, unsigned long nodes=0, unsigned long edges=0,
 *         ctype=global_ctype):
 *         if ctype in ctypes:             # <<<<<<<<<<<<<<
 *             self.cType = ctype
 *             if nodes>0 and edges>0:
 */
    goto __pyx_L3;
  }

  /* "miololib.pyx":739
 *                     self.graphDouble = NULL
 *         else:
 *             raise Exception("Unknown ctype.")             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 739, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 739, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "miololib.pyx":720
 *     cdef object cType
 * 
 *     def __cinit__(self, unsigned long nodes=0, unsigned long edges=0,             # <<<<<<<<<<<<<<
 *         ctype=global_ctype):
 *         if ctype in ctypes:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("miolo.Graph.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":741
 *             raise Exception("Unknown ctype.")
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.ctype=="int":
 *             del self.graphInt
 */

/* Python wrapper */
static void __pyx_pw_5miolo_5Graph_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_5miolo_5Graph_3__dealloc__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_pf_5miolo_5Graph_2__dealloc__(((struct __pyx_obj_5miolo_Graph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5miolo_5Graph_2__dealloc__(struct __pyx_obj_5miolo_Graph *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__dealloc__", 1);

  /* "miololib.pyx":742
 * 
 *     def __dealloc__(self):
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             del self.graphInt
 *         if self.ctype=="float":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 742, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 742, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":743
 *     def __dealloc__(self):
 *         if self.ctype=="int":
 *             del self.graphInt             # <<<<<<<<<<<<<<
 *         if self.ctype=="float":
 *             del self.graphFloat
 */
    delete __pyx_v_self->__pyx_base.graphInt;

    /* "miololib.pyx":742
 * 
 *     def __dealloc__(self):
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             del self.graphInt
 *         if self.ctype=="float":
 */
  }

  /* "miololib.pyx":744
 *         if self.ctype=="int":
 *             del self.graphInt
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             del self.graphFloat
 *         if self.ctype=="double":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 744, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 744, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":745
 *             del self.graphInt
 *         if self.ctype=="float":
 *             del self.graphFloat             # <<<<<<<<<<<<<<
 *         if self.ctype=="double":
 *             del self.graphDouble
 */
    delete __pyx_v_self->__pyx_base.graphFloat;

    /* "miololib.pyx":744
 *         if self.ctype=="int":
 *             del self.graphInt
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             del self.graphFloat
 *         if self.ctype=="double":
 */
  }

  /* "miololib.pyx":746
 *         if self.ctype=="float":
 *             del self.graphFloat
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             del self.graphDouble
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 746, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 746, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":747
 *             del self.graphFloat
 *         if self.ctype=="double":
 *             del self.graphDouble             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
    delete __pyx_v_self->__pyx_base.graphDouble;

    /* "miololib.pyx":746
 *         if self.ctype=="float":
 *             del self.graphFloat
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             del self.graphDouble
 * 
 */
  }

  /* "miololib.pyx":741
 *             raise Exception("Unknown ctype.")
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.ctype=="int":
 *             del self.graphInt
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_WriteUnraisable("miolo.Graph.__dealloc__", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "miololib.pyx":749
 *             del self.graphDouble
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def ctype(self):
 *         return str(self.cType)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_5Graph_5ctype_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5miolo_5Graph_5ctype_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5miolo_5Graph_5ctype___get__(((struct __pyx_obj_5miolo_Graph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_5Graph_5ctype___get__(struct __pyx_obj_5miolo_Graph *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "miololib.pyx":751
 *     @property
 *     def ctype(self):
 *         return str(self.cType)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Str(__pyx_v_self->cType); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 751, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "miololib.pyx":749
 *             del self.graphDouble
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def ctype(self):
 *         return str(self.cType)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("miolo.Graph.ctype.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":753
 *         return str(self.cType)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def null(self):
 *         if self.ctype=="int":
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_5Graph_4null_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5miolo_5Graph_4null_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5miolo_5Graph_4null___get__(((struct __pyx_obj_5miolo_Graph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_5Graph_4null___get__(struct __pyx_obj_5miolo_Graph *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "miololib.pyx":755
 *     @property
 *     def null(self):
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             return self.graphInt.null()
 *         if self.ctype=="float":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 755, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 755, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":756
 *     def null(self):
 *         if self.ctype=="int":
 *             return self.graphInt.null()             # <<<<<<<<<<<<<<
 *         if self.ctype=="float":
 *             return self.graphFloat.null()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->__pyx_base.graphInt->null()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 756, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "miololib.pyx":755
 *     @property
 *     def null(self):
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             return self.graphInt.null()
 *         if self.ctype=="float":
 */
  }

  /* "miololib.pyx":757
 *         if self.ctype=="int":
 *             return self.graphInt.null()
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             return self.graphFloat.null()
 *         if self.ctype=="double":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 757, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 757, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":758
 *             return self.graphInt.null()
 *         if self.ctype=="float":
 *             return self.graphFloat.null()             # <<<<<<<<<<<<<<
 *         if self.ctype=="double":
 *             return self.graphDouble.null()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->__pyx_base.graphFloat->null()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 758, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "miololib.pyx":757
 *         if self.ctype=="int":
 *             return self.graphInt.null()
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             return self.graphFloat.null()
 *         if self.ctype=="double":
 */
  }

  /* "miololib.pyx":759
 *         if self.ctype=="float":
 *             return self.graphFloat.null()
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             return self.graphDouble.null()
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 759, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 759, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":760
 *             return self.graphFloat.null()
 *         if self.ctype=="double":
 *             return self.graphDouble.null()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->__pyx_base.graphDouble->null()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 760, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "miololib.pyx":759
 *         if self.ctype=="float":
 *             return self.graphFloat.null()
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             return self.graphDouble.null()
 * 
 */
  }

  /* "miololib.pyx":753
 *         return str(self.cType)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def null(self):
 *         if self.ctype=="int":
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("miolo.Graph.null.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":762
 *             return self.graphDouble.null()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def nodes(self):
 *         if self.ctype=="int":
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_5Graph_5nodes_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5miolo_5Graph_5nodes_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5miolo_5Graph_5nodes___get__(((struct __pyx_obj_5miolo_Graph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_5Graph_5nodes___get__(struct __pyx_obj_5miolo_Graph *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "miololib.pyx":764
 *     @property
 *     def nodes(self):
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             return self.graphInt.nodes
 *         if self.ctype=="float":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 764, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 764, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":765
 *     def nodes(self):
 *         if self.ctype=="int":
 *             return self.graphInt.nodes             # <<<<<<<<<<<<<<
 *         if self.ctype=="float":
 *             return self.graphFloat.nodes
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_From_unsigned_long(__pyx_v_self->__pyx_base.graphInt->nodes); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 765, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "miololib.pyx":764
 *     @property
 *     def nodes(self):
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             return self.graphInt.nodes
 *         if self.ctype=="float":
 */
  }

  /* "miololib.pyx":766
 *         if self.ctype=="int":
 *             return self.graphInt.nodes
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             return self.graphFloat.nodes
 *         if self.ctype=="double":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 766, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 766, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":767
 *             return self.graphInt.nodes
 *         if self.ctype=="float":
 *             return self.graphFloat.nodes             # <<<<<<<<<<<<<<
 *         if self.ctype=="double":
 *             return self.graphDouble.nodes
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_From_unsigned_long(__pyx_v_self->__pyx_base.graphFloat->nodes); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 767, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "miololib.pyx":766
 *         if self.ctype=="int":
 *             return self.graphInt.nodes
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             return self.graphFloat.nodes
 *         if self.ctype=="double":
 */
  }

  /* "miololib.pyx":768
 *         if self.ctype=="float":
 *             return self.graphFloat.nodes
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             return self.graphDouble.nodes
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 768, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 768, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":769
 *             return self.graphFloat.nodes
 *         if self.ctype=="double":
 *             return self.graphDouble.nodes             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_From_unsigned_long(__pyx_v_self->__pyx_base.graphDouble->nodes); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 769, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "miololib.pyx":768
 *         if self.ctype=="float":
 *             return self.graphFloat.nodes
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             return self.graphDouble.nodes
 * 
 */
  }

  /* "miololib.pyx":762
 *             return self.graphDouble.null()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def nodes(self):
 *         if self.ctype=="int":
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("miolo.Graph.nodes.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":771
 *             return self.graphDouble.nodes
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def edges(self):
 *         if self.ctype=="int":
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_5Graph_5edges_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5miolo_5Graph_5edges_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5miolo_5Graph_5edges___get__(((struct __pyx_obj_5miolo_Graph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_5Graph_5edges___get__(struct __pyx_obj_5miolo_Graph *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "miololib.pyx":773
 *     @property
 *     def edges(self):
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             return self.graphInt.edges
 *         if self.ctype=="float":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 773, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 773, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":774
 *     def edges(self):
 *         if self.ctype=="int":
 *             return self.graphInt.edges             # <<<<<<<<<<<<<<
 *         if self.ctype=="float":
 *             return self.graphFloat.edges
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_From_unsigned_long(__pyx_v_self->__pyx_base.graphInt->edges); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 774, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "miololib.pyx":773
 *     @property
 *     def edges(self):
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             return self.graphInt.edges
 *         if self.ctype=="float":
 */
  }

  /* "miololib.pyx":775
 *         if self.ctype=="int":
 *             return self.graphInt.edges
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             return self.graphFloat.edges
 *         if self.ctype=="double":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 775, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 775, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":776
 *             return self.graphInt.edges
 *         if self.ctype=="float":
 *             return self.graphFloat.edges             # <<<<<<<<<<<<<<
 *         if self.ctype=="double":
 *             return self.graphDouble.edges
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_From_unsigned_long(__pyx_v_self->__pyx_base.graphFloat->edges); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 776, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "miololib.pyx":775
 *         if self.ctype=="int":
 *             return self.graphInt.edges
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             return self.graphFloat.edges
 *         if self.ctype=="double":
 */
  }

  /* "miololib.pyx":777
 *         if self.ctype=="float":
 *             return self.graphFloat.edges
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             return self.graphDouble.edges
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 777, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 777, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":778
 *             return self.graphFloat.edges
 *         if self.ctype=="double":
 *             return self.graphDouble.edges             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_From_unsigned_long(__pyx_v_self->__pyx_base.graphDouble->edges); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 778, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "miololib.pyx":777
 *         if self.ctype=="float":
 *             return self.graphFloat.edges
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             return self.graphDouble.edges
 * 
 */
  }

  /* "miololib.pyx":771
 *             return self.graphDouble.nodes
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def edges(self):
 *         if self.ctype=="int":
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("miolo.Graph.edges.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":780
 *             return self.graphDouble.edges
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def structure(self):
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_5Graph_9structure_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5miolo_5Graph_9structure_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5miolo_5Graph_9structure___get__(((struct __pyx_obj_5miolo_Graph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_5Graph_9structure___get__(struct __pyx_obj_5miolo_Graph *__pyx_v_self) {
  unsigned long __pyx_v_k;
  PyObject *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  unsigned long __pyx_t_8;
  unsigned long __pyx_t_9;
  unsigned long __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "miololib.pyx":787
 *         """
 *         cdef unsigned long k
 *         out = np.empty((self.edges,2),np.ulong)             # <<<<<<<<<<<<<<
 *         if self.ctype == "int":
 *             for k in range(self.graphInt.edges):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 787, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 787, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_edges); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 787, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 787, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_2);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2)) __PYX_ERR(1, 787, __pyx_L1_error);
  __Pyx_INCREF(__pyx_int_2);
  __Pyx_GIVEREF(__pyx_int_2);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_int_2)) __PYX_ERR(1, 787, __pyx_L1_error);
  __pyx_t_2 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 787, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_ulong); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 787, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_6 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_6 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_2, __pyx_t_4, __pyx_t_5};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_6, 2+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 787, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_v_out = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "miololib.pyx":788
 *         cdef unsigned long k
 *         out = np.empty((self.edges,2),np.ulong)
 *         if self.ctype == "int":             # <<<<<<<<<<<<<<
 *             for k in range(self.graphInt.edges):
 *                 out[k][0] = self.graphInt.e[k].i
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 788, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(1, 788, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_7) {

    /* "miololib.pyx":789
 *         out = np.empty((self.edges,2),np.ulong)
 *         if self.ctype == "int":
 *             for k in range(self.graphInt.edges):             # <<<<<<<<<<<<<<
 *                 out[k][0] = self.graphInt.e[k].i
 *                 out[k][1] = self.graphInt.e[k].j
 */
    __pyx_t_8 = __pyx_v_self->__pyx_base.graphInt->edges;
    __pyx_t_9 = __pyx_t_8;
    for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
      __pyx_v_k = __pyx_t_10;

      /* "miololib.pyx":790
 *         if self.ctype == "int":
 *             for k in range(self.graphInt.edges):
 *                 out[k][0] = self.graphInt.e[k].i             # <<<<<<<<<<<<<<
 *                 out[k][1] = self.graphInt.e[k].j
 *         if self.ctype == "float":
 */
      __pyx_t_1 = __Pyx_PyInt_From_unsigned_long((__pyx_v_self->__pyx_base.graphInt->e[__pyx_v_k]).i); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 790, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_out, __pyx_v_k, unsigned long, 0, __Pyx_PyInt_From_unsigned_long, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 790, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (unlikely((__Pyx_SetItemInt(__pyx_t_3, 0, __pyx_t_1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0) < 0))) __PYX_ERR(1, 790, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "miololib.pyx":791
 *             for k in range(self.graphInt.edges):
 *                 out[k][0] = self.graphInt.e[k].i
 *                 out[k][1] = self.graphInt.e[k].j             # <<<<<<<<<<<<<<
 *         if self.ctype == "float":
 *             for k in range(self.graphFloat.edges):
 */
      __pyx_t_1 = __Pyx_PyInt_From_unsigned_long((__pyx_v_self->__pyx_base.graphInt->e[__pyx_v_k]).j); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 791, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_out, __pyx_v_k, unsigned long, 0, __Pyx_PyInt_From_unsigned_long, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 791, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (unlikely((__Pyx_SetItemInt(__pyx_t_3, 1, __pyx_t_1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0) < 0))) __PYX_ERR(1, 791, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }

    /* "miololib.pyx":788
 *         cdef unsigned long k
 *         out = np.empty((self.edges,2),np.ulong)
 *         if self.ctype == "int":             # <<<<<<<<<<<<<<
 *             for k in range(self.graphInt.edges):
 *                 out[k][0] = self.graphInt.e[k].i
 */
  }

  /* "miololib.pyx":792
 *                 out[k][0] = self.graphInt.e[k].i
 *                 out[k][1] = self.graphInt.e[k].j
 *         if self.ctype == "float":             # <<<<<<<<<<<<<<
 *             for k in range(self.graphFloat.edges):
 *                 out[k][0] = self.graphFloat.e[k].i
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 792, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(1, 792, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_7) {

    /* "miololib.pyx":793
 *                 out[k][1] = self.graphInt.e[k].j
 *         if self.ctype == "float":
 *             for k in range(self.graphFloat.edges):             # <<<<<<<<<<<<<<
 *                 out[k][0] = self.graphFloat.e[k].i
 *                 out[k][1] = self.graphFloat.e[k].j
 */
    __pyx_t_8 = __pyx_v_self->__pyx_base.graphFloat->edges;
    __pyx_t_9 = __pyx_t_8;
    for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
      __pyx_v_k = __pyx_t_10;

      /* "miololib.pyx":794
 *         if self.ctype == "float":
 *             for k in range(self.graphFloat.edges):
 *                 out[k][0] = self.graphFloat.e[k].i             # <<<<<<<<<<<<<<
 *                 out[k][1] = self.graphFloat.e[k].j
 *         if self.ctype == "double":
 */
      __pyx_t_1 = __Pyx_PyInt_From_unsigned_long((__pyx_v_self->__pyx_base.graphFloat->e[__pyx_v_k]).i); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 794, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_out, __pyx_v_k, unsigned long, 0, __Pyx_PyInt_From_unsigned_long, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 794, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (unlikely((__Pyx_SetItemInt(__pyx_t_3, 0, __pyx_t_1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0) < 0))) __PYX_ERR(1, 794, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "miololib.pyx":795
 *             for k in range(self.graphFloat.edges):
 *                 out[k][0] = self.graphFloat.e[k].i
 *                 out[k][1] = self.graphFloat.e[k].j             # <<<<<<<<<<<<<<
 *         if self.ctype == "double":
 *             for k in range(self.graphDouble.edges):
 */
      __pyx_t_1 = __Pyx_PyInt_From_unsigned_long((__pyx_v_self->__pyx_base.graphFloat->e[__pyx_v_k]).j); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 795, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_out, __pyx_v_k, unsigned long, 0, __Pyx_PyInt_From_unsigned_long, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 795, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (unlikely((__Pyx_SetItemInt(__pyx_t_3, 1, __pyx_t_1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0) < 0))) __PYX_ERR(1, 795, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }

    /* "miololib.pyx":792
 *                 out[k][0] = self.graphInt.e[k].i
 *                 out[k][1] = self.graphInt.e[k].j
 *         if self.ctype == "float":             # <<<<<<<<<<<<<<
 *             for k in range(self.graphFloat.edges):
 *                 out[k][0] = self.graphFloat.e[k].i
 */
  }

  /* "miololib.pyx":796
 *                 out[k][0] = self.graphFloat.e[k].i
 *                 out[k][1] = self.graphFloat.e[k].j
 *         if self.ctype == "double":             # <<<<<<<<<<<<<<
 *             for k in range(self.graphDouble.edges):
 *                 out[k][0] = self.graphDouble.e[k].i
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 796, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(1, 796, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_7) {

    /* "miololib.pyx":797
 *                 out[k][1] = self.graphFloat.e[k].j
 *         if self.ctype == "double":
 *             for k in range(self.graphDouble.edges):             # <<<<<<<<<<<<<<
 *                 out[k][0] = self.graphDouble.e[k].i
 *                 out[k][1] = self.graphDouble.e[k].j
 */
    __pyx_t_8 = __pyx_v_self->__pyx_base.graphDouble->edges;
    __pyx_t_9 = __pyx_t_8;
    for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
      __pyx_v_k = __pyx_t_10;

      /* "miololib.pyx":798
 *         if self.ctype == "double":
 *             for k in range(self.graphDouble.edges):
 *                 out[k][0] = self.graphDouble.e[k].i             # <<<<<<<<<<<<<<
 *                 out[k][1] = self.graphDouble.e[k].j
 *         return out
 */
      __pyx_t_1 = __Pyx_PyInt_From_unsigned_long((__pyx_v_self->__pyx_base.graphDouble->e[__pyx_v_k]).i); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 798, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_out, __pyx_v_k, unsigned long, 0, __Pyx_PyInt_From_unsigned_long, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 798, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (unlikely((__Pyx_SetItemInt(__pyx_t_3, 0, __pyx_t_1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0) < 0))) __PYX_ERR(1, 798, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "miololib.pyx":799
 *             for k in range(self.graphDouble.edges):
 *                 out[k][0] = self.graphDouble.e[k].i
 *                 out[k][1] = self.graphDouble.e[k].j             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
      __pyx_t_1 = __Pyx_PyInt_From_unsigned_long((__pyx_v_self->__pyx_base.graphDouble->e[__pyx_v_k]).j); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 799, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_out, __pyx_v_k, unsigned long, 0, __Pyx_PyInt_From_unsigned_long, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 799, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (unlikely((__Pyx_SetItemInt(__pyx_t_3, 1, __pyx_t_1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0) < 0))) __PYX_ERR(1, 799, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }

    /* "miololib.pyx":796
 *                 out[k][0] = self.graphFloat.e[k].i
 *                 out[k][1] = self.graphFloat.e[k].j
 *         if self.ctype == "double":             # <<<<<<<<<<<<<<
 *             for k in range(self.graphDouble.edges):
 *                 out[k][0] = self.graphDouble.e[k].i
 */
  }

  /* "miololib.pyx":800
 *                 out[k][0] = self.graphDouble.e[k].i
 *                 out[k][1] = self.graphDouble.e[k].j
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     @structure.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_out);
  __pyx_r = __pyx_v_out;
  goto __pyx_L0;

  /* "miololib.pyx":780
 *             return self.graphDouble.edges
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def structure(self):
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("miolo.Graph.structure.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":802
 *         return out
 * 
 *     @structure.setter             # <<<<<<<<<<<<<<
 *     def structure(self, data):
 *         cdef unsigned long k
 */

/* Python wrapper */
static int __pyx_pw_5miolo_5Graph_9structure_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_data); /*proto*/
static int __pyx_pw_5miolo_5Graph_9structure_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_data) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5miolo_5Graph_9structure_2__set__(((struct __pyx_obj_5miolo_Graph *)__pyx_v_self), ((PyObject *)__pyx_v_data));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5miolo_5Graph_9structure_2__set__(struct __pyx_obj_5miolo_Graph *__pyx_v_self, PyObject *__pyx_v_data) {
  unsigned long __pyx_v_k;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  unsigned long __pyx_t_6;
  unsigned long __pyx_t_7;
  unsigned long __pyx_t_8;
  unsigned long __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 1);

  /* "miololib.pyx":805
 *     def structure(self, data):
 *         cdef unsigned long k
 *         if np.shape(data)!=(self.edges,2):             # <<<<<<<<<<<<<<
 *             raise Exception("Incompatible shape for Graph data.")
 *         if self.ctype == "int":
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 805, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_shape); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 805, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_data};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 805, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_edges); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 805, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 805, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3)) __PYX_ERR(1, 805, __pyx_L1_error);
  __Pyx_INCREF(__pyx_int_2);
  __Pyx_GIVEREF(__pyx_int_2);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_2)) __PYX_ERR(1, 805, __pyx_L1_error);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 805, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(1, 805, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(__pyx_t_5)) {

    /* "miololib.pyx":806
 *         cdef unsigned long k
 *         if np.shape(data)!=(self.edges,2):
 *             raise Exception("Incompatible shape for Graph data.")             # <<<<<<<<<<<<<<
 *         if self.ctype == "int":
 *             for k in range(self.graphInt.edges):
 */
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__34, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 806, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 806, __pyx_L1_error)

    /* "miololib.pyx":805
 *     def structure(self, data):
 *         cdef unsigned long k
 *         if np.shape(data)!=(self.edges,2):             # <<<<<<<<<<<<<<
 *             raise Exception("Incompatible shape for Graph data.")
 *         if self.ctype == "int":
 */
  }

  /* "miololib.pyx":807
 *         if np.shape(data)!=(self.edges,2):
 *             raise Exception("Incompatible shape for Graph data.")
 *         if self.ctype == "int":             # <<<<<<<<<<<<<<
 *             for k in range(self.graphInt.edges):
 *                 self.graphInt.e[k].i = data[k][0]
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 807, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(1, 807, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_5) {

    /* "miololib.pyx":808
 *             raise Exception("Incompatible shape for Graph data.")
 *         if self.ctype == "int":
 *             for k in range(self.graphInt.edges):             # <<<<<<<<<<<<<<
 *                 self.graphInt.e[k].i = data[k][0]
 *                 self.graphInt.e[k].j = data[k][1]
 */
    __pyx_t_6 = __pyx_v_self->__pyx_base.graphInt->edges;
    __pyx_t_7 = __pyx_t_6;
    for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
      __pyx_v_k = __pyx_t_8;

      /* "miololib.pyx":809
 *         if self.ctype == "int":
 *             for k in range(self.graphInt.edges):
 *                 self.graphInt.e[k].i = data[k][0]             # <<<<<<<<<<<<<<
 *                 self.graphInt.e[k].j = data[k][1]
 *         if self.ctype == "float":
 */
      __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_data, __pyx_v_k, unsigned long, 0, __Pyx_PyInt_From_unsigned_long, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 809, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_3, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 809, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_9 = __Pyx_PyInt_As_unsigned_long(__pyx_t_2); if (unlikely((__pyx_t_9 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(1, 809, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      (__pyx_v_self->__pyx_base.graphInt->e[__pyx_v_k]).i = __pyx_t_9;

      /* "miololib.pyx":810
 *             for k in range(self.graphInt.edges):
 *                 self.graphInt.e[k].i = data[k][0]
 *                 self.graphInt.e[k].j = data[k][1]             # <<<<<<<<<<<<<<
 *         if self.ctype == "float":
 *             for k in range(self.graphFloat.edges):
 */
      __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_data, __pyx_v_k, unsigned long, 0, __Pyx_PyInt_From_unsigned_long, 0, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 810, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_2, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 810, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_9 = __Pyx_PyInt_As_unsigned_long(__pyx_t_3); if (unlikely((__pyx_t_9 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(1, 810, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      (__pyx_v_self->__pyx_base.graphInt->e[__pyx_v_k]).j = __pyx_t_9;
    }

    /* "miololib.pyx":807
 *         if np.shape(data)!=(self.edges,2):
 *             raise Exception("Incompatible shape for Graph data.")
 *         if self.ctype == "int":             # <<<<<<<<<<<<<<
 *             for k in range(self.graphInt.edges):
 *                 self.graphInt.e[k].i = data[k][0]
 */
  }

  /* "miololib.pyx":811
 *                 self.graphInt.e[k].i = data[k][0]
 *                 self.graphInt.e[k].j = data[k][1]
 *         if self.ctype == "float":             # <<<<<<<<<<<<<<
 *             for k in range(self.graphFloat.edges):
 *                 self.graphFloat.e[k].i = data[k][0]
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 811, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(1, 811, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_5) {

    /* "miololib.pyx":812
 *                 self.graphInt.e[k].j = data[k][1]
 *         if self.ctype == "float":
 *             for k in range(self.graphFloat.edges):             # <<<<<<<<<<<<<<
 *                 self.graphFloat.e[k].i = data[k][0]
 *                 self.graphFloat.e[k].j = data[k][1]
 */
    __pyx_t_6 = __pyx_v_self->__pyx_base.graphFloat->edges;
    __pyx_t_7 = __pyx_t_6;
    for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
      __pyx_v_k = __pyx_t_8;

      /* "miololib.pyx":813
 *         if self.ctype == "float":
 *             for k in range(self.graphFloat.edges):
 *                 self.graphFloat.e[k].i = data[k][0]             # <<<<<<<<<<<<<<
 *                 self.graphFloat.e[k].j = data[k][1]
 *         if self.ctype == "double":
 */
      __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_data, __pyx_v_k, unsigned long, 0, __Pyx_PyInt_From_unsigned_long, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 813, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_3, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 813, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_9 = __Pyx_PyInt_As_unsigned_long(__pyx_t_2); if (unlikely((__pyx_t_9 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(1, 813, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      (__pyx_v_self->__pyx_base.graphFloat->e[__pyx_v_k]).i = __pyx_t_9;

      /* "miololib.pyx":814
 *             for k in range(self.graphFloat.edges):
 *                 self.graphFloat.e[k].i = data[k][0]
 *                 self.graphFloat.e[k].j = data[k][1]             # <<<<<<<<<<<<<<
 *         if self.ctype == "double":
 *             for k in range(self.graphDouble.edges):
 */
      __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_data, __pyx_v_k, unsigned long, 0, __Pyx_PyInt_From_unsigned_long, 0, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 814, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_2, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 814, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_9 = __Pyx_PyInt_As_unsigned_long(__pyx_t_3); if (unlikely((__pyx_t_9 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(1, 814, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      (__pyx_v_self->__pyx_base.graphFloat->e[__pyx_v_k]).j = __pyx_t_9;
    }

    /* "miololib.pyx":811
 *                 self.graphInt.e[k].i = data[k][0]
 *                 self.graphInt.e[k].j = data[k][1]
 *         if self.ctype == "float":             # <<<<<<<<<<<<<<
 *             for k in range(self.graphFloat.edges):
 *                 self.graphFloat.e[k].i = data[k][0]
 */
  }

  /* "miololib.pyx":815
 *                 self.graphFloat.e[k].i = data[k][0]
 *                 self.graphFloat.e[k].j = data[k][1]
 *         if self.ctype == "double":             # <<<<<<<<<<<<<<
 *             for k in range(self.graphDouble.edges):
 *                 self.graphDouble.e[k].i = data[k][0]
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 815, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(1, 815, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_5) {

    /* "miololib.pyx":816
 *                 self.graphFloat.e[k].j = data[k][1]
 *         if self.ctype == "double":
 *             for k in range(self.graphDouble.edges):             # <<<<<<<<<<<<<<
 *                 self.graphDouble.e[k].i = data[k][0]
 *                 self.graphDouble.e[k].j = data[k][1]
 */
    __pyx_t_6 = __pyx_v_self->__pyx_base.graphDouble->edges;
    __pyx_t_7 = __pyx_t_6;
    for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
      __pyx_v_k = __pyx_t_8;

      /* "miololib.pyx":817
 *         if self.ctype == "double":
 *             for k in range(self.graphDouble.edges):
 *                 self.graphDouble.e[k].i = data[k][0]             # <<<<<<<<<<<<<<
 *                 self.graphDouble.e[k].j = data[k][1]
 * 
 */
      __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_data, __pyx_v_k, unsigned long, 0, __Pyx_PyInt_From_unsigned_long, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 817, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_3, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 817, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_9 = __Pyx_PyInt_As_unsigned_long(__pyx_t_2); if (unlikely((__pyx_t_9 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(1, 817, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      (__pyx_v_self->__pyx_base.graphDouble->e[__pyx_v_k]).i = __pyx_t_9;

      /* "miololib.pyx":818
 *             for k in range(self.graphDouble.edges):
 *                 self.graphDouble.e[k].i = data[k][0]
 *                 self.graphDouble.e[k].j = data[k][1]             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
      __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_data, __pyx_v_k, unsigned long, 0, __Pyx_PyInt_From_unsigned_long, 0, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 818, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_2, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 818, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_9 = __Pyx_PyInt_As_unsigned_long(__pyx_t_3); if (unlikely((__pyx_t_9 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(1, 818, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      (__pyx_v_self->__pyx_base.graphDouble->e[__pyx_v_k]).j = __pyx_t_9;
    }

    /* "miololib.pyx":815
 *                 self.graphFloat.e[k].i = data[k][0]
 *                 self.graphFloat.e[k].j = data[k][1]
 *         if self.ctype == "double":             # <<<<<<<<<<<<<<
 *             for k in range(self.graphDouble.edges):
 *                 self.graphDouble.e[k].i = data[k][0]
 */
  }

  /* "miololib.pyx":802
 *         return out
 * 
 *     @structure.setter             # <<<<<<<<<<<<<<
 *     def structure(self, data):
 *         cdef unsigned long k
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("miolo.Graph.structure.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":820
 *                 self.graphDouble.e[k].j = data[k][1]
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def weights(self):
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_5Graph_7weights_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5miolo_5Graph_7weights_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5miolo_5Graph_7weights___get__(((struct __pyx_obj_5miolo_Graph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_5Graph_7weights___get__(struct __pyx_obj_5miolo_Graph *__pyx_v_self) {
  unsigned long __pyx_v_k;
  PyObject *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  unsigned long __pyx_t_6;
  unsigned long __pyx_t_7;
  unsigned long __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "miololib.pyx":827
 *         """
 *         cdef unsigned long k
 *         if self.ctype == "int":             # <<<<<<<<<<<<<<
 *             out = np.empty(self.edges,dtype=int)
 *             for k in range(self.graphInt.edges):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 827, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 827, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":828
 *         cdef unsigned long k
 *         if self.ctype == "int":
 *             out = np.empty(self.edges,dtype=int)             # <<<<<<<<<<<<<<
 *             for k in range(self.graphInt.edges):
 *                 out[k] = self.graphInt.e[k].w
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 828, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 828, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_edges); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 828, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 828, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1)) __PYX_ERR(1, 828, __pyx_L1_error);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 828, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, ((PyObject *)(&PyInt_Type))) < 0) __PYX_ERR(1, 828, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 828, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_out = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "miololib.pyx":829
 *         if self.ctype == "int":
 *             out = np.empty(self.edges,dtype=int)
 *             for k in range(self.graphInt.edges):             # <<<<<<<<<<<<<<
 *                 out[k] = self.graphInt.e[k].w
 *         if self.ctype == "float":
 */
    __pyx_t_6 = __pyx_v_self->__pyx_base.graphInt->edges;
    __pyx_t_7 = __pyx_t_6;
    for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
      __pyx_v_k = __pyx_t_8;

      /* "miololib.pyx":830
 *             out = np.empty(self.edges,dtype=int)
 *             for k in range(self.graphInt.edges):
 *                 out[k] = self.graphInt.e[k].w             # <<<<<<<<<<<<<<
 *         if self.ctype == "float":
 *             out = np.empty(self.edges,dtype=np.single)
 */
      __pyx_t_5 = __Pyx_PyInt_From_int((__pyx_v_self->__pyx_base.graphInt->e[__pyx_v_k]).w); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 830, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (unlikely((__Pyx_SetItemInt(__pyx_v_out, __pyx_v_k, __pyx_t_5, unsigned long, 0, __Pyx_PyInt_From_unsigned_long, 0, 0, 0) < 0))) __PYX_ERR(1, 830, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }

    /* "miololib.pyx":827
 *         """
 *         cdef unsigned long k
 *         if self.ctype == "int":             # <<<<<<<<<<<<<<
 *             out = np.empty(self.edges,dtype=int)
 *             for k in range(self.graphInt.edges):
 */
  }

  /* "miololib.pyx":831
 *             for k in range(self.graphInt.edges):
 *                 out[k] = self.graphInt.e[k].w
 *         if self.ctype == "float":             # <<<<<<<<<<<<<<
 *             out = np.empty(self.edges,dtype=np.single)
 *             for k in range(self.graphFloat.edges):
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 831, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_5, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 831, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":832
 *                 out[k] = self.graphInt.e[k].w
 *         if self.ctype == "float":
 *             out = np.empty(self.edges,dtype=np.single)             # <<<<<<<<<<<<<<
 *             for k in range(self.graphFloat.edges):
 *                 out[k] = self.graphFloat.e[k].w
 */
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 832, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_empty); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 832, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_edges); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 832, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 832, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5)) __PYX_ERR(1, 832, __pyx_L1_error);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 832, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 832, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_single); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 832, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_9) < 0) __PYX_ERR(1, 832, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 832, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_out, __pyx_t_9);
    __pyx_t_9 = 0;

    /* "miololib.pyx":833
 *         if self.ctype == "float":
 *             out = np.empty(self.edges,dtype=np.single)
 *             for k in range(self.graphFloat.edges):             # <<<<<<<<<<<<<<
 *                 out[k] = self.graphFloat.e[k].w
 *         if self.ctype == "double":
 */
    __pyx_t_6 = __pyx_v_self->__pyx_base.graphFloat->edges;
    __pyx_t_7 = __pyx_t_6;
    for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
      __pyx_v_k = __pyx_t_8;

      /* "miololib.pyx":834
 *             out = np.empty(self.edges,dtype=np.single)
 *             for k in range(self.graphFloat.edges):
 *                 out[k] = self.graphFloat.e[k].w             # <<<<<<<<<<<<<<
 *         if self.ctype == "double":
 *             out = np.empty(self.edges,dtype=np.double)
 */
      __pyx_t_9 = PyFloat_FromDouble((__pyx_v_self->__pyx_base.graphFloat->e[__pyx_v_k]).w); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 834, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      if (unlikely((__Pyx_SetItemInt(__pyx_v_out, __pyx_v_k, __pyx_t_9, unsigned long, 0, __Pyx_PyInt_From_unsigned_long, 0, 0, 0) < 0))) __PYX_ERR(1, 834, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }

    /* "miololib.pyx":831
 *             for k in range(self.graphInt.edges):
 *                 out[k] = self.graphInt.e[k].w
 *         if self.ctype == "float":             # <<<<<<<<<<<<<<
 *             out = np.empty(self.edges,dtype=np.single)
 *             for k in range(self.graphFloat.edges):
 */
  }

  /* "miololib.pyx":835
 *             for k in range(self.graphFloat.edges):
 *                 out[k] = self.graphFloat.e[k].w
 *         if self.ctype == "double":             # <<<<<<<<<<<<<<
 *             out = np.empty(self.edges,dtype=np.double)
 *             for k in range(self.graphDouble.edges):
 */
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 835, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_9, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 835, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":836
 *                 out[k] = self.graphFloat.e[k].w
 *         if self.ctype == "double":
 *             out = np.empty(self.edges,dtype=np.double)             # <<<<<<<<<<<<<<
 *             for k in range(self.graphDouble.edges):
 *                 out[k] = self.graphDouble.e[k].w
 */
    __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_np); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 836, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_empty); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 836, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_edges); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 836, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 836, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_9);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_9)) __PYX_ERR(1, 836, __pyx_L1_error);
    __pyx_t_9 = 0;
    __pyx_t_9 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 836, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 836, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_double); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 836, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (PyDict_SetItem(__pyx_t_9, __pyx_n_s_dtype, __pyx_t_3) < 0) __PYX_ERR(1, 836, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_4, __pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 836, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_XDECREF_SET(__pyx_v_out, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "miololib.pyx":837
 *         if self.ctype == "double":
 *             out = np.empty(self.edges,dtype=np.double)
 *             for k in range(self.graphDouble.edges):             # <<<<<<<<<<<<<<
 *                 out[k] = self.graphDouble.e[k].w
 *         return out
 */
    __pyx_t_6 = __pyx_v_self->__pyx_base.graphDouble->edges;
    __pyx_t_7 = __pyx_t_6;
    for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
      __pyx_v_k = __pyx_t_8;

      /* "miololib.pyx":838
 *             out = np.empty(self.edges,dtype=np.double)
 *             for k in range(self.graphDouble.edges):
 *                 out[k] = self.graphDouble.e[k].w             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
      __pyx_t_3 = PyFloat_FromDouble((__pyx_v_self->__pyx_base.graphDouble->e[__pyx_v_k]).w); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 838, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (unlikely((__Pyx_SetItemInt(__pyx_v_out, __pyx_v_k, __pyx_t_3, unsigned long, 0, __Pyx_PyInt_From_unsigned_long, 0, 0, 0) < 0))) __PYX_ERR(1, 838, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }

    /* "miololib.pyx":835
 *             for k in range(self.graphFloat.edges):
 *                 out[k] = self.graphFloat.e[k].w
 *         if self.ctype == "double":             # <<<<<<<<<<<<<<
 *             out = np.empty(self.edges,dtype=np.double)
 *             for k in range(self.graphDouble.edges):
 */
  }

  /* "miololib.pyx":839
 *             for k in range(self.graphDouble.edges):
 *                 out[k] = self.graphDouble.e[k].w
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     @weights.setter
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_v_out)) { __Pyx_RaiseUnboundLocalError("out"); __PYX_ERR(1, 839, __pyx_L1_error) }
  __Pyx_INCREF(__pyx_v_out);
  __pyx_r = __pyx_v_out;
  goto __pyx_L0;

  /* "miololib.pyx":820
 *                 self.graphDouble.e[k].j = data[k][1]
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def weights(self):
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("miolo.Graph.weights.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":841
 *         return out
 * 
 *     @weights.setter             # <<<<<<<<<<<<<<
 *     def weights(self, data):
 *         cdef unsigned long k
 */

/* Python wrapper */
static int __pyx_pw_5miolo_5Graph_7weights_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_data); /*proto*/
static int __pyx_pw_5miolo_5Graph_7weights_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_data) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5miolo_5Graph_7weights_2__set__(((struct __pyx_obj_5miolo_Graph *)__pyx_v_self), ((PyObject *)__pyx_v_data));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5miolo_5Graph_7weights_2__set__(struct __pyx_obj_5miolo_Graph *__pyx_v_self, PyObject *__pyx_v_data) {
  unsigned long __pyx_v_k;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  unsigned long __pyx_t_6;
  unsigned long __pyx_t_7;
  unsigned long __pyx_t_8;
  int __pyx_t_9;
  float __pyx_t_10;
  double __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 1);

  /* "miololib.pyx":844
 *     def weights(self, data):
 *         cdef unsigned long k
 *         if len(data)!=self.edges:             # <<<<<<<<<<<<<<
 *             raise Exception("Incompatible shape for Graph data.")
 *         if self.ctype == "int":
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_data); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 844, __pyx_L1_error)
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 844, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_edges); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 844, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_2, __pyx_t_3, Py_NE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 844, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(1, 844, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(__pyx_t_5)) {

    /* "miololib.pyx":845
 *         cdef unsigned long k
 *         if len(data)!=self.edges:
 *             raise Exception("Incompatible shape for Graph data.")             # <<<<<<<<<<<<<<
 *         if self.ctype == "int":
 *             for k in range(self.graphInt.edges):
 */
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__34, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 845, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(1, 845, __pyx_L1_error)

    /* "miololib.pyx":844
 *     def weights(self, data):
 *         cdef unsigned long k
 *         if len(data)!=self.edges:             # <<<<<<<<<<<<<<
 *             raise Exception("Incompatible shape for Graph data.")
 *         if self.ctype == "int":
 */
  }

  /* "miololib.pyx":846
 *         if len(data)!=self.edges:
 *             raise Exception("Incompatible shape for Graph data.")
 *         if self.ctype == "int":             # <<<<<<<<<<<<<<
 *             for k in range(self.graphInt.edges):
 *                 self.graphInt.e[k].w = data[k]
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 846, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = (__Pyx_PyString_Equals(__pyx_t_4, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(1, 846, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_5) {

    /* "miololib.pyx":847
 *             raise Exception("Incompatible shape for Graph data.")
 *         if self.ctype == "int":
 *             for k in range(self.graphInt.edges):             # <<<<<<<<<<<<<<
 *                 self.graphInt.e[k].w = data[k]
 *         if self.ctype == "float":
 */
    __pyx_t_6 = __pyx_v_self->__pyx_base.graphInt->edges;
    __pyx_t_7 = __pyx_t_6;
    for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
      __pyx_v_k = __pyx_t_8;

      /* "miololib.pyx":848
 *         if self.ctype == "int":
 *             for k in range(self.graphInt.edges):
 *                 self.graphInt.e[k].w = data[k]             # <<<<<<<<<<<<<<
 *         if self.ctype == "float":
 *             for k in range(self.graphFloat.edges):
 */
      __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_data, __pyx_v_k, unsigned long, 0, __Pyx_PyInt_From_unsigned_long, 0, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 848, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 848, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      (__pyx_v_self->__pyx_base.graphInt->e[__pyx_v_k]).w = __pyx_t_9;
    }

    /* "miololib.pyx":846
 *         if len(data)!=self.edges:
 *             raise Exception("Incompatible shape for Graph data.")
 *         if self.ctype == "int":             # <<<<<<<<<<<<<<
 *             for k in range(self.graphInt.edges):
 *                 self.graphInt.e[k].w = data[k]
 */
  }

  /* "miololib.pyx":849
 *             for k in range(self.graphInt.edges):
 *                 self.graphInt.e[k].w = data[k]
 *         if self.ctype == "float":             # <<<<<<<<<<<<<<
 *             for k in range(self.graphFloat.edges):
 *                 self.graphFloat.e[k].w = data[k]
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 849, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = (__Pyx_PyString_Equals(__pyx_t_4, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(1, 849, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_5) {

    /* "miololib.pyx":850
 *                 self.graphInt.e[k].w = data[k]
 *         if self.ctype == "float":
 *             for k in range(self.graphFloat.edges):             # <<<<<<<<<<<<<<
 *                 self.graphFloat.e[k].w = data[k]
 *         if self.ctype == "double":
 */
    __pyx_t_6 = __pyx_v_self->__pyx_base.graphFloat->edges;
    __pyx_t_7 = __pyx_t_6;
    for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
      __pyx_v_k = __pyx_t_8;

      /* "miololib.pyx":851
 *         if self.ctype == "float":
 *             for k in range(self.graphFloat.edges):
 *                 self.graphFloat.e[k].w = data[k]             # <<<<<<<<<<<<<<
 *         if self.ctype == "double":
 *             for k in range(self.graphDouble.edges):
 */
      __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_data, __pyx_v_k, unsigned long, 0, __Pyx_PyInt_From_unsigned_long, 0, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 851, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_10 = __pyx_PyFloat_AsFloat(__pyx_t_4); if (unlikely((__pyx_t_10 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 851, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      (__pyx_v_self->__pyx_base.graphFloat->e[__pyx_v_k]).w = __pyx_t_10;
    }

    /* "miololib.pyx":849
 *             for k in range(self.graphInt.edges):
 *                 self.graphInt.e[k].w = data[k]
 *         if self.ctype == "float":             # <<<<<<<<<<<<<<
 *             for k in range(self.graphFloat.edges):
 *                 self.graphFloat.e[k].w = data[k]
 */
  }

  /* "miololib.pyx":852
 *             for k in range(self.graphFloat.edges):
 *                 self.graphFloat.e[k].w = data[k]
 *         if self.ctype == "double":             # <<<<<<<<<<<<<<
 *             for k in range(self.graphDouble.edges):
 *                 self.graphDouble.e[k].w = data[k]
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 852, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = (__Pyx_PyString_Equals(__pyx_t_4, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(1, 852, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_5) {

    /* "miololib.pyx":853
 *                 self.graphFloat.e[k].w = data[k]
 *         if self.ctype == "double":
 *             for k in range(self.graphDouble.edges):             # <<<<<<<<<<<<<<
 *                 self.graphDouble.e[k].w = data[k]
 * 
 */
    __pyx_t_6 = __pyx_v_self->__pyx_base.graphDouble->edges;
    __pyx_t_7 = __pyx_t_6;
    for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
      __pyx_v_k = __pyx_t_8;

      /* "miololib.pyx":854
 *         if self.ctype == "double":
 *             for k in range(self.graphDouble.edges):
 *                 self.graphDouble.e[k].w = data[k]             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
      __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_data, __pyx_v_k, unsigned long, 0, __Pyx_PyInt_From_unsigned_long, 0, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 854, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_11 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_11 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 854, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      (__pyx_v_self->__pyx_base.graphDouble->e[__pyx_v_k]).w = __pyx_t_11;
    }

    /* "miololib.pyx":852
 *             for k in range(self.graphFloat.edges):
 *                 self.graphFloat.e[k].w = data[k]
 *         if self.ctype == "double":             # <<<<<<<<<<<<<<
 *             for k in range(self.graphDouble.edges):
 *                 self.graphDouble.e[k].w = data[k]
 */
  }

  /* "miololib.pyx":841
 *         return out
 * 
 *     @weights.setter             # <<<<<<<<<<<<<<
 *     def weights(self, data):
 *         cdef unsigned long k
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("miolo.Graph.weights.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":856
 *                 self.graphDouble.e[k].w = data[k]
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.edges
 * 
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_5miolo_5Graph_5__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_5miolo_5Graph_5__len__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5miolo_5Graph_4__len__(((struct __pyx_obj_5miolo_Graph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_5miolo_5Graph_4__len__(struct __pyx_obj_5miolo_Graph *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__len__", 1);

  /* "miololib.pyx":857
 * 
 *     def __len__(self):
 *         return self.edges             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, unsigned long k):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_edges); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 857, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyIndex_AsSsize_t(__pyx_t_1); if (unlikely((__pyx_t_2 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 857, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  goto __pyx_L0;

  /* "miololib.pyx":856
 *                 self.graphDouble.e[k].w = data[k]
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.edges
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("miolo.Graph.__len__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":859
 *         return self.edges
 * 
 *     def __getitem__(self, unsigned long k):             # <<<<<<<<<<<<<<
 *         if k >= <unsigned long>self.edges:
 *             raise Exception("Index is out of bounds.")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_5Graph_7__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_k); /*proto*/
static PyObject *__pyx_pw_5miolo_5Graph_7__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_k) {
  unsigned long __pyx_v_k;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  assert(__pyx_arg_k); {
    __pyx_v_k = __Pyx_PyInt_As_unsigned_long(__pyx_arg_k); if (unlikely((__pyx_v_k == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(1, 859, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("miolo.Graph.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5miolo_5Graph_6__getitem__(((struct __pyx_obj_5miolo_Graph *)__pyx_v_self), ((unsigned long)__pyx_v_k));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_5Graph_6__getitem__(struct __pyx_obj_5miolo_Graph *__pyx_v_self, unsigned long __pyx_v_k) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  unsigned long __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 1);

  /* "miololib.pyx":860
 * 
 *     def __getitem__(self, unsigned long k):
 *         if k >= <unsigned long>self.edges:             # <<<<<<<<<<<<<<
 *             raise Exception("Index is out of bounds.")
 *         if self.ctype=="int":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_edges); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 860, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_unsigned_long(__pyx_t_1); if (unlikely((__pyx_t_2 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(1, 860, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_v_k >= ((unsigned long)__pyx_t_2));
  if (unlikely(__pyx_t_3)) {

    /* "miololib.pyx":861
 *     def __getitem__(self, unsigned long k):
 *         if k >= <unsigned long>self.edges:
 *             raise Exception("Index is out of bounds.")             # <<<<<<<<<<<<<<
 *         if self.ctype=="int":
 *             return (self.graphInt.e[k].i,self.graphInt.e[k].j,self.graphInt.e[k].w)
 */
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__35, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 861, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 861, __pyx_L1_error)

    /* "miololib.pyx":860
 * 
 *     def __getitem__(self, unsigned long k):
 *         if k >= <unsigned long>self.edges:             # <<<<<<<<<<<<<<
 *             raise Exception("Index is out of bounds.")
 *         if self.ctype=="int":
 */
  }

  /* "miololib.pyx":862
 *         if k >= <unsigned long>self.edges:
 *             raise Exception("Index is out of bounds.")
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             return (self.graphInt.e[k].i,self.graphInt.e[k].j,self.graphInt.e[k].w)
 *         if self.ctype=="float":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 862, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 862, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":863
 *             raise Exception("Index is out of bounds.")
 *         if self.ctype=="int":
 *             return (self.graphInt.e[k].i,self.graphInt.e[k].j,self.graphInt.e[k].w)             # <<<<<<<<<<<<<<
 *         if self.ctype=="float":
 *             return (self.graphFloat.e[k].i,self.graphFloat.e[k].j,self.graphFloat.e[k].w)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_From_unsigned_long((__pyx_v_self->__pyx_base.graphInt->e[__pyx_v_k]).i); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 863, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyInt_From_unsigned_long((__pyx_v_self->__pyx_base.graphInt->e[__pyx_v_k]).j); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 863, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyInt_From_int((__pyx_v_self->__pyx_base.graphInt->e[__pyx_v_k]).w); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 863, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 863, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_1);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1)) __PYX_ERR(1, 863, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_4);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_4)) __PYX_ERR(1, 863, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_5);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_t_5)) __PYX_ERR(1, 863, __pyx_L1_error);
    __pyx_t_1 = 0;
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    goto __pyx_L0;

    /* "miololib.pyx":862
 *         if k >= <unsigned long>self.edges:
 *             raise Exception("Index is out of bounds.")
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             return (self.graphInt.e[k].i,self.graphInt.e[k].j,self.graphInt.e[k].w)
 *         if self.ctype=="float":
 */
  }

  /* "miololib.pyx":864
 *         if self.ctype=="int":
 *             return (self.graphInt.e[k].i,self.graphInt.e[k].j,self.graphInt.e[k].w)
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             return (self.graphFloat.e[k].i,self.graphFloat.e[k].j,self.graphFloat.e[k].w)
 *         if self.ctype=="double":
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 864, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_6, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 864, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":865
 *             return (self.graphInt.e[k].i,self.graphInt.e[k].j,self.graphInt.e[k].w)
 *         if self.ctype=="float":
 *             return (self.graphFloat.e[k].i,self.graphFloat.e[k].j,self.graphFloat.e[k].w)             # <<<<<<<<<<<<<<
 *         if self.ctype=="double":
 *             return (self.graphDouble.e[k].i,self.graphDouble.e[k].j,self.graphDouble.e[k].w)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_6 = __Pyx_PyInt_From_unsigned_long((__pyx_v_self->__pyx_base.graphFloat->e[__pyx_v_k]).i); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 865, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = __Pyx_PyInt_From_unsigned_long((__pyx_v_self->__pyx_base.graphFloat->e[__pyx_v_k]).j); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 865, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = PyFloat_FromDouble((__pyx_v_self->__pyx_base.graphFloat->e[__pyx_v_k]).w); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 865, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 865, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_6);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_6)) __PYX_ERR(1, 865, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_5);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_5)) __PYX_ERR(1, 865, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_4);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_t_4)) __PYX_ERR(1, 865, __pyx_L1_error);
    __pyx_t_6 = 0;
    __pyx_t_5 = 0;
    __pyx_t_4 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "miololib.pyx":864
 *         if self.ctype=="int":
 *             return (self.graphInt.e[k].i,self.graphInt.e[k].j,self.graphInt.e[k].w)
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             return (self.graphFloat.e[k].i,self.graphFloat.e[k].j,self.graphFloat.e[k].w)
 *         if self.ctype=="double":
 */
  }

  /* "miololib.pyx":866
 *         if self.ctype=="float":
 *             return (self.graphFloat.e[k].i,self.graphFloat.e[k].j,self.graphFloat.e[k].w)
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             return (self.graphDouble.e[k].i,self.graphDouble.e[k].j,self.graphDouble.e[k].w)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 866, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 866, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":867
 *             return (self.graphFloat.e[k].i,self.graphFloat.e[k].j,self.graphFloat.e[k].w)
 *         if self.ctype=="double":
 *             return (self.graphDouble.e[k].i,self.graphDouble.e[k].j,self.graphDouble.e[k].w)             # <<<<<<<<<<<<<<
 * 
 *     def isolatedNodes(self):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_From_unsigned_long((__pyx_v_self->__pyx_base.graphDouble->e[__pyx_v_k]).i); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 867, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyInt_From_unsigned_long((__pyx_v_self->__pyx_base.graphDouble->e[__pyx_v_k]).j); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 867, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyFloat_FromDouble((__pyx_v_self->__pyx_base.graphDouble->e[__pyx_v_k]).w); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 867, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 867, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_1);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1)) __PYX_ERR(1, 867, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_4);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_4)) __PYX_ERR(1, 867, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_5);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_t_5)) __PYX_ERR(1, 867, __pyx_L1_error);
    __pyx_t_1 = 0;
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    goto __pyx_L0;

    /* "miololib.pyx":866
 *         if self.ctype=="float":
 *             return (self.graphFloat.e[k].i,self.graphFloat.e[k].j,self.graphFloat.e[k].w)
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             return (self.graphDouble.e[k].i,self.graphDouble.e[k].j,self.graphDouble.e[k].w)
 * 
 */
  }

  /* "miololib.pyx":859
 *         return self.edges
 * 
 *     def __getitem__(self, unsigned long k):             # <<<<<<<<<<<<<<
 *         if k >= <unsigned long>self.edges:
 *             raise Exception("Index is out of bounds.")
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("miolo.Graph.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":869
 *             return (self.graphDouble.e[k].i,self.graphDouble.e[k].j,self.graphDouble.e[k].w)
 * 
 *     def isolatedNodes(self):             # <<<<<<<<<<<<<<
 *         if self.ctype=="int":
 *             return self.graphInt.isolatedNodes()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_5Graph_9isolatedNodes(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_5Graph_8isolatedNodes, "Graph.isolatedNodes(self)");
static PyMethodDef __pyx_mdef_5miolo_5Graph_9isolatedNodes = {"isolatedNodes", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_5Graph_9isolatedNodes, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_5Graph_8isolatedNodes};
static PyObject *__pyx_pw_5miolo_5Graph_9isolatedNodes(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isolatedNodes (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("isolatedNodes", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "isolatedNodes", 0))) return NULL;
  __pyx_r = __pyx_pf_5miolo_5Graph_8isolatedNodes(((struct __pyx_obj_5miolo_Graph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_5Graph_8isolatedNodes(struct __pyx_obj_5miolo_Graph *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isolatedNodes", 1);

  /* "miololib.pyx":870
 * 
 *     def isolatedNodes(self):
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             return self.graphInt.isolatedNodes()
 *         if self.ctype=="float":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 870, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 870, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":871
 *     def isolatedNodes(self):
 *         if self.ctype=="int":
 *             return self.graphInt.isolatedNodes()             # <<<<<<<<<<<<<<
 *         if self.ctype=="float":
 *             return self.graphFloat.isolatedNodes()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->__pyx_base.graphInt->isolatedNodes()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 871, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "miololib.pyx":870
 * 
 *     def isolatedNodes(self):
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             return self.graphInt.isolatedNodes()
 *         if self.ctype=="float":
 */
  }

  /* "miololib.pyx":872
 *         if self.ctype=="int":
 *             return self.graphInt.isolatedNodes()
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             return self.graphFloat.isolatedNodes()
 *         if self.ctype=="double":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 872, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 872, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":873
 *             return self.graphInt.isolatedNodes()
 *         if self.ctype=="float":
 *             return self.graphFloat.isolatedNodes()             # <<<<<<<<<<<<<<
 *         if self.ctype=="double":
 *             return self.graphDouble.isolatedNodes()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->__pyx_base.graphFloat->isolatedNodes()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 873, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "miololib.pyx":872
 *         if self.ctype=="int":
 *             return self.graphInt.isolatedNodes()
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             return self.graphFloat.isolatedNodes()
 *         if self.ctype=="double":
 */
  }

  /* "miololib.pyx":874
 *         if self.ctype=="float":
 *             return self.graphFloat.isolatedNodes()
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             return self.graphDouble.isolatedNodes()
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 874, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 874, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":875
 *             return self.graphFloat.isolatedNodes()
 *         if self.ctype=="double":
 *             return self.graphDouble.isolatedNodes()             # <<<<<<<<<<<<<<
 * 
 *     def print(self):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->__pyx_base.graphDouble->isolatedNodes()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 875, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "miololib.pyx":874
 *         if self.ctype=="float":
 *             return self.graphFloat.isolatedNodes()
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             return self.graphDouble.isolatedNodes()
 * 
 */
  }

  /* "miololib.pyx":869
 *             return (self.graphDouble.e[k].i,self.graphDouble.e[k].j,self.graphDouble.e[k].w)
 * 
 *     def isolatedNodes(self):             # <<<<<<<<<<<<<<
 *         if self.ctype=="int":
 *             return self.graphInt.isolatedNodes()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("miolo.Graph.isolatedNodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":877
 *             return self.graphDouble.isolatedNodes()
 * 
 *     def print(self):             # <<<<<<<<<<<<<<
 *         if self.ctype=="int":
 *             return self.graphInt.print()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_5Graph_11print(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_5Graph_10print, "Graph.print(self)");
static PyMethodDef __pyx_mdef_5miolo_5Graph_11print = {"print", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_5Graph_11print, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_5Graph_10print};
static PyObject *__pyx_pw_5miolo_5Graph_11print(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("print (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("print", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "print", 0))) return NULL;
  __pyx_r = __pyx_pf_5miolo_5Graph_10print(((struct __pyx_obj_5miolo_Graph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_5Graph_10print(struct __pyx_obj_5miolo_Graph *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("print", 1);

  /* "miololib.pyx":878
 * 
 *     def print(self):
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             return self.graphInt.print()
 *         if self.ctype=="float":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 878, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 878, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":879
 *     def print(self):
 *         if self.ctype=="int":
 *             return self.graphInt.print()             # <<<<<<<<<<<<<<
 *         if self.ctype=="float":
 *             return self.graphFloat.print()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_void_to_None(__pyx_v_self->__pyx_base.graphInt->print()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 879, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "miololib.pyx":878
 * 
 *     def print(self):
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             return self.graphInt.print()
 *         if self.ctype=="float":
 */
  }

  /* "miololib.pyx":880
 *         if self.ctype=="int":
 *             return self.graphInt.print()
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             return self.graphFloat.print()
 *         if self.ctype=="double":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 880, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 880, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":881
 *             return self.graphInt.print()
 *         if self.ctype=="float":
 *             return self.graphFloat.print()             # <<<<<<<<<<<<<<
 *         if self.ctype=="double":
 *             return self.graphDouble.print()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_void_to_None(__pyx_v_self->__pyx_base.graphFloat->print()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 881, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "miololib.pyx":880
 *         if self.ctype=="int":
 *             return self.graphInt.print()
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             return self.graphFloat.print()
 *         if self.ctype=="double":
 */
  }

  /* "miololib.pyx":882
 *         if self.ctype=="float":
 *             return self.graphFloat.print()
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             return self.graphDouble.print()
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 882, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 882, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":883
 *             return self.graphFloat.print()
 *         if self.ctype=="double":
 *             return self.graphDouble.print()             # <<<<<<<<<<<<<<
 * 
 *     #---------------------------------------------------------------------------
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_void_to_None(__pyx_v_self->__pyx_base.graphDouble->print()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 883, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "miololib.pyx":882
 *         if self.ctype=="float":
 *             return self.graphFloat.print()
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             return self.graphDouble.print()
 * 
 */
  }

  /* "miololib.pyx":877
 *             return self.graphDouble.isolatedNodes()
 * 
 *     def print(self):             # <<<<<<<<<<<<<<
 *         if self.ctype=="int":
 *             return self.graphInt.print()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("miolo.Graph.print", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":889
 *     #---------------------------------------------------------------------------
 * 
 *     def propagate(self, Matrix M, bool[:] clamped=None):             # <<<<<<<<<<<<<<
 *         """
 *             When clamped is None, returns the matrix product of self and M.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_5Graph_13propagate(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_5Graph_12propagate, "Graph.propagate(self, Matrix M, bool[:] clamped=None)\n\n            When clamped is None, returns the matrix product of self and M.\n            When clamped is not None, it acts as a copy indicator: if clamped[i]\n            is True, row i of M is copied to output. If clamped[i] is False, \n            matrix multiplication is done as usual.\n            clamped must have length equal to M.rows.\n        ");
static PyMethodDef __pyx_mdef_5miolo_5Graph_13propagate = {"propagate", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_5Graph_13propagate, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_5Graph_12propagate};
static PyObject *__pyx_pw_5miolo_5Graph_13propagate(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_M = 0;
  __Pyx_memviewslice __pyx_v_clamped = { 0, 0, { 0 }, { 0 }, { 0 } };
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("propagate (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_M,&__pyx_n_s_clamped,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_M)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 889, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_clamped);
          if (value) { values[1] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 889, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "propagate") < 0)) __PYX_ERR(1, 889, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_M = ((struct __pyx_obj_5miolo_Matrix *)values[0]);
    if (values[1]) {
      __pyx_v_clamped = __Pyx_PyObject_to_MemoryviewSlice_ds_nn_bool(values[1], PyBUF_WRITABLE); if (unlikely(!__pyx_v_clamped.memview)) __PYX_ERR(1, 889, __pyx_L3_error)
    } else {
      __pyx_v_clamped = __pyx_k__36;
      __PYX_INC_MEMVIEW(&__pyx_v_clamped, 1);
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("propagate", 0, 1, 2, __pyx_nargs); __PYX_ERR(1, 889, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __PYX_XCLEAR_MEMVIEW(&__pyx_v_clamped, 1);
  __Pyx_AddTraceback("miolo.Graph.propagate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_M), __pyx_ptype_5miolo_Matrix, 1, "M", 0))) __PYX_ERR(1, 889, __pyx_L1_error)
  __pyx_r = __pyx_pf_5miolo_5Graph_12propagate(((struct __pyx_obj_5miolo_Graph *)__pyx_v_self), __pyx_v_M, __pyx_v_clamped);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XCLEAR_MEMVIEW(&__pyx_v_clamped, 1);
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_5Graph_12propagate(struct __pyx_obj_5miolo_Graph *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_M, __Pyx_memviewslice __pyx_v_clamped) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("propagate", 1);

  /* "miololib.pyx":897
 *             clamped must have length equal to M.rows.
 *         """
 *         if clamped is not None:             # <<<<<<<<<<<<<<
 *             if M.rows!=clamped.size:
 *                 raise Exception("clamped must have length equal to Matrix rows.")
 */
  __pyx_t_1 = (((PyObject *) __pyx_v_clamped.memview) != Py_None);
  if (__pyx_t_1) {

    /* "miololib.pyx":898
 *         """
 *         if clamped is not None:
 *             if M.rows!=clamped.size:             # <<<<<<<<<<<<<<
 *                 raise Exception("clamped must have length equal to Matrix rows.")
 *             if M.rows!=self.nodes:
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_rows); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 898, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_clamped, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn_bool, (int (*)(char *, PyObject *)) __pyx_memview_set_nn_bool, 0);; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 898, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_size); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 898, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, __pyx_t_4, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 898, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 898, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(__pyx_t_1)) {

      /* "miololib.pyx":899
 *         if clamped is not None:
 *             if M.rows!=clamped.size:
 *                 raise Exception("clamped must have length equal to Matrix rows.")             # <<<<<<<<<<<<<<
 *             if M.rows!=self.nodes:
 *                 raise Exception("Number of Matrix rows must be equal to number of nodes.")
 */
      __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__37, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 899, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(1, 899, __pyx_L1_error)

      /* "miololib.pyx":898
 *         """
 *         if clamped is not None:
 *             if M.rows!=clamped.size:             # <<<<<<<<<<<<<<
 *                 raise Exception("clamped must have length equal to Matrix rows.")
 *             if M.rows!=self.nodes:
 */
    }

    /* "miololib.pyx":900
 *             if M.rows!=clamped.size:
 *                 raise Exception("clamped must have length equal to Matrix rows.")
 *             if M.rows!=self.nodes:             # <<<<<<<<<<<<<<
 *                 raise Exception("Number of Matrix rows must be equal to number of nodes.")
 *             if M.ctype!=self.ctype:
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_rows); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 900, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nodes); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 900, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = PyObject_RichCompare(__pyx_t_3, __pyx_t_4, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 900, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 900, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(__pyx_t_1)) {

      /* "miololib.pyx":901
 *                 raise Exception("clamped must have length equal to Matrix rows.")
 *             if M.rows!=self.nodes:
 *                 raise Exception("Number of Matrix rows must be equal to number of nodes.")             # <<<<<<<<<<<<<<
 *             if M.ctype!=self.ctype:
 *                 raise TypeError("Graph and Matrix must have same ctype.")
 */
      __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__38, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 901, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_Raise(__pyx_t_2, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __PYX_ERR(1, 901, __pyx_L1_error)

      /* "miololib.pyx":900
 *             if M.rows!=clamped.size:
 *                 raise Exception("clamped must have length equal to Matrix rows.")
 *             if M.rows!=self.nodes:             # <<<<<<<<<<<<<<
 *                 raise Exception("Number of Matrix rows must be equal to number of nodes.")
 *             if M.ctype!=self.ctype:
 */
    }

    /* "miololib.pyx":902
 *             if M.rows!=self.nodes:
 *                 raise Exception("Number of Matrix rows must be equal to number of nodes.")
 *             if M.ctype!=self.ctype:             # <<<<<<<<<<<<<<
 *                 raise TypeError("Graph and Matrix must have same ctype.")
 *             out = Matrix()
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 902, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 902, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, __pyx_t_4, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 902, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 902, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(__pyx_t_1)) {

      /* "miololib.pyx":903
 *                 raise Exception("Number of Matrix rows must be equal to number of nodes.")
 *             if M.ctype!=self.ctype:
 *                 raise TypeError("Graph and Matrix must have same ctype.")             # <<<<<<<<<<<<<<
 *             out = Matrix()
 *             if self.ctype=="int":
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__39, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 903, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(1, 903, __pyx_L1_error)

      /* "miololib.pyx":902
 *             if M.rows!=self.nodes:
 *                 raise Exception("Number of Matrix rows must be equal to number of nodes.")
 *             if M.ctype!=self.ctype:             # <<<<<<<<<<<<<<
 *                 raise TypeError("Graph and Matrix must have same ctype.")
 *             out = Matrix()
 */
    }

    /* "miololib.pyx":904
 *             if M.ctype!=self.ctype:
 *                 raise TypeError("Graph and Matrix must have same ctype.")
 *             out = Matrix()             # <<<<<<<<<<<<<<
 *             if self.ctype=="int":
 *                 out.mtxInt = self.graphInt.propagate(drf(M.mtxInt),&clamped[0])
 */
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5miolo_Matrix)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 904, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_out = ((struct __pyx_obj_5miolo_Matrix *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "miololib.pyx":905
 *                 raise TypeError("Graph and Matrix must have same ctype.")
 *             out = Matrix()
 *             if self.ctype=="int":             # <<<<<<<<<<<<<<
 *                 out.mtxInt = self.graphInt.propagate(drf(M.mtxInt),&clamped[0])
 *             if self.ctype=="float":
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 905, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 905, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_1) {

      /* "miololib.pyx":906
 *             out = Matrix()
 *             if self.ctype=="int":
 *                 out.mtxInt = self.graphInt.propagate(drf(M.mtxInt),&clamped[0])             # <<<<<<<<<<<<<<
 *             if self.ctype=="float":
 *                 out.mtxFloat = self.graphFloat.propagate(drf(M.mtxFloat),&clamped[0])
 */
      __pyx_t_5 = 0;
      if (__pyx_t_5 < 0) __pyx_t_5 += __pyx_v_clamped.shape[0];
      __pyx_v_out->__pyx_base.mtxInt = __pyx_v_self->__pyx_base.graphInt->propagate((*__pyx_v_M->__pyx_base.mtxInt), (&(*((bool *) ( /* dim=0 */ (__pyx_v_clamped.data + __pyx_t_5 * __pyx_v_clamped.strides[0]) )))));

      /* "miololib.pyx":905
 *                 raise TypeError("Graph and Matrix must have same ctype.")
 *             out = Matrix()
 *             if self.ctype=="int":             # <<<<<<<<<<<<<<
 *                 out.mtxInt = self.graphInt.propagate(drf(M.mtxInt),&clamped[0])
 *             if self.ctype=="float":
 */
    }

    /* "miololib.pyx":907
 *             if self.ctype=="int":
 *                 out.mtxInt = self.graphInt.propagate(drf(M.mtxInt),&clamped[0])
 *             if self.ctype=="float":             # <<<<<<<<<<<<<<
 *                 out.mtxFloat = self.graphFloat.propagate(drf(M.mtxFloat),&clamped[0])
 *             if self.ctype=="int":
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 907, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 907, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_1) {

      /* "miololib.pyx":908
 *                 out.mtxInt = self.graphInt.propagate(drf(M.mtxInt),&clamped[0])
 *             if self.ctype=="float":
 *                 out.mtxFloat = self.graphFloat.propagate(drf(M.mtxFloat),&clamped[0])             # <<<<<<<<<<<<<<
 *             if self.ctype=="int":
 *                 out.mtxDouble = self.graphDouble.propagate(drf(M.mtxDouble),&clamped[0])
 */
      __pyx_t_5 = 0;
      if (__pyx_t_5 < 0) __pyx_t_5 += __pyx_v_clamped.shape[0];
      __pyx_v_out->__pyx_base.mtxFloat = __pyx_v_self->__pyx_base.graphFloat->propagate((*__pyx_v_M->__pyx_base.mtxFloat), (&(*((bool *) ( /* dim=0 */ (__pyx_v_clamped.data + __pyx_t_5 * __pyx_v_clamped.strides[0]) )))));

      /* "miololib.pyx":907
 *             if self.ctype=="int":
 *                 out.mtxInt = self.graphInt.propagate(drf(M.mtxInt),&clamped[0])
 *             if self.ctype=="float":             # <<<<<<<<<<<<<<
 *                 out.mtxFloat = self.graphFloat.propagate(drf(M.mtxFloat),&clamped[0])
 *             if self.ctype=="int":
 */
    }

    /* "miololib.pyx":909
 *             if self.ctype=="float":
 *                 out.mtxFloat = self.graphFloat.propagate(drf(M.mtxFloat),&clamped[0])
 *             if self.ctype=="int":             # <<<<<<<<<<<<<<
 *                 out.mtxDouble = self.graphDouble.propagate(drf(M.mtxDouble),&clamped[0])
 *             return out
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 909, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 909, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_1) {

      /* "miololib.pyx":910
 *                 out.mtxFloat = self.graphFloat.propagate(drf(M.mtxFloat),&clamped[0])
 *             if self.ctype=="int":
 *                 out.mtxDouble = self.graphDouble.propagate(drf(M.mtxDouble),&clamped[0])             # <<<<<<<<<<<<<<
 *             return out
 *         else:
 */
      __pyx_t_5 = 0;
      if (__pyx_t_5 < 0) __pyx_t_5 += __pyx_v_clamped.shape[0];
      __pyx_v_out->__pyx_base.mtxDouble = __pyx_v_self->__pyx_base.graphDouble->propagate((*__pyx_v_M->__pyx_base.mtxDouble), (&(*((bool *) ( /* dim=0 */ (__pyx_v_clamped.data + __pyx_t_5 * __pyx_v_clamped.strides[0]) )))));

      /* "miololib.pyx":909
 *             if self.ctype=="float":
 *                 out.mtxFloat = self.graphFloat.propagate(drf(M.mtxFloat),&clamped[0])
 *             if self.ctype=="int":             # <<<<<<<<<<<<<<
 *                 out.mtxDouble = self.graphDouble.propagate(drf(M.mtxDouble),&clamped[0])
 *             return out
 */
    }

    /* "miololib.pyx":911
 *             if self.ctype=="int":
 *                 out.mtxDouble = self.graphDouble.propagate(drf(M.mtxDouble),&clamped[0])
 *             return out             # <<<<<<<<<<<<<<
 *         else:
 *             return self&M
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_out);
    __pyx_r = ((PyObject *)__pyx_v_out);
    goto __pyx_L0;

    /* "miololib.pyx":897
 *             clamped must have length equal to M.rows.
 *         """
 *         if clamped is not None:             # <<<<<<<<<<<<<<
 *             if M.rows!=clamped.size:
 *                 raise Exception("clamped must have length equal to Matrix rows.")
 */
  }

  /* "miololib.pyx":913
 *             return out
 *         else:
 *             return self&M             # <<<<<<<<<<<<<<
 * 
 *     def __add__(self, Graph G):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = PyNumber_And(((PyObject *)__pyx_v_self), ((PyObject *)__pyx_v_M)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 913, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "miololib.pyx":889
 *     #---------------------------------------------------------------------------
 * 
 *     def propagate(self, Matrix M, bool[:] clamped=None):             # <<<<<<<<<<<<<<
 *         """
 *             When clamped is None, returns the matrix product of self and M.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("miolo.Graph.propagate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":915
 *             return self&M
 * 
 *     def __add__(self, Graph G):             # <<<<<<<<<<<<<<
 *         if self.ctype!=G.ctype:
 *             raise TypeError("Graphs must share same ctype.")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_5Graph_15__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_G); /*proto*/
static PyObject *__pyx_pw_5miolo_5Graph_15__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_G) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__add__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_5miolo_Graph, 1, "G", 0))) __PYX_ERR(1, 915, __pyx_L1_error)
  __pyx_r = __pyx_pf_5miolo_5Graph_14__add__(((struct __pyx_obj_5miolo_Graph *)__pyx_v_self), ((struct __pyx_obj_5miolo_Graph *)__pyx_v_G));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_5Graph_14__add__(struct __pyx_obj_5miolo_Graph *__pyx_v_self, struct __pyx_obj_5miolo_Graph *__pyx_v_G) {
  struct __pyx_obj_5miolo_Graph *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__add__", 1);

  /* "miololib.pyx":916
 * 
 *     def __add__(self, Graph G):
 *         if self.ctype!=G.ctype:             # <<<<<<<<<<<<<<
 *             raise TypeError("Graphs must share same ctype.")
 *         if self.edges!=G.edges:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 916, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_G), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 916, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 916, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 916, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(__pyx_t_4)) {

    /* "miololib.pyx":917
 *     def __add__(self, Graph G):
 *         if self.ctype!=G.ctype:
 *             raise TypeError("Graphs must share same ctype.")             # <<<<<<<<<<<<<<
 *         if self.edges!=G.edges:
 *             raise Exception("Graphs must have same number of edges")
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__40, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 917, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 917, __pyx_L1_error)

    /* "miololib.pyx":916
 * 
 *     def __add__(self, Graph G):
 *         if self.ctype!=G.ctype:             # <<<<<<<<<<<<<<
 *             raise TypeError("Graphs must share same ctype.")
 *         if self.edges!=G.edges:
 */
  }

  /* "miololib.pyx":918
 *         if self.ctype!=G.ctype:
 *             raise TypeError("Graphs must share same ctype.")
 *         if self.edges!=G.edges:             # <<<<<<<<<<<<<<
 *             raise Exception("Graphs must have same number of edges")
 *         out = Graph()
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_edges); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 918, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_G), __pyx_n_s_edges); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 918, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_3, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 918, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 918, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(__pyx_t_4)) {

    /* "miololib.pyx":919
 *             raise TypeError("Graphs must share same ctype.")
 *         if self.edges!=G.edges:
 *             raise Exception("Graphs must have same number of edges")             # <<<<<<<<<<<<<<
 *         out = Graph()
 *         if self.ctype=="int":
 */
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__41, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 919, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 919, __pyx_L1_error)

    /* "miololib.pyx":918
 *         if self.ctype!=G.ctype:
 *             raise TypeError("Graphs must share same ctype.")
 *         if self.edges!=G.edges:             # <<<<<<<<<<<<<<
 *             raise Exception("Graphs must have same number of edges")
 *         out = Graph()
 */
  }

  /* "miololib.pyx":920
 *         if self.edges!=G.edges:
 *             raise Exception("Graphs must have same number of edges")
 *         out = Graph()             # <<<<<<<<<<<<<<
 *         if self.ctype=="int":
 *             out.graphInt = self.graphInt.add(G.graphInt)
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5miolo_Graph)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 920, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_out = ((struct __pyx_obj_5miolo_Graph *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "miololib.pyx":921
 *             raise Exception("Graphs must have same number of edges")
 *         out = Graph()
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.graphInt = self.graphInt.add(G.graphInt)
 *         if self.ctype=="float":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 921, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 921, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "miololib.pyx":922
 *         out = Graph()
 *         if self.ctype=="int":
 *             out.graphInt = self.graphInt.add(G.graphInt)             # <<<<<<<<<<<<<<
 *         if self.ctype=="float":
 *             out.graphFloat = self.graphFloat.add(G.graphFloat)
 */
    __pyx_v_out->__pyx_base.graphInt = __pyx_v_self->__pyx_base.graphInt->add(__pyx_v_G->__pyx_base.graphInt);

    /* "miololib.pyx":921
 *             raise Exception("Graphs must have same number of edges")
 *         out = Graph()
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.graphInt = self.graphInt.add(G.graphInt)
 *         if self.ctype=="float":
 */
  }

  /* "miololib.pyx":923
 *         if self.ctype=="int":
 *             out.graphInt = self.graphInt.add(G.graphInt)
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.graphFloat = self.graphFloat.add(G.graphFloat)
 *         if self.ctype=="double":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 923, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 923, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "miololib.pyx":924
 *             out.graphInt = self.graphInt.add(G.graphInt)
 *         if self.ctype=="float":
 *             out.graphFloat = self.graphFloat.add(G.graphFloat)             # <<<<<<<<<<<<<<
 *         if self.ctype=="double":
 *             out.graphDouble = self.graphDouble.add(G.graphDouble)
 */
    __pyx_v_out->__pyx_base.graphFloat = __pyx_v_self->__pyx_base.graphFloat->add(__pyx_v_G->__pyx_base.graphFloat);

    /* "miololib.pyx":923
 *         if self.ctype=="int":
 *             out.graphInt = self.graphInt.add(G.graphInt)
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.graphFloat = self.graphFloat.add(G.graphFloat)
 *         if self.ctype=="double":
 */
  }

  /* "miololib.pyx":925
 *         if self.ctype=="float":
 *             out.graphFloat = self.graphFloat.add(G.graphFloat)
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.graphDouble = self.graphDouble.add(G.graphDouble)
 *         return out
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 925, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 925, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "miololib.pyx":926
 *             out.graphFloat = self.graphFloat.add(G.graphFloat)
 *         if self.ctype=="double":
 *             out.graphDouble = self.graphDouble.add(G.graphDouble)             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
    __pyx_v_out->__pyx_base.graphDouble = __pyx_v_self->__pyx_base.graphDouble->add(__pyx_v_G->__pyx_base.graphDouble);

    /* "miololib.pyx":925
 *         if self.ctype=="float":
 *             out.graphFloat = self.graphFloat.add(G.graphFloat)
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.graphDouble = self.graphDouble.add(G.graphDouble)
 *         return out
 */
  }

  /* "miololib.pyx":927
 *         if self.ctype=="double":
 *             out.graphDouble = self.graphDouble.add(G.graphDouble)
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     def __sub__(self, Graph G):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_out);
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "miololib.pyx":915
 *             return self&M
 * 
 *     def __add__(self, Graph G):             # <<<<<<<<<<<<<<
 *         if self.ctype!=G.ctype:
 *             raise TypeError("Graphs must share same ctype.")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("miolo.Graph.__add__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":929
 *         return out
 * 
 *     def __sub__(self, Graph G):             # <<<<<<<<<<<<<<
 *         if self.ctype!=G.ctype:
 *             raise TypeError("Graphs must share same ctype.")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_5Graph_17__sub__(PyObject *__pyx_v_self, PyObject *__pyx_v_G); /*proto*/
static PyObject *__pyx_pw_5miolo_5Graph_17__sub__(PyObject *__pyx_v_self, PyObject *__pyx_v_G) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__sub__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_5miolo_Graph, 1, "G", 0))) __PYX_ERR(1, 929, __pyx_L1_error)
  __pyx_r = __pyx_pf_5miolo_5Graph_16__sub__(((struct __pyx_obj_5miolo_Graph *)__pyx_v_self), ((struct __pyx_obj_5miolo_Graph *)__pyx_v_G));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_5Graph_16__sub__(struct __pyx_obj_5miolo_Graph *__pyx_v_self, struct __pyx_obj_5miolo_Graph *__pyx_v_G) {
  struct __pyx_obj_5miolo_Graph *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__sub__", 1);

  /* "miololib.pyx":930
 * 
 *     def __sub__(self, Graph G):
 *         if self.ctype!=G.ctype:             # <<<<<<<<<<<<<<
 *             raise TypeError("Graphs must share same ctype.")
 *         if self.edges!=G.edges:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 930, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_G), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 930, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 930, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 930, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(__pyx_t_4)) {

    /* "miololib.pyx":931
 *     def __sub__(self, Graph G):
 *         if self.ctype!=G.ctype:
 *             raise TypeError("Graphs must share same ctype.")             # <<<<<<<<<<<<<<
 *         if self.edges!=G.edges:
 *             raise Exception("Graphs must have same number of edges")
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__40, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 931, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 931, __pyx_L1_error)

    /* "miololib.pyx":930
 * 
 *     def __sub__(self, Graph G):
 *         if self.ctype!=G.ctype:             # <<<<<<<<<<<<<<
 *             raise TypeError("Graphs must share same ctype.")
 *         if self.edges!=G.edges:
 */
  }

  /* "miololib.pyx":932
 *         if self.ctype!=G.ctype:
 *             raise TypeError("Graphs must share same ctype.")
 *         if self.edges!=G.edges:             # <<<<<<<<<<<<<<
 *             raise Exception("Graphs must have same number of edges")
 *         out = Graph()
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_edges); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 932, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_G), __pyx_n_s_edges); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 932, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_3, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 932, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 932, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(__pyx_t_4)) {

    /* "miololib.pyx":933
 *             raise TypeError("Graphs must share same ctype.")
 *         if self.edges!=G.edges:
 *             raise Exception("Graphs must have same number of edges")             # <<<<<<<<<<<<<<
 *         out = Graph()
 *         if self.ctype=="int":
 */
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__41, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 933, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 933, __pyx_L1_error)

    /* "miololib.pyx":932
 *         if self.ctype!=G.ctype:
 *             raise TypeError("Graphs must share same ctype.")
 *         if self.edges!=G.edges:             # <<<<<<<<<<<<<<
 *             raise Exception("Graphs must have same number of edges")
 *         out = Graph()
 */
  }

  /* "miololib.pyx":934
 *         if self.edges!=G.edges:
 *             raise Exception("Graphs must have same number of edges")
 *         out = Graph()             # <<<<<<<<<<<<<<
 *         if self.ctype=="int":
 *             out.graphInt = self.graphInt.sub(G.graphInt)
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5miolo_Graph)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 934, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_out = ((struct __pyx_obj_5miolo_Graph *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "miololib.pyx":935
 *             raise Exception("Graphs must have same number of edges")
 *         out = Graph()
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.graphInt = self.graphInt.sub(G.graphInt)
 *         if self.ctype=="float":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 935, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 935, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "miololib.pyx":936
 *         out = Graph()
 *         if self.ctype=="int":
 *             out.graphInt = self.graphInt.sub(G.graphInt)             # <<<<<<<<<<<<<<
 *         if self.ctype=="float":
 *             out.graphFloat = self.graphFloat.sub(G.graphFloat)
 */
    __pyx_v_out->__pyx_base.graphInt = __pyx_v_self->__pyx_base.graphInt->sub(__pyx_v_G->__pyx_base.graphInt);

    /* "miololib.pyx":935
 *             raise Exception("Graphs must have same number of edges")
 *         out = Graph()
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.graphInt = self.graphInt.sub(G.graphInt)
 *         if self.ctype=="float":
 */
  }

  /* "miololib.pyx":937
 *         if self.ctype=="int":
 *             out.graphInt = self.graphInt.sub(G.graphInt)
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.graphFloat = self.graphFloat.sub(G.graphFloat)
 *         if self.ctype=="double":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 937, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 937, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "miololib.pyx":938
 *             out.graphInt = self.graphInt.sub(G.graphInt)
 *         if self.ctype=="float":
 *             out.graphFloat = self.graphFloat.sub(G.graphFloat)             # <<<<<<<<<<<<<<
 *         if self.ctype=="double":
 *             out.graphDouble = self.graphDouble.sub(G.graphDouble)
 */
    __pyx_v_out->__pyx_base.graphFloat = __pyx_v_self->__pyx_base.graphFloat->sub(__pyx_v_G->__pyx_base.graphFloat);

    /* "miololib.pyx":937
 *         if self.ctype=="int":
 *             out.graphInt = self.graphInt.sub(G.graphInt)
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.graphFloat = self.graphFloat.sub(G.graphFloat)
 *         if self.ctype=="double":
 */
  }

  /* "miololib.pyx":939
 *         if self.ctype=="float":
 *             out.graphFloat = self.graphFloat.sub(G.graphFloat)
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.graphDouble = self.graphDouble.sub(G.graphDouble)
 *         return out
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 939, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 939, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "miololib.pyx":940
 *             out.graphFloat = self.graphFloat.sub(G.graphFloat)
 *         if self.ctype=="double":
 *             out.graphDouble = self.graphDouble.sub(G.graphDouble)             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
    __pyx_v_out->__pyx_base.graphDouble = __pyx_v_self->__pyx_base.graphDouble->sub(__pyx_v_G->__pyx_base.graphDouble);

    /* "miololib.pyx":939
 *         if self.ctype=="float":
 *             out.graphFloat = self.graphFloat.sub(G.graphFloat)
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.graphDouble = self.graphDouble.sub(G.graphDouble)
 *         return out
 */
  }

  /* "miololib.pyx":941
 *         if self.ctype=="double":
 *             out.graphDouble = self.graphDouble.sub(G.graphDouble)
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     def __mul__(self,value):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_out);
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "miololib.pyx":929
 *         return out
 * 
 *     def __sub__(self, Graph G):             # <<<<<<<<<<<<<<
 *         if self.ctype!=G.ctype:
 *             raise TypeError("Graphs must share same ctype.")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("miolo.Graph.__sub__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":943
 *         return out
 * 
 *     def __mul__(self,value):             # <<<<<<<<<<<<<<
 *         if self.ctype=="int":
 *             out = Graph(ctype="int")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_5Graph_19__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static PyObject *__pyx_pw_5miolo_5Graph_19__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__mul__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5miolo_5Graph_18__mul__(((struct __pyx_obj_5miolo_Graph *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_5Graph_18__mul__(struct __pyx_obj_5miolo_Graph *__pyx_v_self, PyObject *__pyx_v_value) {
  struct __pyx_obj_5miolo_mioloObject *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  float __pyx_t_5;
  double __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__mul__", 1);

  /* "miololib.pyx":944
 * 
 *     def __mul__(self,value):
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             out = Graph(ctype="int")
 *             out.graphInt = self.graphInt.smul(value)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 944, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 944, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":945
 *     def __mul__(self,value):
 *         if self.ctype=="int":
 *             out = Graph(ctype="int")             # <<<<<<<<<<<<<<
 *             out.graphInt = self.graphInt.smul(value)
 *             return out
 */
    __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 945, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ctype, __pyx_n_s_int) < 0) __PYX_ERR(1, 945, __pyx_L1_error)
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Graph), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 945, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_out = ((struct __pyx_obj_5miolo_mioloObject *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "miololib.pyx":946
 *         if self.ctype=="int":
 *             out = Graph(ctype="int")
 *             out.graphInt = self.graphInt.smul(value)             # <<<<<<<<<<<<<<
 *             return out
 *         if self.ctype=="float":
 */
    __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 946, __pyx_L1_error)
    __pyx_v_out->graphInt = __pyx_v_self->__pyx_base.graphInt->smul(__pyx_t_4);

    /* "miololib.pyx":947
 *             out = Graph(ctype="int")
 *             out.graphInt = self.graphInt.smul(value)
 *             return out             # <<<<<<<<<<<<<<
 *         if self.ctype=="float":
 *             out = Graph(ctype="float")
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_out);
    __pyx_r = ((PyObject *)__pyx_v_out);
    goto __pyx_L0;

    /* "miololib.pyx":944
 * 
 *     def __mul__(self,value):
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             out = Graph(ctype="int")
 *             out.graphInt = self.graphInt.smul(value)
 */
  }

  /* "miololib.pyx":948
 *             out.graphInt = self.graphInt.smul(value)
 *             return out
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             out = Graph(ctype="float")
 *             out.graphFloat = self.graphFloat.smul(value)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 948, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 948, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":949
 *             return out
 *         if self.ctype=="float":
 *             out = Graph(ctype="float")             # <<<<<<<<<<<<<<
 *             out.graphFloat = self.graphFloat.smul(value)
 *             return out
 */
    __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 949, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_ctype, __pyx_n_s_float) < 0) __PYX_ERR(1, 949, __pyx_L1_error)
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Graph), __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 949, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_out = ((struct __pyx_obj_5miolo_mioloObject *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "miololib.pyx":950
 *         if self.ctype=="float":
 *             out = Graph(ctype="float")
 *             out.graphFloat = self.graphFloat.smul(value)             # <<<<<<<<<<<<<<
 *             return out
 *         if self.ctype=="double":
 */
    __pyx_t_5 = __pyx_PyFloat_AsFloat(__pyx_v_value); if (unlikely((__pyx_t_5 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 950, __pyx_L1_error)
    __pyx_v_out->graphFloat = __pyx_v_self->__pyx_base.graphFloat->smul(__pyx_t_5);

    /* "miololib.pyx":951
 *             out = Graph(ctype="float")
 *             out.graphFloat = self.graphFloat.smul(value)
 *             return out             # <<<<<<<<<<<<<<
 *         if self.ctype=="double":
 *             out = Matrix(ctype="double")
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_out);
    __pyx_r = ((PyObject *)__pyx_v_out);
    goto __pyx_L0;

    /* "miololib.pyx":948
 *             out.graphInt = self.graphInt.smul(value)
 *             return out
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             out = Graph(ctype="float")
 *             out.graphFloat = self.graphFloat.smul(value)
 */
  }

  /* "miololib.pyx":952
 *             out.graphFloat = self.graphFloat.smul(value)
 *             return out
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             out = Matrix(ctype="double")
 *             out.graphDouble = self.graphDouble.smul(value)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 952, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 952, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":953
 *             return out
 *         if self.ctype=="double":
 *             out = Matrix(ctype="double")             # <<<<<<<<<<<<<<
 *             out.graphDouble = self.graphDouble.smul(value)
 *             return out
 */
    __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 953, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ctype, __pyx_n_s_double) < 0) __PYX_ERR(1, 953, __pyx_L1_error)
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Matrix), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 953, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_out = ((struct __pyx_obj_5miolo_mioloObject *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "miololib.pyx":954
 *         if self.ctype=="double":
 *             out = Matrix(ctype="double")
 *             out.graphDouble = self.graphDouble.smul(value)             # <<<<<<<<<<<<<<
 *             return out
 * 
 */
    __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 954, __pyx_L1_error)
    __pyx_v_out->graphDouble = __pyx_v_self->__pyx_base.graphDouble->smul(__pyx_t_6);

    /* "miololib.pyx":955
 *             out = Matrix(ctype="double")
 *             out.graphDouble = self.graphDouble.smul(value)
 *             return out             # <<<<<<<<<<<<<<
 * 
 *     def __rmul__(self,value):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_out);
    __pyx_r = ((PyObject *)__pyx_v_out);
    goto __pyx_L0;

    /* "miololib.pyx":952
 *             out.graphFloat = self.graphFloat.smul(value)
 *             return out
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             out = Matrix(ctype="double")
 *             out.graphDouble = self.graphDouble.smul(value)
 */
  }

  /* "miololib.pyx":943
 *         return out
 * 
 *     def __mul__(self,value):             # <<<<<<<<<<<<<<
 *         if self.ctype=="int":
 *             out = Graph(ctype="int")
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("miolo.Graph.__mul__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":957
 *             return out
 * 
 *     def __rmul__(self,value):             # <<<<<<<<<<<<<<
 *         return self*value
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_5Graph_21__rmul__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static PyObject *__pyx_pw_5miolo_5Graph_21__rmul__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__rmul__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5miolo_5Graph_20__rmul__(((struct __pyx_obj_5miolo_Graph *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_5Graph_20__rmul__(struct __pyx_obj_5miolo_Graph *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__rmul__", 1);

  /* "miololib.pyx":958
 * 
 *     def __rmul__(self,value):
 *         return self*value             # <<<<<<<<<<<<<<
 * 
 *     def __truediv__(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyNumber_Multiply(((PyObject *)__pyx_v_self), __pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 958, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "miololib.pyx":957
 *             return out
 * 
 *     def __rmul__(self,value):             # <<<<<<<<<<<<<<
 *         return self*value
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("miolo.Graph.__rmul__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":960
 *         return self*value
 * 
 *     def __truediv__(self, value):             # <<<<<<<<<<<<<<
 *         if value==0:
 *             raise ValueError("Attempting division by zero.")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_5Graph_23__truediv__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static PyObject *__pyx_pw_5miolo_5Graph_23__truediv__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__truediv__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5miolo_5Graph_22__truediv__(((struct __pyx_obj_5miolo_Graph *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_5Graph_22__truediv__(struct __pyx_obj_5miolo_Graph *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__truediv__", 1);

  /* "miololib.pyx":961
 * 
 *     def __truediv__(self, value):
 *         if value==0:             # <<<<<<<<<<<<<<
 *             raise ValueError("Attempting division by zero.")
 *         return self*(1./value)
 */
  __pyx_t_1 = (__Pyx_PyInt_BoolEqObjC(__pyx_v_value, __pyx_int_0, 0, 0)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 961, __pyx_L1_error)
  if (unlikely(__pyx_t_1)) {

    /* "miololib.pyx":962
 *     def __truediv__(self, value):
 *         if value==0:
 *             raise ValueError("Attempting division by zero.")             # <<<<<<<<<<<<<<
 *         return self*(1./value)
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__26, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 962, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 962, __pyx_L1_error)

    /* "miololib.pyx":961
 * 
 *     def __truediv__(self, value):
 *         if value==0:             # <<<<<<<<<<<<<<
 *             raise ValueError("Attempting division by zero.")
 *         return self*(1./value)
 */
  }

  /* "miololib.pyx":963
 *         if value==0:
 *             raise ValueError("Attempting division by zero.")
 *         return self*(1./value)             # <<<<<<<<<<<<<<
 * 
 *     def __and__(self, Matrix A):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyFloat_TrueDivideCObj(__pyx_float_1_, __pyx_v_value, 1., 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 963, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Multiply(((PyObject *)__pyx_v_self), __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 963, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "miololib.pyx":960
 *         return self*value
 * 
 *     def __truediv__(self, value):             # <<<<<<<<<<<<<<
 *         if value==0:
 *             raise ValueError("Attempting division by zero.")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("miolo.Graph.__truediv__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":965
 *         return self*(1./value)
 * 
 *     def __and__(self, Matrix A):             # <<<<<<<<<<<<<<
 *         if self.ctype!=A.ctype:
 *             raise Exception("Graph-Matrix operations require same ctype.")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_5Graph_25__and__(PyObject *__pyx_v_self, PyObject *__pyx_v_A); /*proto*/
static PyObject *__pyx_pw_5miolo_5Graph_25__and__(PyObject *__pyx_v_self, PyObject *__pyx_v_A) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__and__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_A), __pyx_ptype_5miolo_Matrix, 1, "A", 0))) __PYX_ERR(1, 965, __pyx_L1_error)
  __pyx_r = __pyx_pf_5miolo_5Graph_24__and__(((struct __pyx_obj_5miolo_Graph *)__pyx_v_self), ((struct __pyx_obj_5miolo_Matrix *)__pyx_v_A));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_5Graph_24__and__(struct __pyx_obj_5miolo_Graph *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_A) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__and__", 1);

  /* "miololib.pyx":966
 * 
 *     def __and__(self, Matrix A):
 *         if self.ctype!=A.ctype:             # <<<<<<<<<<<<<<
 *             raise Exception("Graph-Matrix operations require same ctype.")
 *         if self.nodes!=A.rows:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 966, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_A), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 966, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 966, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 966, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(__pyx_t_4)) {

    /* "miololib.pyx":967
 *     def __and__(self, Matrix A):
 *         if self.ctype!=A.ctype:
 *             raise Exception("Graph-Matrix operations require same ctype.")             # <<<<<<<<<<<<<<
 *         if self.nodes!=A.rows:
 *             raise Exception("Incompatible shape for product.")
 */
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__42, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 967, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 967, __pyx_L1_error)

    /* "miololib.pyx":966
 * 
 *     def __and__(self, Matrix A):
 *         if self.ctype!=A.ctype:             # <<<<<<<<<<<<<<
 *             raise Exception("Graph-Matrix operations require same ctype.")
 *         if self.nodes!=A.rows:
 */
  }

  /* "miololib.pyx":968
 *         if self.ctype!=A.ctype:
 *             raise Exception("Graph-Matrix operations require same ctype.")
 *         if self.nodes!=A.rows:             # <<<<<<<<<<<<<<
 *             raise Exception("Incompatible shape for product.")
 *         if self.ctype=="int":
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nodes); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 968, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_A), __pyx_n_s_rows); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 968, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_3, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 968, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 968, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(__pyx_t_4)) {

    /* "miololib.pyx":969
 *             raise Exception("Graph-Matrix operations require same ctype.")
 *         if self.nodes!=A.rows:
 *             raise Exception("Incompatible shape for product.")             # <<<<<<<<<<<<<<
 *         if self.ctype=="int":
 *             out = Matrix(ctype="int")
 */
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__43, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 969, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 969, __pyx_L1_error)

    /* "miololib.pyx":968
 *         if self.ctype!=A.ctype:
 *             raise Exception("Graph-Matrix operations require same ctype.")
 *         if self.nodes!=A.rows:             # <<<<<<<<<<<<<<
 *             raise Exception("Incompatible shape for product.")
 *         if self.ctype=="int":
 */
  }

  /* "miololib.pyx":970
 *         if self.nodes!=A.rows:
 *             raise Exception("Incompatible shape for product.")
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             out = Matrix(ctype="int")
 *             out.mtxInt = self.graphInt.mmul(A.mtxInt)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 970, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 970, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "miololib.pyx":971
 *             raise Exception("Incompatible shape for product.")
 *         if self.ctype=="int":
 *             out = Matrix(ctype="int")             # <<<<<<<<<<<<<<
 *             out.mtxInt = self.graphInt.mmul(A.mtxInt)
 *             return out
 */
    __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 971, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ctype, __pyx_n_s_int) < 0) __PYX_ERR(1, 971, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Matrix), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 971, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_out = ((struct __pyx_obj_5miolo_Matrix *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "miololib.pyx":972
 *         if self.ctype=="int":
 *             out = Matrix(ctype="int")
 *             out.mtxInt = self.graphInt.mmul(A.mtxInt)             # <<<<<<<<<<<<<<
 *             return out
 *         if self.ctype=="float":
 */
    __pyx_v_out->__pyx_base.mtxInt = __pyx_v_self->__pyx_base.graphInt->mmul(__pyx_v_A->__pyx_base.mtxInt);

    /* "miololib.pyx":973
 *             out = Matrix(ctype="int")
 *             out.mtxInt = self.graphInt.mmul(A.mtxInt)
 *             return out             # <<<<<<<<<<<<<<
 *         if self.ctype=="float":
 *             out = Matrix(ctype="float")
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_out);
    __pyx_r = ((PyObject *)__pyx_v_out);
    goto __pyx_L0;

    /* "miololib.pyx":970
 *         if self.nodes!=A.rows:
 *             raise Exception("Incompatible shape for product.")
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             out = Matrix(ctype="int")
 *             out.mtxInt = self.graphInt.mmul(A.mtxInt)
 */
  }

  /* "miololib.pyx":974
 *             out.mtxInt = self.graphInt.mmul(A.mtxInt)
 *             return out
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             out = Matrix(ctype="float")
 *             out.mtxFloat = self.graphFloat.mmul(A.mtxFloat)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 974, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 974, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "miololib.pyx":975
 *             return out
 *         if self.ctype=="float":
 *             out = Matrix(ctype="float")             # <<<<<<<<<<<<<<
 *             out.mtxFloat = self.graphFloat.mmul(A.mtxFloat)
 *             return out
 */
    __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 975, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_ctype, __pyx_n_s_float) < 0) __PYX_ERR(1, 975, __pyx_L1_error)
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Matrix), __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 975, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_out = ((struct __pyx_obj_5miolo_Matrix *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "miololib.pyx":976
 *         if self.ctype=="float":
 *             out = Matrix(ctype="float")
 *             out.mtxFloat = self.graphFloat.mmul(A.mtxFloat)             # <<<<<<<<<<<<<<
 *             return out
 *         if self.ctype=="double":
 */
    __pyx_v_out->__pyx_base.mtxFloat = __pyx_v_self->__pyx_base.graphFloat->mmul(__pyx_v_A->__pyx_base.mtxFloat);

    /* "miololib.pyx":977
 *             out = Matrix(ctype="float")
 *             out.mtxFloat = self.graphFloat.mmul(A.mtxFloat)
 *             return out             # <<<<<<<<<<<<<<
 *         if self.ctype=="double":
 *             out = Matrix(ctype="double")
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_out);
    __pyx_r = ((PyObject *)__pyx_v_out);
    goto __pyx_L0;

    /* "miololib.pyx":974
 *             out.mtxInt = self.graphInt.mmul(A.mtxInt)
 *             return out
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             out = Matrix(ctype="float")
 *             out.mtxFloat = self.graphFloat.mmul(A.mtxFloat)
 */
  }

  /* "miololib.pyx":978
 *             out.mtxFloat = self.graphFloat.mmul(A.mtxFloat)
 *             return out
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             out = Matrix(ctype="double")
 *             out.mtxDouble = self.graphDouble.mmul(A.mtxDouble)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 978, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 978, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "miololib.pyx":979
 *             return out
 *         if self.ctype=="double":
 *             out = Matrix(ctype="double")             # <<<<<<<<<<<<<<
 *             out.mtxDouble = self.graphDouble.mmul(A.mtxDouble)
 *             return out
 */
    __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 979, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ctype, __pyx_n_s_double) < 0) __PYX_ERR(1, 979, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Matrix), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 979, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_out = ((struct __pyx_obj_5miolo_Matrix *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "miololib.pyx":980
 *         if self.ctype=="double":
 *             out = Matrix(ctype="double")
 *             out.mtxDouble = self.graphDouble.mmul(A.mtxDouble)             # <<<<<<<<<<<<<<
 *             return out
 * 
 */
    __pyx_v_out->__pyx_base.mtxDouble = __pyx_v_self->__pyx_base.graphDouble->mmul(__pyx_v_A->__pyx_base.mtxDouble);

    /* "miololib.pyx":981
 *             out = Matrix(ctype="double")
 *             out.mtxDouble = self.graphDouble.mmul(A.mtxDouble)
 *             return out             # <<<<<<<<<<<<<<
 * 
 *     def __rand__(self, Matrix A):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_out);
    __pyx_r = ((PyObject *)__pyx_v_out);
    goto __pyx_L0;

    /* "miololib.pyx":978
 *             out.mtxFloat = self.graphFloat.mmul(A.mtxFloat)
 *             return out
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             out = Matrix(ctype="double")
 *             out.mtxDouble = self.graphDouble.mmul(A.mtxDouble)
 */
  }

  /* "miololib.pyx":965
 *         return self*(1./value)
 * 
 *     def __and__(self, Matrix A):             # <<<<<<<<<<<<<<
 *         if self.ctype!=A.ctype:
 *             raise Exception("Graph-Matrix operations require same ctype.")
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("miolo.Graph.__and__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":983
 *             return out
 * 
 *     def __rand__(self, Matrix A):             # <<<<<<<<<<<<<<
 *         if self.ctype!=A.ctype:
 *             raise Exception("Graph-Matrix operations require same ctype.")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_5Graph_27__rand__(PyObject *__pyx_v_self, PyObject *__pyx_v_A); /*proto*/
static PyObject *__pyx_pw_5miolo_5Graph_27__rand__(PyObject *__pyx_v_self, PyObject *__pyx_v_A) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__rand__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_A), __pyx_ptype_5miolo_Matrix, 1, "A", 0))) __PYX_ERR(1, 983, __pyx_L1_error)
  __pyx_r = __pyx_pf_5miolo_5Graph_26__rand__(((struct __pyx_obj_5miolo_Graph *)__pyx_v_self), ((struct __pyx_obj_5miolo_Matrix *)__pyx_v_A));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_5Graph_26__rand__(struct __pyx_obj_5miolo_Graph *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_A) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__rand__", 1);

  /* "miololib.pyx":984
 * 
 *     def __rand__(self, Matrix A):
 *         if self.ctype!=A.ctype:             # <<<<<<<<<<<<<<
 *             raise Exception("Graph-Matrix operations require same ctype.")
 *         if self.nodes!=A.cols:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 984, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_A), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 984, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 984, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 984, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(__pyx_t_4)) {

    /* "miololib.pyx":985
 *     def __rand__(self, Matrix A):
 *         if self.ctype!=A.ctype:
 *             raise Exception("Graph-Matrix operations require same ctype.")             # <<<<<<<<<<<<<<
 *         if self.nodes!=A.cols:
 *             raise Exception("Incompatible shape for product.")
 */
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__42, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 985, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 985, __pyx_L1_error)

    /* "miololib.pyx":984
 * 
 *     def __rand__(self, Matrix A):
 *         if self.ctype!=A.ctype:             # <<<<<<<<<<<<<<
 *             raise Exception("Graph-Matrix operations require same ctype.")
 *         if self.nodes!=A.cols:
 */
  }

  /* "miololib.pyx":986
 *         if self.ctype!=A.ctype:
 *             raise Exception("Graph-Matrix operations require same ctype.")
 *         if self.nodes!=A.cols:             # <<<<<<<<<<<<<<
 *             raise Exception("Incompatible shape for product.")
 *         if self.ctype=="int":
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nodes); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 986, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_A), __pyx_n_s_cols); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 986, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_3, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 986, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 986, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(__pyx_t_4)) {

    /* "miololib.pyx":987
 *             raise Exception("Graph-Matrix operations require same ctype.")
 *         if self.nodes!=A.cols:
 *             raise Exception("Incompatible shape for product.")             # <<<<<<<<<<<<<<
 *         if self.ctype=="int":
 *             out = Matrix(ctype="int")
 */
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__43, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 987, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 987, __pyx_L1_error)

    /* "miololib.pyx":986
 *         if self.ctype!=A.ctype:
 *             raise Exception("Graph-Matrix operations require same ctype.")
 *         if self.nodes!=A.cols:             # <<<<<<<<<<<<<<
 *             raise Exception("Incompatible shape for product.")
 *         if self.ctype=="int":
 */
  }

  /* "miololib.pyx":988
 *         if self.nodes!=A.cols:
 *             raise Exception("Incompatible shape for product.")
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             out = Matrix(ctype="int")
 *             out.mtxInt = self.graphInt.mmul(A.mtxInt)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 988, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 988, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "miololib.pyx":989
 *             raise Exception("Incompatible shape for product.")
 *         if self.ctype=="int":
 *             out = Matrix(ctype="int")             # <<<<<<<<<<<<<<
 *             out.mtxInt = self.graphInt.mmul(A.mtxInt)
 *             return out
 */
    __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 989, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ctype, __pyx_n_s_int) < 0) __PYX_ERR(1, 989, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Matrix), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 989, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_out = ((struct __pyx_obj_5miolo_Matrix *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "miololib.pyx":990
 *         if self.ctype=="int":
 *             out = Matrix(ctype="int")
 *             out.mtxInt = self.graphInt.mmul(A.mtxInt)             # <<<<<<<<<<<<<<
 *             return out
 *         if self.ctype=="float":
 */
    __pyx_v_out->__pyx_base.mtxInt = __pyx_v_self->__pyx_base.graphInt->mmul(__pyx_v_A->__pyx_base.mtxInt);

    /* "miololib.pyx":991
 *             out = Matrix(ctype="int")
 *             out.mtxInt = self.graphInt.mmul(A.mtxInt)
 *             return out             # <<<<<<<<<<<<<<
 *         if self.ctype=="float":
 *             out = Matrix(ctype="float")
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_out);
    __pyx_r = ((PyObject *)__pyx_v_out);
    goto __pyx_L0;

    /* "miololib.pyx":988
 *         if self.nodes!=A.cols:
 *             raise Exception("Incompatible shape for product.")
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             out = Matrix(ctype="int")
 *             out.mtxInt = self.graphInt.mmul(A.mtxInt)
 */
  }

  /* "miololib.pyx":992
 *             out.mtxInt = self.graphInt.mmul(A.mtxInt)
 *             return out
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             out = Matrix(ctype="float")
 *             out.mtxFloat = self.graphFloat.mmul(A.mtxFloat)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 992, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 992, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "miololib.pyx":993
 *             return out
 *         if self.ctype=="float":
 *             out = Matrix(ctype="float")             # <<<<<<<<<<<<<<
 *             out.mtxFloat = self.graphFloat.mmul(A.mtxFloat)
 *             return out
 */
    __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 993, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_ctype, __pyx_n_s_float) < 0) __PYX_ERR(1, 993, __pyx_L1_error)
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Matrix), __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 993, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_out = ((struct __pyx_obj_5miolo_Matrix *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "miololib.pyx":994
 *         if self.ctype=="float":
 *             out = Matrix(ctype="float")
 *             out.mtxFloat = self.graphFloat.mmul(A.mtxFloat)             # <<<<<<<<<<<<<<
 *             return out
 *         if self.ctype=="double":
 */
    __pyx_v_out->__pyx_base.mtxFloat = __pyx_v_self->__pyx_base.graphFloat->mmul(__pyx_v_A->__pyx_base.mtxFloat);

    /* "miololib.pyx":995
 *             out = Matrix(ctype="float")
 *             out.mtxFloat = self.graphFloat.mmul(A.mtxFloat)
 *             return out             # <<<<<<<<<<<<<<
 *         if self.ctype=="double":
 *             out = Matrix(ctype="double")
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_out);
    __pyx_r = ((PyObject *)__pyx_v_out);
    goto __pyx_L0;

    /* "miololib.pyx":992
 *             out.mtxInt = self.graphInt.mmul(A.mtxInt)
 *             return out
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             out = Matrix(ctype="float")
 *             out.mtxFloat = self.graphFloat.mmul(A.mtxFloat)
 */
  }

  /* "miololib.pyx":996
 *             out.mtxFloat = self.graphFloat.mmul(A.mtxFloat)
 *             return out
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             out = Matrix(ctype="double")
 *             out.mtxDouble = self.graphDouble.mmul(A.mtxDouble)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 996, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 996, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "miololib.pyx":997
 *             return out
 *         if self.ctype=="double":
 *             out = Matrix(ctype="double")             # <<<<<<<<<<<<<<
 *             out.mtxDouble = self.graphDouble.mmul(A.mtxDouble)
 *             return out
 */
    __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 997, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ctype, __pyx_n_s_double) < 0) __PYX_ERR(1, 997, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Matrix), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 997, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_out = ((struct __pyx_obj_5miolo_Matrix *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "miololib.pyx":998
 *         if self.ctype=="double":
 *             out = Matrix(ctype="double")
 *             out.mtxDouble = self.graphDouble.mmul(A.mtxDouble)             # <<<<<<<<<<<<<<
 *             return out
 * 
 */
    __pyx_v_out->__pyx_base.mtxDouble = __pyx_v_self->__pyx_base.graphDouble->mmul(__pyx_v_A->__pyx_base.mtxDouble);

    /* "miololib.pyx":999
 *             out = Matrix(ctype="double")
 *             out.mtxDouble = self.graphDouble.mmul(A.mtxDouble)
 *             return out             # <<<<<<<<<<<<<<
 * 
 *     #---------------------------------------------------------------------------
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_out);
    __pyx_r = ((PyObject *)__pyx_v_out);
    goto __pyx_L0;

    /* "miololib.pyx":996
 *             out.mtxFloat = self.graphFloat.mmul(A.mtxFloat)
 *             return out
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             out = Matrix(ctype="double")
 *             out.mtxDouble = self.graphDouble.mmul(A.mtxDouble)
 */
  }

  /* "miololib.pyx":983
 *             return out
 * 
 *     def __rand__(self, Matrix A):             # <<<<<<<<<<<<<<
 *         if self.ctype!=A.ctype:
 *             raise Exception("Graph-Matrix operations require same ctype.")
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("miolo.Graph.__rand__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":1005
 *     #---------------------------------------------------------------------------
 * 
 *     def normalize(self):             # <<<<<<<<<<<<<<
 *         """
 *             Symmetric normalization of edge weights.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_5Graph_29normalize(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_5Graph_28normalize, "Graph.normalize(self)\n\n            Symmetric normalization of edge weights.\n        ");
static PyMethodDef __pyx_mdef_5miolo_5Graph_29normalize = {"normalize", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_5Graph_29normalize, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_5Graph_28normalize};
static PyObject *__pyx_pw_5miolo_5Graph_29normalize(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("normalize (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("normalize", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "normalize", 0))) return NULL;
  __pyx_r = __pyx_pf_5miolo_5Graph_28normalize(((struct __pyx_obj_5miolo_Graph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_5Graph_28normalize(struct __pyx_obj_5miolo_Graph *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("normalize", 1);

  /* "miololib.pyx":1009
 *             Symmetric normalization of edge weights.
 *         """
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             self.graphInt.normalize()
 *         if self.ctype=="float":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1009, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 1009, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":1010
 *         """
 *         if self.ctype=="int":
 *             self.graphInt.normalize()             # <<<<<<<<<<<<<<
 *         if self.ctype=="float":
 *             self.graphFloat.normalize()
 */
    __pyx_v_self->__pyx_base.graphInt->normalize();

    /* "miololib.pyx":1009
 *             Symmetric normalization of edge weights.
 *         """
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             self.graphInt.normalize()
 *         if self.ctype=="float":
 */
  }

  /* "miololib.pyx":1011
 *         if self.ctype=="int":
 *             self.graphInt.normalize()
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             self.graphFloat.normalize()
 *         if self.ctype=="double":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1011, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 1011, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":1012
 *             self.graphInt.normalize()
 *         if self.ctype=="float":
 *             self.graphFloat.normalize()             # <<<<<<<<<<<<<<
 *         if self.ctype=="double":
 *             self.graphDouble.normalize()
 */
    __pyx_v_self->__pyx_base.graphFloat->normalize();

    /* "miololib.pyx":1011
 *         if self.ctype=="int":
 *             self.graphInt.normalize()
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             self.graphFloat.normalize()
 *         if self.ctype=="double":
 */
  }

  /* "miololib.pyx":1013
 *         if self.ctype=="float":
 *             self.graphFloat.normalize()
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             self.graphDouble.normalize()
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1013, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 1013, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":1014
 *             self.graphFloat.normalize()
 *         if self.ctype=="double":
 *             self.graphDouble.normalize()             # <<<<<<<<<<<<<<
 * 
 *     def degree(self):
 */
    __pyx_v_self->__pyx_base.graphDouble->normalize();

    /* "miololib.pyx":1013
 *         if self.ctype=="float":
 *             self.graphFloat.normalize()
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             self.graphDouble.normalize()
 * 
 */
  }

  /* "miololib.pyx":1005
 *     #---------------------------------------------------------------------------
 * 
 *     def normalize(self):             # <<<<<<<<<<<<<<
 *         """
 *             Symmetric normalization of edge weights.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("miolo.Graph.normalize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":1016
 *             self.graphDouble.normalize()
 * 
 *     def degree(self):             # <<<<<<<<<<<<<<
 *         """
 *             Returns a column Matrix where each entry is the degree of the
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_5Graph_31degree(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_5Graph_30degree, "Graph.degree(self)\n\n            Returns a column Matrix where each entry is the degree of the\n            corresponding verterx.\n        ");
static PyMethodDef __pyx_mdef_5miolo_5Graph_31degree = {"degree", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_5Graph_31degree, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_5Graph_30degree};
static PyObject *__pyx_pw_5miolo_5Graph_31degree(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("degree (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("degree", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "degree", 0))) return NULL;
  __pyx_r = __pyx_pf_5miolo_5Graph_30degree(((struct __pyx_obj_5miolo_Graph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_5Graph_30degree(struct __pyx_obj_5miolo_Graph *__pyx_v_self) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("degree", 1);

  /* "miololib.pyx":1021
 *             corresponding verterx.
 *         """
 *         out = Matrix(ctype=self.ctype)             # <<<<<<<<<<<<<<
 *         if self.ctype=="int":
 *             out.mtxInt = self.graphInt.degree()
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1021, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1021, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ctype, __pyx_t_2) < 0) __PYX_ERR(1, 1021, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Matrix), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1021, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_out = ((struct __pyx_obj_5miolo_Matrix *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "miololib.pyx":1022
 *         """
 *         out = Matrix(ctype=self.ctype)
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.mtxInt = self.graphInt.degree()
 *         if self.ctype=="float":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1022, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1022, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":1023
 *         out = Matrix(ctype=self.ctype)
 *         if self.ctype=="int":
 *             out.mtxInt = self.graphInt.degree()             # <<<<<<<<<<<<<<
 *         if self.ctype=="float":
 *             out.mtxFloat = self.graphFloat.degree()
 */
    __pyx_v_out->__pyx_base.mtxInt = __pyx_v_self->__pyx_base.graphInt->degree();

    /* "miololib.pyx":1022
 *         """
 *         out = Matrix(ctype=self.ctype)
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.mtxInt = self.graphInt.degree()
 *         if self.ctype=="float":
 */
  }

  /* "miololib.pyx":1024
 *         if self.ctype=="int":
 *             out.mtxInt = self.graphInt.degree()
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.mtxFloat = self.graphFloat.degree()
 *         if self.ctype=="double":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1024, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1024, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":1025
 *             out.mtxInt = self.graphInt.degree()
 *         if self.ctype=="float":
 *             out.mtxFloat = self.graphFloat.degree()             # <<<<<<<<<<<<<<
 *         if self.ctype=="double":
 *             out.mtxDouble = self.graphDouble.degree()
 */
    __pyx_v_out->__pyx_base.mtxFloat = __pyx_v_self->__pyx_base.graphFloat->degree();

    /* "miololib.pyx":1024
 *         if self.ctype=="int":
 *             out.mtxInt = self.graphInt.degree()
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.mtxFloat = self.graphFloat.degree()
 *         if self.ctype=="double":
 */
  }

  /* "miololib.pyx":1026
 *         if self.ctype=="float":
 *             out.mtxFloat = self.graphFloat.degree()
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.mtxDouble = self.graphDouble.degree()
 *         return out
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1026, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1026, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":1027
 *             out.mtxFloat = self.graphFloat.degree()
 *         if self.ctype=="double":
 *             out.mtxDouble = self.graphDouble.degree()             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
    __pyx_v_out->__pyx_base.mtxDouble = __pyx_v_self->__pyx_base.graphDouble->degree();

    /* "miololib.pyx":1026
 *         if self.ctype=="float":
 *             out.mtxFloat = self.graphFloat.degree()
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.mtxDouble = self.graphDouble.degree()
 *         return out
 */
  }

  /* "miololib.pyx":1028
 *         if self.ctype=="double":
 *             out.mtxDouble = self.graphDouble.degree()
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     def laplacian(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_out);
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "miololib.pyx":1016
 *             self.graphDouble.normalize()
 * 
 *     def degree(self):             # <<<<<<<<<<<<<<
 *         """
 *             Returns a column Matrix where each entry is the degree of the
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("miolo.Graph.degree", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":1030
 *         return out
 * 
 *     def laplacian(self):             # <<<<<<<<<<<<<<
 *         """
 *             Returns the graph corresponding to the normalized laplacian of
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_5Graph_33laplacian(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_5Graph_32laplacian, "Graph.laplacian(self)\n\n            Returns the graph corresponding to the normalized laplacian of \n            current graph.\n        ");
static PyMethodDef __pyx_mdef_5miolo_5Graph_33laplacian = {"laplacian", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_5Graph_33laplacian, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_5Graph_32laplacian};
static PyObject *__pyx_pw_5miolo_5Graph_33laplacian(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("laplacian (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("laplacian", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "laplacian", 0))) return NULL;
  __pyx_r = __pyx_pf_5miolo_5Graph_32laplacian(((struct __pyx_obj_5miolo_Graph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_5Graph_32laplacian(struct __pyx_obj_5miolo_Graph *__pyx_v_self) {
  struct __pyx_obj_5miolo_Graph *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("laplacian", 1);

  /* "miololib.pyx":1035
 *             current graph.
 *         """
 *         out = Graph(ctype=self.ctype)             # <<<<<<<<<<<<<<
 *         if self.ctype=="int":
 *             out.graphInt = self.graphInt.laplacian()
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1035, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1035, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ctype, __pyx_t_2) < 0) __PYX_ERR(1, 1035, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Graph), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1035, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_out = ((struct __pyx_obj_5miolo_Graph *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "miololib.pyx":1036
 *         """
 *         out = Graph(ctype=self.ctype)
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.graphInt = self.graphInt.laplacian()
 *         if self.ctype=="float":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1036, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1036, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":1037
 *         out = Graph(ctype=self.ctype)
 *         if self.ctype=="int":
 *             out.graphInt = self.graphInt.laplacian()             # <<<<<<<<<<<<<<
 *         if self.ctype=="float":
 *             out.graphFloat = self.graphFloat.laplacian()
 */
    __pyx_v_out->__pyx_base.graphInt = __pyx_v_self->__pyx_base.graphInt->laplacian();

    /* "miololib.pyx":1036
 *         """
 *         out = Graph(ctype=self.ctype)
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.graphInt = self.graphInt.laplacian()
 *         if self.ctype=="float":
 */
  }

  /* "miololib.pyx":1038
 *         if self.ctype=="int":
 *             out.graphInt = self.graphInt.laplacian()
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.graphFloat = self.graphFloat.laplacian()
 *         if self.ctype=="double":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1038, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1038, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":1039
 *             out.graphInt = self.graphInt.laplacian()
 *         if self.ctype=="float":
 *             out.graphFloat = self.graphFloat.laplacian()             # <<<<<<<<<<<<<<
 *         if self.ctype=="double":
 *             out.graphDouble = self.graphDouble.laplacian()
 */
    __pyx_v_out->__pyx_base.graphFloat = __pyx_v_self->__pyx_base.graphFloat->laplacian();

    /* "miololib.pyx":1038
 *         if self.ctype=="int":
 *             out.graphInt = self.graphInt.laplacian()
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.graphFloat = self.graphFloat.laplacian()
 *         if self.ctype=="double":
 */
  }

  /* "miololib.pyx":1040
 *         if self.ctype=="float":
 *             out.graphFloat = self.graphFloat.laplacian()
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.graphDouble = self.graphDouble.laplacian()
 *         return out
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1040, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1040, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":1041
 *             out.graphFloat = self.graphFloat.laplacian()
 *         if self.ctype=="double":
 *             out.graphDouble = self.graphDouble.laplacian()             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
    __pyx_v_out->__pyx_base.graphDouble = __pyx_v_self->__pyx_base.graphDouble->laplacian();

    /* "miololib.pyx":1040
 *         if self.ctype=="float":
 *             out.graphFloat = self.graphFloat.laplacian()
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.graphDouble = self.graphDouble.laplacian()
 *         return out
 */
  }

  /* "miololib.pyx":1042
 *         if self.ctype=="double":
 *             out.graphDouble = self.graphDouble.laplacian()
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     def toMatrix(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_out);
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "miololib.pyx":1030
 *         return out
 * 
 *     def laplacian(self):             # <<<<<<<<<<<<<<
 *         """
 *             Returns the graph corresponding to the normalized laplacian of
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("miolo.Graph.laplacian", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":1044
 *         return out
 * 
 *     def toMatrix(self):             # <<<<<<<<<<<<<<
 *         """
 *             Returns a Matrix corresponding to the dense representation of self.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_5Graph_35toMatrix(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_5Graph_34toMatrix, "Graph.toMatrix(self)\n\n            Returns a Matrix corresponding to the dense representation of self.\n        ");
static PyMethodDef __pyx_mdef_5miolo_5Graph_35toMatrix = {"toMatrix", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_5Graph_35toMatrix, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_5Graph_34toMatrix};
static PyObject *__pyx_pw_5miolo_5Graph_35toMatrix(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("toMatrix (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("toMatrix", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "toMatrix", 0))) return NULL;
  __pyx_r = __pyx_pf_5miolo_5Graph_34toMatrix(((struct __pyx_obj_5miolo_Graph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_5Graph_34toMatrix(struct __pyx_obj_5miolo_Graph *__pyx_v_self) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("toMatrix", 1);

  /* "miololib.pyx":1048
 *             Returns a Matrix corresponding to the dense representation of self.
 *         """
 *         out = Matrix(ctype=self.ctype)             # <<<<<<<<<<<<<<
 *         if self.ctype=="int":
 *             out.mtxInt = self.graphInt.densify()
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1048, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1048, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ctype, __pyx_t_2) < 0) __PYX_ERR(1, 1048, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Matrix), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1048, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_out = ((struct __pyx_obj_5miolo_Matrix *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "miololib.pyx":1049
 *         """
 *         out = Matrix(ctype=self.ctype)
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.mtxInt = self.graphInt.densify()
 *         if self.ctype=="float":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1049, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1049, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":1050
 *         out = Matrix(ctype=self.ctype)
 *         if self.ctype=="int":
 *             out.mtxInt = self.graphInt.densify()             # <<<<<<<<<<<<<<
 *         if self.ctype=="float":
 *             out.mtxFloat = self.graphFloat.densify()
 */
    __pyx_v_out->__pyx_base.mtxInt = __pyx_v_self->__pyx_base.graphInt->densify();

    /* "miololib.pyx":1049
 *         """
 *         out = Matrix(ctype=self.ctype)
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.mtxInt = self.graphInt.densify()
 *         if self.ctype=="float":
 */
  }

  /* "miololib.pyx":1051
 *         if self.ctype=="int":
 *             out.mtxInt = self.graphInt.densify()
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.mtxFloat = self.graphFloat.densify()
 *         if self.ctype=="double":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1051, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1051, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":1052
 *             out.mtxInt = self.graphInt.densify()
 *         if self.ctype=="float":
 *             out.mtxFloat = self.graphFloat.densify()             # <<<<<<<<<<<<<<
 *         if self.ctype=="double":
 *             out.mtxDouble = self.graphDouble.densify()
 */
    __pyx_v_out->__pyx_base.mtxFloat = __pyx_v_self->__pyx_base.graphFloat->densify();

    /* "miololib.pyx":1051
 *         if self.ctype=="int":
 *             out.mtxInt = self.graphInt.densify()
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.mtxFloat = self.graphFloat.densify()
 *         if self.ctype=="double":
 */
  }

  /* "miololib.pyx":1053
 *         if self.ctype=="float":
 *             out.mtxFloat = self.graphFloat.densify()
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.mtxDouble = self.graphDouble.densify()
 *         return out
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1053, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1053, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":1054
 *             out.mtxFloat = self.graphFloat.densify()
 *         if self.ctype=="double":
 *             out.mtxDouble = self.graphDouble.densify()             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
    __pyx_v_out->__pyx_base.mtxDouble = __pyx_v_self->__pyx_base.graphDouble->densify();

    /* "miololib.pyx":1053
 *         if self.ctype=="float":
 *             out.mtxFloat = self.graphFloat.densify()
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.mtxDouble = self.graphDouble.densify()
 *         return out
 */
  }

  /* "miololib.pyx":1055
 *         if self.ctype=="double":
 *             out.mtxDouble = self.graphDouble.densify()
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     def toDigraph(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_out);
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "miololib.pyx":1044
 *         return out
 * 
 *     def toMatrix(self):             # <<<<<<<<<<<<<<
 *         """
 *             Returns a Matrix corresponding to the dense representation of self.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("miolo.Graph.toMatrix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":1057
 *         return out
 * 
 *     def toDigraph(self):             # <<<<<<<<<<<<<<
 *         """
 *             Returns a Digraph representation of self.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_5Graph_37toDigraph(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_5Graph_36toDigraph, "Graph.toDigraph(self)\n\n            Returns a Digraph representation of self.\n        ");
static PyMethodDef __pyx_mdef_5miolo_5Graph_37toDigraph = {"toDigraph", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_5Graph_37toDigraph, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_5Graph_36toDigraph};
static PyObject *__pyx_pw_5miolo_5Graph_37toDigraph(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("toDigraph (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("toDigraph", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "toDigraph", 0))) return NULL;
  __pyx_r = __pyx_pf_5miolo_5Graph_36toDigraph(((struct __pyx_obj_5miolo_Graph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_5Graph_36toDigraph(struct __pyx_obj_5miolo_Graph *__pyx_v_self) {
  struct __pyx_obj_5miolo_Digraph *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("toDigraph", 1);

  /* "miololib.pyx":1061
 *             Returns a Digraph representation of self.
 *         """
 *         out = Digraph(ctype=self.ctype)             # <<<<<<<<<<<<<<
 *         if self.ctype=="int":
 *             out.digraphInt = mld.toDigraph(drf(self.graphInt))
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1061, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1061, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ctype, __pyx_t_2) < 0) __PYX_ERR(1, 1061, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Digraph), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1061, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_out = ((struct __pyx_obj_5miolo_Digraph *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "miololib.pyx":1062
 *         """
 *         out = Digraph(ctype=self.ctype)
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.digraphInt = mld.toDigraph(drf(self.graphInt))
 *         if self.ctype=="float":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1062, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1062, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":1063
 *         out = Digraph(ctype=self.ctype)
 *         if self.ctype=="int":
 *             out.digraphInt = mld.toDigraph(drf(self.graphInt))             # <<<<<<<<<<<<<<
 *         if self.ctype=="float":
 *             out.digraphFloat = mld.toDigraph(drf(self.graphFloat))
 */
    __pyx_v_out->__pyx_base.digraphInt = toDigraph<int>((*__pyx_v_self->__pyx_base.graphInt));

    /* "miololib.pyx":1062
 *         """
 *         out = Digraph(ctype=self.ctype)
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.digraphInt = mld.toDigraph(drf(self.graphInt))
 *         if self.ctype=="float":
 */
  }

  /* "miololib.pyx":1064
 *         if self.ctype=="int":
 *             out.digraphInt = mld.toDigraph(drf(self.graphInt))
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.digraphFloat = mld.toDigraph(drf(self.graphFloat))
 *         if self.ctype=="double":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1064, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1064, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":1065
 *             out.digraphInt = mld.toDigraph(drf(self.graphInt))
 *         if self.ctype=="float":
 *             out.digraphFloat = mld.toDigraph(drf(self.graphFloat))             # <<<<<<<<<<<<<<
 *         if self.ctype=="double":
 *             out.digraphDouble = mld.toDigraph(drf(self.graphDouble))
 */
    __pyx_v_out->__pyx_base.digraphFloat = toDigraph<float>((*__pyx_v_self->__pyx_base.graphFloat));

    /* "miololib.pyx":1064
 *         if self.ctype=="int":
 *             out.digraphInt = mld.toDigraph(drf(self.graphInt))
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.digraphFloat = mld.toDigraph(drf(self.graphFloat))
 *         if self.ctype=="double":
 */
  }

  /* "miololib.pyx":1066
 *         if self.ctype=="float":
 *             out.digraphFloat = mld.toDigraph(drf(self.graphFloat))
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.digraphDouble = mld.toDigraph(drf(self.graphDouble))
 *         return out
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1066, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1066, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":1067
 *             out.digraphFloat = mld.toDigraph(drf(self.graphFloat))
 *         if self.ctype=="double":
 *             out.digraphDouble = mld.toDigraph(drf(self.graphDouble))             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
    __pyx_v_out->__pyx_base.digraphDouble = toDigraph<double>((*__pyx_v_self->__pyx_base.graphDouble));

    /* "miololib.pyx":1066
 *         if self.ctype=="float":
 *             out.digraphFloat = mld.toDigraph(drf(self.graphFloat))
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.digraphDouble = mld.toDigraph(drf(self.graphDouble))
 *         return out
 */
  }

  /* "miololib.pyx":1068
 *         if self.ctype=="double":
 *             out.digraphDouble = mld.toDigraph(drf(self.graphDouble))
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     def max(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_out);
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "miololib.pyx":1057
 *         return out
 * 
 *     def toDigraph(self):             # <<<<<<<<<<<<<<
 *         """
 *             Returns a Digraph representation of self.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("miolo.Graph.toDigraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":1070
 *         return out
 * 
 *     def max(self):             # <<<<<<<<<<<<<<
 *         if self.ctype=="int":
 *             return self.graphInt.max()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_5Graph_39max(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_5Graph_38max, "Graph.max(self)");
static PyMethodDef __pyx_mdef_5miolo_5Graph_39max = {"max", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_5Graph_39max, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_5Graph_38max};
static PyObject *__pyx_pw_5miolo_5Graph_39max(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("max (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("max", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "max", 0))) return NULL;
  __pyx_r = __pyx_pf_5miolo_5Graph_38max(((struct __pyx_obj_5miolo_Graph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_5Graph_38max(struct __pyx_obj_5miolo_Graph *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("max", 1);

  /* "miololib.pyx":1071
 * 
 *     def max(self):
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             return self.graphInt.max()
 *         if self.ctype=="float":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1071, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 1071, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":1072
 *     def max(self):
 *         if self.ctype=="int":
 *             return self.graphInt.max()             # <<<<<<<<<<<<<<
 *         if self.ctype=="float":
 *             return self.graphFloat.max()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->__pyx_base.graphInt->max()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1072, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "miololib.pyx":1071
 * 
 *     def max(self):
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             return self.graphInt.max()
 *         if self.ctype=="float":
 */
  }

  /* "miololib.pyx":1073
 *         if self.ctype=="int":
 *             return self.graphInt.max()
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             return self.graphFloat.max()
 *         if self.ctype=="double":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1073, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 1073, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":1074
 *             return self.graphInt.max()
 *         if self.ctype=="float":
 *             return self.graphFloat.max()             # <<<<<<<<<<<<<<
 *         if self.ctype=="double":
 *             return self.graphDouble.max()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.graphFloat->max()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1074, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "miololib.pyx":1073
 *         if self.ctype=="int":
 *             return self.graphInt.max()
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             return self.graphFloat.max()
 *         if self.ctype=="double":
 */
  }

  /* "miololib.pyx":1075
 *         if self.ctype=="float":
 *             return self.graphFloat.max()
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             return self.graphDouble.max()
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1075, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 1075, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":1076
 *             return self.graphFloat.max()
 *         if self.ctype=="double":
 *             return self.graphDouble.max()             # <<<<<<<<<<<<<<
 * 
 *     def min(self):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.graphDouble->max()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1076, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "miololib.pyx":1075
 *         if self.ctype=="float":
 *             return self.graphFloat.max()
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             return self.graphDouble.max()
 * 
 */
  }

  /* "miololib.pyx":1070
 *         return out
 * 
 *     def max(self):             # <<<<<<<<<<<<<<
 *         if self.ctype=="int":
 *             return self.graphInt.max()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("miolo.Graph.max", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":1078
 *             return self.graphDouble.max()
 * 
 *     def min(self):             # <<<<<<<<<<<<<<
 *         if self.ctype=="int":
 *             return self.graphInt.min()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_5Graph_41min(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_5Graph_40min, "Graph.min(self)");
static PyMethodDef __pyx_mdef_5miolo_5Graph_41min = {"min", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_5Graph_41min, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_5Graph_40min};
static PyObject *__pyx_pw_5miolo_5Graph_41min(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("min (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("min", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "min", 0))) return NULL;
  __pyx_r = __pyx_pf_5miolo_5Graph_40min(((struct __pyx_obj_5miolo_Graph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_5Graph_40min(struct __pyx_obj_5miolo_Graph *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("min", 1);

  /* "miololib.pyx":1079
 * 
 *     def min(self):
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             return self.graphInt.min()
 *         if self.ctype=="float":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1079, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 1079, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":1080
 *     def min(self):
 *         if self.ctype=="int":
 *             return self.graphInt.min()             # <<<<<<<<<<<<<<
 *         if self.ctype=="float":
 *             return self.graphFloat.min()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->__pyx_base.graphInt->min()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1080, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "miololib.pyx":1079
 * 
 *     def min(self):
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             return self.graphInt.min()
 *         if self.ctype=="float":
 */
  }

  /* "miololib.pyx":1081
 *         if self.ctype=="int":
 *             return self.graphInt.min()
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             return self.graphFloat.min()
 *         if self.ctype=="double":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1081, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 1081, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":1082
 *             return self.graphInt.min()
 *         if self.ctype=="float":
 *             return self.graphFloat.min()             # <<<<<<<<<<<<<<
 *         if self.ctype=="double":
 *             return self.graphDouble.min()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.graphFloat->min()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1082, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "miololib.pyx":1081
 *         if self.ctype=="int":
 *             return self.graphInt.min()
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             return self.graphFloat.min()
 *         if self.ctype=="double":
 */
  }

  /* "miololib.pyx":1083
 *         if self.ctype=="float":
 *             return self.graphFloat.min()
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             return self.graphDouble.min()
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1083, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 1083, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":1084
 *             return self.graphFloat.min()
 *         if self.ctype=="double":
 *             return self.graphDouble.min()             # <<<<<<<<<<<<<<
 * 
 *     #---------------------------------------------------------------------------
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.graphDouble->min()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1084, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "miololib.pyx":1083
 *         if self.ctype=="float":
 *             return self.graphFloat.min()
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             return self.graphDouble.min()
 * 
 */
  }

  /* "miololib.pyx":1078
 *             return self.graphDouble.max()
 * 
 *     def min(self):             # <<<<<<<<<<<<<<
 *         if self.ctype=="int":
 *             return self.graphInt.min()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("miolo.Graph.min", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":1090
 *     #---------------------------------------------------------------------------
 * 
 *     def gaussianScale(self):             # <<<<<<<<<<<<<<
 *         """
 *             Returns a Graph corresponding to the gaussian similarity of self.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_5Graph_43gaussianScale(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_5Graph_42gaussianScale, "Graph.gaussianScale(self)\n\n            Returns a Graph corresponding to the gaussian similarity of self.\n            Entries of self are treated as distances and the scale parameter is\n            calculated according to Jebara and Wang paper.\n        ");
static PyMethodDef __pyx_mdef_5miolo_5Graph_43gaussianScale = {"gaussianScale", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_5Graph_43gaussianScale, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_5Graph_42gaussianScale};
static PyObject *__pyx_pw_5miolo_5Graph_43gaussianScale(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("gaussianScale (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("gaussianScale", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "gaussianScale", 0))) return NULL;
  __pyx_r = __pyx_pf_5miolo_5Graph_42gaussianScale(((struct __pyx_obj_5miolo_Graph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_5Graph_42gaussianScale(struct __pyx_obj_5miolo_Graph *__pyx_v_self) {
  struct __pyx_obj_5miolo_Graph *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("gaussianScale", 1);

  /* "miololib.pyx":1096
 *             calculated according to Jebara and Wang paper.
 *         """
 *         out = Graph(ctype=self.ctype)             # <<<<<<<<<<<<<<
 *         if out.ctype=="int":
 *             return self.graphInt.gaussianScale()
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1096, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1096, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ctype, __pyx_t_2) < 0) __PYX_ERR(1, 1096, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Graph), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1096, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_out = ((struct __pyx_obj_5miolo_Graph *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "miololib.pyx":1097
 *         """
 *         out = Graph(ctype=self.ctype)
 *         if out.ctype=="int":             # <<<<<<<<<<<<<<
 *             return self.graphInt.gaussianScale()
 *         if out.ctype=="float":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1097, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1097, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":1098
 *         out = Graph(ctype=self.ctype)
 *         if out.ctype=="int":
 *             return self.graphInt.gaussianScale()             # <<<<<<<<<<<<<<
 *         if out.ctype=="float":
 *             return self.graphFloat.gaussianScale()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->__pyx_base.graphInt->gaussianScale()); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1098, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "miololib.pyx":1097
 *         """
 *         out = Graph(ctype=self.ctype)
 *         if out.ctype=="int":             # <<<<<<<<<<<<<<
 *             return self.graphInt.gaussianScale()
 *         if out.ctype=="float":
 */
  }

  /* "miololib.pyx":1099
 *         if out.ctype=="int":
 *             return self.graphInt.gaussianScale()
 *         if out.ctype=="float":             # <<<<<<<<<<<<<<
 *             return self.graphFloat.gaussianScale()
 *         if out.ctype=="double":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1099, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1099, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":1100
 *             return self.graphInt.gaussianScale()
 *         if out.ctype=="float":
 *             return self.graphFloat.gaussianScale()             # <<<<<<<<<<<<<<
 *         if out.ctype=="double":
 *             return self.graphDouble.gaussianScale()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.graphFloat->gaussianScale()); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1100, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "miololib.pyx":1099
 *         if out.ctype=="int":
 *             return self.graphInt.gaussianScale()
 *         if out.ctype=="float":             # <<<<<<<<<<<<<<
 *             return self.graphFloat.gaussianScale()
 *         if out.ctype=="double":
 */
  }

  /* "miololib.pyx":1101
 *         if out.ctype=="float":
 *             return self.graphFloat.gaussianScale()
 *         if out.ctype=="double":             # <<<<<<<<<<<<<<
 *             return self.graphDouble.gaussianScale()
 *         return out
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1101, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":1102
 *             return self.graphFloat.gaussianScale()
 *         if out.ctype=="double":
 *             return self.graphDouble.gaussianScale()             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.graphDouble->gaussianScale()); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1102, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "miololib.pyx":1101
 *         if out.ctype=="float":
 *             return self.graphFloat.gaussianScale()
 *         if out.ctype=="double":             # <<<<<<<<<<<<<<
 *             return self.graphDouble.gaussianScale()
 *         return out
 */
  }

  /* "miololib.pyx":1103
 *         if out.ctype=="double":
 *             return self.graphDouble.gaussianScale()
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     #---------------------------------------------------------------------------
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_out);
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "miololib.pyx":1090
 *     #---------------------------------------------------------------------------
 * 
 *     def gaussianScale(self):             # <<<<<<<<<<<<<<
 *         """
 *             Returns a Graph corresponding to the gaussian similarity of self.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("miolo.Graph.gaussianScale", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":1109
 *     #---------------------------------------------------------------------------
 * 
 *     def toDigraph(self):             # <<<<<<<<<<<<<<
 *         out = Digraph(ctype=self.ctype)
 *         if out.ctype=="int":
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_5Graph_45toDigraph(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_5Graph_44toDigraph, "Graph.toDigraph(self)");
static PyMethodDef __pyx_mdef_5miolo_5Graph_45toDigraph = {"toDigraph", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_5Graph_45toDigraph, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_5Graph_44toDigraph};
static PyObject *__pyx_pw_5miolo_5Graph_45toDigraph(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("toDigraph (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("toDigraph", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "toDigraph", 0))) return NULL;
  __pyx_r = __pyx_pf_5miolo_5Graph_44toDigraph(((struct __pyx_obj_5miolo_Graph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_5Graph_44toDigraph(struct __pyx_obj_5miolo_Graph *__pyx_v_self) {
  struct __pyx_obj_5miolo_Digraph *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("toDigraph", 1);

  /* "miololib.pyx":1110
 * 
 *     def toDigraph(self):
 *         out = Digraph(ctype=self.ctype)             # <<<<<<<<<<<<<<
 *         if out.ctype=="int":
 *             out.digraphInt = mld.toDigraph(drf(self.graphInt))
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ctype, __pyx_t_2) < 0) __PYX_ERR(1, 1110, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Digraph), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_out = ((struct __pyx_obj_5miolo_Digraph *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "miololib.pyx":1111
 *     def toDigraph(self):
 *         out = Digraph(ctype=self.ctype)
 *         if out.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.digraphInt = mld.toDigraph(drf(self.graphInt))
 *         if out.ctype=="float":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1111, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":1112
 *         out = Digraph(ctype=self.ctype)
 *         if out.ctype=="int":
 *             out.digraphInt = mld.toDigraph(drf(self.graphInt))             # <<<<<<<<<<<<<<
 *         if out.ctype=="float":
 *             out.digraphFloat = mld.toDigraph(drf(self.graphFloat))
 */
    __pyx_v_out->__pyx_base.digraphInt = toDigraph<int>((*__pyx_v_self->__pyx_base.graphInt));

    /* "miololib.pyx":1111
 *     def toDigraph(self):
 *         out = Digraph(ctype=self.ctype)
 *         if out.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.digraphInt = mld.toDigraph(drf(self.graphInt))
 *         if out.ctype=="float":
 */
  }

  /* "miololib.pyx":1113
 *         if out.ctype=="int":
 *             out.digraphInt = mld.toDigraph(drf(self.graphInt))
 *         if out.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.digraphFloat = mld.toDigraph(drf(self.graphFloat))
 *         if out.ctype=="double":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1113, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":1114
 *             out.digraphInt = mld.toDigraph(drf(self.graphInt))
 *         if out.ctype=="float":
 *             out.digraphFloat = mld.toDigraph(drf(self.graphFloat))             # <<<<<<<<<<<<<<
 *         if out.ctype=="double":
 *             out.digraphDouble = mld.toDigraph(drf(self.graphDouble))
 */
    __pyx_v_out->__pyx_base.digraphFloat = toDigraph<float>((*__pyx_v_self->__pyx_base.graphFloat));

    /* "miololib.pyx":1113
 *         if out.ctype=="int":
 *             out.digraphInt = mld.toDigraph(drf(self.graphInt))
 *         if out.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.digraphFloat = mld.toDigraph(drf(self.graphFloat))
 *         if out.ctype=="double":
 */
  }

  /* "miololib.pyx":1115
 *         if out.ctype=="float":
 *             out.digraphFloat = mld.toDigraph(drf(self.graphFloat))
 *         if out.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.digraphDouble = mld.toDigraph(drf(self.graphDouble))
 *         return out
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1115, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":1116
 *             out.digraphFloat = mld.toDigraph(drf(self.graphFloat))
 *         if out.ctype=="double":
 *             out.digraphDouble = mld.toDigraph(drf(self.graphDouble))             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
    __pyx_v_out->__pyx_base.digraphDouble = toDigraph<double>((*__pyx_v_self->__pyx_base.graphDouble));

    /* "miololib.pyx":1115
 *         if out.ctype=="float":
 *             out.digraphFloat = mld.toDigraph(drf(self.graphFloat))
 *         if out.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.digraphDouble = mld.toDigraph(drf(self.graphDouble))
 *         return out
 */
  }

  /* "miololib.pyx":1117
 *         if out.ctype=="double":
 *             out.digraphDouble = mld.toDigraph(drf(self.graphDouble))
 *         return out             # <<<<<<<<<<<<<<
 * 
 * #---------------------------------------------------------------------------
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_out);
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "miololib.pyx":1109
 *     #---------------------------------------------------------------------------
 * 
 *     def toDigraph(self):             # <<<<<<<<<<<<<<
 *         out = Digraph(ctype=self.ctype)
 *         if out.ctype=="int":
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("miolo.Graph.toDigraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_5Graph_47__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_5Graph_46__reduce_cython__, "Graph.__reduce_cython__(self)");
static PyMethodDef __pyx_mdef_5miolo_5Graph_47__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_5Graph_47__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_5Graph_46__reduce_cython__};
static PyObject *__pyx_pw_5miolo_5Graph_47__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_5miolo_5Graph_46__reduce_cython__(((struct __pyx_obj_5miolo_Graph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_5Graph_46__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_Graph *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("miolo.Graph.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_5Graph_49__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_5Graph_48__setstate_cython__, "Graph.__setstate_cython__(self, __pyx_state)");
static PyMethodDef __pyx_mdef_5miolo_5Graph_49__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_5Graph_49__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_5Graph_48__setstate_cython__};
static PyObject *__pyx_pw_5miolo_5Graph_49__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(0, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.Graph.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5miolo_5Graph_48__setstate_cython__(((struct __pyx_obj_5miolo_Graph *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_5Graph_48__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_Graph *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("miolo.Graph.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":1123
 * #---------------------------------------------------------------------------
 * 
 * def hadamard(Graph G, Graph H):             # <<<<<<<<<<<<<<
 *     """
 *         Hadamard (element-wise) product between weights in Graphs. Both graphs
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_5hadamard(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_4hadamard, "hadamard(Graph G, Graph H)\n\n        Hadamard (element-wise) product between weights in Graphs. Both graphs \n        must have same number of edges. Structure of G will be the structure of\n        the returning graph.\n    ");
static PyMethodDef __pyx_mdef_5miolo_5hadamard = {"hadamard", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_5hadamard, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_4hadamard};
static PyObject *__pyx_pw_5miolo_5hadamard(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_5miolo_Graph *__pyx_v_G = 0;
  struct __pyx_obj_5miolo_Graph *__pyx_v_H = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("hadamard (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_H,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_G)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1123, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_H)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1123, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("hadamard", 1, 2, 2, 1); __PYX_ERR(1, 1123, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "hadamard") < 0)) __PYX_ERR(1, 1123, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_G = ((struct __pyx_obj_5miolo_Graph *)values[0]);
    __pyx_v_H = ((struct __pyx_obj_5miolo_Graph *)values[1]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("hadamard", 1, 2, 2, __pyx_nargs); __PYX_ERR(1, 1123, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.hadamard", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_5miolo_Graph, 1, "G", 0))) __PYX_ERR(1, 1123, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_H), __pyx_ptype_5miolo_Graph, 1, "H", 0))) __PYX_ERR(1, 1123, __pyx_L1_error)
  __pyx_r = __pyx_pf_5miolo_4hadamard(__pyx_self, __pyx_v_G, __pyx_v_H);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_4hadamard(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_5miolo_Graph *__pyx_v_G, struct __pyx_obj_5miolo_Graph *__pyx_v_H) {
  struct __pyx_obj_5miolo_Graph *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("hadamard", 1);

  /* "miololib.pyx":1129
 *         the returning graph.
 *     """
 *     if H.ctype!=G.ctype:             # <<<<<<<<<<<<<<
 *         raise TypeError("Graphs must share same ctype.")
 *     if H.edges!=G.edges:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_H), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_G), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1129, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 1129, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(__pyx_t_4)) {

    /* "miololib.pyx":1130
 *     """
 *     if H.ctype!=G.ctype:
 *         raise TypeError("Graphs must share same ctype.")             # <<<<<<<<<<<<<<
 *     if H.edges!=G.edges:
 *         raise Exception("Graphs must have same number of edges")
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__40, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1130, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 1130, __pyx_L1_error)

    /* "miololib.pyx":1129
 *         the returning graph.
 *     """
 *     if H.ctype!=G.ctype:             # <<<<<<<<<<<<<<
 *         raise TypeError("Graphs must share same ctype.")
 *     if H.edges!=G.edges:
 */
  }

  /* "miololib.pyx":1131
 *     if H.ctype!=G.ctype:
 *         raise TypeError("Graphs must share same ctype.")
 *     if H.edges!=G.edges:             # <<<<<<<<<<<<<<
 *         raise Exception("Graphs must have same number of edges")
 *     out = Graph()
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_H), __pyx_n_s_edges); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_G), __pyx_n_s_edges); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_3, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1131, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 1131, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(__pyx_t_4)) {

    /* "miololib.pyx":1132
 *         raise TypeError("Graphs must share same ctype.")
 *     if H.edges!=G.edges:
 *         raise Exception("Graphs must have same number of edges")             # <<<<<<<<<<<<<<
 *     out = Graph()
 *     if G.ctype=="int":
 */
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__41, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1132, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 1132, __pyx_L1_error)

    /* "miololib.pyx":1131
 *     if H.ctype!=G.ctype:
 *         raise TypeError("Graphs must share same ctype.")
 *     if H.edges!=G.edges:             # <<<<<<<<<<<<<<
 *         raise Exception("Graphs must have same number of edges")
 *     out = Graph()
 */
  }

  /* "miololib.pyx":1133
 *     if H.edges!=G.edges:
 *         raise Exception("Graphs must have same number of edges")
 *     out = Graph()             # <<<<<<<<<<<<<<
 *     if G.ctype=="int":
 *         out.graphInt = G.graphInt.hmul(H.graphInt)
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5miolo_Graph)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_out = ((struct __pyx_obj_5miolo_Graph *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "miololib.pyx":1134
 *         raise Exception("Graphs must have same number of edges")
 *     out = Graph()
 *     if G.ctype=="int":             # <<<<<<<<<<<<<<
 *         out.graphInt = G.graphInt.hmul(H.graphInt)
 *     if G.ctype=="float":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_G), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 1134, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "miololib.pyx":1135
 *     out = Graph()
 *     if G.ctype=="int":
 *         out.graphInt = G.graphInt.hmul(H.graphInt)             # <<<<<<<<<<<<<<
 *     if G.ctype=="float":
 *         out.graphFloat = G.graphFloat.hmul(H.graphFloat)
 */
    __pyx_v_out->__pyx_base.graphInt = __pyx_v_G->__pyx_base.graphInt->hmul(__pyx_v_H->__pyx_base.graphInt);

    /* "miololib.pyx":1134
 *         raise Exception("Graphs must have same number of edges")
 *     out = Graph()
 *     if G.ctype=="int":             # <<<<<<<<<<<<<<
 *         out.graphInt = G.graphInt.hmul(H.graphInt)
 *     if G.ctype=="float":
 */
  }

  /* "miololib.pyx":1136
 *     if G.ctype=="int":
 *         out.graphInt = G.graphInt.hmul(H.graphInt)
 *     if G.ctype=="float":             # <<<<<<<<<<<<<<
 *         out.graphFloat = G.graphFloat.hmul(H.graphFloat)
 *     if G.ctype=="double":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_G), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 1136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "miololib.pyx":1137
 *         out.graphInt = G.graphInt.hmul(H.graphInt)
 *     if G.ctype=="float":
 *         out.graphFloat = G.graphFloat.hmul(H.graphFloat)             # <<<<<<<<<<<<<<
 *     if G.ctype=="double":
 *         out.graphDouble = G.graphDouble.hmul(H.graphDouble)
 */
    __pyx_v_out->__pyx_base.graphFloat = __pyx_v_G->__pyx_base.graphFloat->hmul(__pyx_v_H->__pyx_base.graphFloat);

    /* "miololib.pyx":1136
 *     if G.ctype=="int":
 *         out.graphInt = G.graphInt.hmul(H.graphInt)
 *     if G.ctype=="float":             # <<<<<<<<<<<<<<
 *         out.graphFloat = G.graphFloat.hmul(H.graphFloat)
 *     if G.ctype=="double":
 */
  }

  /* "miololib.pyx":1138
 *     if G.ctype=="float":
 *         out.graphFloat = G.graphFloat.hmul(H.graphFloat)
 *     if G.ctype=="double":             # <<<<<<<<<<<<<<
 *         out.graphDouble = G.graphDouble.hmul(H.graphDouble)
 *     return out
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_G), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 1138, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "miololib.pyx":1139
 *         out.graphFloat = G.graphFloat.hmul(H.graphFloat)
 *     if G.ctype=="double":
 *         out.graphDouble = G.graphDouble.hmul(H.graphDouble)             # <<<<<<<<<<<<<<
 *     return out
 * 
 */
    __pyx_v_out->__pyx_base.graphDouble = __pyx_v_G->__pyx_base.graphDouble->hmul(__pyx_v_H->__pyx_base.graphDouble);

    /* "miololib.pyx":1138
 *     if G.ctype=="float":
 *         out.graphFloat = G.graphFloat.hmul(H.graphFloat)
 *     if G.ctype=="double":             # <<<<<<<<<<<<<<
 *         out.graphDouble = G.graphDouble.hmul(H.graphDouble)
 *     return out
 */
  }

  /* "miololib.pyx":1140
 *     if G.ctype=="double":
 *         out.graphDouble = G.graphDouble.hmul(H.graphDouble)
 *     return out             # <<<<<<<<<<<<<<
 * 
 * def MST(mioloObject O, symmetrize=True):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_out);
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "miololib.pyx":1123
 * #---------------------------------------------------------------------------
 * 
 * def hadamard(Graph G, Graph H):             # <<<<<<<<<<<<<<
 *     """
 *         Hadamard (element-wise) product between weights in Graphs. Both graphs
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("miolo.hadamard", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":1142
 *     return out
 * 
 * def MST(mioloObject O, symmetrize=True):             # <<<<<<<<<<<<<<
 *     """
 *         Returns a minimum spanning tree using Kruskal's Algorithm.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_7MST(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_6MST, "MST(mioloObject O, symmetrize=True)\n\n        Returns a minimum spanning tree using Kruskal's Algorithm.\n        symmetrize: if O is a Matrix, symmetrize in-place.\n    ");
static PyMethodDef __pyx_mdef_5miolo_7MST = {"MST", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_7MST, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_6MST};
static PyObject *__pyx_pw_5miolo_7MST(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_5miolo_mioloObject *__pyx_v_O = 0;
  PyObject *__pyx_v_symmetrize = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("MST (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_O,&__pyx_n_s_symmetrize,0};
    values[1] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)((PyObject *)Py_True)));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_O)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1142, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_symmetrize);
          if (value) { values[1] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1142, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "MST") < 0)) __PYX_ERR(1, 1142, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_O = ((struct __pyx_obj_5miolo_mioloObject *)values[0]);
    __pyx_v_symmetrize = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("MST", 0, 1, 2, __pyx_nargs); __PYX_ERR(1, 1142, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.MST", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_O), __pyx_ptype_5miolo_mioloObject, 1, "O", 0))) __PYX_ERR(1, 1142, __pyx_L1_error)
  __pyx_r = __pyx_pf_5miolo_6MST(__pyx_self, __pyx_v_O, __pyx_v_symmetrize);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_6MST(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_5miolo_mioloObject *__pyx_v_O, PyObject *__pyx_v_symmetrize) {
  struct __pyx_obj_5miolo_Graph *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("MST", 0);
  __Pyx_INCREF((PyObject *)__pyx_v_O);

  /* "miololib.pyx":1147
 *         symmetrize: if O is a Matrix, symmetrize in-place.
 *     """
 *     if isinstance(O,Matrix):             # <<<<<<<<<<<<<<
 *         if O.rows!=O.cols:
 *             raise Exception("Matrix must be square.")
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_O), __pyx_ptype_5miolo_Matrix); 
  if (__pyx_t_1) {

    /* "miololib.pyx":1148
 *     """
 *     if isinstance(O,Matrix):
 *         if O.rows!=O.cols:             # <<<<<<<<<<<<<<
 *             raise Exception("Matrix must be square.")
 *         if symmetrize:
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_O), __pyx_n_s_rows); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1148, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_O), __pyx_n_s_cols); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1148, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyObject_RichCompare(__pyx_t_2, __pyx_t_3, Py_NE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1148, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 1148, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(__pyx_t_1)) {

      /* "miololib.pyx":1149
 *     if isinstance(O,Matrix):
 *         if O.rows!=O.cols:
 *             raise Exception("Matrix must be square.")             # <<<<<<<<<<<<<<
 *         if symmetrize:
 *             O = (O+O.transpose())/2
 */
      __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__44, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1149, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __PYX_ERR(1, 1149, __pyx_L1_error)

      /* "miololib.pyx":1148
 *     """
 *     if isinstance(O,Matrix):
 *         if O.rows!=O.cols:             # <<<<<<<<<<<<<<
 *             raise Exception("Matrix must be square.")
 *         if symmetrize:
 */
    }

    /* "miololib.pyx":1150
 *         if O.rows!=O.cols:
 *             raise Exception("Matrix must be square.")
 *         if symmetrize:             # <<<<<<<<<<<<<<
 *             O = (O+O.transpose())/2
 *         out = Graph(ctype=O.ctype)
 */
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_symmetrize); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 1150, __pyx_L1_error)
    if (__pyx_t_1) {

      /* "miololib.pyx":1151
 *             raise Exception("Matrix must be square.")
 *         if symmetrize:
 *             O = (O+O.transpose())/2             # <<<<<<<<<<<<<<
 *         out = Graph(ctype=O.ctype)
 *         if out.ctype=="int":
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_O), __pyx_n_s_transpose); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1151, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = NULL;
      __pyx_t_5 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_5 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
        __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1151, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __pyx_t_3 = PyNumber_Add(((PyObject *)__pyx_v_O), __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1151, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyInt_TrueDivideObjC(__pyx_t_3, __pyx_int_2, 2, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1151, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5miolo_mioloObject))))) __PYX_ERR(1, 1151, __pyx_L1_error)
      __Pyx_DECREF_SET(__pyx_v_O, ((struct __pyx_obj_5miolo_mioloObject *)__pyx_t_4));
      __pyx_t_4 = 0;

      /* "miololib.pyx":1150
 *         if O.rows!=O.cols:
 *             raise Exception("Matrix must be square.")
 *         if symmetrize:             # <<<<<<<<<<<<<<
 *             O = (O+O.transpose())/2
 *         out = Graph(ctype=O.ctype)
 */
    }

    /* "miololib.pyx":1152
 *         if symmetrize:
 *             O = (O+O.transpose())/2
 *         out = Graph(ctype=O.ctype)             # <<<<<<<<<<<<<<
 *         if out.ctype=="int":
 *             out.graphInt = mld.mst(drf(O.mtxInt))
 */
    __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1152, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_O), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1152, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_ctype, __pyx_t_3) < 0) __PYX_ERR(1, 1152, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Graph), __pyx_empty_tuple, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1152, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_out = ((struct __pyx_obj_5miolo_Graph *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "miololib.pyx":1153
 *             O = (O+O.transpose())/2
 *         out = Graph(ctype=O.ctype)
 *         if out.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.graphInt = mld.mst(drf(O.mtxInt))
 *         if out.ctype=="float":
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1153, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 1153, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_1) {

      /* "miololib.pyx":1154
 *         out = Graph(ctype=O.ctype)
 *         if out.ctype=="int":
 *             out.graphInt = mld.mst(drf(O.mtxInt))             # <<<<<<<<<<<<<<
 *         if out.ctype=="float":
 *             out.graphFloat = mld.mst(drf(O.mtxFloat))
 */
      __pyx_v_out->__pyx_base.graphInt = mst<int>((*__pyx_v_O->mtxInt));

      /* "miololib.pyx":1153
 *             O = (O+O.transpose())/2
 *         out = Graph(ctype=O.ctype)
 *         if out.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.graphInt = mld.mst(drf(O.mtxInt))
 *         if out.ctype=="float":
 */
    }

    /* "miololib.pyx":1155
 *         if out.ctype=="int":
 *             out.graphInt = mld.mst(drf(O.mtxInt))
 *         if out.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.graphFloat = mld.mst(drf(O.mtxFloat))
 *         if out.ctype=="int":
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1155, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 1155, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_1) {

      /* "miololib.pyx":1156
 *             out.graphInt = mld.mst(drf(O.mtxInt))
 *         if out.ctype=="float":
 *             out.graphFloat = mld.mst(drf(O.mtxFloat))             # <<<<<<<<<<<<<<
 *         if out.ctype=="int":
 *             out.graphDouble = mld.mst(drf(O.mtxDouble))
 */
      __pyx_v_out->__pyx_base.graphFloat = mst<float>((*__pyx_v_O->mtxFloat));

      /* "miololib.pyx":1155
 *         if out.ctype=="int":
 *             out.graphInt = mld.mst(drf(O.mtxInt))
 *         if out.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.graphFloat = mld.mst(drf(O.mtxFloat))
 *         if out.ctype=="int":
 */
    }

    /* "miololib.pyx":1157
 *         if out.ctype=="float":
 *             out.graphFloat = mld.mst(drf(O.mtxFloat))
 *         if out.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.graphDouble = mld.mst(drf(O.mtxDouble))
 *         return out
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1157, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 1157, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_1) {

      /* "miololib.pyx":1158
 *             out.graphFloat = mld.mst(drf(O.mtxFloat))
 *         if out.ctype=="int":
 *             out.graphDouble = mld.mst(drf(O.mtxDouble))             # <<<<<<<<<<<<<<
 *         return out
 *     if isinstance(O,Graph):
 */
      __pyx_v_out->__pyx_base.graphDouble = mst<double>((*__pyx_v_O->mtxDouble));

      /* "miololib.pyx":1157
 *         if out.ctype=="float":
 *             out.graphFloat = mld.mst(drf(O.mtxFloat))
 *         if out.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.graphDouble = mld.mst(drf(O.mtxDouble))
 *         return out
 */
    }

    /* "miololib.pyx":1159
 *         if out.ctype=="int":
 *             out.graphDouble = mld.mst(drf(O.mtxDouble))
 *         return out             # <<<<<<<<<<<<<<
 *     if isinstance(O,Graph):
 *         out = Graph(ctype=O.ctype)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_out);
    __pyx_r = ((PyObject *)__pyx_v_out);
    goto __pyx_L0;

    /* "miololib.pyx":1147
 *         symmetrize: if O is a Matrix, symmetrize in-place.
 *     """
 *     if isinstance(O,Matrix):             # <<<<<<<<<<<<<<
 *         if O.rows!=O.cols:
 *             raise Exception("Matrix must be square.")
 */
  }

  /* "miololib.pyx":1160
 *             out.graphDouble = mld.mst(drf(O.mtxDouble))
 *         return out
 *     if isinstance(O,Graph):             # <<<<<<<<<<<<<<
 *         out = Graph(ctype=O.ctype)
 *         if out.ctype=="int":
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_O), __pyx_ptype_5miolo_Graph); 
  if (__pyx_t_1) {

    /* "miololib.pyx":1161
 *         return out
 *     if isinstance(O,Graph):
 *         out = Graph(ctype=O.ctype)             # <<<<<<<<<<<<<<
 *         if out.ctype=="int":
 *             out.graphInt = mld.mst(drf(O.graphInt))
 */
    __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1161, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_O), __pyx_n_s_ctype); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1161, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_ctype, __pyx_t_4) < 0) __PYX_ERR(1, 1161, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Graph), __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1161, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_out = ((struct __pyx_obj_5miolo_Graph *)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "miololib.pyx":1162
 *     if isinstance(O,Graph):
 *         out = Graph(ctype=O.ctype)
 *         if out.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.graphInt = mld.mst(drf(O.graphInt))
 *         if out.ctype=="float":
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1162, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_t_4, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 1162, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_1) {

      /* "miololib.pyx":1163
 *         out = Graph(ctype=O.ctype)
 *         if out.ctype=="int":
 *             out.graphInt = mld.mst(drf(O.graphInt))             # <<<<<<<<<<<<<<
 *         if out.ctype=="float":
 *             out.graphFloat = mld.mst(drf(O.graphFloat))
 */
      __pyx_v_out->__pyx_base.graphInt = mst<int>((*__pyx_v_O->graphInt));

      /* "miololib.pyx":1162
 *     if isinstance(O,Graph):
 *         out = Graph(ctype=O.ctype)
 *         if out.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.graphInt = mld.mst(drf(O.graphInt))
 *         if out.ctype=="float":
 */
    }

    /* "miololib.pyx":1164
 *         if out.ctype=="int":
 *             out.graphInt = mld.mst(drf(O.graphInt))
 *         if out.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.graphFloat = mld.mst(drf(O.graphFloat))
 *         if out.ctype=="int":
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1164, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_t_4, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 1164, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_1) {

      /* "miololib.pyx":1165
 *             out.graphInt = mld.mst(drf(O.graphInt))
 *         if out.ctype=="float":
 *             out.graphFloat = mld.mst(drf(O.graphFloat))             # <<<<<<<<<<<<<<
 *         if out.ctype=="int":
 *             out.graphDouble = mld.mst(drf(O.graphDouble))
 */
      __pyx_v_out->__pyx_base.graphFloat = mst<float>((*__pyx_v_O->graphFloat));

      /* "miololib.pyx":1164
 *         if out.ctype=="int":
 *             out.graphInt = mld.mst(drf(O.graphInt))
 *         if out.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.graphFloat = mld.mst(drf(O.graphFloat))
 *         if out.ctype=="int":
 */
    }

    /* "miololib.pyx":1166
 *         if out.ctype=="float":
 *             out.graphFloat = mld.mst(drf(O.graphFloat))
 *         if out.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.graphDouble = mld.mst(drf(O.graphDouble))
 *         return out
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1166, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_t_4, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 1166, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_1) {

      /* "miololib.pyx":1167
 *             out.graphFloat = mld.mst(drf(O.graphFloat))
 *         if out.ctype=="int":
 *             out.graphDouble = mld.mst(drf(O.graphDouble))             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
      __pyx_v_out->__pyx_base.graphDouble = mst<double>((*__pyx_v_O->graphDouble));

      /* "miololib.pyx":1166
 *         if out.ctype=="float":
 *             out.graphFloat = mld.mst(drf(O.graphFloat))
 *         if out.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.graphDouble = mld.mst(drf(O.graphDouble))
 *         return out
 */
    }

    /* "miololib.pyx":1168
 *         if out.ctype=="int":
 *             out.graphDouble = mld.mst(drf(O.graphDouble))
 *         return out             # <<<<<<<<<<<<<<
 * 
 * #-------------------------------------------------------------------------------
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_out);
    __pyx_r = ((PyObject *)__pyx_v_out);
    goto __pyx_L0;

    /* "miololib.pyx":1160
 *             out.graphDouble = mld.mst(drf(O.mtxDouble))
 *         return out
 *     if isinstance(O,Graph):             # <<<<<<<<<<<<<<
 *         out = Graph(ctype=O.ctype)
 *         if out.ctype=="int":
 */
  }

  /* "miololib.pyx":1142
 *     return out
 * 
 * def MST(mioloObject O, symmetrize=True):             # <<<<<<<<<<<<<<
 *     """
 *         Returns a minimum spanning tree using Kruskal's Algorithm.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("miolo.MST", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XDECREF((PyObject *)__pyx_v_O);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":1192
 *     cdef object cType
 * 
 *     def __cinit__(self, unsigned long nodes=0, ctype=global_ctype):             # <<<<<<<<<<<<<<
 *         if ctype in ctypes:
 *             self.cType = ctype
 */

/* Python wrapper */
static int __pyx_pw_5miolo_7Digraph_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5miolo_7Digraph_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  unsigned long __pyx_v_nodes;
  PyObject *__pyx_v_ctype = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_nodes,&__pyx_n_s_ctype,0};
    values[1] = __Pyx_Arg_NewRef_VARARGS(__pyx_k__45);
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_nodes);
          if (value) { values[0] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1192, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_ctype);
          if (value) { values[1] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1192, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__cinit__") < 0)) __PYX_ERR(1, 1192, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_nodes = __Pyx_PyInt_As_unsigned_long(values[0]); if (unlikely((__pyx_v_nodes == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1192, __pyx_L3_error)
    } else {
      __pyx_v_nodes = ((unsigned long)0);
    }
    __pyx_v_ctype = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 2, __pyx_nargs); __PYX_ERR(1, 1192, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.Digraph.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5miolo_7Digraph___cinit__(((struct __pyx_obj_5miolo_Digraph *)__pyx_v_self), __pyx_v_nodes, __pyx_v_ctype);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5miolo_7Digraph___cinit__(struct __pyx_obj_5miolo_Digraph *__pyx_v_self, unsigned long __pyx_v_nodes, PyObject *__pyx_v_ctype) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 1);

  /* "miololib.pyx":1193
 * 
 *     def __cinit__(self, unsigned long nodes=0, ctype=global_ctype):
 *         if ctype in ctypes:             # <<<<<<<<<<<<<<
 *             self.cType = ctype
 *             if nodes>0:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_ctypes); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_v_ctype, __pyx_t_1, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 1193, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(__pyx_t_2)) {

    /* "miololib.pyx":1194
 *     def __cinit__(self, unsigned long nodes=0, ctype=global_ctype):
 *         if ctype in ctypes:
 *             self.cType = ctype             # <<<<<<<<<<<<<<
 *             if nodes>0:
 *                 if ctype=="int":
 */
    __Pyx_INCREF(__pyx_v_ctype);
    __Pyx_GIVEREF(__pyx_v_ctype);
    __Pyx_GOTREF(__pyx_v_self->cType);
    __Pyx_DECREF(__pyx_v_self->cType);
    __pyx_v_self->cType = __pyx_v_ctype;

    /* "miololib.pyx":1195
 *         if ctype in ctypes:
 *             self.cType = ctype
 *             if nodes>0:             # <<<<<<<<<<<<<<
 *                 if ctype=="int":
 *                     self.digraphInt = new mld.digraph[int](nodes)
 */
    __pyx_t_2 = (__pyx_v_nodes > 0);
    if (__pyx_t_2) {

      /* "miololib.pyx":1196
 *             self.cType = ctype
 *             if nodes>0:
 *                 if ctype=="int":             # <<<<<<<<<<<<<<
 *                     self.digraphInt = new mld.digraph[int](nodes)
 *                 if ctype=="float":
 */
      __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_ctype, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 1196, __pyx_L1_error)
      if (__pyx_t_2) {

        /* "miololib.pyx":1197
 *             if nodes>0:
 *                 if ctype=="int":
 *                     self.digraphInt = new mld.digraph[int](nodes)             # <<<<<<<<<<<<<<
 *                 if ctype=="float":
 *                     self.digraphFloat = new mld.digraph[float](nodes)
 */
        __pyx_v_self->__pyx_base.digraphInt = new digraph<int> (__pyx_v_nodes);

        /* "miololib.pyx":1196
 *             self.cType = ctype
 *             if nodes>0:
 *                 if ctype=="int":             # <<<<<<<<<<<<<<
 *                     self.digraphInt = new mld.digraph[int](nodes)
 *                 if ctype=="float":
 */
      }

      /* "miololib.pyx":1198
 *                 if ctype=="int":
 *                     self.digraphInt = new mld.digraph[int](nodes)
 *                 if ctype=="float":             # <<<<<<<<<<<<<<
 *                     self.digraphFloat = new mld.digraph[float](nodes)
 *                 if ctype=="double":
 */
      __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_ctype, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 1198, __pyx_L1_error)
      if (__pyx_t_2) {

        /* "miololib.pyx":1199
 *                     self.digraphInt = new mld.digraph[int](nodes)
 *                 if ctype=="float":
 *                     self.digraphFloat = new mld.digraph[float](nodes)             # <<<<<<<<<<<<<<
 *                 if ctype=="double":
 *                     self.digraphDouble = new mld.digraph[double](nodes)
 */
        __pyx_v_self->__pyx_base.digraphFloat = new digraph<float> (__pyx_v_nodes);

        /* "miololib.pyx":1198
 *                 if ctype=="int":
 *                     self.digraphInt = new mld.digraph[int](nodes)
 *                 if ctype=="float":             # <<<<<<<<<<<<<<
 *                     self.digraphFloat = new mld.digraph[float](nodes)
 *                 if ctype=="double":
 */
      }

      /* "miololib.pyx":1200
 *                 if ctype=="float":
 *                     self.digraphFloat = new mld.digraph[float](nodes)
 *                 if ctype=="double":             # <<<<<<<<<<<<<<
 *                     self.digraphDouble = new mld.digraph[double](nodes)
 *             else:
 */
      __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_ctype, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 1200, __pyx_L1_error)
      if (__pyx_t_2) {

        /* "miololib.pyx":1201
 *                     self.digraphFloat = new mld.digraph[float](nodes)
 *                 if ctype=="double":
 *                     self.digraphDouble = new mld.digraph[double](nodes)             # <<<<<<<<<<<<<<
 *             else:
 *                 if ctype=="int":
 */
        __pyx_v_self->__pyx_base.digraphDouble = new digraph<double> (__pyx_v_nodes);

        /* "miololib.pyx":1200
 *                 if ctype=="float":
 *                     self.digraphFloat = new mld.digraph[float](nodes)
 *                 if ctype=="double":             # <<<<<<<<<<<<<<
 *                     self.digraphDouble = new mld.digraph[double](nodes)
 *             else:
 */
      }

      /* "miololib.pyx":1195
 *         if ctype in ctypes:
 *             self.cType = ctype
 *             if nodes>0:             # <<<<<<<<<<<<<<
 *                 if ctype=="int":
 *                     self.digraphInt = new mld.digraph[int](nodes)
 */
      goto __pyx_L4;
    }

    /* "miololib.pyx":1203
 *                     self.digraphDouble = new mld.digraph[double](nodes)
 *             else:
 *                 if ctype=="int":             # <<<<<<<<<<<<<<
 *                     self.digraphInt = NULL
 *                 if ctype=="float":
 */
    /*else*/ {
      __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_ctype, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 1203, __pyx_L1_error)
      if (__pyx_t_2) {

        /* "miololib.pyx":1204
 *             else:
 *                 if ctype=="int":
 *                     self.digraphInt = NULL             # <<<<<<<<<<<<<<
 *                 if ctype=="float":
 *                     self.digraphFloat = NULL
 */
        __pyx_v_self->__pyx_base.digraphInt = NULL;

        /* "miololib.pyx":1203
 *                     self.digraphDouble = new mld.digraph[double](nodes)
 *             else:
 *                 if ctype=="int":             # <<<<<<<<<<<<<<
 *                     self.digraphInt = NULL
 *                 if ctype=="float":
 */
      }

      /* "miololib.pyx":1205
 *                 if ctype=="int":
 *                     self.digraphInt = NULL
 *                 if ctype=="float":             # <<<<<<<<<<<<<<
 *                     self.digraphFloat = NULL
 *                 if ctype=="double":
 */
      __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_ctype, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 1205, __pyx_L1_error)
      if (__pyx_t_2) {

        /* "miololib.pyx":1206
 *                     self.digraphInt = NULL
 *                 if ctype=="float":
 *                     self.digraphFloat = NULL             # <<<<<<<<<<<<<<
 *                 if ctype=="double":
 *                     self.digraphDouble = NULL
 */
        __pyx_v_self->__pyx_base.digraphFloat = NULL;

        /* "miololib.pyx":1205
 *                 if ctype=="int":
 *                     self.digraphInt = NULL
 *                 if ctype=="float":             # <<<<<<<<<<<<<<
 *                     self.digraphFloat = NULL
 *                 if ctype=="double":
 */
      }

      /* "miololib.pyx":1207
 *                 if ctype=="float":
 *                     self.digraphFloat = NULL
 *                 if ctype=="double":             # <<<<<<<<<<<<<<
 *                     self.digraphDouble = NULL
 *         else:
 */
      __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_ctype, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 1207, __pyx_L1_error)
      if (__pyx_t_2) {

        /* "miololib.pyx":1208
 *                     self.digraphFloat = NULL
 *                 if ctype=="double":
 *                     self.digraphDouble = NULL             # <<<<<<<<<<<<<<
 *         else:
 *             raise Exception("Unknown ctype.")
 */
        __pyx_v_self->__pyx_base.digraphDouble = NULL;

        /* "miololib.pyx":1207
 *                 if ctype=="float":
 *                     self.digraphFloat = NULL
 *                 if ctype=="double":             # <<<<<<<<<<<<<<
 *                     self.digraphDouble = NULL
 *         else:
 */
      }
    }
    __pyx_L4:;

    /* "miololib.pyx":1193
 * 
 *     def __cinit__(self, unsigned long nodes=0, ctype=global_ctype):
 *         if ctype in ctypes:             # <<<<<<<<<<<<<<
 *             self.cType = ctype
 *             if nodes>0:
 */
    goto __pyx_L3;
  }

  /* "miololib.pyx":1210
 *                     self.digraphDouble = NULL
 *         else:
 *             raise Exception("Unknown ctype.")             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1210, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 1210, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "miololib.pyx":1192
 *     cdef object cType
 * 
 *     def __cinit__(self, unsigned long nodes=0, ctype=global_ctype):             # <<<<<<<<<<<<<<
 *         if ctype in ctypes:
 *             self.cType = ctype
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("miolo.Digraph.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":1212
 *             raise Exception("Unknown ctype.")
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.ctype=="int":
 *             del self.digraphInt
 */

/* Python wrapper */
static void __pyx_pw_5miolo_7Digraph_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_5miolo_7Digraph_3__dealloc__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_pf_5miolo_7Digraph_2__dealloc__(((struct __pyx_obj_5miolo_Digraph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5miolo_7Digraph_2__dealloc__(struct __pyx_obj_5miolo_Digraph *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__dealloc__", 1);

  /* "miololib.pyx":1213
 * 
 *     def __dealloc__(self):
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             del self.digraphInt
 *         if self.ctype=="float":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1213, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 1213, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":1214
 *     def __dealloc__(self):
 *         if self.ctype=="int":
 *             del self.digraphInt             # <<<<<<<<<<<<<<
 *         if self.ctype=="float":
 *             del self.digraphFloat
 */
    delete __pyx_v_self->__pyx_base.digraphInt;

    /* "miololib.pyx":1213
 * 
 *     def __dealloc__(self):
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             del self.digraphInt
 *         if self.ctype=="float":
 */
  }

  /* "miololib.pyx":1215
 *         if self.ctype=="int":
 *             del self.digraphInt
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             del self.digraphFloat
 *         if self.ctype=="double":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1215, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 1215, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":1216
 *             del self.digraphInt
 *         if self.ctype=="float":
 *             del self.digraphFloat             # <<<<<<<<<<<<<<
 *         if self.ctype=="double":
 *             del self.digraphDouble
 */
    delete __pyx_v_self->__pyx_base.digraphFloat;

    /* "miololib.pyx":1215
 *         if self.ctype=="int":
 *             del self.digraphInt
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             del self.digraphFloat
 *         if self.ctype=="double":
 */
  }

  /* "miololib.pyx":1217
 *         if self.ctype=="float":
 *             del self.digraphFloat
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             del self.digraphDouble
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 1217, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":1218
 *             del self.digraphFloat
 *         if self.ctype=="double":
 *             del self.digraphDouble             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
    delete __pyx_v_self->__pyx_base.digraphDouble;

    /* "miololib.pyx":1217
 *         if self.ctype=="float":
 *             del self.digraphFloat
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             del self.digraphDouble
 * 
 */
  }

  /* "miololib.pyx":1212
 *             raise Exception("Unknown ctype.")
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.ctype=="int":
 *             del self.digraphInt
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_WriteUnraisable("miolo.Digraph.__dealloc__", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "miololib.pyx":1220
 *             del self.digraphDouble
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def ctype(self):
 *         return str(self.cType)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_7Digraph_5ctype_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5miolo_7Digraph_5ctype_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5miolo_7Digraph_5ctype___get__(((struct __pyx_obj_5miolo_Digraph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_7Digraph_5ctype___get__(struct __pyx_obj_5miolo_Digraph *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "miololib.pyx":1222
 *     @property
 *     def ctype(self):
 *         return str(self.cType)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Str(__pyx_v_self->cType); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1222, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "miololib.pyx":1220
 *             del self.digraphDouble
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def ctype(self):
 *         return str(self.cType)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("miolo.Digraph.ctype.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":1224
 *         return str(self.cType)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def nodes(self):
 *         if self.ctype=="int":
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_7Digraph_5nodes_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5miolo_7Digraph_5nodes_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5miolo_7Digraph_5nodes___get__(((struct __pyx_obj_5miolo_Digraph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_7Digraph_5nodes___get__(struct __pyx_obj_5miolo_Digraph *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "miololib.pyx":1226
 *     @property
 *     def nodes(self):
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             return self.digraphInt.nodes
 *         if self.ctype=="float":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 1226, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":1227
 *     def nodes(self):
 *         if self.ctype=="int":
 *             return self.digraphInt.nodes             # <<<<<<<<<<<<<<
 *         if self.ctype=="float":
 *             return self.digraphFloat.nodes
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_From_unsigned_long(__pyx_v_self->__pyx_base.digraphInt->nodes); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1227, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "miololib.pyx":1226
 *     @property
 *     def nodes(self):
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             return self.digraphInt.nodes
 *         if self.ctype=="float":
 */
  }

  /* "miololib.pyx":1228
 *         if self.ctype=="int":
 *             return self.digraphInt.nodes
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             return self.digraphFloat.nodes
 *         if self.ctype=="double":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 1228, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":1229
 *             return self.digraphInt.nodes
 *         if self.ctype=="float":
 *             return self.digraphFloat.nodes             # <<<<<<<<<<<<<<
 *         if self.ctype=="double":
 *             return self.digraphDouble.nodes
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_From_unsigned_long(__pyx_v_self->__pyx_base.digraphFloat->nodes); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1229, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "miololib.pyx":1228
 *         if self.ctype=="int":
 *             return self.digraphInt.nodes
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             return self.digraphFloat.nodes
 *         if self.ctype=="double":
 */
  }

  /* "miololib.pyx":1230
 *         if self.ctype=="float":
 *             return self.digraphFloat.nodes
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             return self.digraphDouble.nodes
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1230, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 1230, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":1231
 *             return self.digraphFloat.nodes
 *         if self.ctype=="double":
 *             return self.digraphDouble.nodes             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_From_unsigned_long(__pyx_v_self->__pyx_base.digraphDouble->nodes); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1231, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "miololib.pyx":1230
 *         if self.ctype=="float":
 *             return self.digraphFloat.nodes
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             return self.digraphDouble.nodes
 * 
 */
  }

  /* "miololib.pyx":1224
 *         return str(self.cType)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def nodes(self):
 *         if self.ctype=="int":
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("miolo.Digraph.nodes.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":1233
 *             return self.digraphDouble.nodes
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def null(self):
 *         if self.ctype=="int":
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_7Digraph_4null_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5miolo_7Digraph_4null_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5miolo_7Digraph_4null___get__(((struct __pyx_obj_5miolo_Digraph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_7Digraph_4null___get__(struct __pyx_obj_5miolo_Digraph *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "miololib.pyx":1235
 *     @property
 *     def null(self):
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             return self.digraphInt.null()
 *         if self.ctype=="float":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 1235, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":1236
 *     def null(self):
 *         if self.ctype=="int":
 *             return self.digraphInt.null()             # <<<<<<<<<<<<<<
 *         if self.ctype=="float":
 *             return self.digraphFloat.null()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->__pyx_base.digraphInt->null()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1236, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "miololib.pyx":1235
 *     @property
 *     def null(self):
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             return self.digraphInt.null()
 *         if self.ctype=="float":
 */
  }

  /* "miololib.pyx":1237
 *         if self.ctype=="int":
 *             return self.digraphInt.null()
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             return self.digraphFloat.null()
 *         if self.ctype=="double":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 1237, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":1238
 *             return self.digraphInt.null()
 *         if self.ctype=="float":
 *             return self.digraphFloat.null()             # <<<<<<<<<<<<<<
 *         if self.ctype=="double":
 *             return self.digraphDouble.null()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->__pyx_base.digraphFloat->null()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1238, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "miololib.pyx":1237
 *         if self.ctype=="int":
 *             return self.digraphInt.null()
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             return self.digraphFloat.null()
 *         if self.ctype=="double":
 */
  }

  /* "miololib.pyx":1239
 *         if self.ctype=="float":
 *             return self.digraphFloat.null()
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             return self.digraphDouble.null()
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 1239, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":1240
 *             return self.digraphFloat.null()
 *         if self.ctype=="double":
 *             return self.digraphDouble.null()             # <<<<<<<<<<<<<<
 * 
 *     def connect(self, i, j, value=0):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->__pyx_base.digraphDouble->null()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1240, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "miololib.pyx":1239
 *         if self.ctype=="float":
 *             return self.digraphFloat.null()
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             return self.digraphDouble.null()
 * 
 */
  }

  /* "miololib.pyx":1233
 *             return self.digraphDouble.nodes
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def null(self):
 *         if self.ctype=="int":
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("miolo.Digraph.null.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":1242
 *             return self.digraphDouble.null()
 * 
 *     def connect(self, i, j, value=0):             # <<<<<<<<<<<<<<
 *         """
 *             Create connection from i to j weighted by value.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_7Digraph_5connect(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_7Digraph_4connect, "Digraph.connect(self, i, j, value=0)\n\n            Create connection from i to j weighted by value.\n        ");
static PyMethodDef __pyx_mdef_5miolo_7Digraph_5connect = {"connect", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_7Digraph_5connect, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_7Digraph_4connect};
static PyObject *__pyx_pw_5miolo_7Digraph_5connect(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_i = 0;
  PyObject *__pyx_v_j = 0;
  PyObject *__pyx_v_value = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("connect (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_i,&__pyx_n_s_j,&__pyx_n_s_value,0};
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)__pyx_int_0));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_i)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1242, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_j)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1242, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("connect", 0, 2, 3, 1); __PYX_ERR(1, 1242, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_value);
          if (value) { values[2] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1242, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "connect") < 0)) __PYX_ERR(1, 1242, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_i = values[0];
    __pyx_v_j = values[1];
    __pyx_v_value = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("connect", 0, 2, 3, __pyx_nargs); __PYX_ERR(1, 1242, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.Digraph.connect", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5miolo_7Digraph_4connect(((struct __pyx_obj_5miolo_Digraph *)__pyx_v_self), __pyx_v_i, __pyx_v_j, __pyx_v_value);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_7Digraph_4connect(struct __pyx_obj_5miolo_Digraph *__pyx_v_self, PyObject *__pyx_v_i, PyObject *__pyx_v_j, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  unsigned long __pyx_t_5;
  unsigned long __pyx_t_6;
  int __pyx_t_7;
  float __pyx_t_8;
  double __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("connect", 1);

  /* "miololib.pyx":1246
 *             Create connection from i to j weighted by value.
 *         """
 *         if i >= self.nodes or i<0:             # <<<<<<<<<<<<<<
 *             raise Exception("i is not a valid index for Digraph.")
 *         if j >= self.nodes or j<0:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nodes); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_v_i, __pyx_t_2, Py_GE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1246, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 1246, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!__pyx_t_4) {
  } else {
    __pyx_t_1 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = PyObject_RichCompare(__pyx_v_i, __pyx_int_0, Py_LT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1246, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 1246, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "miololib.pyx":1247
 *         """
 *         if i >= self.nodes or i<0:
 *             raise Exception("i is not a valid index for Digraph.")             # <<<<<<<<<<<<<<
 *         if j >= self.nodes or j<0:
 *             raise Exception("j is not a valid index for Digraph.")
 */
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__46, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1247, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 1247, __pyx_L1_error)

    /* "miololib.pyx":1246
 *             Create connection from i to j weighted by value.
 *         """
 *         if i >= self.nodes or i<0:             # <<<<<<<<<<<<<<
 *             raise Exception("i is not a valid index for Digraph.")
 *         if j >= self.nodes or j<0:
 */
  }

  /* "miololib.pyx":1248
 *         if i >= self.nodes or i<0:
 *             raise Exception("i is not a valid index for Digraph.")
 *         if j >= self.nodes or j<0:             # <<<<<<<<<<<<<<
 *             raise Exception("j is not a valid index for Digraph.")
 *         if self.ctype=="int":
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nodes); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_j, __pyx_t_3, Py_GE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1248, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 1248, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!__pyx_t_4) {
  } else {
    __pyx_t_1 = __pyx_t_4;
    goto __pyx_L7_bool_binop_done;
  }
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_j, __pyx_int_0, Py_LT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1248, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 1248, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_1 = __pyx_t_4;
  __pyx_L7_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "miololib.pyx":1249
 *             raise Exception("i is not a valid index for Digraph.")
 *         if j >= self.nodes or j<0:
 *             raise Exception("j is not a valid index for Digraph.")             # <<<<<<<<<<<<<<
 *         if self.ctype=="int":
 *             self.digraphInt.connect(i,j,value)
 */
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__47, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1249, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 1249, __pyx_L1_error)

    /* "miololib.pyx":1248
 *         if i >= self.nodes or i<0:
 *             raise Exception("i is not a valid index for Digraph.")
 *         if j >= self.nodes or j<0:             # <<<<<<<<<<<<<<
 *             raise Exception("j is not a valid index for Digraph.")
 *         if self.ctype=="int":
 */
  }

  /* "miololib.pyx":1250
 *         if j >= self.nodes or j<0:
 *             raise Exception("j is not a valid index for Digraph.")
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             self.digraphInt.connect(i,j,value)
 *         if self.ctype=="float":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1250, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 1250, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_1) {

    /* "miololib.pyx":1251
 *             raise Exception("j is not a valid index for Digraph.")
 *         if self.ctype=="int":
 *             self.digraphInt.connect(i,j,value)             # <<<<<<<<<<<<<<
 *         if self.ctype=="float":
 *             self.digraphFloat.connect(i,j,value)
 */
    __pyx_t_5 = __Pyx_PyInt_As_unsigned_long(__pyx_v_i); if (unlikely((__pyx_t_5 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1251, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyInt_As_unsigned_long(__pyx_v_j); if (unlikely((__pyx_t_6 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1251, __pyx_L1_error)
    __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1251, __pyx_L1_error)
    __pyx_v_self->__pyx_base.digraphInt->connect(__pyx_t_5, __pyx_t_6, __pyx_t_7);

    /* "miololib.pyx":1250
 *         if j >= self.nodes or j<0:
 *             raise Exception("j is not a valid index for Digraph.")
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             self.digraphInt.connect(i,j,value)
 *         if self.ctype=="float":
 */
  }

  /* "miololib.pyx":1252
 *         if self.ctype=="int":
 *             self.digraphInt.connect(i,j,value)
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             self.digraphFloat.connect(i,j,value)
 *         if self.ctype=="double":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1252, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 1252, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_1) {

    /* "miololib.pyx":1253
 *             self.digraphInt.connect(i,j,value)
 *         if self.ctype=="float":
 *             self.digraphFloat.connect(i,j,value)             # <<<<<<<<<<<<<<
 *         if self.ctype=="double":
 *             self.digraphDouble.connect(i,j,value)
 */
    __pyx_t_6 = __Pyx_PyInt_As_unsigned_long(__pyx_v_i); if (unlikely((__pyx_t_6 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1253, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyInt_As_unsigned_long(__pyx_v_j); if (unlikely((__pyx_t_5 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1253, __pyx_L1_error)
    __pyx_t_8 = __pyx_PyFloat_AsFloat(__pyx_v_value); if (unlikely((__pyx_t_8 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 1253, __pyx_L1_error)
    __pyx_v_self->__pyx_base.digraphFloat->connect(__pyx_t_6, __pyx_t_5, __pyx_t_8);

    /* "miololib.pyx":1252
 *         if self.ctype=="int":
 *             self.digraphInt.connect(i,j,value)
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             self.digraphFloat.connect(i,j,value)
 *         if self.ctype=="double":
 */
  }

  /* "miololib.pyx":1254
 *         if self.ctype=="float":
 *             self.digraphFloat.connect(i,j,value)
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             self.digraphDouble.connect(i,j,value)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 1254, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_1) {

    /* "miololib.pyx":1255
 *             self.digraphFloat.connect(i,j,value)
 *         if self.ctype=="double":
 *             self.digraphDouble.connect(i,j,value)             # <<<<<<<<<<<<<<
 * 
 *     def connectRegular(self, Matrix Neighbors, Matrix Weights):
 */
    __pyx_t_5 = __Pyx_PyInt_As_unsigned_long(__pyx_v_i); if (unlikely((__pyx_t_5 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1255, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyInt_As_unsigned_long(__pyx_v_j); if (unlikely((__pyx_t_6 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1255, __pyx_L1_error)
    __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1255, __pyx_L1_error)
    __pyx_v_self->__pyx_base.digraphDouble->connect(__pyx_t_5, __pyx_t_6, __pyx_t_9);

    /* "miololib.pyx":1254
 *         if self.ctype=="float":
 *             self.digraphFloat.connect(i,j,value)
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             self.digraphDouble.connect(i,j,value)
 * 
 */
  }

  /* "miololib.pyx":1242
 *             return self.digraphDouble.null()
 * 
 *     def connect(self, i, j, value=0):             # <<<<<<<<<<<<<<
 *         """
 *             Create connection from i to j weighted by value.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("miolo.Digraph.connect", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":1257
 *             self.digraphDouble.connect(i,j,value)
 * 
 *     def connectRegular(self, Matrix Neighbors, Matrix Weights):             # <<<<<<<<<<<<<<
 *         """
 *             Connects arcs in self using Neighbors as topology and Weights as
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_7Digraph_7connectRegular(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_7Digraph_6connectRegular, "Digraph.connectRegular(self, Matrix Neighbors, Matrix Weights)\n\n            Connects arcs in self using Neighbors as topology and Weights as \n            weights.\n            Neighbors: the i-th row corresponds to the neighbors of i-th node.\n            Weights: square matrix for weighting.\n        ");
static PyMethodDef __pyx_mdef_5miolo_7Digraph_7connectRegular = {"connectRegular", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_7Digraph_7connectRegular, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_7Digraph_6connectRegular};
static PyObject *__pyx_pw_5miolo_7Digraph_7connectRegular(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_Neighbors = 0;
  struct __pyx_obj_5miolo_Matrix *__pyx_v_Weights = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("connectRegular (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_Neighbors,&__pyx_n_s_Weights,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_Neighbors)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1257, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_Weights)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1257, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("connectRegular", 1, 2, 2, 1); __PYX_ERR(1, 1257, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "connectRegular") < 0)) __PYX_ERR(1, 1257, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_Neighbors = ((struct __pyx_obj_5miolo_Matrix *)values[0]);
    __pyx_v_Weights = ((struct __pyx_obj_5miolo_Matrix *)values[1]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("connectRegular", 1, 2, 2, __pyx_nargs); __PYX_ERR(1, 1257, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.Digraph.connectRegular", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_Neighbors), __pyx_ptype_5miolo_Matrix, 1, "Neighbors", 0))) __PYX_ERR(1, 1257, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_Weights), __pyx_ptype_5miolo_Matrix, 1, "Weights", 0))) __PYX_ERR(1, 1257, __pyx_L1_error)
  __pyx_r = __pyx_pf_5miolo_7Digraph_6connectRegular(((struct __pyx_obj_5miolo_Digraph *)__pyx_v_self), __pyx_v_Neighbors, __pyx_v_Weights);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_7Digraph_6connectRegular(struct __pyx_obj_5miolo_Digraph *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_Neighbors, struct __pyx_obj_5miolo_Matrix *__pyx_v_Weights) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("connectRegular", 1);

  /* "miololib.pyx":1264
 *             Weights: square matrix for weighting.
 *         """
 *         if Neighbors.ctype!="int":             # <<<<<<<<<<<<<<
 *             raise TypeError("Neighbors must have int ctype.")
 *         if Neighbors.rows!=self.nodes or Weights.rows!=self.nodes:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_Neighbors), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_int, Py_NE)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 1264, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(__pyx_t_2)) {

    /* "miololib.pyx":1265
 *         """
 *         if Neighbors.ctype!="int":
 *             raise TypeError("Neighbors must have int ctype.")             # <<<<<<<<<<<<<<
 *         if Neighbors.rows!=self.nodes or Weights.rows!=self.nodes:
 *             raise Exception("Neighbors and Weights must have rows equals to self.nodes.")
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__48, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1265, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 1265, __pyx_L1_error)

    /* "miololib.pyx":1264
 *             Weights: square matrix for weighting.
 *         """
 *         if Neighbors.ctype!="int":             # <<<<<<<<<<<<<<
 *             raise TypeError("Neighbors must have int ctype.")
 *         if Neighbors.rows!=self.nodes or Weights.rows!=self.nodes:
 */
  }

  /* "miololib.pyx":1266
 *         if Neighbors.ctype!="int":
 *             raise TypeError("Neighbors must have int ctype.")
 *         if Neighbors.rows!=self.nodes or Weights.rows!=self.nodes:             # <<<<<<<<<<<<<<
 *             raise Exception("Neighbors and Weights must have rows equals to self.nodes.")
 *         if Weights.ctype!=self.ctype:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_Neighbors), __pyx_n_s_rows); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nodes); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_1, __pyx_t_3, Py_NE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1266, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(1, 1266, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!__pyx_t_5) {
  } else {
    __pyx_t_2 = __pyx_t_5;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_Weights), __pyx_n_s_rows); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nodes); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_4, __pyx_t_3, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1266, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(1, 1266, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = __pyx_t_5;
  __pyx_L5_bool_binop_done:;
  if (unlikely(__pyx_t_2)) {

    /* "miololib.pyx":1267
 *             raise TypeError("Neighbors must have int ctype.")
 *         if Neighbors.rows!=self.nodes or Weights.rows!=self.nodes:
 *             raise Exception("Neighbors and Weights must have rows equals to self.nodes.")             # <<<<<<<<<<<<<<
 *         if Weights.ctype!=self.ctype:
 *             raise TypeError("Weights and self must have same ctype.")
 */
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__49, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1267, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 1267, __pyx_L1_error)

    /* "miololib.pyx":1266
 *         if Neighbors.ctype!="int":
 *             raise TypeError("Neighbors must have int ctype.")
 *         if Neighbors.rows!=self.nodes or Weights.rows!=self.nodes:             # <<<<<<<<<<<<<<
 *             raise Exception("Neighbors and Weights must have rows equals to self.nodes.")
 *         if Weights.ctype!=self.ctype:
 */
  }

  /* "miololib.pyx":1268
 *         if Neighbors.rows!=self.nodes or Weights.rows!=self.nodes:
 *             raise Exception("Neighbors and Weights must have rows equals to self.nodes.")
 *         if Weights.ctype!=self.ctype:             # <<<<<<<<<<<<<<
 *             raise TypeError("Weights and self must have same ctype.")
 *         if Weights.rows!=Weights.cols:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_Weights), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1268, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1268, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_1, __pyx_t_3, Py_NE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1268, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 1268, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(__pyx_t_2)) {

    /* "miololib.pyx":1269
 *             raise Exception("Neighbors and Weights must have rows equals to self.nodes.")
 *         if Weights.ctype!=self.ctype:
 *             raise TypeError("Weights and self must have same ctype.")             # <<<<<<<<<<<<<<
 *         if Weights.rows!=Weights.cols:
 *             raise Exception("Weights must be a square Matrix.")
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__50, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1269, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(1, 1269, __pyx_L1_error)

    /* "miololib.pyx":1268
 *         if Neighbors.rows!=self.nodes or Weights.rows!=self.nodes:
 *             raise Exception("Neighbors and Weights must have rows equals to self.nodes.")
 *         if Weights.ctype!=self.ctype:             # <<<<<<<<<<<<<<
 *             raise TypeError("Weights and self must have same ctype.")
 *         if Weights.rows!=Weights.cols:
 */
  }

  /* "miololib.pyx":1270
 *         if Weights.ctype!=self.ctype:
 *             raise TypeError("Weights and self must have same ctype.")
 *         if Weights.rows!=Weights.cols:             # <<<<<<<<<<<<<<
 *             raise Exception("Weights must be a square Matrix.")
 *         if self.ctype=="int":
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_Weights), __pyx_n_s_rows); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1270, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_Weights), __pyx_n_s_cols); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1270, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_4, __pyx_t_3, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1270, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 1270, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(__pyx_t_2)) {

    /* "miololib.pyx":1271
 *             raise TypeError("Weights and self must have same ctype.")
 *         if Weights.rows!=Weights.cols:
 *             raise Exception("Weights must be a square Matrix.")             # <<<<<<<<<<<<<<
 *         if self.ctype=="int":
 *             self.digraphInt.connectRegular(drf(Neighbors.mtxInt),drf(Weights.mtxInt))
 */
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__51, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1271, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 1271, __pyx_L1_error)

    /* "miololib.pyx":1270
 *         if Weights.ctype!=self.ctype:
 *             raise TypeError("Weights and self must have same ctype.")
 *         if Weights.rows!=Weights.cols:             # <<<<<<<<<<<<<<
 *             raise Exception("Weights must be a square Matrix.")
 *         if self.ctype=="int":
 */
  }

  /* "miololib.pyx":1272
 *         if Weights.rows!=Weights.cols:
 *             raise Exception("Weights must be a square Matrix.")
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             self.digraphInt.connectRegular(drf(Neighbors.mtxInt),drf(Weights.mtxInt))
 *         if self.ctype=="float":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1272, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 1272, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":1273
 *             raise Exception("Weights must be a square Matrix.")
 *         if self.ctype=="int":
 *             self.digraphInt.connectRegular(drf(Neighbors.mtxInt),drf(Weights.mtxInt))             # <<<<<<<<<<<<<<
 *         if self.ctype=="float":
 *             self.digraphFloat.connectRegular(drf(Neighbors.mtxInt),drf(Weights.mtxFloat))
 */
    __pyx_v_self->__pyx_base.digraphInt->connectRegular((*__pyx_v_Neighbors->__pyx_base.mtxInt), (*__pyx_v_Weights->__pyx_base.mtxInt));

    /* "miololib.pyx":1272
 *         if Weights.rows!=Weights.cols:
 *             raise Exception("Weights must be a square Matrix.")
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             self.digraphInt.connectRegular(drf(Neighbors.mtxInt),drf(Weights.mtxInt))
 *         if self.ctype=="float":
 */
  }

  /* "miololib.pyx":1274
 *         if self.ctype=="int":
 *             self.digraphInt.connectRegular(drf(Neighbors.mtxInt),drf(Weights.mtxInt))
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             self.digraphFloat.connectRegular(drf(Neighbors.mtxInt),drf(Weights.mtxFloat))
 *         if self.ctype=="double":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 1274, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":1275
 *             self.digraphInt.connectRegular(drf(Neighbors.mtxInt),drf(Weights.mtxInt))
 *         if self.ctype=="float":
 *             self.digraphFloat.connectRegular(drf(Neighbors.mtxInt),drf(Weights.mtxFloat))             # <<<<<<<<<<<<<<
 *         if self.ctype=="double":
 *             self.digraphDouble.connectRegular(drf(Neighbors.mtxInt),drf(Weights.mtxDouble))
 */
    __pyx_v_self->__pyx_base.digraphFloat->connectRegular((*__pyx_v_Neighbors->__pyx_base.mtxInt), (*__pyx_v_Weights->__pyx_base.mtxFloat));

    /* "miololib.pyx":1274
 *         if self.ctype=="int":
 *             self.digraphInt.connectRegular(drf(Neighbors.mtxInt),drf(Weights.mtxInt))
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             self.digraphFloat.connectRegular(drf(Neighbors.mtxInt),drf(Weights.mtxFloat))
 *         if self.ctype=="double":
 */
  }

  /* "miololib.pyx":1276
 *         if self.ctype=="float":
 *             self.digraphFloat.connectRegular(drf(Neighbors.mtxInt),drf(Weights.mtxFloat))
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             self.digraphDouble.connectRegular(drf(Neighbors.mtxInt),drf(Weights.mtxDouble))
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1276, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 1276, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":1277
 *             self.digraphFloat.connectRegular(drf(Neighbors.mtxInt),drf(Weights.mtxFloat))
 *         if self.ctype=="double":
 *             self.digraphDouble.connectRegular(drf(Neighbors.mtxInt),drf(Weights.mtxDouble))             # <<<<<<<<<<<<<<
 * 
 *     def normalize(self):
 */
    __pyx_v_self->__pyx_base.digraphDouble->connectRegular((*__pyx_v_Neighbors->__pyx_base.mtxInt), (*__pyx_v_Weights->__pyx_base.mtxDouble));

    /* "miololib.pyx":1276
 *         if self.ctype=="float":
 *             self.digraphFloat.connectRegular(drf(Neighbors.mtxInt),drf(Weights.mtxFloat))
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             self.digraphDouble.connectRegular(drf(Neighbors.mtxInt),drf(Weights.mtxDouble))
 * 
 */
  }

  /* "miololib.pyx":1257
 *             self.digraphDouble.connect(i,j,value)
 * 
 *     def connectRegular(self, Matrix Neighbors, Matrix Weights):             # <<<<<<<<<<<<<<
 *         """
 *             Connects arcs in self using Neighbors as topology and Weights as
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("miolo.Digraph.connectRegular", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":1279
 *             self.digraphDouble.connectRegular(drf(Neighbors.mtxInt),drf(Weights.mtxDouble))
 * 
 *     def normalize(self):             # <<<<<<<<<<<<<<
 *         """
 *             Normalize weights of each node in order to sum to 1.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_7Digraph_9normalize(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_7Digraph_8normalize, "Digraph.normalize(self)\n\n            Normalize weights of each node in order to sum to 1.\n        ");
static PyMethodDef __pyx_mdef_5miolo_7Digraph_9normalize = {"normalize", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_7Digraph_9normalize, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_7Digraph_8normalize};
static PyObject *__pyx_pw_5miolo_7Digraph_9normalize(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("normalize (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("normalize", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "normalize", 0))) return NULL;
  __pyx_r = __pyx_pf_5miolo_7Digraph_8normalize(((struct __pyx_obj_5miolo_Digraph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_7Digraph_8normalize(struct __pyx_obj_5miolo_Digraph *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("normalize", 1);

  /* "miololib.pyx":1283
 *             Normalize weights of each node in order to sum to 1.
 *         """
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             self.digraphInt.normalize()
 *         if self.ctype=="float":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 1283, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":1284
 *         """
 *         if self.ctype=="int":
 *             self.digraphInt.normalize()             # <<<<<<<<<<<<<<
 *         if self.ctype=="float":
 *             self.digraphFloat.normalize()
 */
    __pyx_v_self->__pyx_base.digraphInt->normalize();

    /* "miololib.pyx":1283
 *             Normalize weights of each node in order to sum to 1.
 *         """
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             self.digraphInt.normalize()
 *         if self.ctype=="float":
 */
  }

  /* "miololib.pyx":1285
 *         if self.ctype=="int":
 *             self.digraphInt.normalize()
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             self.digraphFloat.normalize()
 *         if self.ctype=="double":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 1285, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":1286
 *             self.digraphInt.normalize()
 *         if self.ctype=="float":
 *             self.digraphFloat.normalize()             # <<<<<<<<<<<<<<
 *         if self.ctype=="double":
 *             self.digraphDouble.normalize()
 */
    __pyx_v_self->__pyx_base.digraphFloat->normalize();

    /* "miololib.pyx":1285
 *         if self.ctype=="int":
 *             self.digraphInt.normalize()
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             self.digraphFloat.normalize()
 *         if self.ctype=="double":
 */
  }

  /* "miololib.pyx":1287
 *         if self.ctype=="float":
 *             self.digraphFloat.normalize()
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             self.digraphDouble.normalize()
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 1287, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":1288
 *             self.digraphFloat.normalize()
 *         if self.ctype=="double":
 *             self.digraphDouble.normalize()             # <<<<<<<<<<<<<<
 * 
 *     def copy(self, mode="whole"):
 */
    __pyx_v_self->__pyx_base.digraphDouble->normalize();

    /* "miololib.pyx":1287
 *         if self.ctype=="float":
 *             self.digraphFloat.normalize()
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             self.digraphDouble.normalize()
 * 
 */
  }

  /* "miololib.pyx":1279
 *             self.digraphDouble.connectRegular(drf(Neighbors.mtxInt),drf(Weights.mtxDouble))
 * 
 *     def normalize(self):             # <<<<<<<<<<<<<<
 *         """
 *             Normalize weights of each node in order to sum to 1.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("miolo.Digraph.normalize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":1290
 *             self.digraphDouble.normalize()
 * 
 *     def copy(self, mode="whole"):             # <<<<<<<<<<<<<<
 *         """
 *             Returns a copy of self.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_7Digraph_11copy(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_7Digraph_10copy, "Digraph.copy(self, mode='whole')\n\n            Returns a copy of self. \n            if mode is whole, returns a copy of the whole Digraph. If mode is \n            structure, returns a Digraph with same structure of self, but with\n            all weights set to zero.\n        ");
static PyMethodDef __pyx_mdef_5miolo_7Digraph_11copy = {"copy", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_7Digraph_11copy, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_7Digraph_10copy};
static PyObject *__pyx_pw_5miolo_7Digraph_11copy(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_mode = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_mode,0};
    values[0] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)__pyx_n_s_whole));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_mode);
          if (value) { values[0] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1290, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "copy") < 0)) __PYX_ERR(1, 1290, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_mode = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("copy", 0, 0, 1, __pyx_nargs); __PYX_ERR(1, 1290, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.Digraph.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5miolo_7Digraph_10copy(((struct __pyx_obj_5miolo_Digraph *)__pyx_v_self), __pyx_v_mode);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_7Digraph_10copy(struct __pyx_obj_5miolo_Digraph *__pyx_v_self, PyObject *__pyx_v_mode) {
  struct __pyx_obj_5miolo_Digraph *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("copy", 1);

  /* "miololib.pyx":1297
 *             all weights set to zero.
 *         """
 *         out = Digraph(ctype=self.ctype)             # <<<<<<<<<<<<<<
 *         if mode=="whole":
 *             if self.ctype=="int":
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ctype, __pyx_t_2) < 0) __PYX_ERR(1, 1297, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Digraph), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_out = ((struct __pyx_obj_5miolo_Digraph *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "miololib.pyx":1298
 *         """
 *         out = Digraph(ctype=self.ctype)
 *         if mode=="whole":             # <<<<<<<<<<<<<<
 *             if self.ctype=="int":
 *                 out.digraphInt = self.digraphInt.copy()
 */
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_v_mode, __pyx_n_s_whole, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1298, __pyx_L1_error)
  if (__pyx_t_3) {

    /* "miololib.pyx":1299
 *         out = Digraph(ctype=self.ctype)
 *         if mode=="whole":
 *             if self.ctype=="int":             # <<<<<<<<<<<<<<
 *                 out.digraphInt = self.digraphInt.copy()
 *             if self.ctype=="float":
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1299, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1299, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_3) {

      /* "miololib.pyx":1300
 *         if mode=="whole":
 *             if self.ctype=="int":
 *                 out.digraphInt = self.digraphInt.copy()             # <<<<<<<<<<<<<<
 *             if self.ctype=="float":
 *                 out.digraphFloat = self.digraphFloat.copy()
 */
      __pyx_v_out->__pyx_base.digraphInt = __pyx_v_self->__pyx_base.digraphInt->copy();

      /* "miololib.pyx":1299
 *         out = Digraph(ctype=self.ctype)
 *         if mode=="whole":
 *             if self.ctype=="int":             # <<<<<<<<<<<<<<
 *                 out.digraphInt = self.digraphInt.copy()
 *             if self.ctype=="float":
 */
    }

    /* "miololib.pyx":1301
 *             if self.ctype=="int":
 *                 out.digraphInt = self.digraphInt.copy()
 *             if self.ctype=="float":             # <<<<<<<<<<<<<<
 *                 out.digraphFloat = self.digraphFloat.copy()
 *             if self.ctype=="double":
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1301, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1301, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_3) {

      /* "miololib.pyx":1302
 *                 out.digraphInt = self.digraphInt.copy()
 *             if self.ctype=="float":
 *                 out.digraphFloat = self.digraphFloat.copy()             # <<<<<<<<<<<<<<
 *             if self.ctype=="double":
 *                 out.digraphDouble = self.digraphDouble.copy()
 */
      __pyx_v_out->__pyx_base.digraphFloat = __pyx_v_self->__pyx_base.digraphFloat->copy();

      /* "miololib.pyx":1301
 *             if self.ctype=="int":
 *                 out.digraphInt = self.digraphInt.copy()
 *             if self.ctype=="float":             # <<<<<<<<<<<<<<
 *                 out.digraphFloat = self.digraphFloat.copy()
 *             if self.ctype=="double":
 */
    }

    /* "miololib.pyx":1303
 *             if self.ctype=="float":
 *                 out.digraphFloat = self.digraphFloat.copy()
 *             if self.ctype=="double":             # <<<<<<<<<<<<<<
 *                 out.digraphDouble = self.digraphDouble.copy()
 *         if mode=="structure":
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1303, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1303, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_3) {

      /* "miololib.pyx":1304
 *                 out.digraphFloat = self.digraphFloat.copy()
 *             if self.ctype=="double":
 *                 out.digraphDouble = self.digraphDouble.copy()             # <<<<<<<<<<<<<<
 *         if mode=="structure":
 *             if self.ctype=="int":
 */
      __pyx_v_out->__pyx_base.digraphDouble = __pyx_v_self->__pyx_base.digraphDouble->copy();

      /* "miololib.pyx":1303
 *             if self.ctype=="float":
 *                 out.digraphFloat = self.digraphFloat.copy()
 *             if self.ctype=="double":             # <<<<<<<<<<<<<<
 *                 out.digraphDouble = self.digraphDouble.copy()
 *         if mode=="structure":
 */
    }

    /* "miololib.pyx":1298
 *         """
 *         out = Digraph(ctype=self.ctype)
 *         if mode=="whole":             # <<<<<<<<<<<<<<
 *             if self.ctype=="int":
 *                 out.digraphInt = self.digraphInt.copy()
 */
  }

  /* "miololib.pyx":1305
 *             if self.ctype=="double":
 *                 out.digraphDouble = self.digraphDouble.copy()
 *         if mode=="structure":             # <<<<<<<<<<<<<<
 *             if self.ctype=="int":
 *                 out.digraphInt = self.digraphInt.copyStructure()
 */
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_v_mode, __pyx_n_s_structure, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1305, __pyx_L1_error)
  if (__pyx_t_3) {

    /* "miololib.pyx":1306
 *                 out.digraphDouble = self.digraphDouble.copy()
 *         if mode=="structure":
 *             if self.ctype=="int":             # <<<<<<<<<<<<<<
 *                 out.digraphInt = self.digraphInt.copyStructure()
 *             if self.ctype=="float":
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1306, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1306, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_3) {

      /* "miololib.pyx":1307
 *         if mode=="structure":
 *             if self.ctype=="int":
 *                 out.digraphInt = self.digraphInt.copyStructure()             # <<<<<<<<<<<<<<
 *             if self.ctype=="float":
 *                 out.digraphFloat = self.digraphFloat.copyStructure()
 */
      __pyx_v_out->__pyx_base.digraphInt = __pyx_v_self->__pyx_base.digraphInt->copyStructure();

      /* "miololib.pyx":1306
 *                 out.digraphDouble = self.digraphDouble.copy()
 *         if mode=="structure":
 *             if self.ctype=="int":             # <<<<<<<<<<<<<<
 *                 out.digraphInt = self.digraphInt.copyStructure()
 *             if self.ctype=="float":
 */
    }

    /* "miololib.pyx":1308
 *             if self.ctype=="int":
 *                 out.digraphInt = self.digraphInt.copyStructure()
 *             if self.ctype=="float":             # <<<<<<<<<<<<<<
 *                 out.digraphFloat = self.digraphFloat.copyStructure()
 *             if self.ctype=="double":
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1308, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1308, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_3) {

      /* "miololib.pyx":1309
 *                 out.digraphInt = self.digraphInt.copyStructure()
 *             if self.ctype=="float":
 *                 out.digraphFloat = self.digraphFloat.copyStructure()             # <<<<<<<<<<<<<<
 *             if self.ctype=="double":
 *                 out.digraphDouble = self.digraphDouble.copyStructure()
 */
      __pyx_v_out->__pyx_base.digraphFloat = __pyx_v_self->__pyx_base.digraphFloat->copyStructure();

      /* "miololib.pyx":1308
 *             if self.ctype=="int":
 *                 out.digraphInt = self.digraphInt.copyStructure()
 *             if self.ctype=="float":             # <<<<<<<<<<<<<<
 *                 out.digraphFloat = self.digraphFloat.copyStructure()
 *             if self.ctype=="double":
 */
    }

    /* "miololib.pyx":1310
 *             if self.ctype=="float":
 *                 out.digraphFloat = self.digraphFloat.copyStructure()
 *             if self.ctype=="double":             # <<<<<<<<<<<<<<
 *                 out.digraphDouble = self.digraphDouble.copyStructure()
 *         return out
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1310, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1310, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_3) {

      /* "miololib.pyx":1311
 *                 out.digraphFloat = self.digraphFloat.copyStructure()
 *             if self.ctype=="double":
 *                 out.digraphDouble = self.digraphDouble.copyStructure()             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
      __pyx_v_out->__pyx_base.digraphDouble = __pyx_v_self->__pyx_base.digraphDouble->copyStructure();

      /* "miololib.pyx":1310
 *             if self.ctype=="float":
 *                 out.digraphFloat = self.digraphFloat.copyStructure()
 *             if self.ctype=="double":             # <<<<<<<<<<<<<<
 *                 out.digraphDouble = self.digraphDouble.copyStructure()
 *         return out
 */
    }

    /* "miololib.pyx":1305
 *             if self.ctype=="double":
 *                 out.digraphDouble = self.digraphDouble.copy()
 *         if mode=="structure":             # <<<<<<<<<<<<<<
 *             if self.ctype=="int":
 *                 out.digraphInt = self.digraphInt.copyStructure()
 */
  }

  /* "miololib.pyx":1312
 *             if self.ctype=="double":
 *                 out.digraphDouble = self.digraphDouble.copyStructure()
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     def shape(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_out);
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "miololib.pyx":1290
 *             self.digraphDouble.normalize()
 * 
 *     def copy(self, mode="whole"):             # <<<<<<<<<<<<<<
 *         """
 *             Returns a copy of self.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("miolo.Digraph.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":1314
 *         return out
 * 
 *     def shape(self):             # <<<<<<<<<<<<<<
 *         """
 *             Returns the number of nonzero elements of each row in the adjacency
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_7Digraph_13shape(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_7Digraph_12shape, "Digraph.shape(self)\n\n            Returns the number of nonzero elements of each row in the adjacency\n            matrix.\n        ");
static PyMethodDef __pyx_mdef_5miolo_7Digraph_13shape = {"shape", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_7Digraph_13shape, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_7Digraph_12shape};
static PyObject *__pyx_pw_5miolo_7Digraph_13shape(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("shape (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("shape", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "shape", 0))) return NULL;
  __pyx_r = __pyx_pf_5miolo_7Digraph_12shape(((struct __pyx_obj_5miolo_Digraph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_7Digraph_12shape(struct __pyx_obj_5miolo_Digraph *__pyx_v_self) {
  unsigned long *__pyx_v_view;
  __Pyx_memviewslice __pyx_v_aux = { 0, 0, { 0 }, { 0 }, { 0 } };
  unsigned long __pyx_v_k;
  unsigned long __pyx_v_n;
  PyObject *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_memviewslice __pyx_t_6 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_t_7;
  unsigned long __pyx_t_8;
  unsigned long __pyx_t_9;
  unsigned long __pyx_t_10;
  size_t __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("shape", 1);

  /* "miololib.pyx":1322
 *         cdef unsigned long[:] aux
 *         cdef unsigned long k, n
 *         out = np.empty(self.nodes,dtype=np.ulong)             # <<<<<<<<<<<<<<
 *         aux = out
 *         if self.ctype=="int":
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nodes); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1)) __PYX_ERR(1, 1322, __pyx_L1_error);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_ulong); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(1, 1322, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_out = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "miololib.pyx":1323
 *         cdef unsigned long k, n
 *         out = np.empty(self.nodes,dtype=np.ulong)
 *         aux = out             # <<<<<<<<<<<<<<
 *         if self.ctype=="int":
 *             view = self.digraphInt.shape()
 */
  __pyx_t_6 = __Pyx_PyObject_to_MemoryviewSlice_ds_unsigned_long(__pyx_v_out, PyBUF_WRITABLE); if (unlikely(!__pyx_t_6.memview)) __PYX_ERR(1, 1323, __pyx_L1_error)
  __pyx_v_aux = __pyx_t_6;
  __pyx_t_6.memview = NULL;
  __pyx_t_6.data = NULL;

  /* "miololib.pyx":1324
 *         out = np.empty(self.nodes,dtype=np.ulong)
 *         aux = out
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             view = self.digraphInt.shape()
 *             n = self.digraphInt.nodes
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1324, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_5, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(1, 1324, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_7) {

    /* "miololib.pyx":1325
 *         aux = out
 *         if self.ctype=="int":
 *             view = self.digraphInt.shape()             # <<<<<<<<<<<<<<
 *             n = self.digraphInt.nodes
 *         if self.ctype=="float":
 */
    __pyx_v_view = __pyx_v_self->__pyx_base.digraphInt->shape();

    /* "miololib.pyx":1326
 *         if self.ctype=="int":
 *             view = self.digraphInt.shape()
 *             n = self.digraphInt.nodes             # <<<<<<<<<<<<<<
 *         if self.ctype=="float":
 *             view = self.digraphFloat.shape()
 */
    __pyx_t_8 = __pyx_v_self->__pyx_base.digraphInt->nodes;
    __pyx_v_n = __pyx_t_8;

    /* "miololib.pyx":1324
 *         out = np.empty(self.nodes,dtype=np.ulong)
 *         aux = out
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             view = self.digraphInt.shape()
 *             n = self.digraphInt.nodes
 */
  }

  /* "miololib.pyx":1327
 *             view = self.digraphInt.shape()
 *             n = self.digraphInt.nodes
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             view = self.digraphFloat.shape()
 *             n = self.digraphFloat.nodes
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1327, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_5, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(1, 1327, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_7) {

    /* "miololib.pyx":1328
 *             n = self.digraphInt.nodes
 *         if self.ctype=="float":
 *             view = self.digraphFloat.shape()             # <<<<<<<<<<<<<<
 *             n = self.digraphFloat.nodes
 *         if self.ctype=="double":
 */
    __pyx_v_view = __pyx_v_self->__pyx_base.digraphFloat->shape();

    /* "miololib.pyx":1329
 *         if self.ctype=="float":
 *             view = self.digraphFloat.shape()
 *             n = self.digraphFloat.nodes             # <<<<<<<<<<<<<<
 *         if self.ctype=="double":
 *             view = self.digraphDouble.shape()
 */
    __pyx_t_8 = __pyx_v_self->__pyx_base.digraphFloat->nodes;
    __pyx_v_n = __pyx_t_8;

    /* "miololib.pyx":1327
 *             view = self.digraphInt.shape()
 *             n = self.digraphInt.nodes
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             view = self.digraphFloat.shape()
 *             n = self.digraphFloat.nodes
 */
  }

  /* "miololib.pyx":1330
 *             view = self.digraphFloat.shape()
 *             n = self.digraphFloat.nodes
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             view = self.digraphDouble.shape()
 *             n = self.digraphDouble.nodes
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1330, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_5, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(1, 1330, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_7) {

    /* "miololib.pyx":1331
 *             n = self.digraphFloat.nodes
 *         if self.ctype=="double":
 *             view = self.digraphDouble.shape()             # <<<<<<<<<<<<<<
 *             n = self.digraphDouble.nodes
 *         for k in range(n):
 */
    __pyx_v_view = __pyx_v_self->__pyx_base.digraphDouble->shape();

    /* "miololib.pyx":1332
 *         if self.ctype=="double":
 *             view = self.digraphDouble.shape()
 *             n = self.digraphDouble.nodes             # <<<<<<<<<<<<<<
 *         for k in range(n):
 *             aux[k] = view[k]
 */
    __pyx_t_8 = __pyx_v_self->__pyx_base.digraphDouble->nodes;
    __pyx_v_n = __pyx_t_8;

    /* "miololib.pyx":1330
 *             view = self.digraphFloat.shape()
 *             n = self.digraphFloat.nodes
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             view = self.digraphDouble.shape()
 *             n = self.digraphDouble.nodes
 */
  }

  /* "miololib.pyx":1333
 *             view = self.digraphDouble.shape()
 *             n = self.digraphDouble.nodes
 *         for k in range(n):             # <<<<<<<<<<<<<<
 *             aux[k] = view[k]
 *         return out
 */
  __pyx_t_8 = __pyx_v_n;
  __pyx_t_9 = __pyx_t_8;
  for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
    __pyx_v_k = __pyx_t_10;

    /* "miololib.pyx":1334
 *             n = self.digraphDouble.nodes
 *         for k in range(n):
 *             aux[k] = view[k]             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
    __pyx_t_11 = __pyx_v_k;
    *((unsigned long *) ( /* dim=0 */ (__pyx_v_aux.data + __pyx_t_11 * __pyx_v_aux.strides[0]) )) = (__pyx_v_view[__pyx_v_k]);
  }

  /* "miololib.pyx":1335
 *         for k in range(n):
 *             aux[k] = view[k]
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     def transpose(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_out);
  __pyx_r = __pyx_v_out;
  goto __pyx_L0;

  /* "miololib.pyx":1314
 *         return out
 * 
 *     def shape(self):             # <<<<<<<<<<<<<<
 *         """
 *             Returns the number of nonzero elements of each row in the adjacency
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __PYX_XCLEAR_MEMVIEW(&__pyx_t_6, 1);
  __Pyx_AddTraceback("miolo.Digraph.shape", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XCLEAR_MEMVIEW(&__pyx_v_aux, 1);
  __Pyx_XDECREF(__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":1337
 *         return out
 * 
 *     def transpose(self):             # <<<<<<<<<<<<<<
 *         """
 *             Matrix transposition of Digraphs.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_7Digraph_15transpose(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_7Digraph_14transpose, "Digraph.transpose(self)\n\n            Matrix transposition of Digraphs.\n        ");
static PyMethodDef __pyx_mdef_5miolo_7Digraph_15transpose = {"transpose", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_7Digraph_15transpose, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_7Digraph_14transpose};
static PyObject *__pyx_pw_5miolo_7Digraph_15transpose(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("transpose (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("transpose", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "transpose", 0))) return NULL;
  __pyx_r = __pyx_pf_5miolo_7Digraph_14transpose(((struct __pyx_obj_5miolo_Digraph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_7Digraph_14transpose(struct __pyx_obj_5miolo_Digraph *__pyx_v_self) {
  struct __pyx_obj_5miolo_Digraph *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("transpose", 1);

  /* "miololib.pyx":1341
 *             Matrix transposition of Digraphs.
 *         """
 *         out = Digraph(ctype=self.ctype)             # <<<<<<<<<<<<<<
 *         if self.ctype=="int":
 *             out.digraphInt = self.digraphInt.transpose()
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1341, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1341, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ctype, __pyx_t_2) < 0) __PYX_ERR(1, 1341, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Digraph), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1341, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_out = ((struct __pyx_obj_5miolo_Digraph *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "miololib.pyx":1342
 *         """
 *         out = Digraph(ctype=self.ctype)
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.digraphInt = self.digraphInt.transpose()
 *         if self.ctype=="float":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1342, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":1343
 *         out = Digraph(ctype=self.ctype)
 *         if self.ctype=="int":
 *             out.digraphInt = self.digraphInt.transpose()             # <<<<<<<<<<<<<<
 *         if self.ctype=="float":
 *             out.digraphFloat = self.digraphFloat.transpose()
 */
    __pyx_v_out->__pyx_base.digraphInt = __pyx_v_self->__pyx_base.digraphInt->transpose();

    /* "miololib.pyx":1342
 *         """
 *         out = Digraph(ctype=self.ctype)
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.digraphInt = self.digraphInt.transpose()
 *         if self.ctype=="float":
 */
  }

  /* "miololib.pyx":1344
 *         if self.ctype=="int":
 *             out.digraphInt = self.digraphInt.transpose()
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.digraphFloat = self.digraphFloat.transpose()
 *         if self.ctype=="double":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1344, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1344, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":1345
 *             out.digraphInt = self.digraphInt.transpose()
 *         if self.ctype=="float":
 *             out.digraphFloat = self.digraphFloat.transpose()             # <<<<<<<<<<<<<<
 *         if self.ctype=="double":
 *             out.digraphDouble = self.digraphDouble.transpose()
 */
    __pyx_v_out->__pyx_base.digraphFloat = __pyx_v_self->__pyx_base.digraphFloat->transpose();

    /* "miololib.pyx":1344
 *         if self.ctype=="int":
 *             out.digraphInt = self.digraphInt.transpose()
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.digraphFloat = self.digraphFloat.transpose()
 *         if self.ctype=="double":
 */
  }

  /* "miololib.pyx":1346
 *         if self.ctype=="float":
 *             out.digraphFloat = self.digraphFloat.transpose()
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.digraphDouble = self.digraphDouble.transpose()
 *         return out
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1346, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1346, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":1347
 *             out.digraphFloat = self.digraphFloat.transpose()
 *         if self.ctype=="double":
 *             out.digraphDouble = self.digraphDouble.transpose()             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
    __pyx_v_out->__pyx_base.digraphDouble = __pyx_v_self->__pyx_base.digraphDouble->transpose();

    /* "miololib.pyx":1346
 *         if self.ctype=="float":
 *             out.digraphFloat = self.digraphFloat.transpose()
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.digraphDouble = self.digraphDouble.transpose()
 *         return out
 */
  }

  /* "miololib.pyx":1348
 *         if self.ctype=="double":
 *             out.digraphDouble = self.digraphDouble.transpose()
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     def sameShape(self, Digraph G):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_out);
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "miololib.pyx":1337
 *         return out
 * 
 *     def transpose(self):             # <<<<<<<<<<<<<<
 *         """
 *             Matrix transposition of Digraphs.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("miolo.Digraph.transpose", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":1350
 *         return out
 * 
 *     def sameShape(self, Digraph G):             # <<<<<<<<<<<<<<
 *         """
 *             Checks if both Digraphs have the same shapes.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_7Digraph_17sameShape(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_7Digraph_16sameShape, "Digraph.sameShape(self, Digraph G)\n\n            Checks if both Digraphs have the same shapes.\n        ");
static PyMethodDef __pyx_mdef_5miolo_7Digraph_17sameShape = {"sameShape", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_7Digraph_17sameShape, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_7Digraph_16sameShape};
static PyObject *__pyx_pw_5miolo_7Digraph_17sameShape(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_5miolo_Digraph *__pyx_v_G = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sameShape (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_G)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1350, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "sameShape") < 0)) __PYX_ERR(1, 1350, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_G = ((struct __pyx_obj_5miolo_Digraph *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sameShape", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 1350, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.Digraph.sameShape", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_5miolo_Digraph, 1, "G", 0))) __PYX_ERR(1, 1350, __pyx_L1_error)
  __pyx_r = __pyx_pf_5miolo_7Digraph_16sameShape(((struct __pyx_obj_5miolo_Digraph *)__pyx_v_self), __pyx_v_G);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_7Digraph_16sameShape(struct __pyx_obj_5miolo_Digraph *__pyx_v_self, struct __pyx_obj_5miolo_Digraph *__pyx_v_G) {
  unsigned long __pyx_v_k;
  unsigned long __pyx_v_n;
  PyObject *__pyx_v_ashape = NULL;
  PyObject *__pyx_v_gshape = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  unsigned long __pyx_t_5;
  int __pyx_t_6;
  unsigned long __pyx_t_7;
  unsigned long __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("sameShape", 1);

  /* "miololib.pyx":1355
 *         """
 *         cdef unsigned long k, n
 *         if self.nodes!=G.nodes:             # <<<<<<<<<<<<<<
 *             return False
 *         n = self.nodes
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nodes); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1355, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_G), __pyx_n_s_nodes); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1355, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1355, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 1355, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_4) {

    /* "miololib.pyx":1356
 *         cdef unsigned long k, n
 *         if self.nodes!=G.nodes:
 *             return False             # <<<<<<<<<<<<<<
 *         n = self.nodes
 *         ashape = self.shape()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    goto __pyx_L0;

    /* "miololib.pyx":1355
 *         """
 *         cdef unsigned long k, n
 *         if self.nodes!=G.nodes:             # <<<<<<<<<<<<<<
 *             return False
 *         n = self.nodes
 */
  }

  /* "miololib.pyx":1357
 *         if self.nodes!=G.nodes:
 *             return False
 *         n = self.nodes             # <<<<<<<<<<<<<<
 *         ashape = self.shape()
 *         gshape = G.shape()
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nodes); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1357, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyInt_As_unsigned_long(__pyx_t_3); if (unlikely((__pyx_t_5 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1357, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_n = __pyx_t_5;

  /* "miololib.pyx":1358
 *             return False
 *         n = self.nodes
 *         ashape = self.shape()             # <<<<<<<<<<<<<<
 *         gshape = G.shape()
 *         for k in range(n):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_shape); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1358, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = NULL;
  __pyx_t_6 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_6 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_1, NULL};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1358, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_v_ashape = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "miololib.pyx":1359
 *         n = self.nodes
 *         ashape = self.shape()
 *         gshape = G.shape()             # <<<<<<<<<<<<<<
 *         for k in range(n):
 *             if ashape[k]!=gshape[k]:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_G), __pyx_n_s_shape); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1359, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = NULL;
  __pyx_t_6 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_6 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_1, NULL};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1359, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_v_gshape = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "miololib.pyx":1360
 *         ashape = self.shape()
 *         gshape = G.shape()
 *         for k in range(n):             # <<<<<<<<<<<<<<
 *             if ashape[k]!=gshape[k]:
 *                 return False
 */
  __pyx_t_5 = __pyx_v_n;
  __pyx_t_7 = __pyx_t_5;
  for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
    __pyx_v_k = __pyx_t_8;

    /* "miololib.pyx":1361
 *         gshape = G.shape()
 *         for k in range(n):
 *             if ashape[k]!=gshape[k]:             # <<<<<<<<<<<<<<
 *                 return False
 *         return True
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_ashape, __pyx_v_k, unsigned long, 0, __Pyx_PyInt_From_unsigned_long, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1361, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_gshape, __pyx_v_k, unsigned long, 0, __Pyx_PyInt_From_unsigned_long, 0, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1361, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyObject_RichCompare(__pyx_t_3, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1361, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 1361, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_4) {

      /* "miololib.pyx":1362
 *         for k in range(n):
 *             if ashape[k]!=gshape[k]:
 *                 return False             # <<<<<<<<<<<<<<
 *         return True
 * 
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      goto __pyx_L0;

      /* "miololib.pyx":1361
 *         gshape = G.shape()
 *         for k in range(n):
 *             if ashape[k]!=gshape[k]:             # <<<<<<<<<<<<<<
 *                 return False
 *         return True
 */
    }
  }

  /* "miololib.pyx":1363
 *             if ashape[k]!=gshape[k]:
 *                 return False
 *         return True             # <<<<<<<<<<<<<<
 * 
 *     def symmetrize(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_True);
  __pyx_r = Py_True;
  goto __pyx_L0;

  /* "miololib.pyx":1350
 *         return out
 * 
 *     def sameShape(self, Digraph G):             # <<<<<<<<<<<<<<
 *         """
 *             Checks if both Digraphs have the same shapes.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("miolo.Digraph.sameShape", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ashape);
  __Pyx_XDECREF(__pyx_v_gshape);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":1365
 *         return True
 * 
 *     def symmetrize(self):             # <<<<<<<<<<<<<<
 *         """
 *             Returns a Digraph with the symmetrization of self.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_7Digraph_19symmetrize(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_7Digraph_18symmetrize, "Digraph.symmetrize(self)\n\n            Returns a Digraph with the symmetrization of self.\n        ");
static PyMethodDef __pyx_mdef_5miolo_7Digraph_19symmetrize = {"symmetrize", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_7Digraph_19symmetrize, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_7Digraph_18symmetrize};
static PyObject *__pyx_pw_5miolo_7Digraph_19symmetrize(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("symmetrize (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("symmetrize", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "symmetrize", 0))) return NULL;
  __pyx_r = __pyx_pf_5miolo_7Digraph_18symmetrize(((struct __pyx_obj_5miolo_Digraph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_7Digraph_18symmetrize(struct __pyx_obj_5miolo_Digraph *__pyx_v_self) {
  struct __pyx_obj_5miolo_Digraph *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("symmetrize", 1);

  /* "miololib.pyx":1369
 *             Returns a Digraph with the symmetrization of self.
 *         """
 *         out = Digraph(ctype=self.ctype)             # <<<<<<<<<<<<<<
 *         if self.ctype=="int":
 *             out.digraphInt = self.digraphInt.symmetrize()
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1369, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1369, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ctype, __pyx_t_2) < 0) __PYX_ERR(1, 1369, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Digraph), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1369, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_out = ((struct __pyx_obj_5miolo_Digraph *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "miololib.pyx":1370
 *         """
 *         out = Digraph(ctype=self.ctype)
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.digraphInt = self.digraphInt.symmetrize()
 *         if self.ctype=="float":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1370, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1370, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":1371
 *         out = Digraph(ctype=self.ctype)
 *         if self.ctype=="int":
 *             out.digraphInt = self.digraphInt.symmetrize()             # <<<<<<<<<<<<<<
 *         if self.ctype=="float":
 *             out.digraphFloat = self.digraphFloat.symmetrize()
 */
    __pyx_v_out->__pyx_base.digraphInt = __pyx_v_self->__pyx_base.digraphInt->symmetrize();

    /* "miololib.pyx":1370
 *         """
 *         out = Digraph(ctype=self.ctype)
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.digraphInt = self.digraphInt.symmetrize()
 *         if self.ctype=="float":
 */
  }

  /* "miololib.pyx":1372
 *         if self.ctype=="int":
 *             out.digraphInt = self.digraphInt.symmetrize()
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.digraphFloat = self.digraphFloat.symmetrize()
 *         if self.ctype=="double":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1372, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1372, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":1373
 *             out.digraphInt = self.digraphInt.symmetrize()
 *         if self.ctype=="float":
 *             out.digraphFloat = self.digraphFloat.symmetrize()             # <<<<<<<<<<<<<<
 *         if self.ctype=="double":
 *             out.digraphDouble = self.digraphDouble.symmetrize()
 */
    __pyx_v_out->__pyx_base.digraphFloat = __pyx_v_self->__pyx_base.digraphFloat->symmetrize();

    /* "miololib.pyx":1372
 *         if self.ctype=="int":
 *             out.digraphInt = self.digraphInt.symmetrize()
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.digraphFloat = self.digraphFloat.symmetrize()
 *         if self.ctype=="double":
 */
  }

  /* "miololib.pyx":1374
 *         if self.ctype=="float":
 *             out.digraphFloat = self.digraphFloat.symmetrize()
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.digraphDouble = self.digraphDouble.symmetrize()
 *         return out
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1374, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1374, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":1375
 *             out.digraphFloat = self.digraphFloat.symmetrize()
 *         if self.ctype=="double":
 *             out.digraphDouble = self.digraphDouble.symmetrize()             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
    __pyx_v_out->__pyx_base.digraphDouble = __pyx_v_self->__pyx_base.digraphDouble->symmetrize();

    /* "miololib.pyx":1374
 *         if self.ctype=="float":
 *             out.digraphFloat = self.digraphFloat.symmetrize()
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.digraphDouble = self.digraphDouble.symmetrize()
 *         return out
 */
  }

  /* "miololib.pyx":1376
 *         if self.ctype=="double":
 *             out.digraphDouble = self.digraphDouble.symmetrize()
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     def gaussianScale(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_out);
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "miololib.pyx":1365
 *         return True
 * 
 *     def symmetrize(self):             # <<<<<<<<<<<<<<
 *         """
 *             Returns a Digraph with the symmetrization of self.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("miolo.Digraph.symmetrize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":1378
 *         return out
 * 
 *     def gaussianScale(self):             # <<<<<<<<<<<<<<
 *         """
 *             Returns the scale parameter for gaussian similarity.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_7Digraph_21gaussianScale(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_7Digraph_20gaussianScale, "Digraph.gaussianScale(self)\n\n            Returns the scale parameter for gaussian similarity.\n        ");
static PyMethodDef __pyx_mdef_5miolo_7Digraph_21gaussianScale = {"gaussianScale", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_7Digraph_21gaussianScale, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_7Digraph_20gaussianScale};
static PyObject *__pyx_pw_5miolo_7Digraph_21gaussianScale(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("gaussianScale (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("gaussianScale", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "gaussianScale", 0))) return NULL;
  __pyx_r = __pyx_pf_5miolo_7Digraph_20gaussianScale(((struct __pyx_obj_5miolo_Digraph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_7Digraph_20gaussianScale(struct __pyx_obj_5miolo_Digraph *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("gaussianScale", 1);

  /* "miololib.pyx":1382
 *             Returns the scale parameter for gaussian similarity.
 *         """
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             return self.digraphInt.gaussianScale()
 *         if self.ctype=="float":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1382, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 1382, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":1383
 *         """
 *         if self.ctype=="int":
 *             return self.digraphInt.gaussianScale()             # <<<<<<<<<<<<<<
 *         if self.ctype=="float":
 *             return self.digraphFloat.gaussianScale()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->__pyx_base.digraphInt->gaussianScale()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1383, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "miololib.pyx":1382
 *             Returns the scale parameter for gaussian similarity.
 *         """
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             return self.digraphInt.gaussianScale()
 *         if self.ctype=="float":
 */
  }

  /* "miololib.pyx":1384
 *         if self.ctype=="int":
 *             return self.digraphInt.gaussianScale()
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             return self.digraphFloat.gaussianScale()
 *         if self.ctype=="double":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1384, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 1384, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":1385
 *             return self.digraphInt.gaussianScale()
 *         if self.ctype=="float":
 *             return self.digraphFloat.gaussianScale()             # <<<<<<<<<<<<<<
 *         if self.ctype=="double":
 *             return self.digraphDouble.gaussianScale()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.digraphFloat->gaussianScale()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1385, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "miololib.pyx":1384
 *         if self.ctype=="int":
 *             return self.digraphInt.gaussianScale()
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             return self.digraphFloat.gaussianScale()
 *         if self.ctype=="double":
 */
  }

  /* "miololib.pyx":1386
 *         if self.ctype=="float":
 *             return self.digraphFloat.gaussianScale()
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             return self.digraphDouble.gaussianScale()
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1386, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 1386, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":1387
 *             return self.digraphFloat.gaussianScale()
 *         if self.ctype=="double":
 *             return self.digraphDouble.gaussianScale()             # <<<<<<<<<<<<<<
 * 
 *     #---------------------------------------------------------------------------
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.digraphDouble->gaussianScale()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1387, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "miololib.pyx":1386
 *         if self.ctype=="float":
 *             return self.digraphFloat.gaussianScale()
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             return self.digraphDouble.gaussianScale()
 * 
 */
  }

  /* "miololib.pyx":1378
 *         return out
 * 
 *     def gaussianScale(self):             # <<<<<<<<<<<<<<
 *         """
 *             Returns the scale parameter for gaussian similarity.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("miolo.Digraph.gaussianScale", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":1393
 *     #---------------------------------------------------------------------------
 * 
 *     def __add__(self, Digraph G):             # <<<<<<<<<<<<<<
 *         if self.ctype!=G.ctype:
 *             raise TypeError("Digraphs must share same ctype.")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_7Digraph_23__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_G); /*proto*/
static PyObject *__pyx_pw_5miolo_7Digraph_23__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_G) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__add__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_5miolo_Digraph, 1, "G", 0))) __PYX_ERR(1, 1393, __pyx_L1_error)
  __pyx_r = __pyx_pf_5miolo_7Digraph_22__add__(((struct __pyx_obj_5miolo_Digraph *)__pyx_v_self), ((struct __pyx_obj_5miolo_Digraph *)__pyx_v_G));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_7Digraph_22__add__(struct __pyx_obj_5miolo_Digraph *__pyx_v_self, struct __pyx_obj_5miolo_Digraph *__pyx_v_G) {
  struct __pyx_obj_5miolo_Digraph *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__add__", 1);

  /* "miololib.pyx":1394
 * 
 *     def __add__(self, Digraph G):
 *         if self.ctype!=G.ctype:             # <<<<<<<<<<<<<<
 *             raise TypeError("Digraphs must share same ctype.")
 *         if not self.sameShape(G):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1394, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_G), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1394, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1394, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 1394, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(__pyx_t_4)) {

    /* "miololib.pyx":1395
 *     def __add__(self, Digraph G):
 *         if self.ctype!=G.ctype:
 *             raise TypeError("Digraphs must share same ctype.")             # <<<<<<<<<<<<<<
 *         if not self.sameShape(G):
 *             raise Exception("Digraphs must have same shapes.")
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__52, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1395, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 1395, __pyx_L1_error)

    /* "miololib.pyx":1394
 * 
 *     def __add__(self, Digraph G):
 *         if self.ctype!=G.ctype:             # <<<<<<<<<<<<<<
 *             raise TypeError("Digraphs must share same ctype.")
 *         if not self.sameShape(G):
 */
  }

  /* "miololib.pyx":1396
 *         if self.ctype!=G.ctype:
 *             raise TypeError("Digraphs must share same ctype.")
 *         if not self.sameShape(G):             # <<<<<<<<<<<<<<
 *             raise Exception("Digraphs must have same shapes.")
 *         out = Digraph(ctype=self.ctype)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_sameShape); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1396, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_1, ((PyObject *)__pyx_v_G)};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1396, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 1396, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = (!__pyx_t_4);
  if (unlikely(__pyx_t_6)) {

    /* "miololib.pyx":1397
 *             raise TypeError("Digraphs must share same ctype.")
 *         if not self.sameShape(G):
 *             raise Exception("Digraphs must have same shapes.")             # <<<<<<<<<<<<<<
 *         out = Digraph(ctype=self.ctype)
 *         if self.ctype=="int":
 */
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__53, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1397, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 1397, __pyx_L1_error)

    /* "miololib.pyx":1396
 *         if self.ctype!=G.ctype:
 *             raise TypeError("Digraphs must share same ctype.")
 *         if not self.sameShape(G):             # <<<<<<<<<<<<<<
 *             raise Exception("Digraphs must have same shapes.")
 *         out = Digraph(ctype=self.ctype)
 */
  }

  /* "miololib.pyx":1398
 *         if not self.sameShape(G):
 *             raise Exception("Digraphs must have same shapes.")
 *         out = Digraph(ctype=self.ctype)             # <<<<<<<<<<<<<<
 *         if self.ctype=="int":
 *             out.digraphInt = self.digraphInt.add(drf(G.digraphInt))
 */
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1398, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1398, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_ctype, __pyx_t_2) < 0) __PYX_ERR(1, 1398, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Digraph), __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1398, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_out = ((struct __pyx_obj_5miolo_Digraph *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "miololib.pyx":1399
 *             raise Exception("Digraphs must have same shapes.")
 *         out = Digraph(ctype=self.ctype)
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.digraphInt = self.digraphInt.add(drf(G.digraphInt))
 *         if self.ctype=="float":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(1, 1399, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_6) {

    /* "miololib.pyx":1400
 *         out = Digraph(ctype=self.ctype)
 *         if self.ctype=="int":
 *             out.digraphInt = self.digraphInt.add(drf(G.digraphInt))             # <<<<<<<<<<<<<<
 *         if self.ctype=="float":
 *             out.digraphFloat = self.digraphFloat.add(drf(G.digraphFloat))
 */
    __pyx_v_out->__pyx_base.digraphInt = __pyx_v_self->__pyx_base.digraphInt->add((*__pyx_v_G->__pyx_base.digraphInt));

    /* "miololib.pyx":1399
 *             raise Exception("Digraphs must have same shapes.")
 *         out = Digraph(ctype=self.ctype)
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.digraphInt = self.digraphInt.add(drf(G.digraphInt))
 *         if self.ctype=="float":
 */
  }

  /* "miololib.pyx":1401
 *         if self.ctype=="int":
 *             out.digraphInt = self.digraphInt.add(drf(G.digraphInt))
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.digraphFloat = self.digraphFloat.add(drf(G.digraphFloat))
 *         if self.ctype=="double":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1401, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(1, 1401, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_6) {

    /* "miololib.pyx":1402
 *             out.digraphInt = self.digraphInt.add(drf(G.digraphInt))
 *         if self.ctype=="float":
 *             out.digraphFloat = self.digraphFloat.add(drf(G.digraphFloat))             # <<<<<<<<<<<<<<
 *         if self.ctype=="double":
 *             out.digraphDouble = self.digraphDouble.add(drf(G.digraphDouble))
 */
    __pyx_v_out->__pyx_base.digraphFloat = __pyx_v_self->__pyx_base.digraphFloat->add((*__pyx_v_G->__pyx_base.digraphFloat));

    /* "miololib.pyx":1401
 *         if self.ctype=="int":
 *             out.digraphInt = self.digraphInt.add(drf(G.digraphInt))
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.digraphFloat = self.digraphFloat.add(drf(G.digraphFloat))
 *         if self.ctype=="double":
 */
  }

  /* "miololib.pyx":1403
 *         if self.ctype=="float":
 *             out.digraphFloat = self.digraphFloat.add(drf(G.digraphFloat))
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.digraphDouble = self.digraphDouble.add(drf(G.digraphDouble))
 *         return out
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1403, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(1, 1403, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_6) {

    /* "miololib.pyx":1404
 *             out.digraphFloat = self.digraphFloat.add(drf(G.digraphFloat))
 *         if self.ctype=="double":
 *             out.digraphDouble = self.digraphDouble.add(drf(G.digraphDouble))             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
    __pyx_v_out->__pyx_base.digraphDouble = __pyx_v_self->__pyx_base.digraphDouble->add((*__pyx_v_G->__pyx_base.digraphDouble));

    /* "miololib.pyx":1403
 *         if self.ctype=="float":
 *             out.digraphFloat = self.digraphFloat.add(drf(G.digraphFloat))
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.digraphDouble = self.digraphDouble.add(drf(G.digraphDouble))
 *         return out
 */
  }

  /* "miololib.pyx":1405
 *         if self.ctype=="double":
 *             out.digraphDouble = self.digraphDouble.add(drf(G.digraphDouble))
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     def __sub__(self, Digraph G):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_out);
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "miololib.pyx":1393
 *     #---------------------------------------------------------------------------
 * 
 *     def __add__(self, Digraph G):             # <<<<<<<<<<<<<<
 *         if self.ctype!=G.ctype:
 *             raise TypeError("Digraphs must share same ctype.")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("miolo.Digraph.__add__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":1407
 *         return out
 * 
 *     def __sub__(self, Digraph G):             # <<<<<<<<<<<<<<
 *         if self.ctype!=G.ctype:
 *             raise TypeError("Digraphs must share same ctype.")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_7Digraph_25__sub__(PyObject *__pyx_v_self, PyObject *__pyx_v_G); /*proto*/
static PyObject *__pyx_pw_5miolo_7Digraph_25__sub__(PyObject *__pyx_v_self, PyObject *__pyx_v_G) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__sub__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_5miolo_Digraph, 1, "G", 0))) __PYX_ERR(1, 1407, __pyx_L1_error)
  __pyx_r = __pyx_pf_5miolo_7Digraph_24__sub__(((struct __pyx_obj_5miolo_Digraph *)__pyx_v_self), ((struct __pyx_obj_5miolo_Digraph *)__pyx_v_G));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_7Digraph_24__sub__(struct __pyx_obj_5miolo_Digraph *__pyx_v_self, struct __pyx_obj_5miolo_Digraph *__pyx_v_G) {
  struct __pyx_obj_5miolo_Digraph *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__sub__", 1);

  /* "miololib.pyx":1408
 * 
 *     def __sub__(self, Digraph G):
 *         if self.ctype!=G.ctype:             # <<<<<<<<<<<<<<
 *             raise TypeError("Digraphs must share same ctype.")
 *         if not self.sameShape(G):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1408, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_G), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1408, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1408, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 1408, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(__pyx_t_4)) {

    /* "miololib.pyx":1409
 *     def __sub__(self, Digraph G):
 *         if self.ctype!=G.ctype:
 *             raise TypeError("Digraphs must share same ctype.")             # <<<<<<<<<<<<<<
 *         if not self.sameShape(G):
 *             raise Exception("Digraphs must have same shapes.")
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__52, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1409, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 1409, __pyx_L1_error)

    /* "miololib.pyx":1408
 * 
 *     def __sub__(self, Digraph G):
 *         if self.ctype!=G.ctype:             # <<<<<<<<<<<<<<
 *             raise TypeError("Digraphs must share same ctype.")
 *         if not self.sameShape(G):
 */
  }

  /* "miololib.pyx":1410
 *         if self.ctype!=G.ctype:
 *             raise TypeError("Digraphs must share same ctype.")
 *         if not self.sameShape(G):             # <<<<<<<<<<<<<<
 *             raise Exception("Digraphs must have same shapes.")
 *         out = Digraph(ctype=self.ctype)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_sameShape); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1410, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_1, ((PyObject *)__pyx_v_G)};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1410, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 1410, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = (!__pyx_t_4);
  if (unlikely(__pyx_t_6)) {

    /* "miololib.pyx":1411
 *             raise TypeError("Digraphs must share same ctype.")
 *         if not self.sameShape(G):
 *             raise Exception("Digraphs must have same shapes.")             # <<<<<<<<<<<<<<
 *         out = Digraph(ctype=self.ctype)
 *         if self.ctype=="int":
 */
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__53, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1411, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 1411, __pyx_L1_error)

    /* "miololib.pyx":1410
 *         if self.ctype!=G.ctype:
 *             raise TypeError("Digraphs must share same ctype.")
 *         if not self.sameShape(G):             # <<<<<<<<<<<<<<
 *             raise Exception("Digraphs must have same shapes.")
 *         out = Digraph(ctype=self.ctype)
 */
  }

  /* "miololib.pyx":1412
 *         if not self.sameShape(G):
 *             raise Exception("Digraphs must have same shapes.")
 *         out = Digraph(ctype=self.ctype)             # <<<<<<<<<<<<<<
 *         if self.ctype=="int":
 *             out.digraphInt = self.digraphInt.sub(drf(G.digraphInt))
 */
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1412, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1412, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_ctype, __pyx_t_2) < 0) __PYX_ERR(1, 1412, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Digraph), __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1412, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_out = ((struct __pyx_obj_5miolo_Digraph *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "miololib.pyx":1413
 *             raise Exception("Digraphs must have same shapes.")
 *         out = Digraph(ctype=self.ctype)
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.digraphInt = self.digraphInt.sub(drf(G.digraphInt))
 *         if self.ctype=="float":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1413, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(1, 1413, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_6) {

    /* "miololib.pyx":1414
 *         out = Digraph(ctype=self.ctype)
 *         if self.ctype=="int":
 *             out.digraphInt = self.digraphInt.sub(drf(G.digraphInt))             # <<<<<<<<<<<<<<
 *         if self.ctype=="float":
 *             out.digraphFloat = self.digraphFloat.sub(drf(G.digraphFloat))
 */
    __pyx_v_out->__pyx_base.digraphInt = __pyx_v_self->__pyx_base.digraphInt->sub((*__pyx_v_G->__pyx_base.digraphInt));

    /* "miololib.pyx":1413
 *             raise Exception("Digraphs must have same shapes.")
 *         out = Digraph(ctype=self.ctype)
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.digraphInt = self.digraphInt.sub(drf(G.digraphInt))
 *         if self.ctype=="float":
 */
  }

  /* "miololib.pyx":1415
 *         if self.ctype=="int":
 *             out.digraphInt = self.digraphInt.sub(drf(G.digraphInt))
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.digraphFloat = self.digraphFloat.sub(drf(G.digraphFloat))
 *         if self.ctype=="double":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1415, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(1, 1415, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_6) {

    /* "miololib.pyx":1416
 *             out.digraphInt = self.digraphInt.sub(drf(G.digraphInt))
 *         if self.ctype=="float":
 *             out.digraphFloat = self.digraphFloat.sub(drf(G.digraphFloat))             # <<<<<<<<<<<<<<
 *         if self.ctype=="double":
 *             out.digraphDouble = self.digraphDouble.sub(drf(G.digraphDouble))
 */
    __pyx_v_out->__pyx_base.digraphFloat = __pyx_v_self->__pyx_base.digraphFloat->sub((*__pyx_v_G->__pyx_base.digraphFloat));

    /* "miololib.pyx":1415
 *         if self.ctype=="int":
 *             out.digraphInt = self.digraphInt.sub(drf(G.digraphInt))
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.digraphFloat = self.digraphFloat.sub(drf(G.digraphFloat))
 *         if self.ctype=="double":
 */
  }

  /* "miololib.pyx":1417
 *         if self.ctype=="float":
 *             out.digraphFloat = self.digraphFloat.sub(drf(G.digraphFloat))
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.digraphDouble = self.digraphDouble.sub(drf(G.digraphDouble))
 *         return out
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1417, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(1, 1417, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_6) {

    /* "miololib.pyx":1418
 *             out.digraphFloat = self.digraphFloat.sub(drf(G.digraphFloat))
 *         if self.ctype=="double":
 *             out.digraphDouble = self.digraphDouble.sub(drf(G.digraphDouble))             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
    __pyx_v_out->__pyx_base.digraphDouble = __pyx_v_self->__pyx_base.digraphDouble->sub((*__pyx_v_G->__pyx_base.digraphDouble));

    /* "miololib.pyx":1417
 *         if self.ctype=="float":
 *             out.digraphFloat = self.digraphFloat.sub(drf(G.digraphFloat))
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.digraphDouble = self.digraphDouble.sub(drf(G.digraphDouble))
 *         return out
 */
  }

  /* "miololib.pyx":1419
 *         if self.ctype=="double":
 *             out.digraphDouble = self.digraphDouble.sub(drf(G.digraphDouble))
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     def __mul__(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_out);
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "miololib.pyx":1407
 *         return out
 * 
 *     def __sub__(self, Digraph G):             # <<<<<<<<<<<<<<
 *         if self.ctype!=G.ctype:
 *             raise TypeError("Digraphs must share same ctype.")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("miolo.Digraph.__sub__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":1421
 *         return out
 * 
 *     def __mul__(self, value):             # <<<<<<<<<<<<<<
 *         out = Digraph(ctype=self.ctype)
 *         if self.ctype=="int":
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_7Digraph_27__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static PyObject *__pyx_pw_5miolo_7Digraph_27__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__mul__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5miolo_7Digraph_26__mul__(((struct __pyx_obj_5miolo_Digraph *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_7Digraph_26__mul__(struct __pyx_obj_5miolo_Digraph *__pyx_v_self, PyObject *__pyx_v_value) {
  struct __pyx_obj_5miolo_Digraph *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  float __pyx_t_5;
  double __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__mul__", 1);

  /* "miololib.pyx":1422
 * 
 *     def __mul__(self, value):
 *         out = Digraph(ctype=self.ctype)             # <<<<<<<<<<<<<<
 *         if self.ctype=="int":
 *             out.digraphInt = self.digraphInt.smul(value)
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1422, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1422, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ctype, __pyx_t_2) < 0) __PYX_ERR(1, 1422, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Digraph), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1422, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_out = ((struct __pyx_obj_5miolo_Digraph *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "miololib.pyx":1423
 *     def __mul__(self, value):
 *         out = Digraph(ctype=self.ctype)
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.digraphInt = self.digraphInt.smul(value)
 *         if self.ctype=="float":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1423, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1423, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":1424
 *         out = Digraph(ctype=self.ctype)
 *         if self.ctype=="int":
 *             out.digraphInt = self.digraphInt.smul(value)             # <<<<<<<<<<<<<<
 *         if self.ctype=="float":
 *             out.digraphFloat = self.digraphFloat.smul(value)
 */
    __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1424, __pyx_L1_error)
    __pyx_v_out->__pyx_base.digraphInt = __pyx_v_self->__pyx_base.digraphInt->smul(__pyx_t_4);

    /* "miololib.pyx":1423
 *     def __mul__(self, value):
 *         out = Digraph(ctype=self.ctype)
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.digraphInt = self.digraphInt.smul(value)
 *         if self.ctype=="float":
 */
  }

  /* "miololib.pyx":1425
 *         if self.ctype=="int":
 *             out.digraphInt = self.digraphInt.smul(value)
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.digraphFloat = self.digraphFloat.smul(value)
 *         if self.ctype=="double":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1425, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1425, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":1426
 *             out.digraphInt = self.digraphInt.smul(value)
 *         if self.ctype=="float":
 *             out.digraphFloat = self.digraphFloat.smul(value)             # <<<<<<<<<<<<<<
 *         if self.ctype=="double":
 *             out.digraphDouble = self.digraphDouble.smul(value)
 */
    __pyx_t_5 = __pyx_PyFloat_AsFloat(__pyx_v_value); if (unlikely((__pyx_t_5 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 1426, __pyx_L1_error)
    __pyx_v_out->__pyx_base.digraphFloat = __pyx_v_self->__pyx_base.digraphFloat->smul(__pyx_t_5);

    /* "miololib.pyx":1425
 *         if self.ctype=="int":
 *             out.digraphInt = self.digraphInt.smul(value)
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.digraphFloat = self.digraphFloat.smul(value)
 *         if self.ctype=="double":
 */
  }

  /* "miololib.pyx":1427
 *         if self.ctype=="float":
 *             out.digraphFloat = self.digraphFloat.smul(value)
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.digraphDouble = self.digraphDouble.smul(value)
 *         return out
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1427, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1427, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":1428
 *             out.digraphFloat = self.digraphFloat.smul(value)
 *         if self.ctype=="double":
 *             out.digraphDouble = self.digraphDouble.smul(value)             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
    __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1428, __pyx_L1_error)
    __pyx_v_out->__pyx_base.digraphDouble = __pyx_v_self->__pyx_base.digraphDouble->smul(__pyx_t_6);

    /* "miololib.pyx":1427
 *         if self.ctype=="float":
 *             out.digraphFloat = self.digraphFloat.smul(value)
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.digraphDouble = self.digraphDouble.smul(value)
 *         return out
 */
  }

  /* "miololib.pyx":1429
 *         if self.ctype=="double":
 *             out.digraphDouble = self.digraphDouble.smul(value)
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     def __truediv__(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_out);
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "miololib.pyx":1421
 *         return out
 * 
 *     def __mul__(self, value):             # <<<<<<<<<<<<<<
 *         out = Digraph(ctype=self.ctype)
 *         if self.ctype=="int":
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("miolo.Digraph.__mul__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":1431
 *         return out
 * 
 *     def __truediv__(self, value):             # <<<<<<<<<<<<<<
 *         if value==0:
 *             raise Exception("Avoiding division by zero.")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_7Digraph_29__truediv__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static PyObject *__pyx_pw_5miolo_7Digraph_29__truediv__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__truediv__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5miolo_7Digraph_28__truediv__(((struct __pyx_obj_5miolo_Digraph *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_7Digraph_28__truediv__(struct __pyx_obj_5miolo_Digraph *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__truediv__", 1);

  /* "miololib.pyx":1432
 * 
 *     def __truediv__(self, value):
 *         if value==0:             # <<<<<<<<<<<<<<
 *             raise Exception("Avoiding division by zero.")
 *         return self*(1/value)
 */
  __pyx_t_1 = (__Pyx_PyInt_BoolEqObjC(__pyx_v_value, __pyx_int_0, 0, 0)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 1432, __pyx_L1_error)
  if (unlikely(__pyx_t_1)) {

    /* "miololib.pyx":1433
 *     def __truediv__(self, value):
 *         if value==0:
 *             raise Exception("Avoiding division by zero.")             # <<<<<<<<<<<<<<
 *         return self*(1/value)
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__54, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1433, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 1433, __pyx_L1_error)

    /* "miololib.pyx":1432
 * 
 *     def __truediv__(self, value):
 *         if value==0:             # <<<<<<<<<<<<<<
 *             raise Exception("Avoiding division by zero.")
 *         return self*(1/value)
 */
  }

  /* "miololib.pyx":1434
 *         if value==0:
 *             raise Exception("Avoiding division by zero.")
 *         return self*(1/value)             # <<<<<<<<<<<<<<
 * 
 *     def __and__(self, Matrix M):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_int_1, __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1434, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Multiply(((PyObject *)__pyx_v_self), __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1434, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "miololib.pyx":1431
 *         return out
 * 
 *     def __truediv__(self, value):             # <<<<<<<<<<<<<<
 *         if value==0:
 *             raise Exception("Avoiding division by zero.")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("miolo.Digraph.__truediv__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":1436
 *         return self*(1/value)
 * 
 *     def __and__(self, Matrix M):             # <<<<<<<<<<<<<<
 *         if self.nodes!=Matrix.rows:
 *             raise Exception("Incompatible shape for matrix multiplication.")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_7Digraph_31__and__(PyObject *__pyx_v_self, PyObject *__pyx_v_M); /*proto*/
static PyObject *__pyx_pw_5miolo_7Digraph_31__and__(PyObject *__pyx_v_self, PyObject *__pyx_v_M) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__and__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_M), __pyx_ptype_5miolo_Matrix, 1, "M", 0))) __PYX_ERR(1, 1436, __pyx_L1_error)
  __pyx_r = __pyx_pf_5miolo_7Digraph_30__and__(((struct __pyx_obj_5miolo_Digraph *)__pyx_v_self), ((struct __pyx_obj_5miolo_Matrix *)__pyx_v_M));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_7Digraph_30__and__(struct __pyx_obj_5miolo_Digraph *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_M) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__and__", 1);

  /* "miololib.pyx":1437
 * 
 *     def __and__(self, Matrix M):
 *         if self.nodes!=Matrix.rows:             # <<<<<<<<<<<<<<
 *             raise Exception("Incompatible shape for matrix multiplication.")
 *         if self.ctype!=M.ctype:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nodes); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1437, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_5miolo_Matrix), __pyx_n_s_rows); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1437, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1437, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 1437, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(__pyx_t_4)) {

    /* "miololib.pyx":1438
 *     def __and__(self, Matrix M):
 *         if self.nodes!=Matrix.rows:
 *             raise Exception("Incompatible shape for matrix multiplication.")             # <<<<<<<<<<<<<<
 *         if self.ctype!=M.ctype:
 *             raise TypeError("Digraph and Matrix must share same ctype.")
 */
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__55, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1438, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 1438, __pyx_L1_error)

    /* "miololib.pyx":1437
 * 
 *     def __and__(self, Matrix M):
 *         if self.nodes!=Matrix.rows:             # <<<<<<<<<<<<<<
 *             raise Exception("Incompatible shape for matrix multiplication.")
 *         if self.ctype!=M.ctype:
 */
  }

  /* "miololib.pyx":1439
 *         if self.nodes!=Matrix.rows:
 *             raise Exception("Incompatible shape for matrix multiplication.")
 *         if self.ctype!=M.ctype:             # <<<<<<<<<<<<<<
 *             raise TypeError("Digraph and Matrix must share same ctype.")
 *         out = Matrix(self.ctype)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1439, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1439, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_3, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1439, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 1439, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(__pyx_t_4)) {

    /* "miololib.pyx":1440
 *             raise Exception("Incompatible shape for matrix multiplication.")
 *         if self.ctype!=M.ctype:
 *             raise TypeError("Digraph and Matrix must share same ctype.")             # <<<<<<<<<<<<<<
 *         out = Matrix(self.ctype)
 *         if self.ctype=="int":
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__56, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1440, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 1440, __pyx_L1_error)

    /* "miololib.pyx":1439
 *         if self.nodes!=Matrix.rows:
 *             raise Exception("Incompatible shape for matrix multiplication.")
 *         if self.ctype!=M.ctype:             # <<<<<<<<<<<<<<
 *             raise TypeError("Digraph and Matrix must share same ctype.")
 *         out = Matrix(self.ctype)
 */
  }

  /* "miololib.pyx":1441
 *         if self.ctype!=M.ctype:
 *             raise TypeError("Digraph and Matrix must share same ctype.")
 *         out = Matrix(self.ctype)             # <<<<<<<<<<<<<<
 *         if self.ctype=="int":
 *             out.mtxInt = self.digraphInt.mmul(drf(M.mtxInt))
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1441, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_5miolo_Matrix), __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1441, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_out = ((struct __pyx_obj_5miolo_Matrix *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "miololib.pyx":1442
 *             raise TypeError("Digraph and Matrix must share same ctype.")
 *         out = Matrix(self.ctype)
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.mtxInt = self.digraphInt.mmul(drf(M.mtxInt))
 *         if self.ctype=="float":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1442, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 1442, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "miololib.pyx":1443
 *         out = Matrix(self.ctype)
 *         if self.ctype=="int":
 *             out.mtxInt = self.digraphInt.mmul(drf(M.mtxInt))             # <<<<<<<<<<<<<<
 *         if self.ctype=="float":
 *             out.mtxFloat = self.digraphFloat.mmul(drf(M.mtxFloat))
 */
    __pyx_v_out->__pyx_base.mtxInt = __pyx_v_self->__pyx_base.digraphInt->mmul((*__pyx_v_M->__pyx_base.mtxInt));

    /* "miololib.pyx":1442
 *             raise TypeError("Digraph and Matrix must share same ctype.")
 *         out = Matrix(self.ctype)
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.mtxInt = self.digraphInt.mmul(drf(M.mtxInt))
 *         if self.ctype=="float":
 */
  }

  /* "miololib.pyx":1444
 *         if self.ctype=="int":
 *             out.mtxInt = self.digraphInt.mmul(drf(M.mtxInt))
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.mtxFloat = self.digraphFloat.mmul(drf(M.mtxFloat))
 *         if self.ctype=="double":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1444, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 1444, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "miololib.pyx":1445
 *             out.mtxInt = self.digraphInt.mmul(drf(M.mtxInt))
 *         if self.ctype=="float":
 *             out.mtxFloat = self.digraphFloat.mmul(drf(M.mtxFloat))             # <<<<<<<<<<<<<<
 *         if self.ctype=="double":
 *             out.mtxDouble = self.digraphDouble.mmul(drf(M.mtxDouble))
 */
    __pyx_v_out->__pyx_base.mtxFloat = __pyx_v_self->__pyx_base.digraphFloat->mmul((*__pyx_v_M->__pyx_base.mtxFloat));

    /* "miololib.pyx":1444
 *         if self.ctype=="int":
 *             out.mtxInt = self.digraphInt.mmul(drf(M.mtxInt))
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.mtxFloat = self.digraphFloat.mmul(drf(M.mtxFloat))
 *         if self.ctype=="double":
 */
  }

  /* "miololib.pyx":1446
 *         if self.ctype=="float":
 *             out.mtxFloat = self.digraphFloat.mmul(drf(M.mtxFloat))
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.mtxDouble = self.digraphDouble.mmul(drf(M.mtxDouble))
 *         return out
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1446, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 1446, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "miololib.pyx":1447
 *             out.mtxFloat = self.digraphFloat.mmul(drf(M.mtxFloat))
 *         if self.ctype=="double":
 *             out.mtxDouble = self.digraphDouble.mmul(drf(M.mtxDouble))             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
    __pyx_v_out->__pyx_base.mtxDouble = __pyx_v_self->__pyx_base.digraphDouble->mmul((*__pyx_v_M->__pyx_base.mtxDouble));

    /* "miololib.pyx":1446
 *         if self.ctype=="float":
 *             out.mtxFloat = self.digraphFloat.mmul(drf(M.mtxFloat))
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.mtxDouble = self.digraphDouble.mmul(drf(M.mtxDouble))
 *         return out
 */
  }

  /* "miololib.pyx":1448
 *         if self.ctype=="double":
 *             out.mtxDouble = self.digraphDouble.mmul(drf(M.mtxDouble))
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     def __rand__(self, Matrix M):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_out);
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "miololib.pyx":1436
 *         return self*(1/value)
 * 
 *     def __and__(self, Matrix M):             # <<<<<<<<<<<<<<
 *         if self.nodes!=Matrix.rows:
 *             raise Exception("Incompatible shape for matrix multiplication.")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("miolo.Digraph.__and__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":1450
 *         return out
 * 
 *     def __rand__(self, Matrix M):             # <<<<<<<<<<<<<<
 *         if self.nodes!=Matrix.cols:
 *             raise Exception("Incompatible shape for matrix multiplication.")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_7Digraph_33__rand__(PyObject *__pyx_v_self, PyObject *__pyx_v_M); /*proto*/
static PyObject *__pyx_pw_5miolo_7Digraph_33__rand__(PyObject *__pyx_v_self, PyObject *__pyx_v_M) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__rand__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_M), __pyx_ptype_5miolo_Matrix, 1, "M", 0))) __PYX_ERR(1, 1450, __pyx_L1_error)
  __pyx_r = __pyx_pf_5miolo_7Digraph_32__rand__(((struct __pyx_obj_5miolo_Digraph *)__pyx_v_self), ((struct __pyx_obj_5miolo_Matrix *)__pyx_v_M));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_7Digraph_32__rand__(struct __pyx_obj_5miolo_Digraph *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_M) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__rand__", 1);

  /* "miololib.pyx":1451
 * 
 *     def __rand__(self, Matrix M):
 *         if self.nodes!=Matrix.cols:             # <<<<<<<<<<<<<<
 *             raise Exception("Incompatible shape for matrix multiplication.")
 *         if self.ctype!=M.ctype:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nodes); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1451, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_5miolo_Matrix), __pyx_n_s_cols); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1451, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1451, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 1451, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(__pyx_t_4)) {

    /* "miololib.pyx":1452
 *     def __rand__(self, Matrix M):
 *         if self.nodes!=Matrix.cols:
 *             raise Exception("Incompatible shape for matrix multiplication.")             # <<<<<<<<<<<<<<
 *         if self.ctype!=M.ctype:
 *             raise TypeError("Digraph and Matrix must share same ctype.")
 */
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__55, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1452, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 1452, __pyx_L1_error)

    /* "miololib.pyx":1451
 * 
 *     def __rand__(self, Matrix M):
 *         if self.nodes!=Matrix.cols:             # <<<<<<<<<<<<<<
 *             raise Exception("Incompatible shape for matrix multiplication.")
 *         if self.ctype!=M.ctype:
 */
  }

  /* "miololib.pyx":1453
 *         if self.nodes!=Matrix.cols:
 *             raise Exception("Incompatible shape for matrix multiplication.")
 *         if self.ctype!=M.ctype:             # <<<<<<<<<<<<<<
 *             raise TypeError("Digraph and Matrix must share same ctype.")
 *         out = Matrix(self.ctype)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1453, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1453, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_3, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1453, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 1453, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(__pyx_t_4)) {

    /* "miololib.pyx":1454
 *             raise Exception("Incompatible shape for matrix multiplication.")
 *         if self.ctype!=M.ctype:
 *             raise TypeError("Digraph and Matrix must share same ctype.")             # <<<<<<<<<<<<<<
 *         out = Matrix(self.ctype)
 *         if self.ctype=="int":
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__56, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1454, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 1454, __pyx_L1_error)

    /* "miololib.pyx":1453
 *         if self.nodes!=Matrix.cols:
 *             raise Exception("Incompatible shape for matrix multiplication.")
 *         if self.ctype!=M.ctype:             # <<<<<<<<<<<<<<
 *             raise TypeError("Digraph and Matrix must share same ctype.")
 *         out = Matrix(self.ctype)
 */
  }

  /* "miololib.pyx":1455
 *         if self.ctype!=M.ctype:
 *             raise TypeError("Digraph and Matrix must share same ctype.")
 *         out = Matrix(self.ctype)             # <<<<<<<<<<<<<<
 *         if self.ctype=="int":
 *             out.mtxInt = self.digraphInt.mmul(drf(M.mtxInt))
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1455, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_5miolo_Matrix), __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1455, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_out = ((struct __pyx_obj_5miolo_Matrix *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "miololib.pyx":1456
 *             raise TypeError("Digraph and Matrix must share same ctype.")
 *         out = Matrix(self.ctype)
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.mtxInt = self.digraphInt.mmul(drf(M.mtxInt))
 *         if self.ctype=="float":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1456, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 1456, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "miololib.pyx":1457
 *         out = Matrix(self.ctype)
 *         if self.ctype=="int":
 *             out.mtxInt = self.digraphInt.mmul(drf(M.mtxInt))             # <<<<<<<<<<<<<<
 *         if self.ctype=="float":
 *             out.mtxFloat = self.digraphFloat.mmul(drf(M.mtxFloat))
 */
    __pyx_v_out->__pyx_base.mtxInt = __pyx_v_self->__pyx_base.digraphInt->mmul((*__pyx_v_M->__pyx_base.mtxInt));

    /* "miololib.pyx":1456
 *             raise TypeError("Digraph and Matrix must share same ctype.")
 *         out = Matrix(self.ctype)
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.mtxInt = self.digraphInt.mmul(drf(M.mtxInt))
 *         if self.ctype=="float":
 */
  }

  /* "miololib.pyx":1458
 *         if self.ctype=="int":
 *             out.mtxInt = self.digraphInt.mmul(drf(M.mtxInt))
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.mtxFloat = self.digraphFloat.mmul(drf(M.mtxFloat))
 *         if self.ctype=="double":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1458, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 1458, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "miololib.pyx":1459
 *             out.mtxInt = self.digraphInt.mmul(drf(M.mtxInt))
 *         if self.ctype=="float":
 *             out.mtxFloat = self.digraphFloat.mmul(drf(M.mtxFloat))             # <<<<<<<<<<<<<<
 *         if self.ctype=="double":
 *             out.mtxDouble = self.digraphDouble.mmul(drf(M.mtxDouble))
 */
    __pyx_v_out->__pyx_base.mtxFloat = __pyx_v_self->__pyx_base.digraphFloat->mmul((*__pyx_v_M->__pyx_base.mtxFloat));

    /* "miololib.pyx":1458
 *         if self.ctype=="int":
 *             out.mtxInt = self.digraphInt.mmul(drf(M.mtxInt))
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.mtxFloat = self.digraphFloat.mmul(drf(M.mtxFloat))
 *         if self.ctype=="double":
 */
  }

  /* "miololib.pyx":1460
 *         if self.ctype=="float":
 *             out.mtxFloat = self.digraphFloat.mmul(drf(M.mtxFloat))
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.mtxDouble = self.digraphDouble.mmul(drf(M.mtxDouble))
 *         return out
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1460, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 1460, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "miololib.pyx":1461
 *             out.mtxFloat = self.digraphFloat.mmul(drf(M.mtxFloat))
 *         if self.ctype=="double":
 *             out.mtxDouble = self.digraphDouble.mmul(drf(M.mtxDouble))             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
    __pyx_v_out->__pyx_base.mtxDouble = __pyx_v_self->__pyx_base.digraphDouble->mmul((*__pyx_v_M->__pyx_base.mtxDouble));

    /* "miololib.pyx":1460
 *         if self.ctype=="float":
 *             out.mtxFloat = self.digraphFloat.mmul(drf(M.mtxFloat))
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.mtxDouble = self.digraphDouble.mmul(drf(M.mtxDouble))
 *         return out
 */
  }

  /* "miololib.pyx":1462
 *         if self.ctype=="double":
 *             out.mtxDouble = self.digraphDouble.mmul(drf(M.mtxDouble))
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     #---------------------------------------------------------------------------
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_out);
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "miololib.pyx":1450
 *         return out
 * 
 *     def __rand__(self, Matrix M):             # <<<<<<<<<<<<<<
 *         if self.nodes!=Matrix.cols:
 *             raise Exception("Incompatible shape for matrix multiplication.")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("miolo.Digraph.__rand__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":1468
 *     #---------------------------------------------------------------------------
 * 
 *     def toGraph(self, symmetrize=True):             # <<<<<<<<<<<<<<
 *         if symmetrize:
 *             self = self.symmetrize()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_7Digraph_35toGraph(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_7Digraph_34toGraph, "Digraph.toGraph(self, symmetrize=True)");
static PyMethodDef __pyx_mdef_5miolo_7Digraph_35toGraph = {"toGraph", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_7Digraph_35toGraph, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_7Digraph_34toGraph};
static PyObject *__pyx_pw_5miolo_7Digraph_35toGraph(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_symmetrize = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("toGraph (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_symmetrize,0};
    values[0] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_True));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_symmetrize);
          if (value) { values[0] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1468, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "toGraph") < 0)) __PYX_ERR(1, 1468, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_symmetrize = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("toGraph", 0, 0, 1, __pyx_nargs); __PYX_ERR(1, 1468, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.Digraph.toGraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5miolo_7Digraph_34toGraph(((struct __pyx_obj_5miolo_Digraph *)__pyx_v_self), __pyx_v_symmetrize);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_7Digraph_34toGraph(struct __pyx_obj_5miolo_Digraph *__pyx_v_self, PyObject *__pyx_v_symmetrize) {
  struct __pyx_obj_5miolo_Graph *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("toGraph", 0);
  __Pyx_INCREF((PyObject *)__pyx_v_self);

  /* "miololib.pyx":1469
 * 
 *     def toGraph(self, symmetrize=True):
 *         if symmetrize:             # <<<<<<<<<<<<<<
 *             self = self.symmetrize()
 *         out = Graph(ctype=self.ctype)
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_symmetrize); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 1469, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "miololib.pyx":1470
 *     def toGraph(self, symmetrize=True):
 *         if symmetrize:
 *             self = self.symmetrize()             # <<<<<<<<<<<<<<
 *         out = Graph(ctype=self.ctype)
 *         if out.ctype=="int":
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_symmetrize); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1470, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    __pyx_t_5 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_5 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1470, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5miolo_Digraph))))) __PYX_ERR(1, 1470, __pyx_L1_error)
    __Pyx_DECREF_SET(__pyx_v_self, ((struct __pyx_obj_5miolo_Digraph *)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "miololib.pyx":1469
 * 
 *     def toGraph(self, symmetrize=True):
 *         if symmetrize:             # <<<<<<<<<<<<<<
 *             self = self.symmetrize()
 *         out = Graph(ctype=self.ctype)
 */
  }

  /* "miololib.pyx":1471
 *         if symmetrize:
 *             self = self.symmetrize()
 *         out = Graph(ctype=self.ctype)             # <<<<<<<<<<<<<<
 *         if out.ctype=="int":
 *             out.graphInt = mld.toGraph(drf(self.digraphInt))
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1471, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1471, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_ctype, __pyx_t_3) < 0) __PYX_ERR(1, 1471, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Graph), __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1471, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_out = ((struct __pyx_obj_5miolo_Graph *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "miololib.pyx":1472
 *             self = self.symmetrize()
 *         out = Graph(ctype=self.ctype)
 *         if out.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.graphInt = mld.toGraph(drf(self.digraphInt))
 *         if out.ctype=="float":
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1472, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 1472, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_1) {

    /* "miololib.pyx":1473
 *         out = Graph(ctype=self.ctype)
 *         if out.ctype=="int":
 *             out.graphInt = mld.toGraph(drf(self.digraphInt))             # <<<<<<<<<<<<<<
 *         if out.ctype=="float":
 *             out.graphFloat = mld.toGraph(drf(self.digraphFloat))
 */
    __pyx_v_out->__pyx_base.graphInt = toGraph<int>((*__pyx_v_self->__pyx_base.digraphInt));

    /* "miololib.pyx":1472
 *             self = self.symmetrize()
 *         out = Graph(ctype=self.ctype)
 *         if out.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.graphInt = mld.toGraph(drf(self.digraphInt))
 *         if out.ctype=="float":
 */
  }

  /* "miololib.pyx":1474
 *         if out.ctype=="int":
 *             out.graphInt = mld.toGraph(drf(self.digraphInt))
 *         if out.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.graphFloat = mld.toGraph(drf(self.digraphFloat))
 *         if out.ctype=="double":
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1474, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 1474, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_1) {

    /* "miololib.pyx":1475
 *             out.graphInt = mld.toGraph(drf(self.digraphInt))
 *         if out.ctype=="float":
 *             out.graphFloat = mld.toGraph(drf(self.digraphFloat))             # <<<<<<<<<<<<<<
 *         if out.ctype=="double":
 *             out.graphDouble = mld.toGraph(drf(self.digraphDouble))
 */
    __pyx_v_out->__pyx_base.graphFloat = toGraph<float>((*__pyx_v_self->__pyx_base.digraphFloat));

    /* "miololib.pyx":1474
 *         if out.ctype=="int":
 *             out.graphInt = mld.toGraph(drf(self.digraphInt))
 *         if out.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.graphFloat = mld.toGraph(drf(self.digraphFloat))
 *         if out.ctype=="double":
 */
  }

  /* "miololib.pyx":1476
 *         if out.ctype=="float":
 *             out.graphFloat = mld.toGraph(drf(self.digraphFloat))
 *         if out.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.graphDouble = mld.toGraph(drf(self.digraphDouble))
 *         return out
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1476, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 1476, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_1) {

    /* "miololib.pyx":1477
 *             out.graphFloat = mld.toGraph(drf(self.digraphFloat))
 *         if out.ctype=="double":
 *             out.graphDouble = mld.toGraph(drf(self.digraphDouble))             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
    __pyx_v_out->__pyx_base.graphDouble = toGraph<double>((*__pyx_v_self->__pyx_base.digraphDouble));

    /* "miololib.pyx":1476
 *         if out.ctype=="float":
 *             out.graphFloat = mld.toGraph(drf(self.digraphFloat))
 *         if out.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.graphDouble = mld.toGraph(drf(self.digraphDouble))
 *         return out
 */
  }

  /* "miololib.pyx":1478
 *         if out.ctype=="double":
 *             out.graphDouble = mld.toGraph(drf(self.digraphDouble))
 *         return out             # <<<<<<<<<<<<<<
 * 
 * #-------------------------------------------------------------------------------
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_out);
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "miololib.pyx":1468
 *     #---------------------------------------------------------------------------
 * 
 *     def toGraph(self, symmetrize=True):             # <<<<<<<<<<<<<<
 *         if symmetrize:
 *             self = self.symmetrize()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("miolo.Digraph.toGraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XDECREF((PyObject *)__pyx_v_self);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_7Digraph_37__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_7Digraph_36__reduce_cython__, "Digraph.__reduce_cython__(self)");
static PyMethodDef __pyx_mdef_5miolo_7Digraph_37__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_7Digraph_37__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_7Digraph_36__reduce_cython__};
static PyObject *__pyx_pw_5miolo_7Digraph_37__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_5miolo_7Digraph_36__reduce_cython__(((struct __pyx_obj_5miolo_Digraph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_7Digraph_36__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_Digraph *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("miolo.Digraph.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_7Digraph_39__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_7Digraph_38__setstate_cython__, "Digraph.__setstate_cython__(self, __pyx_state)");
static PyMethodDef __pyx_mdef_5miolo_7Digraph_39__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_7Digraph_39__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_7Digraph_38__setstate_cython__};
static PyObject *__pyx_pw_5miolo_7Digraph_39__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(0, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.Digraph.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5miolo_7Digraph_38__setstate_cython__(((struct __pyx_obj_5miolo_Digraph *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_7Digraph_38__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_Digraph *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("miolo.Digraph.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":1501
 *     cdef object cType
 * 
 *     def __cinit__(self, unsigned long dim=0, init=0, ctype=global_ctype):             # <<<<<<<<<<<<<<
 *         if ctype in ctypes:
 *             self.cType = ctype
 */

/* Python wrapper */
static int __pyx_pw_5miolo_8Diagonal_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5miolo_8Diagonal_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  unsigned long __pyx_v_dim;
  PyObject *__pyx_v_init = 0;
  PyObject *__pyx_v_ctype = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dim,&__pyx_n_s_init,&__pyx_n_s_ctype,0};
    values[1] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)__pyx_int_0));
    values[2] = __Pyx_Arg_NewRef_VARARGS(__pyx_k__57);
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_dim);
          if (value) { values[0] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1501, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_init);
          if (value) { values[1] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1501, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_ctype);
          if (value) { values[2] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1501, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__cinit__") < 0)) __PYX_ERR(1, 1501, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_dim = __Pyx_PyInt_As_unsigned_long(values[0]); if (unlikely((__pyx_v_dim == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1501, __pyx_L3_error)
    } else {
      __pyx_v_dim = ((unsigned long)0);
    }
    __pyx_v_init = values[1];
    __pyx_v_ctype = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 3, __pyx_nargs); __PYX_ERR(1, 1501, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.Diagonal.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5miolo_8Diagonal___cinit__(((struct __pyx_obj_5miolo_Diagonal *)__pyx_v_self), __pyx_v_dim, __pyx_v_init, __pyx_v_ctype);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5miolo_8Diagonal___cinit__(struct __pyx_obj_5miolo_Diagonal *__pyx_v_self, unsigned long __pyx_v_dim, PyObject *__pyx_v_init, PyObject *__pyx_v_ctype) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  float __pyx_t_4;
  double __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 1);

  /* "miololib.pyx":1502
 * 
 *     def __cinit__(self, unsigned long dim=0, init=0, ctype=global_ctype):
 *         if ctype in ctypes:             # <<<<<<<<<<<<<<
 *             self.cType = ctype
 *             if dim>0:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_ctypes); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1502, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_v_ctype, __pyx_t_1, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 1502, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(__pyx_t_2)) {

    /* "miololib.pyx":1503
 *     def __cinit__(self, unsigned long dim=0, init=0, ctype=global_ctype):
 *         if ctype in ctypes:
 *             self.cType = ctype             # <<<<<<<<<<<<<<
 *             if dim>0:
 *                 if ctype=="int":
 */
    __Pyx_INCREF(__pyx_v_ctype);
    __Pyx_GIVEREF(__pyx_v_ctype);
    __Pyx_GOTREF(__pyx_v_self->cType);
    __Pyx_DECREF(__pyx_v_self->cType);
    __pyx_v_self->cType = __pyx_v_ctype;

    /* "miololib.pyx":1504
 *         if ctype in ctypes:
 *             self.cType = ctype
 *             if dim>0:             # <<<<<<<<<<<<<<
 *                 if ctype=="int":
 *                     self.diagonalInt = new mld.diagonal[int](dim,init)
 */
    __pyx_t_2 = (__pyx_v_dim > 0);
    if (__pyx_t_2) {

      /* "miololib.pyx":1505
 *             self.cType = ctype
 *             if dim>0:
 *                 if ctype=="int":             # <<<<<<<<<<<<<<
 *                     self.diagonalInt = new mld.diagonal[int](dim,init)
 *                 if ctype=="float":
 */
      __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_ctype, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 1505, __pyx_L1_error)
      if (__pyx_t_2) {

        /* "miololib.pyx":1506
 *             if dim>0:
 *                 if ctype=="int":
 *                     self.diagonalInt = new mld.diagonal[int](dim,init)             # <<<<<<<<<<<<<<
 *                 if ctype=="float":
 *                     self.diagonalFloat = new mld.diagonal[float](dim,init)
 */
        __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_v_init); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1506, __pyx_L1_error)
        __pyx_v_self->__pyx_base.diagonalInt = new diagonal<int> (__pyx_v_dim, __pyx_t_3);

        /* "miololib.pyx":1505
 *             self.cType = ctype
 *             if dim>0:
 *                 if ctype=="int":             # <<<<<<<<<<<<<<
 *                     self.diagonalInt = new mld.diagonal[int](dim,init)
 *                 if ctype=="float":
 */
      }

      /* "miololib.pyx":1507
 *                 if ctype=="int":
 *                     self.diagonalInt = new mld.diagonal[int](dim,init)
 *                 if ctype=="float":             # <<<<<<<<<<<<<<
 *                     self.diagonalFloat = new mld.diagonal[float](dim,init)
 *                 if ctype=="double":
 */
      __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_ctype, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 1507, __pyx_L1_error)
      if (__pyx_t_2) {

        /* "miololib.pyx":1508
 *                     self.diagonalInt = new mld.diagonal[int](dim,init)
 *                 if ctype=="float":
 *                     self.diagonalFloat = new mld.diagonal[float](dim,init)             # <<<<<<<<<<<<<<
 *                 if ctype=="double":
 *                     self.diagonalDouble = new mld.diagonal[double](dim,init)
 */
        __pyx_t_4 = __pyx_PyFloat_AsFloat(__pyx_v_init); if (unlikely((__pyx_t_4 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 1508, __pyx_L1_error)
        __pyx_v_self->__pyx_base.diagonalFloat = new diagonal<float> (__pyx_v_dim, __pyx_t_4);

        /* "miololib.pyx":1507
 *                 if ctype=="int":
 *                     self.diagonalInt = new mld.diagonal[int](dim,init)
 *                 if ctype=="float":             # <<<<<<<<<<<<<<
 *                     self.diagonalFloat = new mld.diagonal[float](dim,init)
 *                 if ctype=="double":
 */
      }

      /* "miololib.pyx":1509
 *                 if ctype=="float":
 *                     self.diagonalFloat = new mld.diagonal[float](dim,init)
 *                 if ctype=="double":             # <<<<<<<<<<<<<<
 *                     self.diagonalDouble = new mld.diagonal[double](dim,init)
 *             else:
 */
      __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_ctype, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 1509, __pyx_L1_error)
      if (__pyx_t_2) {

        /* "miololib.pyx":1510
 *                     self.diagonalFloat = new mld.diagonal[float](dim,init)
 *                 if ctype=="double":
 *                     self.diagonalDouble = new mld.diagonal[double](dim,init)             # <<<<<<<<<<<<<<
 *             else:
 *                 if ctype=="int":
 */
        __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_init); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1510, __pyx_L1_error)
        __pyx_v_self->__pyx_base.diagonalDouble = new diagonal<double> (__pyx_v_dim, __pyx_t_5);

        /* "miololib.pyx":1509
 *                 if ctype=="float":
 *                     self.diagonalFloat = new mld.diagonal[float](dim,init)
 *                 if ctype=="double":             # <<<<<<<<<<<<<<
 *                     self.diagonalDouble = new mld.diagonal[double](dim,init)
 *             else:
 */
      }

      /* "miololib.pyx":1504
 *         if ctype in ctypes:
 *             self.cType = ctype
 *             if dim>0:             # <<<<<<<<<<<<<<
 *                 if ctype=="int":
 *                     self.diagonalInt = new mld.diagonal[int](dim,init)
 */
      goto __pyx_L4;
    }

    /* "miololib.pyx":1512
 *                     self.diagonalDouble = new mld.diagonal[double](dim,init)
 *             else:
 *                 if ctype=="int":             # <<<<<<<<<<<<<<
 *                     self.mtxInt = NULL
 *                 if ctype=="float":
 */
    /*else*/ {
      __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_ctype, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 1512, __pyx_L1_error)
      if (__pyx_t_2) {

        /* "miololib.pyx":1513
 *             else:
 *                 if ctype=="int":
 *                     self.mtxInt = NULL             # <<<<<<<<<<<<<<
 *                 if ctype=="float":
 *                     self.mtxFloat = NULL
 */
        __pyx_v_self->__pyx_base.mtxInt = NULL;

        /* "miololib.pyx":1512
 *                     self.diagonalDouble = new mld.diagonal[double](dim,init)
 *             else:
 *                 if ctype=="int":             # <<<<<<<<<<<<<<
 *                     self.mtxInt = NULL
 *                 if ctype=="float":
 */
      }

      /* "miololib.pyx":1514
 *                 if ctype=="int":
 *                     self.mtxInt = NULL
 *                 if ctype=="float":             # <<<<<<<<<<<<<<
 *                     self.mtxFloat = NULL
 *                 if ctype=="double":
 */
      __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_ctype, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 1514, __pyx_L1_error)
      if (__pyx_t_2) {

        /* "miololib.pyx":1515
 *                     self.mtxInt = NULL
 *                 if ctype=="float":
 *                     self.mtxFloat = NULL             # <<<<<<<<<<<<<<
 *                 if ctype=="double":
 *                     self.mtxDouble = NULL
 */
        __pyx_v_self->__pyx_base.mtxFloat = NULL;

        /* "miololib.pyx":1514
 *                 if ctype=="int":
 *                     self.mtxInt = NULL
 *                 if ctype=="float":             # <<<<<<<<<<<<<<
 *                     self.mtxFloat = NULL
 *                 if ctype=="double":
 */
      }

      /* "miololib.pyx":1516
 *                 if ctype=="float":
 *                     self.mtxFloat = NULL
 *                 if ctype=="double":             # <<<<<<<<<<<<<<
 *                     self.mtxDouble = NULL
 *         else:
 */
      __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_ctype, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 1516, __pyx_L1_error)
      if (__pyx_t_2) {

        /* "miololib.pyx":1517
 *                     self.mtxFloat = NULL
 *                 if ctype=="double":
 *                     self.mtxDouble = NULL             # <<<<<<<<<<<<<<
 *         else:
 *             raise Exception("Unknown ctype.")
 */
        __pyx_v_self->__pyx_base.mtxDouble = NULL;

        /* "miololib.pyx":1516
 *                 if ctype=="float":
 *                     self.mtxFloat = NULL
 *                 if ctype=="double":             # <<<<<<<<<<<<<<
 *                     self.mtxDouble = NULL
 *         else:
 */
      }
    }
    __pyx_L4:;

    /* "miololib.pyx":1502
 * 
 *     def __cinit__(self, unsigned long dim=0, init=0, ctype=global_ctype):
 *         if ctype in ctypes:             # <<<<<<<<<<<<<<
 *             self.cType = ctype
 *             if dim>0:
 */
    goto __pyx_L3;
  }

  /* "miololib.pyx":1519
 *                     self.mtxDouble = NULL
 *         else:
 *             raise Exception("Unknown ctype.")             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1519, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 1519, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "miololib.pyx":1501
 *     cdef object cType
 * 
 *     def __cinit__(self, unsigned long dim=0, init=0, ctype=global_ctype):             # <<<<<<<<<<<<<<
 *         if ctype in ctypes:
 *             self.cType = ctype
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("miolo.Diagonal.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":1521
 *             raise Exception("Unknown ctype.")
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.ctype=="int":
 *             del self.diagonalInt
 */

/* Python wrapper */
static void __pyx_pw_5miolo_8Diagonal_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_5miolo_8Diagonal_3__dealloc__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_pf_5miolo_8Diagonal_2__dealloc__(((struct __pyx_obj_5miolo_Diagonal *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5miolo_8Diagonal_2__dealloc__(struct __pyx_obj_5miolo_Diagonal *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__dealloc__", 1);

  /* "miololib.pyx":1522
 * 
 *     def __dealloc__(self):
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             del self.diagonalInt
 *         if self.ctype=="float":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1522, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 1522, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":1523
 *     def __dealloc__(self):
 *         if self.ctype=="int":
 *             del self.diagonalInt             # <<<<<<<<<<<<<<
 *         if self.ctype=="float":
 *             del self.diagonalFloat
 */
    delete __pyx_v_self->__pyx_base.diagonalInt;

    /* "miololib.pyx":1522
 * 
 *     def __dealloc__(self):
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             del self.diagonalInt
 *         if self.ctype=="float":
 */
  }

  /* "miololib.pyx":1524
 *         if self.ctype=="int":
 *             del self.diagonalInt
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             del self.diagonalFloat
 *         if self.ctype=="double":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1524, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 1524, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":1525
 *             del self.diagonalInt
 *         if self.ctype=="float":
 *             del self.diagonalFloat             # <<<<<<<<<<<<<<
 *         if self.ctype=="double":
 *             del self.diagonalDouble
 */
    delete __pyx_v_self->__pyx_base.diagonalFloat;

    /* "miololib.pyx":1524
 *         if self.ctype=="int":
 *             del self.diagonalInt
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             del self.diagonalFloat
 *         if self.ctype=="double":
 */
  }

  /* "miololib.pyx":1526
 *         if self.ctype=="float":
 *             del self.diagonalFloat
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             del self.diagonalDouble
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1526, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 1526, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":1527
 *             del self.diagonalFloat
 *         if self.ctype=="double":
 *             del self.diagonalDouble             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
    delete __pyx_v_self->__pyx_base.diagonalDouble;

    /* "miololib.pyx":1526
 *         if self.ctype=="float":
 *             del self.diagonalFloat
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             del self.diagonalDouble
 * 
 */
  }

  /* "miololib.pyx":1521
 *             raise Exception("Unknown ctype.")
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.ctype=="int":
 *             del self.diagonalInt
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_WriteUnraisable("miolo.Diagonal.__dealloc__", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "miololib.pyx":1529
 *             del self.diagonalDouble
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def ctype(self):
 *         return str(self.cType)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_8Diagonal_5ctype_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5miolo_8Diagonal_5ctype_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5miolo_8Diagonal_5ctype___get__(((struct __pyx_obj_5miolo_Diagonal *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_8Diagonal_5ctype___get__(struct __pyx_obj_5miolo_Diagonal *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "miololib.pyx":1531
 *     @property
 *     def ctype(self):
 *         return str(self.cType)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Str(__pyx_v_self->cType); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1531, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "miololib.pyx":1529
 *             del self.diagonalDouble
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def ctype(self):
 *         return str(self.cType)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("miolo.Diagonal.ctype.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":1533
 *         return str(self.cType)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def rows(self):
 *         if self.ctype=="int":
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_8Diagonal_4rows_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5miolo_8Diagonal_4rows_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5miolo_8Diagonal_4rows___get__(((struct __pyx_obj_5miolo_Diagonal *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_8Diagonal_4rows___get__(struct __pyx_obj_5miolo_Diagonal *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "miololib.pyx":1535
 *     @property
 *     def rows(self):
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             return self.diagonalInt.dim
 *         if self.ctype=="float":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1535, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 1535, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":1536
 *     def rows(self):
 *         if self.ctype=="int":
 *             return self.diagonalInt.dim             # <<<<<<<<<<<<<<
 *         if self.ctype=="float":
 *             return self.diagonalFloat.dim
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_From_unsigned_long(__pyx_v_self->__pyx_base.diagonalInt->dim); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1536, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "miololib.pyx":1535
 *     @property
 *     def rows(self):
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             return self.diagonalInt.dim
 *         if self.ctype=="float":
 */
  }

  /* "miololib.pyx":1537
 *         if self.ctype=="int":
 *             return self.diagonalInt.dim
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             return self.diagonalFloat.dim
 *         if self.ctype=="double":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1537, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 1537, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":1538
 *             return self.diagonalInt.dim
 *         if self.ctype=="float":
 *             return self.diagonalFloat.dim             # <<<<<<<<<<<<<<
 *         if self.ctype=="double":
 *             return self.diagonalDouble.dim
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_From_unsigned_long(__pyx_v_self->__pyx_base.diagonalFloat->dim); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1538, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "miololib.pyx":1537
 *         if self.ctype=="int":
 *             return self.diagonalInt.dim
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             return self.diagonalFloat.dim
 *         if self.ctype=="double":
 */
  }

  /* "miololib.pyx":1539
 *         if self.ctype=="float":
 *             return self.diagonalFloat.dim
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             return self.diagonalDouble.dim
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1539, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 1539, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":1540
 *             return self.diagonalFloat.dim
 *         if self.ctype=="double":
 *             return self.diagonalDouble.dim             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_From_unsigned_long(__pyx_v_self->__pyx_base.diagonalDouble->dim); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1540, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "miololib.pyx":1539
 *         if self.ctype=="float":
 *             return self.diagonalFloat.dim
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             return self.diagonalDouble.dim
 * 
 */
  }

  /* "miololib.pyx":1533
 *         return str(self.cType)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def rows(self):
 *         if self.ctype=="int":
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("miolo.Diagonal.rows.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":1542
 *             return self.diagonalDouble.dim
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def cols(self):
 *         return self.rows
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_8Diagonal_4cols_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5miolo_8Diagonal_4cols_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5miolo_8Diagonal_4cols___get__(((struct __pyx_obj_5miolo_Diagonal *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_8Diagonal_4cols___get__(struct __pyx_obj_5miolo_Diagonal *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "miololib.pyx":1544
 *     @property
 *     def cols(self):
 *         return self.rows             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_rows); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1544, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "miololib.pyx":1542
 *             return self.diagonalDouble.dim
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def cols(self):
 *         return self.rows
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("miolo.Diagonal.cols.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":1546
 *         return self.rows
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.rows
 * 
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_5miolo_8Diagonal_5__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_5miolo_8Diagonal_5__len__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5miolo_8Diagonal_4__len__(((struct __pyx_obj_5miolo_Diagonal *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_5miolo_8Diagonal_4__len__(struct __pyx_obj_5miolo_Diagonal *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__len__", 1);

  /* "miololib.pyx":1547
 * 
 *     def __len__(self):
 *         return self.rows             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, unsigned long k):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_rows); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1547, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyIndex_AsSsize_t(__pyx_t_1); if (unlikely((__pyx_t_2 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1547, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  goto __pyx_L0;

  /* "miololib.pyx":1546
 *         return self.rows
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.rows
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("miolo.Diagonal.__len__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":1549
 *         return self.rows
 * 
 *     def __getitem__(self, unsigned long k):             # <<<<<<<<<<<<<<
 *         if k >= <unsigned long>self.rows:
 *             raise Exception("Index k is out of bounds.")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_8Diagonal_7__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_k); /*proto*/
static PyObject *__pyx_pw_5miolo_8Diagonal_7__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_k) {
  unsigned long __pyx_v_k;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  assert(__pyx_arg_k); {
    __pyx_v_k = __Pyx_PyInt_As_unsigned_long(__pyx_arg_k); if (unlikely((__pyx_v_k == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1549, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("miolo.Diagonal.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5miolo_8Diagonal_6__getitem__(((struct __pyx_obj_5miolo_Diagonal *)__pyx_v_self), ((unsigned long)__pyx_v_k));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_8Diagonal_6__getitem__(struct __pyx_obj_5miolo_Diagonal *__pyx_v_self, unsigned long __pyx_v_k) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  unsigned long __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 1);

  /* "miololib.pyx":1550
 * 
 *     def __getitem__(self, unsigned long k):
 *         if k >= <unsigned long>self.rows:             # <<<<<<<<<<<<<<
 *             raise Exception("Index k is out of bounds.")
 *         if self.ctype=="int":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_rows); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1550, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_unsigned_long(__pyx_t_1); if (unlikely((__pyx_t_2 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1550, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_v_k >= ((unsigned long)__pyx_t_2));
  if (unlikely(__pyx_t_3)) {

    /* "miololib.pyx":1551
 *     def __getitem__(self, unsigned long k):
 *         if k >= <unsigned long>self.rows:
 *             raise Exception("Index k is out of bounds.")             # <<<<<<<<<<<<<<
 *         if self.ctype=="int":
 *             return self.diagonalInt.data[k]
 */
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1551, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 1551, __pyx_L1_error)

    /* "miololib.pyx":1550
 * 
 *     def __getitem__(self, unsigned long k):
 *         if k >= <unsigned long>self.rows:             # <<<<<<<<<<<<<<
 *             raise Exception("Index k is out of bounds.")
 *         if self.ctype=="int":
 */
  }

  /* "miololib.pyx":1552
 *         if k >= <unsigned long>self.rows:
 *             raise Exception("Index k is out of bounds.")
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             return self.diagonalInt.data[k]
 *         if self.ctype=="float":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1552, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1552, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":1553
 *             raise Exception("Index k is out of bounds.")
 *         if self.ctype=="int":
 *             return self.diagonalInt.data[k]             # <<<<<<<<<<<<<<
 *         if self.ctype=="float":
 *             return self.diagonalFloat.data[k]
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_From_int((__pyx_v_self->__pyx_base.diagonalInt->data[__pyx_v_k])); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1553, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "miololib.pyx":1552
 *         if k >= <unsigned long>self.rows:
 *             raise Exception("Index k is out of bounds.")
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             return self.diagonalInt.data[k]
 *         if self.ctype=="float":
 */
  }

  /* "miololib.pyx":1554
 *         if self.ctype=="int":
 *             return self.diagonalInt.data[k]
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             return self.diagonalFloat.data[k]
 *         if self.ctype=="double":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1554, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1554, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":1555
 *             return self.diagonalInt.data[k]
 *         if self.ctype=="float":
 *             return self.diagonalFloat.data[k]             # <<<<<<<<<<<<<<
 *         if self.ctype=="double":
 *             return self.diagonalDouble.data[k]
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PyFloat_FromDouble((__pyx_v_self->__pyx_base.diagonalFloat->data[__pyx_v_k])); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1555, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "miololib.pyx":1554
 *         if self.ctype=="int":
 *             return self.diagonalInt.data[k]
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             return self.diagonalFloat.data[k]
 *         if self.ctype=="double":
 */
  }

  /* "miololib.pyx":1556
 *         if self.ctype=="float":
 *             return self.diagonalFloat.data[k]
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             return self.diagonalDouble.data[k]
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1556, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1556, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":1557
 *             return self.diagonalFloat.data[k]
 *         if self.ctype=="double":
 *             return self.diagonalDouble.data[k]             # <<<<<<<<<<<<<<
 * 
 *     def __setitem__(self, unsigned long k, value):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PyFloat_FromDouble((__pyx_v_self->__pyx_base.diagonalDouble->data[__pyx_v_k])); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1557, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "miololib.pyx":1556
 *         if self.ctype=="float":
 *             return self.diagonalFloat.data[k]
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             return self.diagonalDouble.data[k]
 * 
 */
  }

  /* "miololib.pyx":1549
 *         return self.rows
 * 
 *     def __getitem__(self, unsigned long k):             # <<<<<<<<<<<<<<
 *         if k >= <unsigned long>self.rows:
 *             raise Exception("Index k is out of bounds.")
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("miolo.Diagonal.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":1559
 *             return self.diagonalDouble.data[k]
 * 
 *     def __setitem__(self, unsigned long k, value):             # <<<<<<<<<<<<<<
 *         if k >= <unsigned long>self.rows*self.cols:
 *             raise Exception("Index k is out of bounds.")
 */

/* Python wrapper */
static int __pyx_pw_5miolo_8Diagonal_9__setitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_k, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5miolo_8Diagonal_9__setitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_k, PyObject *__pyx_v_value) {
  unsigned long __pyx_v_k;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  assert(__pyx_arg_k); {
    __pyx_v_k = __Pyx_PyInt_As_unsigned_long(__pyx_arg_k); if (unlikely((__pyx_v_k == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1559, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("miolo.Diagonal.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5miolo_8Diagonal_8__setitem__(((struct __pyx_obj_5miolo_Diagonal *)__pyx_v_self), ((unsigned long)__pyx_v_k), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5miolo_8Diagonal_8__setitem__(struct __pyx_obj_5miolo_Diagonal *__pyx_v_self, unsigned long __pyx_v_k, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  unsigned long __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  float __pyx_t_8;
  double __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setitem__", 1);

  /* "miololib.pyx":1560
 * 
 *     def __setitem__(self, unsigned long k, value):
 *         if k >= <unsigned long>self.rows*self.cols:             # <<<<<<<<<<<<<<
 *             raise Exception("Index k is out of bounds.")
 *         if self.ctype=="int":
 */
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_long(__pyx_v_k); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1560, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_rows); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1560, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_long(__pyx_t_2); if (unlikely((__pyx_t_3 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1560, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_unsigned_long(((unsigned long)__pyx_t_3)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1560, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_cols); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1560, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyNumber_Multiply(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1560, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_1, __pyx_t_5, Py_GE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1560, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(1, 1560, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(__pyx_t_6)) {

    /* "miololib.pyx":1561
 *     def __setitem__(self, unsigned long k, value):
 *         if k >= <unsigned long>self.rows*self.cols:
 *             raise Exception("Index k is out of bounds.")             # <<<<<<<<<<<<<<
 *         if self.ctype=="int":
 *             self.diagonalInt.data[k] = <int>value
 */
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1561, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(1, 1561, __pyx_L1_error)

    /* "miololib.pyx":1560
 * 
 *     def __setitem__(self, unsigned long k, value):
 *         if k >= <unsigned long>self.rows*self.cols:             # <<<<<<<<<<<<<<
 *             raise Exception("Index k is out of bounds.")
 *         if self.ctype=="int":
 */
  }

  /* "miololib.pyx":1562
 *         if k >= <unsigned long>self.rows*self.cols:
 *             raise Exception("Index k is out of bounds.")
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             self.diagonalInt.data[k] = <int>value
 *         if self.ctype=="float":
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1562, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = (__Pyx_PyString_Equals(__pyx_t_4, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(1, 1562, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_6) {

    /* "miololib.pyx":1563
 *             raise Exception("Index k is out of bounds.")
 *         if self.ctype=="int":
 *             self.diagonalInt.data[k] = <int>value             # <<<<<<<<<<<<<<
 *         if self.ctype=="float":
 *             self.diagonalFloat.data[k] = <float>value
 */
    __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1563, __pyx_L1_error)
    (__pyx_v_self->__pyx_base.diagonalInt->data[__pyx_v_k]) = ((int)__pyx_t_7);

    /* "miololib.pyx":1562
 *         if k >= <unsigned long>self.rows*self.cols:
 *             raise Exception("Index k is out of bounds.")
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             self.diagonalInt.data[k] = <int>value
 *         if self.ctype=="float":
 */
  }

  /* "miololib.pyx":1564
 *         if self.ctype=="int":
 *             self.diagonalInt.data[k] = <int>value
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             self.diagonalFloat.data[k] = <float>value
 *         if self.ctype=="double":
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1564, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = (__Pyx_PyString_Equals(__pyx_t_4, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(1, 1564, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_6) {

    /* "miololib.pyx":1565
 *             self.diagonalInt.data[k] = <int>value
 *         if self.ctype=="float":
 *             self.diagonalFloat.data[k] = <float>value             # <<<<<<<<<<<<<<
 *         if self.ctype=="double":
 *             self.diagonalDouble.data[k] = value
 */
    __pyx_t_8 = __pyx_PyFloat_AsFloat(__pyx_v_value); if (unlikely((__pyx_t_8 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 1565, __pyx_L1_error)
    (__pyx_v_self->__pyx_base.diagonalFloat->data[__pyx_v_k]) = ((float)__pyx_t_8);

    /* "miololib.pyx":1564
 *         if self.ctype=="int":
 *             self.diagonalInt.data[k] = <int>value
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             self.diagonalFloat.data[k] = <float>value
 *         if self.ctype=="double":
 */
  }

  /* "miololib.pyx":1566
 *         if self.ctype=="float":
 *             self.diagonalFloat.data[k] = <float>value
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             self.diagonalDouble.data[k] = value
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1566, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = (__Pyx_PyString_Equals(__pyx_t_4, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(1, 1566, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_6) {

    /* "miololib.pyx":1567
 *             self.diagonalFloat.data[k] = <float>value
 *         if self.ctype=="double":
 *             self.diagonalDouble.data[k] = value             # <<<<<<<<<<<<<<
 * 
 *     #---------------------------------------------------------------------------
 */
    __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1567, __pyx_L1_error)
    (__pyx_v_self->__pyx_base.diagonalDouble->data[__pyx_v_k]) = __pyx_t_9;

    /* "miololib.pyx":1566
 *         if self.ctype=="float":
 *             self.diagonalFloat.data[k] = <float>value
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             self.diagonalDouble.data[k] = value
 * 
 */
  }

  /* "miololib.pyx":1559
 *             return self.diagonalDouble.data[k]
 * 
 *     def __setitem__(self, unsigned long k, value):             # <<<<<<<<<<<<<<
 *         if k >= <unsigned long>self.rows*self.cols:
 *             raise Exception("Index k is out of bounds.")
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("miolo.Diagonal.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":1573
 *     #---------------------------------------------------------------------------
 * 
 *     def __add__(self, Diagonal D):             # <<<<<<<<<<<<<<
 *         if len(self)!=len(D):
 *             raise Exception("Incompatible shapes for addition")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_8Diagonal_11__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_D); /*proto*/
static PyObject *__pyx_pw_5miolo_8Diagonal_11__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_D) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__add__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_D), __pyx_ptype_5miolo_Diagonal, 1, "D", 0))) __PYX_ERR(1, 1573, __pyx_L1_error)
  __pyx_r = __pyx_pf_5miolo_8Diagonal_10__add__(((struct __pyx_obj_5miolo_Diagonal *)__pyx_v_self), ((struct __pyx_obj_5miolo_Diagonal *)__pyx_v_D));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_8Diagonal_10__add__(struct __pyx_obj_5miolo_Diagonal *__pyx_v_self, struct __pyx_obj_5miolo_Diagonal *__pyx_v_D) {
  struct __pyx_obj_5miolo_Diagonal *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__add__", 1);

  /* "miololib.pyx":1574
 * 
 *     def __add__(self, Diagonal D):
 *         if len(self)!=len(D):             # <<<<<<<<<<<<<<
 *             raise Exception("Incompatible shapes for addition")
 *         if self.ctype!=D.ctype:
 */
  __pyx_t_1 = PyObject_Length(((PyObject *)__pyx_v_self)); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1574, __pyx_L1_error)
  __pyx_t_2 = PyObject_Length(((PyObject *)__pyx_v_D)); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1574, __pyx_L1_error)
  __pyx_t_3 = (__pyx_t_1 != __pyx_t_2);
  if (unlikely(__pyx_t_3)) {

    /* "miololib.pyx":1575
 *     def __add__(self, Diagonal D):
 *         if len(self)!=len(D):
 *             raise Exception("Incompatible shapes for addition")             # <<<<<<<<<<<<<<
 *         if self.ctype!=D.ctype:
 *             raise TypeError("Diagonals must have same ctype")
 */
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__58, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1575, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(1, 1575, __pyx_L1_error)

    /* "miololib.pyx":1574
 * 
 *     def __add__(self, Diagonal D):
 *         if len(self)!=len(D):             # <<<<<<<<<<<<<<
 *             raise Exception("Incompatible shapes for addition")
 *         if self.ctype!=D.ctype:
 */
  }

  /* "miololib.pyx":1576
 *         if len(self)!=len(D):
 *             raise Exception("Incompatible shapes for addition")
 *         if self.ctype!=D.ctype:             # <<<<<<<<<<<<<<
 *             raise TypeError("Diagonals must have same ctype")
 *         out = Diagonal(ctype=D.ctype)
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1576, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_D), __pyx_n_s_ctype); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1576, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyObject_RichCompare(__pyx_t_4, __pyx_t_5, Py_NE); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1576, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1576, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(__pyx_t_3)) {

    /* "miololib.pyx":1577
 *             raise Exception("Incompatible shapes for addition")
 *         if self.ctype!=D.ctype:
 *             raise TypeError("Diagonals must have same ctype")             # <<<<<<<<<<<<<<
 *         out = Diagonal(ctype=D.ctype)
 *         if self.ctype=="int":
 */
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__59, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1577, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(1, 1577, __pyx_L1_error)

    /* "miololib.pyx":1576
 *         if len(self)!=len(D):
 *             raise Exception("Incompatible shapes for addition")
 *         if self.ctype!=D.ctype:             # <<<<<<<<<<<<<<
 *             raise TypeError("Diagonals must have same ctype")
 *         out = Diagonal(ctype=D.ctype)
 */
  }

  /* "miololib.pyx":1578
 *         if self.ctype!=D.ctype:
 *             raise TypeError("Diagonals must have same ctype")
 *         out = Diagonal(ctype=D.ctype)             # <<<<<<<<<<<<<<
 *         if self.ctype=="int":
 *             out.diagonalInt = self.diagonalInt.add(drf(D.diagonalInt))
 */
  __pyx_t_6 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1578, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_D), __pyx_n_s_ctype); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1578, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_ctype, __pyx_t_5) < 0) __PYX_ERR(1, 1578, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Diagonal), __pyx_empty_tuple, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1578, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_out = ((struct __pyx_obj_5miolo_Diagonal *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "miololib.pyx":1579
 *             raise TypeError("Diagonals must have same ctype")
 *         out = Diagonal(ctype=D.ctype)
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.diagonalInt = self.diagonalInt.add(drf(D.diagonalInt))
 *         if self.ctype=="float":
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1579, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_5, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1579, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":1580
 *         out = Diagonal(ctype=D.ctype)
 *         if self.ctype=="int":
 *             out.diagonalInt = self.diagonalInt.add(drf(D.diagonalInt))             # <<<<<<<<<<<<<<
 *         if self.ctype=="float":
 *             out.diagonalFloat = self.diagonalFloat.add(drf(D.diagonalFloat))
 */
    __pyx_v_out->__pyx_base.diagonalInt = __pyx_v_self->__pyx_base.diagonalInt->add((*__pyx_v_D->__pyx_base.diagonalInt));

    /* "miololib.pyx":1579
 *             raise TypeError("Diagonals must have same ctype")
 *         out = Diagonal(ctype=D.ctype)
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.diagonalInt = self.diagonalInt.add(drf(D.diagonalInt))
 *         if self.ctype=="float":
 */
  }

  /* "miololib.pyx":1581
 *         if self.ctype=="int":
 *             out.diagonalInt = self.diagonalInt.add(drf(D.diagonalInt))
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.diagonalFloat = self.diagonalFloat.add(drf(D.diagonalFloat))
 *         if self.ctype=="double":
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1581, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_5, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1581, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":1582
 *             out.diagonalInt = self.diagonalInt.add(drf(D.diagonalInt))
 *         if self.ctype=="float":
 *             out.diagonalFloat = self.diagonalFloat.add(drf(D.diagonalFloat))             # <<<<<<<<<<<<<<
 *         if self.ctype=="double":
 *             out.diagonalDouble = self.diagonalDouble.add(drf(D.diagonalDouble))
 */
    __pyx_v_out->__pyx_base.diagonalFloat = __pyx_v_self->__pyx_base.diagonalFloat->add((*__pyx_v_D->__pyx_base.diagonalFloat));

    /* "miololib.pyx":1581
 *         if self.ctype=="int":
 *             out.diagonalInt = self.diagonalInt.add(drf(D.diagonalInt))
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.diagonalFloat = self.diagonalFloat.add(drf(D.diagonalFloat))
 *         if self.ctype=="double":
 */
  }

  /* "miololib.pyx":1583
 *         if self.ctype=="float":
 *             out.diagonalFloat = self.diagonalFloat.add(drf(D.diagonalFloat))
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.diagonalDouble = self.diagonalDouble.add(drf(D.diagonalDouble))
 *         return out
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1583, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_5, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1583, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":1584
 *             out.diagonalFloat = self.diagonalFloat.add(drf(D.diagonalFloat))
 *         if self.ctype=="double":
 *             out.diagonalDouble = self.diagonalDouble.add(drf(D.diagonalDouble))             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
    __pyx_v_out->__pyx_base.diagonalDouble = __pyx_v_self->__pyx_base.diagonalDouble->add((*__pyx_v_D->__pyx_base.diagonalDouble));

    /* "miololib.pyx":1583
 *         if self.ctype=="float":
 *             out.diagonalFloat = self.diagonalFloat.add(drf(D.diagonalFloat))
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.diagonalDouble = self.diagonalDouble.add(drf(D.diagonalDouble))
 *         return out
 */
  }

  /* "miololib.pyx":1585
 *         if self.ctype=="double":
 *             out.diagonalDouble = self.diagonalDouble.add(drf(D.diagonalDouble))
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     def __sub__(self, Diagonal D):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_out);
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "miololib.pyx":1573
 *     #---------------------------------------------------------------------------
 * 
 *     def __add__(self, Diagonal D):             # <<<<<<<<<<<<<<
 *         if len(self)!=len(D):
 *             raise Exception("Incompatible shapes for addition")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("miolo.Diagonal.__add__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":1587
 *         return out
 * 
 *     def __sub__(self, Diagonal D):             # <<<<<<<<<<<<<<
 *         if len(self)!=len(D):
 *             raise Exception("Incompatible shapes for subtraction")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_8Diagonal_13__sub__(PyObject *__pyx_v_self, PyObject *__pyx_v_D); /*proto*/
static PyObject *__pyx_pw_5miolo_8Diagonal_13__sub__(PyObject *__pyx_v_self, PyObject *__pyx_v_D) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__sub__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_D), __pyx_ptype_5miolo_Diagonal, 1, "D", 0))) __PYX_ERR(1, 1587, __pyx_L1_error)
  __pyx_r = __pyx_pf_5miolo_8Diagonal_12__sub__(((struct __pyx_obj_5miolo_Diagonal *)__pyx_v_self), ((struct __pyx_obj_5miolo_Diagonal *)__pyx_v_D));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_8Diagonal_12__sub__(struct __pyx_obj_5miolo_Diagonal *__pyx_v_self, struct __pyx_obj_5miolo_Diagonal *__pyx_v_D) {
  struct __pyx_obj_5miolo_Diagonal *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__sub__", 1);

  /* "miololib.pyx":1588
 * 
 *     def __sub__(self, Diagonal D):
 *         if len(self)!=len(D):             # <<<<<<<<<<<<<<
 *             raise Exception("Incompatible shapes for subtraction")
 *         if self.ctype!=D.ctype:
 */
  __pyx_t_1 = PyObject_Length(((PyObject *)__pyx_v_self)); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1588, __pyx_L1_error)
  __pyx_t_2 = PyObject_Length(((PyObject *)__pyx_v_D)); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1588, __pyx_L1_error)
  __pyx_t_3 = (__pyx_t_1 != __pyx_t_2);
  if (unlikely(__pyx_t_3)) {

    /* "miololib.pyx":1589
 *     def __sub__(self, Diagonal D):
 *         if len(self)!=len(D):
 *             raise Exception("Incompatible shapes for subtraction")             # <<<<<<<<<<<<<<
 *         if self.ctype!=D.ctype:
 *             raise TypeError("Diagonals must have same ctype")
 */
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__60, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1589, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(1, 1589, __pyx_L1_error)

    /* "miololib.pyx":1588
 * 
 *     def __sub__(self, Diagonal D):
 *         if len(self)!=len(D):             # <<<<<<<<<<<<<<
 *             raise Exception("Incompatible shapes for subtraction")
 *         if self.ctype!=D.ctype:
 */
  }

  /* "miololib.pyx":1590
 *         if len(self)!=len(D):
 *             raise Exception("Incompatible shapes for subtraction")
 *         if self.ctype!=D.ctype:             # <<<<<<<<<<<<<<
 *             raise TypeError("Diagonals must have same ctype")
 *         out = Diagonal(ctype=D.ctype)
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1590, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_D), __pyx_n_s_ctype); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1590, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyObject_RichCompare(__pyx_t_4, __pyx_t_5, Py_NE); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1590, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1590, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(__pyx_t_3)) {

    /* "miololib.pyx":1591
 *             raise Exception("Incompatible shapes for subtraction")
 *         if self.ctype!=D.ctype:
 *             raise TypeError("Diagonals must have same ctype")             # <<<<<<<<<<<<<<
 *         out = Diagonal(ctype=D.ctype)
 *         if self.ctype=="int":
 */
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__59, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1591, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(1, 1591, __pyx_L1_error)

    /* "miololib.pyx":1590
 *         if len(self)!=len(D):
 *             raise Exception("Incompatible shapes for subtraction")
 *         if self.ctype!=D.ctype:             # <<<<<<<<<<<<<<
 *             raise TypeError("Diagonals must have same ctype")
 *         out = Diagonal(ctype=D.ctype)
 */
  }

  /* "miololib.pyx":1592
 *         if self.ctype!=D.ctype:
 *             raise TypeError("Diagonals must have same ctype")
 *         out = Diagonal(ctype=D.ctype)             # <<<<<<<<<<<<<<
 *         if self.ctype=="int":
 *             out.diagonalInt = self.diagonalInt.sub(drf(D.diagonalInt))
 */
  __pyx_t_6 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1592, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_D), __pyx_n_s_ctype); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1592, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_ctype, __pyx_t_5) < 0) __PYX_ERR(1, 1592, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Diagonal), __pyx_empty_tuple, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1592, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_out = ((struct __pyx_obj_5miolo_Diagonal *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "miololib.pyx":1593
 *             raise TypeError("Diagonals must have same ctype")
 *         out = Diagonal(ctype=D.ctype)
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.diagonalInt = self.diagonalInt.sub(drf(D.diagonalInt))
 *         if self.ctype=="float":
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1593, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_5, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1593, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":1594
 *         out = Diagonal(ctype=D.ctype)
 *         if self.ctype=="int":
 *             out.diagonalInt = self.diagonalInt.sub(drf(D.diagonalInt))             # <<<<<<<<<<<<<<
 *         if self.ctype=="float":
 *             out.diagonalFloat = self.diagonalFloat.sub(drf(D.diagonalFloat))
 */
    __pyx_v_out->__pyx_base.diagonalInt = __pyx_v_self->__pyx_base.diagonalInt->sub((*__pyx_v_D->__pyx_base.diagonalInt));

    /* "miololib.pyx":1593
 *             raise TypeError("Diagonals must have same ctype")
 *         out = Diagonal(ctype=D.ctype)
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.diagonalInt = self.diagonalInt.sub(drf(D.diagonalInt))
 *         if self.ctype=="float":
 */
  }

  /* "miololib.pyx":1595
 *         if self.ctype=="int":
 *             out.diagonalInt = self.diagonalInt.sub(drf(D.diagonalInt))
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.diagonalFloat = self.diagonalFloat.sub(drf(D.diagonalFloat))
 *         if self.ctype=="double":
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1595, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_5, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1595, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":1596
 *             out.diagonalInt = self.diagonalInt.sub(drf(D.diagonalInt))
 *         if self.ctype=="float":
 *             out.diagonalFloat = self.diagonalFloat.sub(drf(D.diagonalFloat))             # <<<<<<<<<<<<<<
 *         if self.ctype=="double":
 *             out.diagonalDouble = self.diagonalDouble.sub(drf(D.diagonalDouble))
 */
    __pyx_v_out->__pyx_base.diagonalFloat = __pyx_v_self->__pyx_base.diagonalFloat->sub((*__pyx_v_D->__pyx_base.diagonalFloat));

    /* "miololib.pyx":1595
 *         if self.ctype=="int":
 *             out.diagonalInt = self.diagonalInt.sub(drf(D.diagonalInt))
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.diagonalFloat = self.diagonalFloat.sub(drf(D.diagonalFloat))
 *         if self.ctype=="double":
 */
  }

  /* "miololib.pyx":1597
 *         if self.ctype=="float":
 *             out.diagonalFloat = self.diagonalFloat.sub(drf(D.diagonalFloat))
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.diagonalDouble = self.diagonalDouble.sub(drf(D.diagonalDouble))
 *         return out
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1597, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_5, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1597, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":1598
 *             out.diagonalFloat = self.diagonalFloat.sub(drf(D.diagonalFloat))
 *         if self.ctype=="double":
 *             out.diagonalDouble = self.diagonalDouble.sub(drf(D.diagonalDouble))             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
    __pyx_v_out->__pyx_base.diagonalDouble = __pyx_v_self->__pyx_base.diagonalDouble->sub((*__pyx_v_D->__pyx_base.diagonalDouble));

    /* "miololib.pyx":1597
 *         if self.ctype=="float":
 *             out.diagonalFloat = self.diagonalFloat.sub(drf(D.diagonalFloat))
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.diagonalDouble = self.diagonalDouble.sub(drf(D.diagonalDouble))
 *         return out
 */
  }

  /* "miololib.pyx":1599
 *         if self.ctype=="double":
 *             out.diagonalDouble = self.diagonalDouble.sub(drf(D.diagonalDouble))
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     def __and__(self, mioloObject D):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_out);
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "miololib.pyx":1587
 *         return out
 * 
 *     def __sub__(self, Diagonal D):             # <<<<<<<<<<<<<<
 *         if len(self)!=len(D):
 *             raise Exception("Incompatible shapes for subtraction")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("miolo.Diagonal.__sub__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":1601
 *         return out
 * 
 *     def __and__(self, mioloObject D):             # <<<<<<<<<<<<<<
 *         if D.ctype!=self.ctype:
 *             raise TypeError("Objects must share same ctype.")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_8Diagonal_15__and__(PyObject *__pyx_v_self, PyObject *__pyx_v_D); /*proto*/
static PyObject *__pyx_pw_5miolo_8Diagonal_15__and__(PyObject *__pyx_v_self, PyObject *__pyx_v_D) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__and__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_D), __pyx_ptype_5miolo_mioloObject, 1, "D", 0))) __PYX_ERR(1, 1601, __pyx_L1_error)
  __pyx_r = __pyx_pf_5miolo_8Diagonal_14__and__(((struct __pyx_obj_5miolo_Diagonal *)__pyx_v_self), ((struct __pyx_obj_5miolo_mioloObject *)__pyx_v_D));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_8Diagonal_14__and__(struct __pyx_obj_5miolo_Diagonal *__pyx_v_self, struct __pyx_obj_5miolo_mioloObject *__pyx_v_D) {
  struct __pyx_obj_5miolo_mioloObject *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__and__", 1);

  /* "miololib.pyx":1602
 * 
 *     def __and__(self, mioloObject D):
 *         if D.ctype!=self.ctype:             # <<<<<<<<<<<<<<
 *             raise TypeError("Objects must share same ctype.")
 *         if isinstance(D,Matrix):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_D), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1602, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1602, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1602, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 1602, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(__pyx_t_4)) {

    /* "miololib.pyx":1603
 *     def __and__(self, mioloObject D):
 *         if D.ctype!=self.ctype:
 *             raise TypeError("Objects must share same ctype.")             # <<<<<<<<<<<<<<
 *         if isinstance(D,Matrix):
 *             if (D.rows!=self.dim):
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__61, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1603, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 1603, __pyx_L1_error)

    /* "miololib.pyx":1602
 * 
 *     def __and__(self, mioloObject D):
 *         if D.ctype!=self.ctype:             # <<<<<<<<<<<<<<
 *             raise TypeError("Objects must share same ctype.")
 *         if isinstance(D,Matrix):
 */
  }

  /* "miololib.pyx":1604
 *         if D.ctype!=self.ctype:
 *             raise TypeError("Objects must share same ctype.")
 *         if isinstance(D,Matrix):             # <<<<<<<<<<<<<<
 *             if (D.rows!=self.dim):
 *                 raise Exception("Number of rows must be equal to Diagonal.cols")
 */
  __pyx_t_4 = __Pyx_TypeCheck(((PyObject *)__pyx_v_D), __pyx_ptype_5miolo_Matrix); 
  if (__pyx_t_4) {

    /* "miololib.pyx":1605
 *             raise TypeError("Objects must share same ctype.")
 *         if isinstance(D,Matrix):
 *             if (D.rows!=self.dim):             # <<<<<<<<<<<<<<
 *                 raise Exception("Number of rows must be equal to Diagonal.cols")
 *             out = Matrix(self.ctype)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_D), __pyx_n_s_rows); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1605, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_dim); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1605, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyObject_RichCompare(__pyx_t_3, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1605, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 1605, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__pyx_t_4)) {

      /* "miololib.pyx":1606
 *         if isinstance(D,Matrix):
 *             if (D.rows!=self.dim):
 *                 raise Exception("Number of rows must be equal to Diagonal.cols")             # <<<<<<<<<<<<<<
 *             out = Matrix(self.ctype)
 *             if self.ctype=="int":
 */
      __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__62, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1606, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_Raise(__pyx_t_1, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __PYX_ERR(1, 1606, __pyx_L1_error)

      /* "miololib.pyx":1605
 *             raise TypeError("Objects must share same ctype.")
 *         if isinstance(D,Matrix):
 *             if (D.rows!=self.dim):             # <<<<<<<<<<<<<<
 *                 raise Exception("Number of rows must be equal to Diagonal.cols")
 *             out = Matrix(self.ctype)
 */
    }

    /* "miololib.pyx":1607
 *             if (D.rows!=self.dim):
 *                 raise Exception("Number of rows must be equal to Diagonal.cols")
 *             out = Matrix(self.ctype)             # <<<<<<<<<<<<<<
 *             if self.ctype=="int":
 *                 out.mtxInt = self.diagonalInt.lmul(drf(D.mtxInt))
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1607, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_5miolo_Matrix), __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1607, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_out = ((struct __pyx_obj_5miolo_mioloObject *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "miololib.pyx":1608
 *                 raise Exception("Number of rows must be equal to Diagonal.cols")
 *             out = Matrix(self.ctype)
 *             if self.ctype=="int":             # <<<<<<<<<<<<<<
 *                 out.mtxInt = self.diagonalInt.lmul(drf(D.mtxInt))
 *             if self.ctype=="float":
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1608, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 1608, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_4) {

      /* "miololib.pyx":1609
 *             out = Matrix(self.ctype)
 *             if self.ctype=="int":
 *                 out.mtxInt = self.diagonalInt.lmul(drf(D.mtxInt))             # <<<<<<<<<<<<<<
 *             if self.ctype=="float":
 *                 out.mtxFloat = self.diagonalFloat.lmul(drf(D.mtxFloat))
 */
      __pyx_v_out->mtxInt = __pyx_v_self->__pyx_base.diagonalInt->lmul((*__pyx_v_D->mtxInt));

      /* "miololib.pyx":1608
 *                 raise Exception("Number of rows must be equal to Diagonal.cols")
 *             out = Matrix(self.ctype)
 *             if self.ctype=="int":             # <<<<<<<<<<<<<<
 *                 out.mtxInt = self.diagonalInt.lmul(drf(D.mtxInt))
 *             if self.ctype=="float":
 */
    }

    /* "miololib.pyx":1610
 *             if self.ctype=="int":
 *                 out.mtxInt = self.diagonalInt.lmul(drf(D.mtxInt))
 *             if self.ctype=="float":             # <<<<<<<<<<<<<<
 *                 out.mtxFloat = self.diagonalFloat.lmul(drf(D.mtxFloat))
 *             if self.ctype=="double":
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1610, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 1610, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_4) {

      /* "miololib.pyx":1611
 *                 out.mtxInt = self.diagonalInt.lmul(drf(D.mtxInt))
 *             if self.ctype=="float":
 *                 out.mtxFloat = self.diagonalFloat.lmul(drf(D.mtxFloat))             # <<<<<<<<<<<<<<
 *             if self.ctype=="double":
 *                 out.mtxDouble = self.diagonalDouble.lmul(drf(D.mtxDouble))
 */
      __pyx_v_out->mtxFloat = __pyx_v_self->__pyx_base.diagonalFloat->lmul((*__pyx_v_D->mtxFloat));

      /* "miololib.pyx":1610
 *             if self.ctype=="int":
 *                 out.mtxInt = self.diagonalInt.lmul(drf(D.mtxInt))
 *             if self.ctype=="float":             # <<<<<<<<<<<<<<
 *                 out.mtxFloat = self.diagonalFloat.lmul(drf(D.mtxFloat))
 *             if self.ctype=="double":
 */
    }

    /* "miololib.pyx":1612
 *             if self.ctype=="float":
 *                 out.mtxFloat = self.diagonalFloat.lmul(drf(D.mtxFloat))
 *             if self.ctype=="double":             # <<<<<<<<<<<<<<
 *                 out.mtxDouble = self.diagonalDouble.lmul(drf(D.mtxDouble))
 *             return out
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1612, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 1612, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_4) {

      /* "miololib.pyx":1613
 *                 out.mtxFloat = self.diagonalFloat.lmul(drf(D.mtxFloat))
 *             if self.ctype=="double":
 *                 out.mtxDouble = self.diagonalDouble.lmul(drf(D.mtxDouble))             # <<<<<<<<<<<<<<
 *             return out
 *         if isinstance(D,Graph):
 */
      __pyx_v_out->mtxDouble = __pyx_v_self->__pyx_base.diagonalDouble->lmul((*__pyx_v_D->mtxDouble));

      /* "miololib.pyx":1612
 *             if self.ctype=="float":
 *                 out.mtxFloat = self.diagonalFloat.lmul(drf(D.mtxFloat))
 *             if self.ctype=="double":             # <<<<<<<<<<<<<<
 *                 out.mtxDouble = self.diagonalDouble.lmul(drf(D.mtxDouble))
 *             return out
 */
    }

    /* "miololib.pyx":1614
 *             if self.ctype=="double":
 *                 out.mtxDouble = self.diagonalDouble.lmul(drf(D.mtxDouble))
 *             return out             # <<<<<<<<<<<<<<
 *         if isinstance(D,Graph):
 *             if (D.nodes!=self.dim):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_out);
    __pyx_r = ((PyObject *)__pyx_v_out);
    goto __pyx_L0;

    /* "miololib.pyx":1604
 *         if D.ctype!=self.ctype:
 *             raise TypeError("Objects must share same ctype.")
 *         if isinstance(D,Matrix):             # <<<<<<<<<<<<<<
 *             if (D.rows!=self.dim):
 *                 raise Exception("Number of rows must be equal to Diagonal.cols")
 */
  }

  /* "miololib.pyx":1615
 *                 out.mtxDouble = self.diagonalDouble.lmul(drf(D.mtxDouble))
 *             return out
 *         if isinstance(D,Graph):             # <<<<<<<<<<<<<<
 *             if (D.nodes!=self.dim):
 *                 raise Exception("Number of nodes must be equal to Diagonal.cols")
 */
  __pyx_t_4 = __Pyx_TypeCheck(((PyObject *)__pyx_v_D), __pyx_ptype_5miolo_Graph); 
  if (__pyx_t_4) {

    /* "miololib.pyx":1616
 *             return out
 *         if isinstance(D,Graph):
 *             if (D.nodes!=self.dim):             # <<<<<<<<<<<<<<
 *                 raise Exception("Number of nodes must be equal to Diagonal.cols")
 *             out = Digraph(self.ctype)
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_D), __pyx_n_s_nodes); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1616, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_dim); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1616, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, __pyx_t_1, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1616, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 1616, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(__pyx_t_4)) {

      /* "miololib.pyx":1617
 *         if isinstance(D,Graph):
 *             if (D.nodes!=self.dim):
 *                 raise Exception("Number of nodes must be equal to Diagonal.cols")             # <<<<<<<<<<<<<<
 *             out = Digraph(self.ctype)
 *             if self.ctype=="int":
 */
      __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__63, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1617, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(1, 1617, __pyx_L1_error)

      /* "miololib.pyx":1616
 *             return out
 *         if isinstance(D,Graph):
 *             if (D.nodes!=self.dim):             # <<<<<<<<<<<<<<
 *                 raise Exception("Number of nodes must be equal to Diagonal.cols")
 *             out = Digraph(self.ctype)
 */
    }

    /* "miololib.pyx":1618
 *             if (D.nodes!=self.dim):
 *                 raise Exception("Number of nodes must be equal to Diagonal.cols")
 *             out = Digraph(self.ctype)             # <<<<<<<<<<<<<<
 *             if self.ctype=="int":
 *                 out.digraphInt = self.diagonalInt.lmul(drf(D.graphInt))
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1618, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_5miolo_Digraph), __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1618, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_out = ((struct __pyx_obj_5miolo_mioloObject *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "miololib.pyx":1619
 *                 raise Exception("Number of nodes must be equal to Diagonal.cols")
 *             out = Digraph(self.ctype)
 *             if self.ctype=="int":             # <<<<<<<<<<<<<<
 *                 out.digraphInt = self.diagonalInt.lmul(drf(D.graphInt))
 *             if self.ctype=="float":
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1619, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 1619, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_4) {

      /* "miololib.pyx":1620
 *             out = Digraph(self.ctype)
 *             if self.ctype=="int":
 *                 out.digraphInt = self.diagonalInt.lmul(drf(D.graphInt))             # <<<<<<<<<<<<<<
 *             if self.ctype=="float":
 *                 out.digraphFloat = self.diagonalFloat.lmul(drf(D.graphFloat))
 */
      __pyx_v_out->digraphInt = __pyx_v_self->__pyx_base.diagonalInt->lmul((*__pyx_v_D->graphInt));

      /* "miololib.pyx":1619
 *                 raise Exception("Number of nodes must be equal to Diagonal.cols")
 *             out = Digraph(self.ctype)
 *             if self.ctype=="int":             # <<<<<<<<<<<<<<
 *                 out.digraphInt = self.diagonalInt.lmul(drf(D.graphInt))
 *             if self.ctype=="float":
 */
    }

    /* "miololib.pyx":1621
 *             if self.ctype=="int":
 *                 out.digraphInt = self.diagonalInt.lmul(drf(D.graphInt))
 *             if self.ctype=="float":             # <<<<<<<<<<<<<<
 *                 out.digraphFloat = self.diagonalFloat.lmul(drf(D.graphFloat))
 *             if self.ctype=="double":
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1621, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 1621, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_4) {

      /* "miololib.pyx":1622
 *                 out.digraphInt = self.diagonalInt.lmul(drf(D.graphInt))
 *             if self.ctype=="float":
 *                 out.digraphFloat = self.diagonalFloat.lmul(drf(D.graphFloat))             # <<<<<<<<<<<<<<
 *             if self.ctype=="double":
 *                 out.digraphDouble = self.diagonalDouble.lmul(drf(D.graphDouble))
 */
      __pyx_v_out->digraphFloat = __pyx_v_self->__pyx_base.diagonalFloat->lmul((*__pyx_v_D->graphFloat));

      /* "miololib.pyx":1621
 *             if self.ctype=="int":
 *                 out.digraphInt = self.diagonalInt.lmul(drf(D.graphInt))
 *             if self.ctype=="float":             # <<<<<<<<<<<<<<
 *                 out.digraphFloat = self.diagonalFloat.lmul(drf(D.graphFloat))
 *             if self.ctype=="double":
 */
    }

    /* "miololib.pyx":1623
 *             if self.ctype=="float":
 *                 out.digraphFloat = self.diagonalFloat.lmul(drf(D.graphFloat))
 *             if self.ctype=="double":             # <<<<<<<<<<<<<<
 *                 out.digraphDouble = self.diagonalDouble.lmul(drf(D.graphDouble))
 *             return out
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1623, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 1623, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_4) {

      /* "miololib.pyx":1624
 *                 out.digraphFloat = self.diagonalFloat.lmul(drf(D.graphFloat))
 *             if self.ctype=="double":
 *                 out.digraphDouble = self.diagonalDouble.lmul(drf(D.graphDouble))             # <<<<<<<<<<<<<<
 *             return out
 *         if isinstance(D,Digraph):
 */
      __pyx_v_out->digraphDouble = __pyx_v_self->__pyx_base.diagonalDouble->lmul((*__pyx_v_D->graphDouble));

      /* "miololib.pyx":1623
 *             if self.ctype=="float":
 *                 out.digraphFloat = self.diagonalFloat.lmul(drf(D.graphFloat))
 *             if self.ctype=="double":             # <<<<<<<<<<<<<<
 *                 out.digraphDouble = self.diagonalDouble.lmul(drf(D.graphDouble))
 *             return out
 */
    }

    /* "miololib.pyx":1625
 *             if self.ctype=="double":
 *                 out.digraphDouble = self.diagonalDouble.lmul(drf(D.graphDouble))
 *             return out             # <<<<<<<<<<<<<<
 *         if isinstance(D,Digraph):
 *             if (D.nodes!=self.dim):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_out);
    __pyx_r = ((PyObject *)__pyx_v_out);
    goto __pyx_L0;

    /* "miololib.pyx":1615
 *                 out.mtxDouble = self.diagonalDouble.lmul(drf(D.mtxDouble))
 *             return out
 *         if isinstance(D,Graph):             # <<<<<<<<<<<<<<
 *             if (D.nodes!=self.dim):
 *                 raise Exception("Number of nodes must be equal to Diagonal.cols")
 */
  }

  /* "miololib.pyx":1626
 *                 out.digraphDouble = self.diagonalDouble.lmul(drf(D.graphDouble))
 *             return out
 *         if isinstance(D,Digraph):             # <<<<<<<<<<<<<<
 *             if (D.nodes!=self.dim):
 *                 raise Exception("Number of nodes must be equal to Diagonal.cols")
 */
  __pyx_t_4 = __Pyx_TypeCheck(((PyObject *)__pyx_v_D), __pyx_ptype_5miolo_Digraph); 
  if (__pyx_t_4) {

    /* "miololib.pyx":1627
 *             return out
 *         if isinstance(D,Digraph):
 *             if (D.nodes!=self.dim):             # <<<<<<<<<<<<<<
 *                 raise Exception("Number of nodes must be equal to Diagonal.cols")
 *             out = Digraph(self.ctype)
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_D), __pyx_n_s_nodes); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1627, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_dim); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1627, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_t_3, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1627, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 1627, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(__pyx_t_4)) {

      /* "miololib.pyx":1628
 *         if isinstance(D,Digraph):
 *             if (D.nodes!=self.dim):
 *                 raise Exception("Number of nodes must be equal to Diagonal.cols")             # <<<<<<<<<<<<<<
 *             out = Digraph(self.ctype)
 *             if self.ctype=="int":
 */
      __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__63, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1628, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_Raise(__pyx_t_2, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __PYX_ERR(1, 1628, __pyx_L1_error)

      /* "miololib.pyx":1627
 *             return out
 *         if isinstance(D,Digraph):
 *             if (D.nodes!=self.dim):             # <<<<<<<<<<<<<<
 *                 raise Exception("Number of nodes must be equal to Diagonal.cols")
 *             out = Digraph(self.ctype)
 */
    }

    /* "miololib.pyx":1629
 *             if (D.nodes!=self.dim):
 *                 raise Exception("Number of nodes must be equal to Diagonal.cols")
 *             out = Digraph(self.ctype)             # <<<<<<<<<<<<<<
 *             if self.ctype=="int":
 *                 out.digraphInt = self.diagonalInt.lmul(drf(D.digraphInt))
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1629, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_5miolo_Digraph), __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1629, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_out = ((struct __pyx_obj_5miolo_mioloObject *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "miololib.pyx":1630
 *                 raise Exception("Number of nodes must be equal to Diagonal.cols")
 *             out = Digraph(self.ctype)
 *             if self.ctype=="int":             # <<<<<<<<<<<<<<
 *                 out.digraphInt = self.diagonalInt.lmul(drf(D.digraphInt))
 *             if self.ctype=="float":
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1630, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 1630, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_4) {

      /* "miololib.pyx":1631
 *             out = Digraph(self.ctype)
 *             if self.ctype=="int":
 *                 out.digraphInt = self.diagonalInt.lmul(drf(D.digraphInt))             # <<<<<<<<<<<<<<
 *             if self.ctype=="float":
 *                 out.digraphFloat = self.diagonalFloat.lmul(drf(D.digraphFloat))
 */
      __pyx_v_out->digraphInt = __pyx_v_self->__pyx_base.diagonalInt->lmul((*__pyx_v_D->digraphInt));

      /* "miololib.pyx":1630
 *                 raise Exception("Number of nodes must be equal to Diagonal.cols")
 *             out = Digraph(self.ctype)
 *             if self.ctype=="int":             # <<<<<<<<<<<<<<
 *                 out.digraphInt = self.diagonalInt.lmul(drf(D.digraphInt))
 *             if self.ctype=="float":
 */
    }

    /* "miololib.pyx":1632
 *             if self.ctype=="int":
 *                 out.digraphInt = self.diagonalInt.lmul(drf(D.digraphInt))
 *             if self.ctype=="float":             # <<<<<<<<<<<<<<
 *                 out.digraphFloat = self.diagonalFloat.lmul(drf(D.digraphFloat))
 *             if self.ctype=="double":
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1632, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 1632, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_4) {

      /* "miololib.pyx":1633
 *                 out.digraphInt = self.diagonalInt.lmul(drf(D.digraphInt))
 *             if self.ctype=="float":
 *                 out.digraphFloat = self.diagonalFloat.lmul(drf(D.digraphFloat))             # <<<<<<<<<<<<<<
 *             if self.ctype=="double":
 *                 out.digraphDouble = self.diagonalDouble.lmul(drf(D.digraphDouble))
 */
      __pyx_v_out->digraphFloat = __pyx_v_self->__pyx_base.diagonalFloat->lmul((*__pyx_v_D->digraphFloat));

      /* "miololib.pyx":1632
 *             if self.ctype=="int":
 *                 out.digraphInt = self.diagonalInt.lmul(drf(D.digraphInt))
 *             if self.ctype=="float":             # <<<<<<<<<<<<<<
 *                 out.digraphFloat = self.diagonalFloat.lmul(drf(D.digraphFloat))
 *             if self.ctype=="double":
 */
    }

    /* "miololib.pyx":1634
 *             if self.ctype=="float":
 *                 out.digraphFloat = self.diagonalFloat.lmul(drf(D.digraphFloat))
 *             if self.ctype=="double":             # <<<<<<<<<<<<<<
 *                 out.digraphDouble = self.diagonalDouble.lmul(drf(D.digraphDouble))
 *             return out
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1634, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 1634, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_4) {

      /* "miololib.pyx":1635
 *                 out.digraphFloat = self.diagonalFloat.lmul(drf(D.digraphFloat))
 *             if self.ctype=="double":
 *                 out.digraphDouble = self.diagonalDouble.lmul(drf(D.digraphDouble))             # <<<<<<<<<<<<<<
 *             return out
 *         if isinstance(D,Diagonal):
 */
      __pyx_v_out->digraphDouble = __pyx_v_self->__pyx_base.diagonalDouble->lmul((*__pyx_v_D->digraphDouble));

      /* "miololib.pyx":1634
 *             if self.ctype=="float":
 *                 out.digraphFloat = self.diagonalFloat.lmul(drf(D.digraphFloat))
 *             if self.ctype=="double":             # <<<<<<<<<<<<<<
 *                 out.digraphDouble = self.diagonalDouble.lmul(drf(D.digraphDouble))
 *             return out
 */
    }

    /* "miololib.pyx":1636
 *             if self.ctype=="double":
 *                 out.digraphDouble = self.diagonalDouble.lmul(drf(D.digraphDouble))
 *             return out             # <<<<<<<<<<<<<<
 *         if isinstance(D,Diagonal):
 *             if (D.dim!=self.dim):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_out);
    __pyx_r = ((PyObject *)__pyx_v_out);
    goto __pyx_L0;

    /* "miololib.pyx":1626
 *                 out.digraphDouble = self.diagonalDouble.lmul(drf(D.graphDouble))
 *             return out
 *         if isinstance(D,Digraph):             # <<<<<<<<<<<<<<
 *             if (D.nodes!=self.dim):
 *                 raise Exception("Number of nodes must be equal to Diagonal.cols")
 */
  }

  /* "miololib.pyx":1637
 *                 out.digraphDouble = self.diagonalDouble.lmul(drf(D.digraphDouble))
 *             return out
 *         if isinstance(D,Diagonal):             # <<<<<<<<<<<<<<
 *             if (D.dim!=self.dim):
 *                 raise Exception("Dimension of diagonals must be equal.")
 */
  __pyx_t_4 = __Pyx_TypeCheck(((PyObject *)__pyx_v_D), __pyx_ptype_5miolo_Diagonal); 
  if (__pyx_t_4) {

    /* "miololib.pyx":1638
 *             return out
 *         if isinstance(D,Diagonal):
 *             if (D.dim!=self.dim):             # <<<<<<<<<<<<<<
 *                 raise Exception("Dimension of diagonals must be equal.")
 *             out = Diagonal(self.ctype)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_D), __pyx_n_s_dim); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1638, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_dim); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1638, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyObject_RichCompare(__pyx_t_3, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1638, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 1638, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__pyx_t_4)) {

      /* "miololib.pyx":1639
 *         if isinstance(D,Diagonal):
 *             if (D.dim!=self.dim):
 *                 raise Exception("Dimension of diagonals must be equal.")             # <<<<<<<<<<<<<<
 *             out = Diagonal(self.ctype)
 *             if self.ctype=="int":
 */
      __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__64, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1639, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_Raise(__pyx_t_1, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __PYX_ERR(1, 1639, __pyx_L1_error)

      /* "miololib.pyx":1638
 *             return out
 *         if isinstance(D,Diagonal):
 *             if (D.dim!=self.dim):             # <<<<<<<<<<<<<<
 *                 raise Exception("Dimension of diagonals must be equal.")
 *             out = Diagonal(self.ctype)
 */
    }

    /* "miololib.pyx":1640
 *             if (D.dim!=self.dim):
 *                 raise Exception("Dimension of diagonals must be equal.")
 *             out = Diagonal(self.ctype)             # <<<<<<<<<<<<<<
 *             if self.ctype=="int":
 *                 out.diagonalInt = self.diagonalInt.mul(drf(D.diagonalInt))
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1640, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_5miolo_Diagonal), __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1640, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_out = ((struct __pyx_obj_5miolo_mioloObject *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "miololib.pyx":1641
 *                 raise Exception("Dimension of diagonals must be equal.")
 *             out = Diagonal(self.ctype)
 *             if self.ctype=="int":             # <<<<<<<<<<<<<<
 *                 out.diagonalInt = self.diagonalInt.mul(drf(D.diagonalInt))
 *             if self.ctype=="float":
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1641, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 1641, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_4) {

      /* "miololib.pyx":1642
 *             out = Diagonal(self.ctype)
 *             if self.ctype=="int":
 *                 out.diagonalInt = self.diagonalInt.mul(drf(D.diagonalInt))             # <<<<<<<<<<<<<<
 *             if self.ctype=="float":
 *                 out.diagonalFloat = self.diagonalFloat.mul(drf(D.diagonalFloat))
 */
      __pyx_v_out->diagonalInt = __pyx_v_self->__pyx_base.diagonalInt->mul((*__pyx_v_D->diagonalInt));

      /* "miololib.pyx":1641
 *                 raise Exception("Dimension of diagonals must be equal.")
 *             out = Diagonal(self.ctype)
 *             if self.ctype=="int":             # <<<<<<<<<<<<<<
 *                 out.diagonalInt = self.diagonalInt.mul(drf(D.diagonalInt))
 *             if self.ctype=="float":
 */
    }

    /* "miololib.pyx":1643
 *             if self.ctype=="int":
 *                 out.diagonalInt = self.diagonalInt.mul(drf(D.diagonalInt))
 *             if self.ctype=="float":             # <<<<<<<<<<<<<<
 *                 out.diagonalFloat = self.diagonalFloat.mul(drf(D.diagonalFloat))
 *             if self.ctype=="double":
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1643, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 1643, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_4) {

      /* "miololib.pyx":1644
 *                 out.diagonalInt = self.diagonalInt.mul(drf(D.diagonalInt))
 *             if self.ctype=="float":
 *                 out.diagonalFloat = self.diagonalFloat.mul(drf(D.diagonalFloat))             # <<<<<<<<<<<<<<
 *             if self.ctype=="double":
 *                 out.diagonalDouble = self.diagonalDouble.mul(drf(D.diagonalDouble))
 */
      __pyx_v_out->diagonalFloat = __pyx_v_self->__pyx_base.diagonalFloat->mul((*__pyx_v_D->diagonalFloat));

      /* "miololib.pyx":1643
 *             if self.ctype=="int":
 *                 out.diagonalInt = self.diagonalInt.mul(drf(D.diagonalInt))
 *             if self.ctype=="float":             # <<<<<<<<<<<<<<
 *                 out.diagonalFloat = self.diagonalFloat.mul(drf(D.diagonalFloat))
 *             if self.ctype=="double":
 */
    }

    /* "miololib.pyx":1645
 *             if self.ctype=="float":
 *                 out.diagonalFloat = self.diagonalFloat.mul(drf(D.diagonalFloat))
 *             if self.ctype=="double":             # <<<<<<<<<<<<<<
 *                 out.diagonalDouble = self.diagonalDouble.mul(drf(D.diagonalDouble))
 *             return out
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1645, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 1645, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_4) {

      /* "miololib.pyx":1646
 *                 out.diagonalFloat = self.diagonalFloat.mul(drf(D.diagonalFloat))
 *             if self.ctype=="double":
 *                 out.diagonalDouble = self.diagonalDouble.mul(drf(D.diagonalDouble))             # <<<<<<<<<<<<<<
 *             return out
 * 
 */
      __pyx_v_out->diagonalDouble = __pyx_v_self->__pyx_base.diagonalDouble->mul((*__pyx_v_D->diagonalDouble));

      /* "miololib.pyx":1645
 *             if self.ctype=="float":
 *                 out.diagonalFloat = self.diagonalFloat.mul(drf(D.diagonalFloat))
 *             if self.ctype=="double":             # <<<<<<<<<<<<<<
 *                 out.diagonalDouble = self.diagonalDouble.mul(drf(D.diagonalDouble))
 *             return out
 */
    }

    /* "miololib.pyx":1647
 *             if self.ctype=="double":
 *                 out.diagonalDouble = self.diagonalDouble.mul(drf(D.diagonalDouble))
 *             return out             # <<<<<<<<<<<<<<
 * 
 *     def __rand__(self, mioloObject D):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_out);
    __pyx_r = ((PyObject *)__pyx_v_out);
    goto __pyx_L0;

    /* "miololib.pyx":1637
 *                 out.digraphDouble = self.diagonalDouble.lmul(drf(D.digraphDouble))
 *             return out
 *         if isinstance(D,Diagonal):             # <<<<<<<<<<<<<<
 *             if (D.dim!=self.dim):
 *                 raise Exception("Dimension of diagonals must be equal.")
 */
  }

  /* "miololib.pyx":1601
 *         return out
 * 
 *     def __and__(self, mioloObject D):             # <<<<<<<<<<<<<<
 *         if D.ctype!=self.ctype:
 *             raise TypeError("Objects must share same ctype.")
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("miolo.Diagonal.__and__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":1649
 *             return out
 * 
 *     def __rand__(self, mioloObject D):             # <<<<<<<<<<<<<<
 *         if D.ctype!=self.ctype:
 *             raise TypeError("Objects must share same ctype.")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_8Diagonal_17__rand__(PyObject *__pyx_v_self, PyObject *__pyx_v_D); /*proto*/
static PyObject *__pyx_pw_5miolo_8Diagonal_17__rand__(PyObject *__pyx_v_self, PyObject *__pyx_v_D) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__rand__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_D), __pyx_ptype_5miolo_mioloObject, 1, "D", 0))) __PYX_ERR(1, 1649, __pyx_L1_error)
  __pyx_r = __pyx_pf_5miolo_8Diagonal_16__rand__(((struct __pyx_obj_5miolo_Diagonal *)__pyx_v_self), ((struct __pyx_obj_5miolo_mioloObject *)__pyx_v_D));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_8Diagonal_16__rand__(struct __pyx_obj_5miolo_Diagonal *__pyx_v_self, struct __pyx_obj_5miolo_mioloObject *__pyx_v_D) {
  struct __pyx_obj_5miolo_mioloObject *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__rand__", 1);

  /* "miololib.pyx":1650
 * 
 *     def __rand__(self, mioloObject D):
 *         if D.ctype!=self.ctype:             # <<<<<<<<<<<<<<
 *             raise TypeError("Objects must share same ctype.")
 *         if isinstance(D,Matrix):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_D), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1650, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1650, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1650, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 1650, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(__pyx_t_4)) {

    /* "miololib.pyx":1651
 *     def __rand__(self, mioloObject D):
 *         if D.ctype!=self.ctype:
 *             raise TypeError("Objects must share same ctype.")             # <<<<<<<<<<<<<<
 *         if isinstance(D,Matrix):
 *             if (D.cols!=self.dim):
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__61, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1651, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 1651, __pyx_L1_error)

    /* "miololib.pyx":1650
 * 
 *     def __rand__(self, mioloObject D):
 *         if D.ctype!=self.ctype:             # <<<<<<<<<<<<<<
 *             raise TypeError("Objects must share same ctype.")
 *         if isinstance(D,Matrix):
 */
  }

  /* "miololib.pyx":1652
 *         if D.ctype!=self.ctype:
 *             raise TypeError("Objects must share same ctype.")
 *         if isinstance(D,Matrix):             # <<<<<<<<<<<<<<
 *             if (D.cols!=self.dim):
 *                 raise Exception("Number of rows must be equal to Diagonal.cols")
 */
  __pyx_t_4 = __Pyx_TypeCheck(((PyObject *)__pyx_v_D), __pyx_ptype_5miolo_Matrix); 
  if (__pyx_t_4) {

    /* "miololib.pyx":1653
 *             raise TypeError("Objects must share same ctype.")
 *         if isinstance(D,Matrix):
 *             if (D.cols!=self.dim):             # <<<<<<<<<<<<<<
 *                 raise Exception("Number of rows must be equal to Diagonal.cols")
 *             out = Matrix(self.ctype)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_D), __pyx_n_s_cols); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1653, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_dim); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1653, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyObject_RichCompare(__pyx_t_3, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1653, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 1653, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__pyx_t_4)) {

      /* "miololib.pyx":1654
 *         if isinstance(D,Matrix):
 *             if (D.cols!=self.dim):
 *                 raise Exception("Number of rows must be equal to Diagonal.cols")             # <<<<<<<<<<<<<<
 *             out = Matrix(self.ctype)
 *             if self.ctype=="int":
 */
      __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__62, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1654, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_Raise(__pyx_t_1, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __PYX_ERR(1, 1654, __pyx_L1_error)

      /* "miololib.pyx":1653
 *             raise TypeError("Objects must share same ctype.")
 *         if isinstance(D,Matrix):
 *             if (D.cols!=self.dim):             # <<<<<<<<<<<<<<
 *                 raise Exception("Number of rows must be equal to Diagonal.cols")
 *             out = Matrix(self.ctype)
 */
    }

    /* "miololib.pyx":1655
 *             if (D.cols!=self.dim):
 *                 raise Exception("Number of rows must be equal to Diagonal.cols")
 *             out = Matrix(self.ctype)             # <<<<<<<<<<<<<<
 *             if self.ctype=="int":
 *                 out.mtxInt = self.diagonalInt.rmul(drf(D.mtxInt))
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1655, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_5miolo_Matrix), __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1655, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_out = ((struct __pyx_obj_5miolo_mioloObject *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "miololib.pyx":1656
 *                 raise Exception("Number of rows must be equal to Diagonal.cols")
 *             out = Matrix(self.ctype)
 *             if self.ctype=="int":             # <<<<<<<<<<<<<<
 *                 out.mtxInt = self.diagonalInt.rmul(drf(D.mtxInt))
 *             if self.ctype=="float":
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1656, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 1656, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_4) {

      /* "miololib.pyx":1657
 *             out = Matrix(self.ctype)
 *             if self.ctype=="int":
 *                 out.mtxInt = self.diagonalInt.rmul(drf(D.mtxInt))             # <<<<<<<<<<<<<<
 *             if self.ctype=="float":
 *                 out.mtxFloat = self.diagonalFloat.rmul(drf(D.mtxFloat))
 */
      __pyx_v_out->mtxInt = __pyx_v_self->__pyx_base.diagonalInt->rmul((*__pyx_v_D->mtxInt));

      /* "miololib.pyx":1656
 *                 raise Exception("Number of rows must be equal to Diagonal.cols")
 *             out = Matrix(self.ctype)
 *             if self.ctype=="int":             # <<<<<<<<<<<<<<
 *                 out.mtxInt = self.diagonalInt.rmul(drf(D.mtxInt))
 *             if self.ctype=="float":
 */
    }

    /* "miololib.pyx":1658
 *             if self.ctype=="int":
 *                 out.mtxInt = self.diagonalInt.rmul(drf(D.mtxInt))
 *             if self.ctype=="float":             # <<<<<<<<<<<<<<
 *                 out.mtxFloat = self.diagonalFloat.rmul(drf(D.mtxFloat))
 *             if self.ctype=="double":
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1658, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 1658, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_4) {

      /* "miololib.pyx":1659
 *                 out.mtxInt = self.diagonalInt.rmul(drf(D.mtxInt))
 *             if self.ctype=="float":
 *                 out.mtxFloat = self.diagonalFloat.rmul(drf(D.mtxFloat))             # <<<<<<<<<<<<<<
 *             if self.ctype=="double":
 *                 out.mtxDouble = self.diagonalDouble.rmul(drf(D.mtxDouble))
 */
      __pyx_v_out->mtxFloat = __pyx_v_self->__pyx_base.diagonalFloat->rmul((*__pyx_v_D->mtxFloat));

      /* "miololib.pyx":1658
 *             if self.ctype=="int":
 *                 out.mtxInt = self.diagonalInt.rmul(drf(D.mtxInt))
 *             if self.ctype=="float":             # <<<<<<<<<<<<<<
 *                 out.mtxFloat = self.diagonalFloat.rmul(drf(D.mtxFloat))
 *             if self.ctype=="double":
 */
    }

    /* "miololib.pyx":1660
 *             if self.ctype=="float":
 *                 out.mtxFloat = self.diagonalFloat.rmul(drf(D.mtxFloat))
 *             if self.ctype=="double":             # <<<<<<<<<<<<<<
 *                 out.mtxDouble = self.diagonalDouble.rmul(drf(D.mtxDouble))
 *             return out
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1660, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 1660, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_4) {

      /* "miololib.pyx":1661
 *                 out.mtxFloat = self.diagonalFloat.rmul(drf(D.mtxFloat))
 *             if self.ctype=="double":
 *                 out.mtxDouble = self.diagonalDouble.rmul(drf(D.mtxDouble))             # <<<<<<<<<<<<<<
 *             return out
 *         if isinstance(D,Graph):
 */
      __pyx_v_out->mtxDouble = __pyx_v_self->__pyx_base.diagonalDouble->rmul((*__pyx_v_D->mtxDouble));

      /* "miololib.pyx":1660
 *             if self.ctype=="float":
 *                 out.mtxFloat = self.diagonalFloat.rmul(drf(D.mtxFloat))
 *             if self.ctype=="double":             # <<<<<<<<<<<<<<
 *                 out.mtxDouble = self.diagonalDouble.rmul(drf(D.mtxDouble))
 *             return out
 */
    }

    /* "miololib.pyx":1662
 *             if self.ctype=="double":
 *                 out.mtxDouble = self.diagonalDouble.rmul(drf(D.mtxDouble))
 *             return out             # <<<<<<<<<<<<<<
 *         if isinstance(D,Graph):
 *             if (D.nodes!=self.dim):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_out);
    __pyx_r = ((PyObject *)__pyx_v_out);
    goto __pyx_L0;

    /* "miololib.pyx":1652
 *         if D.ctype!=self.ctype:
 *             raise TypeError("Objects must share same ctype.")
 *         if isinstance(D,Matrix):             # <<<<<<<<<<<<<<
 *             if (D.cols!=self.dim):
 *                 raise Exception("Number of rows must be equal to Diagonal.cols")
 */
  }

  /* "miololib.pyx":1663
 *                 out.mtxDouble = self.diagonalDouble.rmul(drf(D.mtxDouble))
 *             return out
 *         if isinstance(D,Graph):             # <<<<<<<<<<<<<<
 *             if (D.nodes!=self.dim):
 *                 raise Exception("Number of nodes must be equal to Diagonal.cols")
 */
  __pyx_t_4 = __Pyx_TypeCheck(((PyObject *)__pyx_v_D), __pyx_ptype_5miolo_Graph); 
  if (__pyx_t_4) {

    /* "miololib.pyx":1664
 *             return out
 *         if isinstance(D,Graph):
 *             if (D.nodes!=self.dim):             # <<<<<<<<<<<<<<
 *                 raise Exception("Number of nodes must be equal to Diagonal.cols")
 *             out = Digraph(self.ctype)
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_D), __pyx_n_s_nodes); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1664, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_dim); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1664, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, __pyx_t_1, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1664, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 1664, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(__pyx_t_4)) {

      /* "miololib.pyx":1665
 *         if isinstance(D,Graph):
 *             if (D.nodes!=self.dim):
 *                 raise Exception("Number of nodes must be equal to Diagonal.cols")             # <<<<<<<<<<<<<<
 *             out = Digraph(self.ctype)
 *             if self.ctype=="int":
 */
      __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__63, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1665, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(1, 1665, __pyx_L1_error)

      /* "miololib.pyx":1664
 *             return out
 *         if isinstance(D,Graph):
 *             if (D.nodes!=self.dim):             # <<<<<<<<<<<<<<
 *                 raise Exception("Number of nodes must be equal to Diagonal.cols")
 *             out = Digraph(self.ctype)
 */
    }

    /* "miololib.pyx":1666
 *             if (D.nodes!=self.dim):
 *                 raise Exception("Number of nodes must be equal to Diagonal.cols")
 *             out = Digraph(self.ctype)             # <<<<<<<<<<<<<<
 *             if self.ctype=="int":
 *                 out.digraphInt = self.diagonalInt.rmul(drf(D.graphInt))
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1666, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_5miolo_Digraph), __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1666, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_out = ((struct __pyx_obj_5miolo_mioloObject *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "miololib.pyx":1667
 *                 raise Exception("Number of nodes must be equal to Diagonal.cols")
 *             out = Digraph(self.ctype)
 *             if self.ctype=="int":             # <<<<<<<<<<<<<<
 *                 out.digraphInt = self.diagonalInt.rmul(drf(D.graphInt))
 *             if self.ctype=="float":
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1667, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 1667, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_4) {

      /* "miololib.pyx":1668
 *             out = Digraph(self.ctype)
 *             if self.ctype=="int":
 *                 out.digraphInt = self.diagonalInt.rmul(drf(D.graphInt))             # <<<<<<<<<<<<<<
 *             if self.ctype=="float":
 *                 out.digraphFloat = self.diagonalFloat.rmul(drf(D.graphFloat))
 */
      __pyx_v_out->digraphInt = __pyx_v_self->__pyx_base.diagonalInt->rmul((*__pyx_v_D->graphInt));

      /* "miololib.pyx":1667
 *                 raise Exception("Number of nodes must be equal to Diagonal.cols")
 *             out = Digraph(self.ctype)
 *             if self.ctype=="int":             # <<<<<<<<<<<<<<
 *                 out.digraphInt = self.diagonalInt.rmul(drf(D.graphInt))
 *             if self.ctype=="float":
 */
    }

    /* "miololib.pyx":1669
 *             if self.ctype=="int":
 *                 out.digraphInt = self.diagonalInt.rmul(drf(D.graphInt))
 *             if self.ctype=="float":             # <<<<<<<<<<<<<<
 *                 out.digraphFloat = self.diagonalFloat.rmul(drf(D.graphFloat))
 *             if self.ctype=="double":
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1669, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 1669, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_4) {

      /* "miololib.pyx":1670
 *                 out.digraphInt = self.diagonalInt.rmul(drf(D.graphInt))
 *             if self.ctype=="float":
 *                 out.digraphFloat = self.diagonalFloat.rmul(drf(D.graphFloat))             # <<<<<<<<<<<<<<
 *             if self.ctype=="double":
 *                 out.digraphDouble = self.diagonalDouble.rmul(drf(D.graphDouble))
 */
      __pyx_v_out->digraphFloat = __pyx_v_self->__pyx_base.diagonalFloat->rmul((*__pyx_v_D->graphFloat));

      /* "miololib.pyx":1669
 *             if self.ctype=="int":
 *                 out.digraphInt = self.diagonalInt.rmul(drf(D.graphInt))
 *             if self.ctype=="float":             # <<<<<<<<<<<<<<
 *                 out.digraphFloat = self.diagonalFloat.rmul(drf(D.graphFloat))
 *             if self.ctype=="double":
 */
    }

    /* "miololib.pyx":1671
 *             if self.ctype=="float":
 *                 out.digraphFloat = self.diagonalFloat.rmul(drf(D.graphFloat))
 *             if self.ctype=="double":             # <<<<<<<<<<<<<<
 *                 out.digraphDouble = self.diagonalDouble.rmul(drf(D.graphDouble))
 *             return out
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1671, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 1671, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_4) {

      /* "miololib.pyx":1672
 *                 out.digraphFloat = self.diagonalFloat.rmul(drf(D.graphFloat))
 *             if self.ctype=="double":
 *                 out.digraphDouble = self.diagonalDouble.rmul(drf(D.graphDouble))             # <<<<<<<<<<<<<<
 *             return out
 *         if isinstance(D,Digraph):
 */
      __pyx_v_out->digraphDouble = __pyx_v_self->__pyx_base.diagonalDouble->rmul((*__pyx_v_D->graphDouble));

      /* "miololib.pyx":1671
 *             if self.ctype=="float":
 *                 out.digraphFloat = self.diagonalFloat.rmul(drf(D.graphFloat))
 *             if self.ctype=="double":             # <<<<<<<<<<<<<<
 *                 out.digraphDouble = self.diagonalDouble.rmul(drf(D.graphDouble))
 *             return out
 */
    }

    /* "miololib.pyx":1673
 *             if self.ctype=="double":
 *                 out.digraphDouble = self.diagonalDouble.rmul(drf(D.graphDouble))
 *             return out             # <<<<<<<<<<<<<<
 *         if isinstance(D,Digraph):
 *             if (D.nodes!=self.dim):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_out);
    __pyx_r = ((PyObject *)__pyx_v_out);
    goto __pyx_L0;

    /* "miololib.pyx":1663
 *                 out.mtxDouble = self.diagonalDouble.rmul(drf(D.mtxDouble))
 *             return out
 *         if isinstance(D,Graph):             # <<<<<<<<<<<<<<
 *             if (D.nodes!=self.dim):
 *                 raise Exception("Number of nodes must be equal to Diagonal.cols")
 */
  }

  /* "miololib.pyx":1674
 *                 out.digraphDouble = self.diagonalDouble.rmul(drf(D.graphDouble))
 *             return out
 *         if isinstance(D,Digraph):             # <<<<<<<<<<<<<<
 *             if (D.nodes!=self.dim):
 *                 raise Exception("Number of nodes must be equal to Diagonal.cols")
 */
  __pyx_t_4 = __Pyx_TypeCheck(((PyObject *)__pyx_v_D), __pyx_ptype_5miolo_Digraph); 
  if (__pyx_t_4) {

    /* "miololib.pyx":1675
 *             return out
 *         if isinstance(D,Digraph):
 *             if (D.nodes!=self.dim):             # <<<<<<<<<<<<<<
 *                 raise Exception("Number of nodes must be equal to Diagonal.cols")
 *             out = Digraph(self.ctype)
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_D), __pyx_n_s_nodes); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1675, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_dim); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1675, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_t_3, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1675, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 1675, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(__pyx_t_4)) {

      /* "miololib.pyx":1676
 *         if isinstance(D,Digraph):
 *             if (D.nodes!=self.dim):
 *                 raise Exception("Number of nodes must be equal to Diagonal.cols")             # <<<<<<<<<<<<<<
 *             out = Digraph(self.ctype)
 *             if self.ctype=="int":
 */
      __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__63, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1676, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_Raise(__pyx_t_2, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __PYX_ERR(1, 1676, __pyx_L1_error)

      /* "miololib.pyx":1675
 *             return out
 *         if isinstance(D,Digraph):
 *             if (D.nodes!=self.dim):             # <<<<<<<<<<<<<<
 *                 raise Exception("Number of nodes must be equal to Diagonal.cols")
 *             out = Digraph(self.ctype)
 */
    }

    /* "miololib.pyx":1677
 *             if (D.nodes!=self.dim):
 *                 raise Exception("Number of nodes must be equal to Diagonal.cols")
 *             out = Digraph(self.ctype)             # <<<<<<<<<<<<<<
 *             if self.ctype=="int":
 *                 out.digraphInt = self.diagonalInt.rmul(drf(D.digraphInt))
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1677, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_5miolo_Digraph), __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1677, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_out = ((struct __pyx_obj_5miolo_mioloObject *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "miololib.pyx":1678
 *                 raise Exception("Number of nodes must be equal to Diagonal.cols")
 *             out = Digraph(self.ctype)
 *             if self.ctype=="int":             # <<<<<<<<<<<<<<
 *                 out.digraphInt = self.diagonalInt.rmul(drf(D.digraphInt))
 *             if self.ctype=="float":
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1678, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 1678, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_4) {

      /* "miololib.pyx":1679
 *             out = Digraph(self.ctype)
 *             if self.ctype=="int":
 *                 out.digraphInt = self.diagonalInt.rmul(drf(D.digraphInt))             # <<<<<<<<<<<<<<
 *             if self.ctype=="float":
 *                 out.digraphFloat = self.diagonalFloat.rmul(drf(D.digraphFloat))
 */
      __pyx_v_out->digraphInt = __pyx_v_self->__pyx_base.diagonalInt->rmul((*__pyx_v_D->digraphInt));

      /* "miololib.pyx":1678
 *                 raise Exception("Number of nodes must be equal to Diagonal.cols")
 *             out = Digraph(self.ctype)
 *             if self.ctype=="int":             # <<<<<<<<<<<<<<
 *                 out.digraphInt = self.diagonalInt.rmul(drf(D.digraphInt))
 *             if self.ctype=="float":
 */
    }

    /* "miololib.pyx":1680
 *             if self.ctype=="int":
 *                 out.digraphInt = self.diagonalInt.rmul(drf(D.digraphInt))
 *             if self.ctype=="float":             # <<<<<<<<<<<<<<
 *                 out.digraphFloat = self.diagonalFloat.rmul(drf(D.digraphFloat))
 *             if self.ctype=="double":
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1680, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 1680, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_4) {

      /* "miololib.pyx":1681
 *                 out.digraphInt = self.diagonalInt.rmul(drf(D.digraphInt))
 *             if self.ctype=="float":
 *                 out.digraphFloat = self.diagonalFloat.rmul(drf(D.digraphFloat))             # <<<<<<<<<<<<<<
 *             if self.ctype=="double":
 *                 out.digraphDouble = self.diagonalDouble.rmul(drf(D.digraphDouble))
 */
      __pyx_v_out->digraphFloat = __pyx_v_self->__pyx_base.diagonalFloat->rmul((*__pyx_v_D->digraphFloat));

      /* "miololib.pyx":1680
 *             if self.ctype=="int":
 *                 out.digraphInt = self.diagonalInt.rmul(drf(D.digraphInt))
 *             if self.ctype=="float":             # <<<<<<<<<<<<<<
 *                 out.digraphFloat = self.diagonalFloat.rmul(drf(D.digraphFloat))
 *             if self.ctype=="double":
 */
    }

    /* "miololib.pyx":1682
 *             if self.ctype=="float":
 *                 out.digraphFloat = self.diagonalFloat.rmul(drf(D.digraphFloat))
 *             if self.ctype=="double":             # <<<<<<<<<<<<<<
 *                 out.digraphDouble = self.diagonalDouble.rmul(drf(D.digraphDouble))
 *             return out
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1682, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 1682, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_4) {

      /* "miololib.pyx":1683
 *                 out.digraphFloat = self.diagonalFloat.rmul(drf(D.digraphFloat))
 *             if self.ctype=="double":
 *                 out.digraphDouble = self.diagonalDouble.rmul(drf(D.digraphDouble))             # <<<<<<<<<<<<<<
 *             return out
 *         if isinstance(D,Diagonal):
 */
      __pyx_v_out->digraphDouble = __pyx_v_self->__pyx_base.diagonalDouble->rmul((*__pyx_v_D->digraphDouble));

      /* "miololib.pyx":1682
 *             if self.ctype=="float":
 *                 out.digraphFloat = self.diagonalFloat.rmul(drf(D.digraphFloat))
 *             if self.ctype=="double":             # <<<<<<<<<<<<<<
 *                 out.digraphDouble = self.diagonalDouble.rmul(drf(D.digraphDouble))
 *             return out
 */
    }

    /* "miololib.pyx":1684
 *             if self.ctype=="double":
 *                 out.digraphDouble = self.diagonalDouble.rmul(drf(D.digraphDouble))
 *             return out             # <<<<<<<<<<<<<<
 *         if isinstance(D,Diagonal):
 *             if (D.dim!=self.dim):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_out);
    __pyx_r = ((PyObject *)__pyx_v_out);
    goto __pyx_L0;

    /* "miololib.pyx":1674
 *                 out.digraphDouble = self.diagonalDouble.rmul(drf(D.graphDouble))
 *             return out
 *         if isinstance(D,Digraph):             # <<<<<<<<<<<<<<
 *             if (D.nodes!=self.dim):
 *                 raise Exception("Number of nodes must be equal to Diagonal.cols")
 */
  }

  /* "miololib.pyx":1685
 *                 out.digraphDouble = self.diagonalDouble.rmul(drf(D.digraphDouble))
 *             return out
 *         if isinstance(D,Diagonal):             # <<<<<<<<<<<<<<
 *             if (D.dim!=self.dim):
 *                 raise Exception("Dimension of diagonals must be equal.")
 */
  __pyx_t_4 = __Pyx_TypeCheck(((PyObject *)__pyx_v_D), __pyx_ptype_5miolo_Diagonal); 
  if (__pyx_t_4) {

    /* "miololib.pyx":1686
 *             return out
 *         if isinstance(D,Diagonal):
 *             if (D.dim!=self.dim):             # <<<<<<<<<<<<<<
 *                 raise Exception("Dimension of diagonals must be equal.")
 *             out = Diagonal(self.ctype)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_D), __pyx_n_s_dim); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1686, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_dim); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1686, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyObject_RichCompare(__pyx_t_3, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1686, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 1686, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__pyx_t_4)) {

      /* "miololib.pyx":1687
 *         if isinstance(D,Diagonal):
 *             if (D.dim!=self.dim):
 *                 raise Exception("Dimension of diagonals must be equal.")             # <<<<<<<<<<<<<<
 *             out = Diagonal(self.ctype)
 *             if self.ctype=="int":
 */
      __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__64, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1687, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_Raise(__pyx_t_1, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __PYX_ERR(1, 1687, __pyx_L1_error)

      /* "miololib.pyx":1686
 *             return out
 *         if isinstance(D,Diagonal):
 *             if (D.dim!=self.dim):             # <<<<<<<<<<<<<<
 *                 raise Exception("Dimension of diagonals must be equal.")
 *             out = Diagonal(self.ctype)
 */
    }

    /* "miololib.pyx":1688
 *             if (D.dim!=self.dim):
 *                 raise Exception("Dimension of diagonals must be equal.")
 *             out = Diagonal(self.ctype)             # <<<<<<<<<<<<<<
 *             if self.ctype=="int":
 *                 out.diagonalInt = self.diagonalInt.mul(drf(D.diagonalInt))
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1688, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_5miolo_Diagonal), __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1688, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_out = ((struct __pyx_obj_5miolo_mioloObject *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "miololib.pyx":1689
 *                 raise Exception("Dimension of diagonals must be equal.")
 *             out = Diagonal(self.ctype)
 *             if self.ctype=="int":             # <<<<<<<<<<<<<<
 *                 out.diagonalInt = self.diagonalInt.mul(drf(D.diagonalInt))
 *             if self.ctype=="float":
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1689, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 1689, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_4) {

      /* "miololib.pyx":1690
 *             out = Diagonal(self.ctype)
 *             if self.ctype=="int":
 *                 out.diagonalInt = self.diagonalInt.mul(drf(D.diagonalInt))             # <<<<<<<<<<<<<<
 *             if self.ctype=="float":
 *                 out.diagonalFloat = self.diagonalFloat.mul(drf(D.diagonalFloat))
 */
      __pyx_v_out->diagonalInt = __pyx_v_self->__pyx_base.diagonalInt->mul((*__pyx_v_D->diagonalInt));

      /* "miololib.pyx":1689
 *                 raise Exception("Dimension of diagonals must be equal.")
 *             out = Diagonal(self.ctype)
 *             if self.ctype=="int":             # <<<<<<<<<<<<<<
 *                 out.diagonalInt = self.diagonalInt.mul(drf(D.diagonalInt))
 *             if self.ctype=="float":
 */
    }

    /* "miololib.pyx":1691
 *             if self.ctype=="int":
 *                 out.diagonalInt = self.diagonalInt.mul(drf(D.diagonalInt))
 *             if self.ctype=="float":             # <<<<<<<<<<<<<<
 *                 out.diagonalFloat = self.diagonalFloat.mul(drf(D.diagonalFloat))
 *             if self.ctype=="double":
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1691, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 1691, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_4) {

      /* "miololib.pyx":1692
 *                 out.diagonalInt = self.diagonalInt.mul(drf(D.diagonalInt))
 *             if self.ctype=="float":
 *                 out.diagonalFloat = self.diagonalFloat.mul(drf(D.diagonalFloat))             # <<<<<<<<<<<<<<
 *             if self.ctype=="double":
 *                 out.diagonalDouble = self.diagonalDouble.mul(drf(D.diagonalDouble))
 */
      __pyx_v_out->diagonalFloat = __pyx_v_self->__pyx_base.diagonalFloat->mul((*__pyx_v_D->diagonalFloat));

      /* "miololib.pyx":1691
 *             if self.ctype=="int":
 *                 out.diagonalInt = self.diagonalInt.mul(drf(D.diagonalInt))
 *             if self.ctype=="float":             # <<<<<<<<<<<<<<
 *                 out.diagonalFloat = self.diagonalFloat.mul(drf(D.diagonalFloat))
 *             if self.ctype=="double":
 */
    }

    /* "miololib.pyx":1693
 *             if self.ctype=="float":
 *                 out.diagonalFloat = self.diagonalFloat.mul(drf(D.diagonalFloat))
 *             if self.ctype=="double":             # <<<<<<<<<<<<<<
 *                 out.diagonalDouble = self.diagonalDouble.mul(drf(D.diagonalDouble))
 *             return out
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1693, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 1693, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_4) {

      /* "miololib.pyx":1694
 *                 out.diagonalFloat = self.diagonalFloat.mul(drf(D.diagonalFloat))
 *             if self.ctype=="double":
 *                 out.diagonalDouble = self.diagonalDouble.mul(drf(D.diagonalDouble))             # <<<<<<<<<<<<<<
 *             return out
 * 
 */
      __pyx_v_out->diagonalDouble = __pyx_v_self->__pyx_base.diagonalDouble->mul((*__pyx_v_D->diagonalDouble));

      /* "miololib.pyx":1693
 *             if self.ctype=="float":
 *                 out.diagonalFloat = self.diagonalFloat.mul(drf(D.diagonalFloat))
 *             if self.ctype=="double":             # <<<<<<<<<<<<<<
 *                 out.diagonalDouble = self.diagonalDouble.mul(drf(D.diagonalDouble))
 *             return out
 */
    }

    /* "miololib.pyx":1695
 *             if self.ctype=="double":
 *                 out.diagonalDouble = self.diagonalDouble.mul(drf(D.diagonalDouble))
 *             return out             # <<<<<<<<<<<<<<
 * 
 *     def __mul__(self, value):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_out);
    __pyx_r = ((PyObject *)__pyx_v_out);
    goto __pyx_L0;

    /* "miololib.pyx":1685
 *                 out.digraphDouble = self.diagonalDouble.rmul(drf(D.digraphDouble))
 *             return out
 *         if isinstance(D,Diagonal):             # <<<<<<<<<<<<<<
 *             if (D.dim!=self.dim):
 *                 raise Exception("Dimension of diagonals must be equal.")
 */
  }

  /* "miololib.pyx":1649
 *             return out
 * 
 *     def __rand__(self, mioloObject D):             # <<<<<<<<<<<<<<
 *         if D.ctype!=self.ctype:
 *             raise TypeError("Objects must share same ctype.")
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("miolo.Diagonal.__rand__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":1697
 *             return out
 * 
 *     def __mul__(self, value):             # <<<<<<<<<<<<<<
 *         out = Diagonal(ctype=self.ctype)
 *         if self.ctype=="int":
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_8Diagonal_19__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static PyObject *__pyx_pw_5miolo_8Diagonal_19__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__mul__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5miolo_8Diagonal_18__mul__(((struct __pyx_obj_5miolo_Diagonal *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_8Diagonal_18__mul__(struct __pyx_obj_5miolo_Diagonal *__pyx_v_self, PyObject *__pyx_v_value) {
  struct __pyx_obj_5miolo_Diagonal *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  float __pyx_t_5;
  double __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__mul__", 1);

  /* "miololib.pyx":1698
 * 
 *     def __mul__(self, value):
 *         out = Diagonal(ctype=self.ctype)             # <<<<<<<<<<<<<<
 *         if self.ctype=="int":
 *             out.diagonalInt = self.diagonalInt.smul(value)
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1698, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1698, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ctype, __pyx_t_2) < 0) __PYX_ERR(1, 1698, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Diagonal), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1698, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_out = ((struct __pyx_obj_5miolo_Diagonal *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "miololib.pyx":1699
 *     def __mul__(self, value):
 *         out = Diagonal(ctype=self.ctype)
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.diagonalInt = self.diagonalInt.smul(value)
 *         if self.ctype=="float":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1699, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1699, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":1700
 *         out = Diagonal(ctype=self.ctype)
 *         if self.ctype=="int":
 *             out.diagonalInt = self.diagonalInt.smul(value)             # <<<<<<<<<<<<<<
 *         if self.ctype=="float":
 *             out.diagonalFloat = self.diagonalFloat.smul(value)
 */
    __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1700, __pyx_L1_error)
    __pyx_v_out->__pyx_base.diagonalInt = __pyx_v_self->__pyx_base.diagonalInt->smul(__pyx_t_4);

    /* "miololib.pyx":1699
 *     def __mul__(self, value):
 *         out = Diagonal(ctype=self.ctype)
 *         if self.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.diagonalInt = self.diagonalInt.smul(value)
 *         if self.ctype=="float":
 */
  }

  /* "miololib.pyx":1701
 *         if self.ctype=="int":
 *             out.diagonalInt = self.diagonalInt.smul(value)
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.diagonalFloat = self.diagonalFloat.smul(value)
 *         if self.ctype=="double":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1701, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1701, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":1702
 *             out.diagonalInt = self.diagonalInt.smul(value)
 *         if self.ctype=="float":
 *             out.diagonalFloat = self.diagonalFloat.smul(value)             # <<<<<<<<<<<<<<
 *         if self.ctype=="double":
 *             out.diagonalDouble = self.diagonalDouble.smul(value)
 */
    __pyx_t_5 = __pyx_PyFloat_AsFloat(__pyx_v_value); if (unlikely((__pyx_t_5 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 1702, __pyx_L1_error)
    __pyx_v_out->__pyx_base.diagonalFloat = __pyx_v_self->__pyx_base.diagonalFloat->smul(__pyx_t_5);

    /* "miololib.pyx":1701
 *         if self.ctype=="int":
 *             out.diagonalInt = self.diagonalInt.smul(value)
 *         if self.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.diagonalFloat = self.diagonalFloat.smul(value)
 *         if self.ctype=="double":
 */
  }

  /* "miololib.pyx":1703
 *         if self.ctype=="float":
 *             out.diagonalFloat = self.diagonalFloat.smul(value)
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.diagonalDouble = self.diagonalDouble.smul(value)
 *         return out
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1703, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1703, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":1704
 *             out.diagonalFloat = self.diagonalFloat.smul(value)
 *         if self.ctype=="double":
 *             out.diagonalDouble = self.diagonalDouble.smul(value)             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
    __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1704, __pyx_L1_error)
    __pyx_v_out->__pyx_base.diagonalDouble = __pyx_v_self->__pyx_base.diagonalDouble->smul(__pyx_t_6);

    /* "miololib.pyx":1703
 *         if self.ctype=="float":
 *             out.diagonalFloat = self.diagonalFloat.smul(value)
 *         if self.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.diagonalDouble = self.diagonalDouble.smul(value)
 *         return out
 */
  }

  /* "miololib.pyx":1705
 *         if self.ctype=="double":
 *             out.diagonalDouble = self.diagonalDouble.smul(value)
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     def __truediv__(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_out);
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "miololib.pyx":1697
 *             return out
 * 
 *     def __mul__(self, value):             # <<<<<<<<<<<<<<
 *         out = Diagonal(ctype=self.ctype)
 *         if self.ctype=="int":
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("miolo.Diagonal.__mul__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":1707
 *         return out
 * 
 *     def __truediv__(self, value):             # <<<<<<<<<<<<<<
 *         if (value==0):
 *             raise ValueError("Cannot divide by zero.")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_8Diagonal_21__truediv__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static PyObject *__pyx_pw_5miolo_8Diagonal_21__truediv__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__truediv__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5miolo_8Diagonal_20__truediv__(((struct __pyx_obj_5miolo_Diagonal *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_8Diagonal_20__truediv__(struct __pyx_obj_5miolo_Diagonal *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__truediv__", 1);

  /* "miololib.pyx":1708
 * 
 *     def __truediv__(self, value):
 *         if (value==0):             # <<<<<<<<<<<<<<
 *             raise ValueError("Cannot divide by zero.")
 *         return self*(1/value)
 */
  __pyx_t_1 = (__Pyx_PyInt_BoolEqObjC(__pyx_v_value, __pyx_int_0, 0, 0)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 1708, __pyx_L1_error)
  if (unlikely(__pyx_t_1)) {

    /* "miololib.pyx":1709
 *     def __truediv__(self, value):
 *         if (value==0):
 *             raise ValueError("Cannot divide by zero.")             # <<<<<<<<<<<<<<
 *         return self*(1/value)
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__65, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1709, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 1709, __pyx_L1_error)

    /* "miololib.pyx":1708
 * 
 *     def __truediv__(self, value):
 *         if (value==0):             # <<<<<<<<<<<<<<
 *             raise ValueError("Cannot divide by zero.")
 *         return self*(1/value)
 */
  }

  /* "miololib.pyx":1710
 *         if (value==0):
 *             raise ValueError("Cannot divide by zero.")
 *         return self*(1/value)             # <<<<<<<<<<<<<<
 * 
 * #-------------------------------------------------------------------------------
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_int_1, __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1710, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Multiply(((PyObject *)__pyx_v_self), __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1710, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "miololib.pyx":1707
 *         return out
 * 
 *     def __truediv__(self, value):             # <<<<<<<<<<<<<<
 *         if (value==0):
 *             raise ValueError("Cannot divide by zero.")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("miolo.Diagonal.__truediv__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_8Diagonal_23__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_8Diagonal_22__reduce_cython__, "Diagonal.__reduce_cython__(self)");
static PyMethodDef __pyx_mdef_5miolo_8Diagonal_23__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_8Diagonal_23__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_8Diagonal_22__reduce_cython__};
static PyObject *__pyx_pw_5miolo_8Diagonal_23__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_5miolo_8Diagonal_22__reduce_cython__(((struct __pyx_obj_5miolo_Diagonal *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_8Diagonal_22__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_Diagonal *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("miolo.Diagonal.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_8Diagonal_25__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_8Diagonal_24__setstate_cython__, "Diagonal.__setstate_cython__(self, __pyx_state)");
static PyMethodDef __pyx_mdef_5miolo_8Diagonal_25__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_8Diagonal_25__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_8Diagonal_24__setstate_cython__};
static PyObject *__pyx_pw_5miolo_8Diagonal_25__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(0, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.Diagonal.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5miolo_8Diagonal_24__setstate_cython__(((struct __pyx_obj_5miolo_Diagonal *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_8Diagonal_24__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_Diagonal *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("miolo.Diagonal.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":1718
 * #-------------------------------------------------------------------------------
 * 
 * def txtMatrix(filename,ctype=global_ctype):             # <<<<<<<<<<<<<<
 *     """
 *         Loads Matrix from txt file. Uses numpy.
 */

static PyObject *__pyx_pf_5miolo_14__defaults__(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__defaults__", 1);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1718, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__Pyx_CyFunction_Defaults(__pyx_defaults, __pyx_self)->__pyx_arg_ctype);
  __Pyx_GIVEREF(__Pyx_CyFunction_Defaults(__pyx_defaults, __pyx_self)->__pyx_arg_ctype);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __Pyx_CyFunction_Defaults(__pyx_defaults, __pyx_self)->__pyx_arg_ctype)) __PYX_ERR(1, 1718, __pyx_L1_error);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1718, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1)) __PYX_ERR(1, 1718, __pyx_L1_error);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 1, Py_None)) __PYX_ERR(1, 1718, __pyx_L1_error);
  __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("miolo.__defaults__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_9txtMatrix(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_8txtMatrix, "txtMatrix(filename, ctype=global_ctype)\n\n        Loads Matrix from txt file. Uses numpy.\n    ");
static PyMethodDef __pyx_mdef_5miolo_9txtMatrix = {"txtMatrix", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_9txtMatrix, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_8txtMatrix};
static PyObject *__pyx_pw_5miolo_9txtMatrix(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_v_ctype = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("txtMatrix (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_filename,&__pyx_n_s_ctype,0};
    __pyx_defaults *__pyx_dynamic_args = __Pyx_CyFunction_Defaults(__pyx_defaults, __pyx_self);
    values[1] = __Pyx_Arg_NewRef_FASTCALL(__pyx_dynamic_args->__pyx_arg_ctype);
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_filename)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1718, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_ctype);
          if (value) { values[1] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1718, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "txtMatrix") < 0)) __PYX_ERR(1, 1718, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_filename = values[0];
    __pyx_v_ctype = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("txtMatrix", 0, 1, 2, __pyx_nargs); __PYX_ERR(1, 1718, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.txtMatrix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5miolo_8txtMatrix(__pyx_self, __pyx_v_filename, __pyx_v_ctype);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_8txtMatrix(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_ctype) {
  PyObject *__pyx_v_m = NULL;
  struct __pyx_obj_5miolo_Matrix *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("txtMatrix", 1);

  /* "miololib.pyx":1722
 *         Loads Matrix from txt file. Uses numpy.
 *     """
 *     m = np.loadtxt(filename)             # <<<<<<<<<<<<<<
 *     out = Matrix(m.shape[0],m.shape[1],0,ctype)
 *     out.numpy = m
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1722, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_loadtxt); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1722, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_filename};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1722, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_v_m = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "miololib.pyx":1723
 *     """
 *     m = np.loadtxt(filename)
 *     out = Matrix(m.shape[0],m.shape[1],0,ctype)             # <<<<<<<<<<<<<<
 *     out.numpy = m
 *     return out
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_m, __pyx_n_s_shape); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1723, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1723, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_m, __pyx_n_s_shape); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1723, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1723, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1723, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3)) __PYX_ERR(1, 1723, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_2);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2)) __PYX_ERR(1, 1723, __pyx_L1_error);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_int_0)) __PYX_ERR(1, 1723, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_ctype);
  __Pyx_GIVEREF(__pyx_v_ctype);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_v_ctype)) __PYX_ERR(1, 1723, __pyx_L1_error);
  __pyx_t_3 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Matrix), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1723, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_out = ((struct __pyx_obj_5miolo_Matrix *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "miololib.pyx":1724
 *     m = np.loadtxt(filename)
 *     out = Matrix(m.shape[0],m.shape[1],0,ctype)
 *     out.numpy = m             # <<<<<<<<<<<<<<
 *     return out
 * 
 */
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_numpy, __pyx_v_m) < 0) __PYX_ERR(1, 1724, __pyx_L1_error)

  /* "miololib.pyx":1725
 *     out = Matrix(m.shape[0],m.shape[1],0,ctype)
 *     out.numpy = m
 *     return out             # <<<<<<<<<<<<<<
 * 
 * def txtGraph(filename,ctype=global_ctype):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_out);
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "miololib.pyx":1718
 * #-------------------------------------------------------------------------------
 * 
 * def txtMatrix(filename,ctype=global_ctype):             # <<<<<<<<<<<<<<
 *     """
 *         Loads Matrix from txt file. Uses numpy.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("miolo.txtMatrix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_m);
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":1727
 *     return out
 * 
 * def txtGraph(filename,ctype=global_ctype):             # <<<<<<<<<<<<<<
 *     """
 *         Loads Graph from txt file. Uses numpy.
 */

static PyObject *__pyx_pf_5miolo_16__defaults__(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__defaults__", 1);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1727, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__Pyx_CyFunction_Defaults(__pyx_defaults1, __pyx_self)->__pyx_arg_ctype);
  __Pyx_GIVEREF(__Pyx_CyFunction_Defaults(__pyx_defaults1, __pyx_self)->__pyx_arg_ctype);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __Pyx_CyFunction_Defaults(__pyx_defaults1, __pyx_self)->__pyx_arg_ctype)) __PYX_ERR(1, 1727, __pyx_L1_error);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1727, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1)) __PYX_ERR(1, 1727, __pyx_L1_error);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 1, Py_None)) __PYX_ERR(1, 1727, __pyx_L1_error);
  __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("miolo.__defaults__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_11txtGraph(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_10txtGraph, "txtGraph(filename, ctype=global_ctype)\n\n        Loads Graph from txt file. Uses numpy.\n        It is expected a file consisting of rows of triplets (i,j,w), the two\n        first being unsigned integers and w the weight of corresponde edge.\n    ");
static PyMethodDef __pyx_mdef_5miolo_11txtGraph = {"txtGraph", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_11txtGraph, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_10txtGraph};
static PyObject *__pyx_pw_5miolo_11txtGraph(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_v_ctype = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("txtGraph (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_filename,&__pyx_n_s_ctype,0};
    __pyx_defaults1 *__pyx_dynamic_args = __Pyx_CyFunction_Defaults(__pyx_defaults1, __pyx_self);
    values[1] = __Pyx_Arg_NewRef_FASTCALL(__pyx_dynamic_args->__pyx_arg_ctype);
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_filename)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1727, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_ctype);
          if (value) { values[1] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1727, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "txtGraph") < 0)) __PYX_ERR(1, 1727, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_filename = values[0];
    __pyx_v_ctype = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("txtGraph", 0, 1, 2, __pyx_nargs); __PYX_ERR(1, 1727, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.txtGraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5miolo_10txtGraph(__pyx_self, __pyx_v_filename, __pyx_v_ctype);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_10txtGraph(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_ctype) {
  PyObject *__pyx_v_g = NULL;
  PyObject *__pyx_v_max_0 = NULL;
  PyObject *__pyx_v_max_1 = NULL;
  PyObject *__pyx_v_N = NULL;
  Py_ssize_t __pyx_v_E;
  struct __pyx_obj_5miolo_Graph *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("txtGraph", 1);

  /* "miololib.pyx":1733
 *         first being unsigned integers and w the weight of corresponde edge.
 *     """
 *     g = np.transpose(np.loadtxt(filename))             # <<<<<<<<<<<<<<
 *     max_0 = max(g[0])
 *     max_1 = max(g[1])
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1733, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_transpose); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1733, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1733, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_loadtxt); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1733, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  __pyx_t_6 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_6 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_filename};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1733, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_6 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_2};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1733, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_v_g = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "miololib.pyx":1734
 *     """
 *     g = np.transpose(np.loadtxt(filename))
 *     max_0 = max(g[0])             # <<<<<<<<<<<<<<
 *     max_1 = max(g[1])
 *     N = max([max_0,max_1])+1
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_g, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1734, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_max, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1734, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_max_0 = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "miololib.pyx":1735
 *     g = np.transpose(np.loadtxt(filename))
 *     max_0 = max(g[0])
 *     max_1 = max(g[1])             # <<<<<<<<<<<<<<
 *     N = max([max_0,max_1])+1
 *     E = len(g[0])
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_g, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1735, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_max, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1735, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_max_1 = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "miololib.pyx":1736
 *     max_0 = max(g[0])
 *     max_1 = max(g[1])
 *     N = max([max_0,max_1])+1             # <<<<<<<<<<<<<<
 *     E = len(g[0])
 *     out = Graph(N,E,ctype)
 */
  __Pyx_INCREF(__pyx_v_max_1);
  __pyx_t_1 = __pyx_v_max_1;
  __Pyx_INCREF(__pyx_v_max_0);
  __pyx_t_3 = __pyx_v_max_0;
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_1, __pyx_t_3, Py_GT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1736, __pyx_L1_error)
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(1, 1736, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_7) {
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_2 = __pyx_t_1;
  } else {
    __Pyx_INCREF(__pyx_t_3);
    __pyx_t_2 = __pyx_t_3;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_AddObjC(__pyx_t_2, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1736, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_N = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "miololib.pyx":1737
 *     max_1 = max(g[1])
 *     N = max([max_0,max_1])+1
 *     E = len(g[0])             # <<<<<<<<<<<<<<
 *     out = Graph(N,E,ctype)
 *     out.structure = np.transpose(g[0:2])
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_g, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1737, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1737, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_E = __pyx_t_8;

  /* "miololib.pyx":1738
 *     N = max([max_0,max_1])+1
 *     E = len(g[0])
 *     out = Graph(N,E,ctype)             # <<<<<<<<<<<<<<
 *     out.structure = np.transpose(g[0:2])
 *     out.weights = g[2]
 */
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_E); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1738, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1738, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_N);
  __Pyx_GIVEREF(__pyx_v_N);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_N)) __PYX_ERR(1, 1738, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1)) __PYX_ERR(1, 1738, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_ctype);
  __Pyx_GIVEREF(__pyx_v_ctype);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_ctype)) __PYX_ERR(1, 1738, __pyx_L1_error);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Graph), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1738, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_out = ((struct __pyx_obj_5miolo_Graph *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "miololib.pyx":1739
 *     E = len(g[0])
 *     out = Graph(N,E,ctype)
 *     out.structure = np.transpose(g[0:2])             # <<<<<<<<<<<<<<
 *     out.weights = g[2]
 *     return out
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1739, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_transpose); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1739, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetSlice(__pyx_v_g, 0, 2, NULL, NULL, &__pyx_slice__66, 1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1739, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_6 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_2};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1739, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_structure, __pyx_t_1) < 0) __PYX_ERR(1, 1739, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "miololib.pyx":1740
 *     out = Graph(N,E,ctype)
 *     out.structure = np.transpose(g[0:2])
 *     out.weights = g[2]             # <<<<<<<<<<<<<<
 *     return out
 * 
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_g, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1740, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_weights, __pyx_t_1) < 0) __PYX_ERR(1, 1740, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "miololib.pyx":1741
 *     out.structure = np.transpose(g[0:2])
 *     out.weights = g[2]
 *     return out             # <<<<<<<<<<<<<<
 * 
 * #-------------------------------------------------------------------------------
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_out);
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "miololib.pyx":1727
 *     return out
 * 
 * def txtGraph(filename,ctype=global_ctype):             # <<<<<<<<<<<<<<
 *     """
 *         Loads Graph from txt file. Uses numpy.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("miolo.txtGraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_g);
  __Pyx_XDECREF(__pyx_v_max_0);
  __Pyx_XDECREF(__pyx_v_max_1);
  __Pyx_XDECREF(__pyx_v_N);
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_8Manifold_1__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_8Manifold___reduce_cython__, "Manifold.__reduce_cython__(self)");
static PyMethodDef __pyx_mdef_5miolo_8Manifold_1__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_8Manifold_1__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_8Manifold___reduce_cython__};
static PyObject *__pyx_pw_5miolo_8Manifold_1__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_5miolo_8Manifold___reduce_cython__(((struct __pyx_obj_5miolo_Manifold *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_8Manifold___reduce_cython__(struct __pyx_obj_5miolo_Manifold *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = ()             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __Pyx_INCREF(__pyx_empty_tuple);
  __pyx_v_state = __pyx_empty_tuple;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":7
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  if (__pyx_t_2) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict)) __PYX_ERR(0, 8, __pyx_L1_error);
    __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = False
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = False             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_Manifold, (type(self), 0xe3b0c44, None), state
 */
  /*else*/ {
    __pyx_v_use_setstate = 0;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Manifold, (type(self), 0xe3b0c44, None), state
 *     else:
 */
  if (__pyx_v_use_setstate) {

    /* "(tree fragment)":13
 *         use_setstate = False
 *     if use_setstate:
 *         return __pyx_unpickle_Manifold, (type(self), 0xe3b0c44, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_Manifold, (type(self), 0xe3b0c44, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_pyx_unpickle_Manifold); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))))) __PYX_ERR(0, 13, __pyx_L1_error);
    __Pyx_INCREF(__pyx_int_238750788);
    __Pyx_GIVEREF(__pyx_int_238750788);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_238750788)) __PYX_ERR(0, 13, __pyx_L1_error);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None)) __PYX_ERR(0, 13, __pyx_L1_error);
    __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_3);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3)) __PYX_ERR(0, 13, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_1);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1)) __PYX_ERR(0, 13, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_v_state)) __PYX_ERR(0, 13, __pyx_L1_error);
    __pyx_t_3 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Manifold, (type(self), 0xe3b0c44, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_Manifold, (type(self), 0xe3b0c44, None), state
 *     else:
 *         return __pyx_unpickle_Manifold, (type(self), 0xe3b0c44, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Manifold__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_Manifold); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))))) __PYX_ERR(0, 15, __pyx_L1_error);
    __Pyx_INCREF(__pyx_int_238750788);
    __Pyx_GIVEREF(__pyx_int_238750788);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_238750788)) __PYX_ERR(0, 15, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state)) __PYX_ERR(0, 15, __pyx_L1_error);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4)) __PYX_ERR(0, 15, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_1);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1)) __PYX_ERR(0, 15, __pyx_L1_error);
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("miolo.Manifold.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Manifold, (type(self), 0xe3b0c44, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Manifold__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_8Manifold_3__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_8Manifold_2__setstate_cython__, "Manifold.__setstate_cython__(self, __pyx_state)");
static PyMethodDef __pyx_mdef_5miolo_8Manifold_3__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_8Manifold_3__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_8Manifold_2__setstate_cython__};
static PyObject *__pyx_pw_5miolo_8Manifold_3__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 16, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(0, 16, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 16, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.Manifold.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5miolo_8Manifold_2__setstate_cython__(((struct __pyx_obj_5miolo_Manifold *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_8Manifold_2__setstate_cython__(struct __pyx_obj_5miolo_Manifold *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_Manifold, (type(self), 0xe3b0c44, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Manifold__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v___pyx_state))) __PYX_ERR(0, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_5miolo___pyx_unpickle_Manifold__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Manifold, (type(self), 0xe3b0c44, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Manifold__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("miolo.Manifold.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":1756
 *     cdef mld.euclidean view
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static int __pyx_pw_5miolo_9Euclidean_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5miolo_9Euclidean_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, __pyx_nargs); return -1;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_VARARGS(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_5miolo_9Euclidean___init__(((struct __pyx_obj_5miolo_Euclidean *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5miolo_9Euclidean___init__(CYTHON_UNUSED struct __pyx_obj_5miolo_Euclidean *__pyx_v_self) {
  int __pyx_r;

  /* function exit code */
  __pyx_r = 0;
  return __pyx_r;
}

/* "miololib.pyx":1759
 *         pass
 * 
 *     def dot(self, Matrix A):             # <<<<<<<<<<<<<<
 *         """
 *             Dot product between rows of A. This is different from miolo.dot,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_9Euclidean_3dot(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_9Euclidean_2dot, "Euclidean.dot(self, Matrix A)\n\n            Dot product between rows of A. This is different from miolo.dot, \n            that computes the frobenius dot product between matrices.\n        ");
static PyMethodDef __pyx_mdef_5miolo_9Euclidean_3dot = {"dot", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_9Euclidean_3dot, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_9Euclidean_2dot};
static PyObject *__pyx_pw_5miolo_9Euclidean_3dot(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_A = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dot (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_A,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_A)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1759, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "dot") < 0)) __PYX_ERR(1, 1759, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_A = ((struct __pyx_obj_5miolo_Matrix *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("dot", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 1759, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.Euclidean.dot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_A), __pyx_ptype_5miolo_Matrix, 1, "A", 0))) __PYX_ERR(1, 1759, __pyx_L1_error)
  __pyx_r = __pyx_pf_5miolo_9Euclidean_2dot(((struct __pyx_obj_5miolo_Euclidean *)__pyx_v_self), __pyx_v_A);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_9Euclidean_2dot(struct __pyx_obj_5miolo_Euclidean *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_A) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("dot", 1);

  /* "miololib.pyx":1764
 *             that computes the frobenius dot product between matrices.
 *         """
 *         out = Matrix(ctype=A.ctype)             # <<<<<<<<<<<<<<
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.dot(drf(A.mtxInt))
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1764, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_A), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1764, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ctype, __pyx_t_2) < 0) __PYX_ERR(1, 1764, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Matrix), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1764, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_out = ((struct __pyx_obj_5miolo_Matrix *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "miololib.pyx":1765
 *         """
 *         out = Matrix(ctype=A.ctype)
 *         if out.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.mtxInt = self.view.dot(drf(A.mtxInt))
 *         if out.ctype=="float":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1765, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1765, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":1766
 *         out = Matrix(ctype=A.ctype)
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.dot(drf(A.mtxInt))             # <<<<<<<<<<<<<<
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.dot(drf(A.mtxFloat))
 */
    __pyx_v_out->__pyx_base.mtxInt = __pyx_v_self->view.dot((*__pyx_v_A->__pyx_base.mtxInt));

    /* "miololib.pyx":1765
 *         """
 *         out = Matrix(ctype=A.ctype)
 *         if out.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.mtxInt = self.view.dot(drf(A.mtxInt))
 *         if out.ctype=="float":
 */
  }

  /* "miololib.pyx":1767
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.dot(drf(A.mtxInt))
 *         if out.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.mtxFloat = self.view.dot(drf(A.mtxFloat))
 *         if out.ctype=="double":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1767, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1767, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":1768
 *             out.mtxInt = self.view.dot(drf(A.mtxInt))
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.dot(drf(A.mtxFloat))             # <<<<<<<<<<<<<<
 *         if out.ctype=="double":
 *             out.mtxDouble = self.view.dot(drf(A.mtxDouble))
 */
    __pyx_v_out->__pyx_base.mtxFloat = __pyx_v_self->view.dot((*__pyx_v_A->__pyx_base.mtxFloat));

    /* "miololib.pyx":1767
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.dot(drf(A.mtxInt))
 *         if out.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.mtxFloat = self.view.dot(drf(A.mtxFloat))
 *         if out.ctype=="double":
 */
  }

  /* "miololib.pyx":1769
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.dot(drf(A.mtxFloat))
 *         if out.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.mtxDouble = self.view.dot(drf(A.mtxDouble))
 *         return out
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1769, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1769, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":1770
 *             out.mtxFloat = self.view.dot(drf(A.mtxFloat))
 *         if out.ctype=="double":
 *             out.mtxDouble = self.view.dot(drf(A.mtxDouble))             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
    __pyx_v_out->__pyx_base.mtxDouble = __pyx_v_self->view.dot((*__pyx_v_A->__pyx_base.mtxDouble));

    /* "miololib.pyx":1769
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.dot(drf(A.mtxFloat))
 *         if out.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.mtxDouble = self.view.dot(drf(A.mtxDouble))
 *         return out
 */
  }

  /* "miololib.pyx":1771
 *         if out.ctype=="double":
 *             out.mtxDouble = self.view.dot(drf(A.mtxDouble))
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     def distance(self, Matrix A):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_out);
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "miololib.pyx":1759
 *         pass
 * 
 *     def dot(self, Matrix A):             # <<<<<<<<<<<<<<
 *         """
 *             Dot product between rows of A. This is different from miolo.dot,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("miolo.Euclidean.dot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":1773
 *         return out
 * 
 *     def distance(self, Matrix A):             # <<<<<<<<<<<<<<
 *         """
 *             Euclidean distance between rows of A.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_9Euclidean_5distance(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_9Euclidean_4distance, "Euclidean.distance(self, Matrix A)\n\n            Euclidean distance between rows of A.\n        ");
static PyMethodDef __pyx_mdef_5miolo_9Euclidean_5distance = {"distance", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_9Euclidean_5distance, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_9Euclidean_4distance};
static PyObject *__pyx_pw_5miolo_9Euclidean_5distance(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_A = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("distance (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_A,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_A)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1773, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "distance") < 0)) __PYX_ERR(1, 1773, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_A = ((struct __pyx_obj_5miolo_Matrix *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("distance", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 1773, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.Euclidean.distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_A), __pyx_ptype_5miolo_Matrix, 1, "A", 0))) __PYX_ERR(1, 1773, __pyx_L1_error)
  __pyx_r = __pyx_pf_5miolo_9Euclidean_4distance(((struct __pyx_obj_5miolo_Euclidean *)__pyx_v_self), __pyx_v_A);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_9Euclidean_4distance(struct __pyx_obj_5miolo_Euclidean *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_A) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("distance", 1);

  /* "miololib.pyx":1777
 *             Euclidean distance between rows of A.
 *         """
 *         out = Matrix(ctype=A.ctype)             # <<<<<<<<<<<<<<
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.distance(drf(A.mtxInt))
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1777, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_A), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1777, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ctype, __pyx_t_2) < 0) __PYX_ERR(1, 1777, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Matrix), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1777, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_out = ((struct __pyx_obj_5miolo_Matrix *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "miololib.pyx":1778
 *         """
 *         out = Matrix(ctype=A.ctype)
 *         if out.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.mtxInt = self.view.distance(drf(A.mtxInt))
 *         if out.ctype=="float":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1778, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1778, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":1779
 *         out = Matrix(ctype=A.ctype)
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.distance(drf(A.mtxInt))             # <<<<<<<<<<<<<<
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.distance(drf(A.mtxFloat))
 */
    __pyx_v_out->__pyx_base.mtxInt = __pyx_v_self->view.distance((*__pyx_v_A->__pyx_base.mtxInt));

    /* "miololib.pyx":1778
 *         """
 *         out = Matrix(ctype=A.ctype)
 *         if out.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.mtxInt = self.view.distance(drf(A.mtxInt))
 *         if out.ctype=="float":
 */
  }

  /* "miololib.pyx":1780
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.distance(drf(A.mtxInt))
 *         if out.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.mtxFloat = self.view.distance(drf(A.mtxFloat))
 *         if out.ctype=="double":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1780, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1780, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":1781
 *             out.mtxInt = self.view.distance(drf(A.mtxInt))
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.distance(drf(A.mtxFloat))             # <<<<<<<<<<<<<<
 *         if out.ctype=="double":
 *             out.mtxDouble = self.view.distance(drf(A.mtxDouble))
 */
    __pyx_v_out->__pyx_base.mtxFloat = __pyx_v_self->view.distance((*__pyx_v_A->__pyx_base.mtxFloat));

    /* "miololib.pyx":1780
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.distance(drf(A.mtxInt))
 *         if out.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.mtxFloat = self.view.distance(drf(A.mtxFloat))
 *         if out.ctype=="double":
 */
  }

  /* "miololib.pyx":1782
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.distance(drf(A.mtxFloat))
 *         if out.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.mtxDouble = self.view.distance(drf(A.mtxDouble))
 *         return out
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1782, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1782, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":1783
 *             out.mtxFloat = self.view.distance(drf(A.mtxFloat))
 *         if out.ctype=="double":
 *             out.mtxDouble = self.view.distance(drf(A.mtxDouble))             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
    __pyx_v_out->__pyx_base.mtxDouble = __pyx_v_self->view.distance((*__pyx_v_A->__pyx_base.mtxDouble));

    /* "miololib.pyx":1782
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.distance(drf(A.mtxFloat))
 *         if out.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.mtxDouble = self.view.distance(drf(A.mtxDouble))
 *         return out
 */
  }

  /* "miololib.pyx":1784
 *         if out.ctype=="double":
 *             out.mtxDouble = self.view.distance(drf(A.mtxDouble))
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     def mean(self, Matrix A):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_out);
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "miololib.pyx":1773
 *         return out
 * 
 *     def distance(self, Matrix A):             # <<<<<<<<<<<<<<
 *         """
 *             Euclidean distance between rows of A.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("miolo.Euclidean.distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":1786
 *         return out
 * 
 *     def mean(self, Matrix A):             # <<<<<<<<<<<<<<
 *         """
 *             Returns a row Matrix which is the mean of the rows of A.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_9Euclidean_7mean(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_9Euclidean_6mean, "Euclidean.mean(self, Matrix A)\n\n            Returns a row Matrix which is the mean of the rows of A.\n        ");
static PyMethodDef __pyx_mdef_5miolo_9Euclidean_7mean = {"mean", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_9Euclidean_7mean, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_9Euclidean_6mean};
static PyObject *__pyx_pw_5miolo_9Euclidean_7mean(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_A = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("mean (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_A,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_A)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1786, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "mean") < 0)) __PYX_ERR(1, 1786, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_A = ((struct __pyx_obj_5miolo_Matrix *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mean", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 1786, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.Euclidean.mean", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_A), __pyx_ptype_5miolo_Matrix, 1, "A", 0))) __PYX_ERR(1, 1786, __pyx_L1_error)
  __pyx_r = __pyx_pf_5miolo_9Euclidean_6mean(((struct __pyx_obj_5miolo_Euclidean *)__pyx_v_self), __pyx_v_A);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_9Euclidean_6mean(struct __pyx_obj_5miolo_Euclidean *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_A) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("mean", 1);

  /* "miololib.pyx":1790
 *             Returns a row Matrix which is the mean of the rows of A.
 *         """
 *         out = Matrix(ctype=A.ctype)             # <<<<<<<<<<<<<<
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.mean(drf(A.mtxInt))
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1790, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_A), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1790, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ctype, __pyx_t_2) < 0) __PYX_ERR(1, 1790, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Matrix), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1790, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_out = ((struct __pyx_obj_5miolo_Matrix *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "miololib.pyx":1791
 *         """
 *         out = Matrix(ctype=A.ctype)
 *         if out.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.mtxInt = self.view.mean(drf(A.mtxInt))
 *         if out.ctype=="float":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1791, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1791, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":1792
 *         out = Matrix(ctype=A.ctype)
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.mean(drf(A.mtxInt))             # <<<<<<<<<<<<<<
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.mean(drf(A.mtxFloat))
 */
    __pyx_v_out->__pyx_base.mtxInt = __pyx_v_self->view.mean((*__pyx_v_A->__pyx_base.mtxInt));

    /* "miololib.pyx":1791
 *         """
 *         out = Matrix(ctype=A.ctype)
 *         if out.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.mtxInt = self.view.mean(drf(A.mtxInt))
 *         if out.ctype=="float":
 */
  }

  /* "miololib.pyx":1793
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.mean(drf(A.mtxInt))
 *         if out.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.mtxFloat = self.view.mean(drf(A.mtxFloat))
 *         if out.ctype=="double":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1793, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1793, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":1794
 *             out.mtxInt = self.view.mean(drf(A.mtxInt))
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.mean(drf(A.mtxFloat))             # <<<<<<<<<<<<<<
 *         if out.ctype=="double":
 *             out.mtxDouble = self.view.mean(drf(A.mtxDouble))
 */
    __pyx_v_out->__pyx_base.mtxFloat = __pyx_v_self->view.mean((*__pyx_v_A->__pyx_base.mtxFloat));

    /* "miololib.pyx":1793
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.mean(drf(A.mtxInt))
 *         if out.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.mtxFloat = self.view.mean(drf(A.mtxFloat))
 *         if out.ctype=="double":
 */
  }

  /* "miololib.pyx":1795
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.mean(drf(A.mtxFloat))
 *         if out.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.mtxDouble = self.view.mean(drf(A.mtxDouble))
 *         return out
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1795, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1795, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":1796
 *             out.mtxFloat = self.view.mean(drf(A.mtxFloat))
 *         if out.ctype=="double":
 *             out.mtxDouble = self.view.mean(drf(A.mtxDouble))             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
    __pyx_v_out->__pyx_base.mtxDouble = __pyx_v_self->view.mean((*__pyx_v_A->__pyx_base.mtxDouble));

    /* "miololib.pyx":1795
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.mean(drf(A.mtxFloat))
 *         if out.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.mtxDouble = self.view.mean(drf(A.mtxDouble))
 *         return out
 */
  }

  /* "miololib.pyx":1797
 *         if out.ctype=="double":
 *             out.mtxDouble = self.view.mean(drf(A.mtxDouble))
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     def variance(self, Matrix A):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_out);
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "miololib.pyx":1786
 *         return out
 * 
 *     def mean(self, Matrix A):             # <<<<<<<<<<<<<<
 *         """
 *             Returns a row Matrix which is the mean of the rows of A.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("miolo.Euclidean.mean", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":1799
 *         return out
 * 
 *     def variance(self, Matrix A):             # <<<<<<<<<<<<<<
 *         """
 *             Returns a row Matrix which is the variance of the rows of A.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_9Euclidean_9variance(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_9Euclidean_8variance, "Euclidean.variance(self, Matrix A)\n\n            Returns a row Matrix which is the variance of the rows of A.\n        ");
static PyMethodDef __pyx_mdef_5miolo_9Euclidean_9variance = {"variance", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_9Euclidean_9variance, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_9Euclidean_8variance};
static PyObject *__pyx_pw_5miolo_9Euclidean_9variance(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_A = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("variance (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_A,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_A)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1799, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "variance") < 0)) __PYX_ERR(1, 1799, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_A = ((struct __pyx_obj_5miolo_Matrix *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("variance", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 1799, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.Euclidean.variance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_A), __pyx_ptype_5miolo_Matrix, 1, "A", 0))) __PYX_ERR(1, 1799, __pyx_L1_error)
  __pyx_r = __pyx_pf_5miolo_9Euclidean_8variance(((struct __pyx_obj_5miolo_Euclidean *)__pyx_v_self), __pyx_v_A);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_9Euclidean_8variance(struct __pyx_obj_5miolo_Euclidean *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_A) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("variance", 1);

  /* "miololib.pyx":1803
 *             Returns a row Matrix which is the variance of the rows of A.
 *         """
 *         out = Matrix(ctype=A.ctype)             # <<<<<<<<<<<<<<
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.variance(drf(A.mtxInt))
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1803, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_A), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1803, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ctype, __pyx_t_2) < 0) __PYX_ERR(1, 1803, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Matrix), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1803, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_out = ((struct __pyx_obj_5miolo_Matrix *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "miololib.pyx":1804
 *         """
 *         out = Matrix(ctype=A.ctype)
 *         if out.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.mtxInt = self.view.variance(drf(A.mtxInt))
 *         if out.ctype=="float":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1804, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1804, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":1805
 *         out = Matrix(ctype=A.ctype)
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.variance(drf(A.mtxInt))             # <<<<<<<<<<<<<<
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.variance(drf(A.mtxFloat))
 */
    __pyx_v_out->__pyx_base.mtxInt = __pyx_v_self->view.variance((*__pyx_v_A->__pyx_base.mtxInt));

    /* "miololib.pyx":1804
 *         """
 *         out = Matrix(ctype=A.ctype)
 *         if out.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.mtxInt = self.view.variance(drf(A.mtxInt))
 *         if out.ctype=="float":
 */
  }

  /* "miololib.pyx":1806
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.variance(drf(A.mtxInt))
 *         if out.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.mtxFloat = self.view.variance(drf(A.mtxFloat))
 *         if out.ctype=="double":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1806, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1806, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":1807
 *             out.mtxInt = self.view.variance(drf(A.mtxInt))
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.variance(drf(A.mtxFloat))             # <<<<<<<<<<<<<<
 *         if out.ctype=="double":
 *             out.mtxDouble = self.view.variance(drf(A.mtxDouble))
 */
    __pyx_v_out->__pyx_base.mtxFloat = __pyx_v_self->view.variance((*__pyx_v_A->__pyx_base.mtxFloat));

    /* "miololib.pyx":1806
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.variance(drf(A.mtxInt))
 *         if out.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.mtxFloat = self.view.variance(drf(A.mtxFloat))
 *         if out.ctype=="double":
 */
  }

  /* "miololib.pyx":1808
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.variance(drf(A.mtxFloat))
 *         if out.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.mtxDouble = self.view.variance(drf(A.mtxDouble))
 *         return out
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1808, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1808, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":1809
 *             out.mtxFloat = self.view.variance(drf(A.mtxFloat))
 *         if out.ctype=="double":
 *             out.mtxDouble = self.view.variance(drf(A.mtxDouble))             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
    __pyx_v_out->__pyx_base.mtxDouble = __pyx_v_self->view.variance((*__pyx_v_A->__pyx_base.mtxDouble));

    /* "miololib.pyx":1808
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.variance(drf(A.mtxFloat))
 *         if out.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.mtxDouble = self.view.variance(drf(A.mtxDouble))
 *         return out
 */
  }

  /* "miololib.pyx":1810
 *         if out.ctype=="double":
 *             out.mtxDouble = self.view.variance(drf(A.mtxDouble))
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     def minmaxNormalize(self, Matrix A):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_out);
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "miololib.pyx":1799
 *         return out
 * 
 *     def variance(self, Matrix A):             # <<<<<<<<<<<<<<
 *         """
 *             Returns a row Matrix which is the variance of the rows of A.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("miolo.Euclidean.variance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":1812
 *         return out
 * 
 *     def minmaxNormalize(self, Matrix A):             # <<<<<<<<<<<<<<
 *         """
 *             For each column, calculates min and max values, and then returns
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_9Euclidean_11minmaxNormalize(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_9Euclidean_10minmaxNormalize, "Euclidean.minmaxNormalize(self, Matrix A)\n\n            For each column, calculates min and max values, and then returns\n            a matrix for which each element is (A_ij-min_j)/(max_j-min_j).\n        ");
static PyMethodDef __pyx_mdef_5miolo_9Euclidean_11minmaxNormalize = {"minmaxNormalize", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_9Euclidean_11minmaxNormalize, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_9Euclidean_10minmaxNormalize};
static PyObject *__pyx_pw_5miolo_9Euclidean_11minmaxNormalize(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_A = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("minmaxNormalize (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_A,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_A)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1812, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "minmaxNormalize") < 0)) __PYX_ERR(1, 1812, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_A = ((struct __pyx_obj_5miolo_Matrix *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("minmaxNormalize", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 1812, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.Euclidean.minmaxNormalize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_A), __pyx_ptype_5miolo_Matrix, 1, "A", 0))) __PYX_ERR(1, 1812, __pyx_L1_error)
  __pyx_r = __pyx_pf_5miolo_9Euclidean_10minmaxNormalize(((struct __pyx_obj_5miolo_Euclidean *)__pyx_v_self), __pyx_v_A);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_9Euclidean_10minmaxNormalize(struct __pyx_obj_5miolo_Euclidean *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_A) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("minmaxNormalize", 1);

  /* "miololib.pyx":1817
 *             a matrix for which each element is (A_ij-min_j)/(max_j-min_j).
 *         """
 *         out = Matrix(ctype=A.ctype)             # <<<<<<<<<<<<<<
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.minmaxNormalize(drf(A.mtxInt))
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1817, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_A), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1817, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ctype, __pyx_t_2) < 0) __PYX_ERR(1, 1817, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Matrix), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1817, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_out = ((struct __pyx_obj_5miolo_Matrix *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "miololib.pyx":1818
 *         """
 *         out = Matrix(ctype=A.ctype)
 *         if out.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.mtxInt = self.view.minmaxNormalize(drf(A.mtxInt))
 *         if out.ctype=="float":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1818, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1818, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":1819
 *         out = Matrix(ctype=A.ctype)
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.minmaxNormalize(drf(A.mtxInt))             # <<<<<<<<<<<<<<
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.minmaxNormalize(drf(A.mtxFloat))
 */
    __pyx_v_out->__pyx_base.mtxInt = __pyx_v_self->view.minmaxNormalize((*__pyx_v_A->__pyx_base.mtxInt));

    /* "miololib.pyx":1818
 *         """
 *         out = Matrix(ctype=A.ctype)
 *         if out.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.mtxInt = self.view.minmaxNormalize(drf(A.mtxInt))
 *         if out.ctype=="float":
 */
  }

  /* "miololib.pyx":1820
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.minmaxNormalize(drf(A.mtxInt))
 *         if out.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.mtxFloat = self.view.minmaxNormalize(drf(A.mtxFloat))
 *         if out.ctype=="double":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1820, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1820, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":1821
 *             out.mtxInt = self.view.minmaxNormalize(drf(A.mtxInt))
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.minmaxNormalize(drf(A.mtxFloat))             # <<<<<<<<<<<<<<
 *         if out.ctype=="double":
 *             out.mtxDouble = self.view.minmaxNormalize(drf(A.mtxDouble))
 */
    __pyx_v_out->__pyx_base.mtxFloat = __pyx_v_self->view.minmaxNormalize((*__pyx_v_A->__pyx_base.mtxFloat));

    /* "miololib.pyx":1820
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.minmaxNormalize(drf(A.mtxInt))
 *         if out.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.mtxFloat = self.view.minmaxNormalize(drf(A.mtxFloat))
 *         if out.ctype=="double":
 */
  }

  /* "miololib.pyx":1822
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.minmaxNormalize(drf(A.mtxFloat))
 *         if out.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.mtxDouble = self.view.minmaxNormalize(drf(A.mtxDouble))
 *         return out
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1822, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1822, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":1823
 *             out.mtxFloat = self.view.minmaxNormalize(drf(A.mtxFloat))
 *         if out.ctype=="double":
 *             out.mtxDouble = self.view.minmaxNormalize(drf(A.mtxDouble))             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
    __pyx_v_out->__pyx_base.mtxDouble = __pyx_v_self->view.minmaxNormalize((*__pyx_v_A->__pyx_base.mtxDouble));

    /* "miololib.pyx":1822
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.minmaxNormalize(drf(A.mtxFloat))
 *         if out.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.mtxDouble = self.view.minmaxNormalize(drf(A.mtxDouble))
 *         return out
 */
  }

  /* "miololib.pyx":1824
 *         if out.ctype=="double":
 *             out.mtxDouble = self.view.minmaxNormalize(drf(A.mtxDouble))
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     def rowNormalize(self, Matrix A):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_out);
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "miololib.pyx":1812
 *         return out
 * 
 *     def minmaxNormalize(self, Matrix A):             # <<<<<<<<<<<<<<
 *         """
 *             For each column, calculates min and max values, and then returns
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("miolo.Euclidean.minmaxNormalize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":1826
 *         return out
 * 
 *     def rowNormalize(self, Matrix A):             # <<<<<<<<<<<<<<
 *         """
 *             Returns A with rows normalized to sum 1.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_9Euclidean_13rowNormalize(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_9Euclidean_12rowNormalize, "Euclidean.rowNormalize(self, Matrix A)\n\n            Returns A with rows normalized to sum 1.\n        ");
static PyMethodDef __pyx_mdef_5miolo_9Euclidean_13rowNormalize = {"rowNormalize", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_9Euclidean_13rowNormalize, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_9Euclidean_12rowNormalize};
static PyObject *__pyx_pw_5miolo_9Euclidean_13rowNormalize(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_A = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("rowNormalize (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_A,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_A)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1826, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "rowNormalize") < 0)) __PYX_ERR(1, 1826, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_A = ((struct __pyx_obj_5miolo_Matrix *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("rowNormalize", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 1826, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.Euclidean.rowNormalize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_A), __pyx_ptype_5miolo_Matrix, 1, "A", 0))) __PYX_ERR(1, 1826, __pyx_L1_error)
  __pyx_r = __pyx_pf_5miolo_9Euclidean_12rowNormalize(((struct __pyx_obj_5miolo_Euclidean *)__pyx_v_self), __pyx_v_A);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_9Euclidean_12rowNormalize(struct __pyx_obj_5miolo_Euclidean *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_A) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("rowNormalize", 1);

  /* "miololib.pyx":1830
 *             Returns A with rows normalized to sum 1.
 *         """
 *         out = Matrix(ctype=A.ctype)             # <<<<<<<<<<<<<<
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.rowNormalize(drf(A.mtxInt))
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1830, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_A), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1830, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ctype, __pyx_t_2) < 0) __PYX_ERR(1, 1830, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Matrix), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1830, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_out = ((struct __pyx_obj_5miolo_Matrix *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "miololib.pyx":1831
 *         """
 *         out = Matrix(ctype=A.ctype)
 *         if out.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.mtxInt = self.view.rowNormalize(drf(A.mtxInt))
 *         if out.ctype=="float":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1831, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1831, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":1832
 *         out = Matrix(ctype=A.ctype)
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.rowNormalize(drf(A.mtxInt))             # <<<<<<<<<<<<<<
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.rowNormalize(drf(A.mtxFloat))
 */
    __pyx_v_out->__pyx_base.mtxInt = __pyx_v_self->view.rowNormalize((*__pyx_v_A->__pyx_base.mtxInt));

    /* "miololib.pyx":1831
 *         """
 *         out = Matrix(ctype=A.ctype)
 *         if out.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.mtxInt = self.view.rowNormalize(drf(A.mtxInt))
 *         if out.ctype=="float":
 */
  }

  /* "miololib.pyx":1833
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.rowNormalize(drf(A.mtxInt))
 *         if out.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.mtxFloat = self.view.rowNormalize(drf(A.mtxFloat))
 *         if out.ctype=="double":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1833, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1833, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":1834
 *             out.mtxInt = self.view.rowNormalize(drf(A.mtxInt))
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.rowNormalize(drf(A.mtxFloat))             # <<<<<<<<<<<<<<
 *         if out.ctype=="double":
 *             out.mtxDouble = self.view.rowNormalize(drf(A.mtxDouble))
 */
    __pyx_v_out->__pyx_base.mtxFloat = __pyx_v_self->view.rowNormalize((*__pyx_v_A->__pyx_base.mtxFloat));

    /* "miololib.pyx":1833
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.rowNormalize(drf(A.mtxInt))
 *         if out.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.mtxFloat = self.view.rowNormalize(drf(A.mtxFloat))
 *         if out.ctype=="double":
 */
  }

  /* "miololib.pyx":1835
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.rowNormalize(drf(A.mtxFloat))
 *         if out.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.mtxDouble = self.view.rowNormalize(drf(A.mtxDouble))
 *         return out
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1835, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1835, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":1836
 *             out.mtxFloat = self.view.rowNormalize(drf(A.mtxFloat))
 *         if out.ctype=="double":
 *             out.mtxDouble = self.view.rowNormalize(drf(A.mtxDouble))             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
    __pyx_v_out->__pyx_base.mtxDouble = __pyx_v_self->view.rowNormalize((*__pyx_v_A->__pyx_base.mtxDouble));

    /* "miololib.pyx":1835
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.rowNormalize(drf(A.mtxFloat))
 *         if out.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.mtxDouble = self.view.rowNormalize(drf(A.mtxDouble))
 *         return out
 */
  }

  /* "miololib.pyx":1837
 *         if out.ctype=="double":
 *             out.mtxDouble = self.view.rowNormalize(drf(A.mtxDouble))
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     def gaussianNormalize(self, Matrix A):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_out);
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "miololib.pyx":1826
 *         return out
 * 
 *     def rowNormalize(self, Matrix A):             # <<<<<<<<<<<<<<
 *         """
 *             Returns A with rows normalized to sum 1.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("miolo.Euclidean.rowNormalize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":1839
 *         return out
 * 
 *     def gaussianNormalize(self, Matrix A):             # <<<<<<<<<<<<<<
 *         """
 *             Returns A normalized to have columns with mean 0 and variance 1.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_9Euclidean_15gaussianNormalize(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_9Euclidean_14gaussianNormalize, "Euclidean.gaussianNormalize(self, Matrix A)\n\n            Returns A normalized to have columns with mean 0 and variance 1.\n        ");
static PyMethodDef __pyx_mdef_5miolo_9Euclidean_15gaussianNormalize = {"gaussianNormalize", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_9Euclidean_15gaussianNormalize, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_9Euclidean_14gaussianNormalize};
static PyObject *__pyx_pw_5miolo_9Euclidean_15gaussianNormalize(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_A = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("gaussianNormalize (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_A,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_A)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1839, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "gaussianNormalize") < 0)) __PYX_ERR(1, 1839, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_A = ((struct __pyx_obj_5miolo_Matrix *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("gaussianNormalize", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 1839, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.Euclidean.gaussianNormalize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_A), __pyx_ptype_5miolo_Matrix, 1, "A", 0))) __PYX_ERR(1, 1839, __pyx_L1_error)
  __pyx_r = __pyx_pf_5miolo_9Euclidean_14gaussianNormalize(((struct __pyx_obj_5miolo_Euclidean *)__pyx_v_self), __pyx_v_A);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_9Euclidean_14gaussianNormalize(struct __pyx_obj_5miolo_Euclidean *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_A) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("gaussianNormalize", 1);

  /* "miololib.pyx":1843
 *             Returns A normalized to have columns with mean 0 and variance 1.
 *         """
 *         out = Matrix(ctype=A.ctype)             # <<<<<<<<<<<<<<
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.gaussianNormalize(drf(A.mtxInt))
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1843, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_A), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1843, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ctype, __pyx_t_2) < 0) __PYX_ERR(1, 1843, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Matrix), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1843, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_out = ((struct __pyx_obj_5miolo_Matrix *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "miololib.pyx":1844
 *         """
 *         out = Matrix(ctype=A.ctype)
 *         if out.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.mtxInt = self.view.gaussianNormalize(drf(A.mtxInt))
 *         if out.ctype=="float":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1844, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1844, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":1845
 *         out = Matrix(ctype=A.ctype)
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.gaussianNormalize(drf(A.mtxInt))             # <<<<<<<<<<<<<<
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.gaussianNormalize(drf(A.mtxFloat))
 */
    __pyx_v_out->__pyx_base.mtxInt = __pyx_v_self->view.gaussianNormalize((*__pyx_v_A->__pyx_base.mtxInt));

    /* "miololib.pyx":1844
 *         """
 *         out = Matrix(ctype=A.ctype)
 *         if out.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.mtxInt = self.view.gaussianNormalize(drf(A.mtxInt))
 *         if out.ctype=="float":
 */
  }

  /* "miololib.pyx":1846
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.gaussianNormalize(drf(A.mtxInt))
 *         if out.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.mtxFloat = self.view.gaussianNormalize(drf(A.mtxFloat))
 *         if out.ctype=="double":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1846, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1846, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":1847
 *             out.mtxInt = self.view.gaussianNormalize(drf(A.mtxInt))
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.gaussianNormalize(drf(A.mtxFloat))             # <<<<<<<<<<<<<<
 *         if out.ctype=="double":
 *             out.mtxDouble = self.view.gaussianNormalize(drf(A.mtxDouble))
 */
    __pyx_v_out->__pyx_base.mtxFloat = __pyx_v_self->view.gaussianNormalize((*__pyx_v_A->__pyx_base.mtxFloat));

    /* "miololib.pyx":1846
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.gaussianNormalize(drf(A.mtxInt))
 *         if out.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.mtxFloat = self.view.gaussianNormalize(drf(A.mtxFloat))
 *         if out.ctype=="double":
 */
  }

  /* "miololib.pyx":1848
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.gaussianNormalize(drf(A.mtxFloat))
 *         if out.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.mtxDouble = self.view.gaussianNormalize(drf(A.mtxDouble))
 *         return out
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1848, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1848, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":1849
 *             out.mtxFloat = self.view.gaussianNormalize(drf(A.mtxFloat))
 *         if out.ctype=="double":
 *             out.mtxDouble = self.view.gaussianNormalize(drf(A.mtxDouble))             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
    __pyx_v_out->__pyx_base.mtxDouble = __pyx_v_self->view.gaussianNormalize((*__pyx_v_A->__pyx_base.mtxDouble));

    /* "miololib.pyx":1848
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.gaussianNormalize(drf(A.mtxFloat))
 *         if out.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.mtxDouble = self.view.gaussianNormalize(drf(A.mtxDouble))
 *         return out
 */
  }

  /* "miololib.pyx":1850
 *         if out.ctype=="double":
 *             out.mtxDouble = self.view.gaussianNormalize(drf(A.mtxDouble))
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     def centroidDistance(self, Matrix M, Matrix center):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_out);
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "miololib.pyx":1839
 *         return out
 * 
 *     def gaussianNormalize(self, Matrix A):             # <<<<<<<<<<<<<<
 *         """
 *             Returns A normalized to have columns with mean 0 and variance 1.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("miolo.Euclidean.gaussianNormalize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":1852
 *         return out
 * 
 *     def centroidDistance(self, Matrix M, Matrix center):             # <<<<<<<<<<<<<<
 *         """
 *             Returns the distance of rows in M to rows in center.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_9Euclidean_17centroidDistance(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_9Euclidean_16centroidDistance, "Euclidean.centroidDistance(self, Matrix M, Matrix center)\n\n            Returns the distance of rows in M to rows in center.\n            Useful for k-means.\n        ");
static PyMethodDef __pyx_mdef_5miolo_9Euclidean_17centroidDistance = {"centroidDistance", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_9Euclidean_17centroidDistance, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_9Euclidean_16centroidDistance};
static PyObject *__pyx_pw_5miolo_9Euclidean_17centroidDistance(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_M = 0;
  struct __pyx_obj_5miolo_Matrix *__pyx_v_center = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("centroidDistance (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_M,&__pyx_n_s_center,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_M)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1852, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_center)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1852, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("centroidDistance", 1, 2, 2, 1); __PYX_ERR(1, 1852, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "centroidDistance") < 0)) __PYX_ERR(1, 1852, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_M = ((struct __pyx_obj_5miolo_Matrix *)values[0]);
    __pyx_v_center = ((struct __pyx_obj_5miolo_Matrix *)values[1]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("centroidDistance", 1, 2, 2, __pyx_nargs); __PYX_ERR(1, 1852, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.Euclidean.centroidDistance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_M), __pyx_ptype_5miolo_Matrix, 1, "M", 0))) __PYX_ERR(1, 1852, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_center), __pyx_ptype_5miolo_Matrix, 1, "center", 0))) __PYX_ERR(1, 1852, __pyx_L1_error)
  __pyx_r = __pyx_pf_5miolo_9Euclidean_16centroidDistance(((struct __pyx_obj_5miolo_Euclidean *)__pyx_v_self), __pyx_v_M, __pyx_v_center);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_9Euclidean_16centroidDistance(struct __pyx_obj_5miolo_Euclidean *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_M, struct __pyx_obj_5miolo_Matrix *__pyx_v_center) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("centroidDistance", 1);

  /* "miololib.pyx":1857
 *             Useful for k-means.
 *         """
 *         if M.ctype!=center.ctype:             # <<<<<<<<<<<<<<
 *             raise TypeError("M and center must have same ctype.")
 *         if M.cols!=center.cols:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1857, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_center), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1857, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1857, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 1857, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(__pyx_t_4)) {

    /* "miololib.pyx":1858
 *         """
 *         if M.ctype!=center.ctype:
 *             raise TypeError("M and center must have same ctype.")             # <<<<<<<<<<<<<<
 *         if M.cols!=center.cols:
 *             raise Exception("M.cols must be equal to center.cols.")
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__67, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1858, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 1858, __pyx_L1_error)

    /* "miololib.pyx":1857
 *             Useful for k-means.
 *         """
 *         if M.ctype!=center.ctype:             # <<<<<<<<<<<<<<
 *             raise TypeError("M and center must have same ctype.")
 *         if M.cols!=center.cols:
 */
  }

  /* "miololib.pyx":1859
 *         if M.ctype!=center.ctype:
 *             raise TypeError("M and center must have same ctype.")
 *         if M.cols!=center.cols:             # <<<<<<<<<<<<<<
 *             raise Exception("M.cols must be equal to center.cols.")
 *         out = Matrix(ctype=M.ctype)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_cols); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1859, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_center), __pyx_n_s_cols); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1859, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_3, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1859, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 1859, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(__pyx_t_4)) {

    /* "miololib.pyx":1860
 *             raise TypeError("M and center must have same ctype.")
 *         if M.cols!=center.cols:
 *             raise Exception("M.cols must be equal to center.cols.")             # <<<<<<<<<<<<<<
 *         out = Matrix(ctype=M.ctype)
 *         if out.ctype=="int":
 */
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__68, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1860, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 1860, __pyx_L1_error)

    /* "miololib.pyx":1859
 *         if M.ctype!=center.ctype:
 *             raise TypeError("M and center must have same ctype.")
 *         if M.cols!=center.cols:             # <<<<<<<<<<<<<<
 *             raise Exception("M.cols must be equal to center.cols.")
 *         out = Matrix(ctype=M.ctype)
 */
  }

  /* "miololib.pyx":1861
 *         if M.cols!=center.cols:
 *             raise Exception("M.cols must be equal to center.cols.")
 *         out = Matrix(ctype=M.ctype)             # <<<<<<<<<<<<<<
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.centroidDistance(drf(M.mtxInt),drf(center.mtxInt))
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1861, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1861, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ctype, __pyx_t_2) < 0) __PYX_ERR(1, 1861, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Matrix), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1861, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_out = ((struct __pyx_obj_5miolo_Matrix *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "miololib.pyx":1862
 *             raise Exception("M.cols must be equal to center.cols.")
 *         out = Matrix(ctype=M.ctype)
 *         if out.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.mtxInt = self.view.centroidDistance(drf(M.mtxInt),drf(center.mtxInt))
 *         if out.ctype=="float":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1862, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 1862, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "miololib.pyx":1863
 *         out = Matrix(ctype=M.ctype)
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.centroidDistance(drf(M.mtxInt),drf(center.mtxInt))             # <<<<<<<<<<<<<<
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.centroidDistance(drf(M.mtxFloat),drf(center.mtxFloat))
 */
    __pyx_v_out->__pyx_base.mtxInt = __pyx_v_self->view.centroidDistance((*__pyx_v_M->__pyx_base.mtxInt), (*__pyx_v_center->__pyx_base.mtxInt));

    /* "miololib.pyx":1862
 *             raise Exception("M.cols must be equal to center.cols.")
 *         out = Matrix(ctype=M.ctype)
 *         if out.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.mtxInt = self.view.centroidDistance(drf(M.mtxInt),drf(center.mtxInt))
 *         if out.ctype=="float":
 */
  }

  /* "miololib.pyx":1864
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.centroidDistance(drf(M.mtxInt),drf(center.mtxInt))
 *         if out.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.mtxFloat = self.view.centroidDistance(drf(M.mtxFloat),drf(center.mtxFloat))
 *         if out.ctype=="double":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1864, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 1864, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "miololib.pyx":1865
 *             out.mtxInt = self.view.centroidDistance(drf(M.mtxInt),drf(center.mtxInt))
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.centroidDistance(drf(M.mtxFloat),drf(center.mtxFloat))             # <<<<<<<<<<<<<<
 *         if out.ctype=="double":
 *             out.mtxDouble = self.view.centroidDistance(drf(M.mtxDouble),drf(center.mtxDouble))
 */
    __pyx_v_out->__pyx_base.mtxFloat = __pyx_v_self->view.centroidDistance((*__pyx_v_M->__pyx_base.mtxFloat), (*__pyx_v_center->__pyx_base.mtxFloat));

    /* "miololib.pyx":1864
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.centroidDistance(drf(M.mtxInt),drf(center.mtxInt))
 *         if out.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.mtxFloat = self.view.centroidDistance(drf(M.mtxFloat),drf(center.mtxFloat))
 *         if out.ctype=="double":
 */
  }

  /* "miololib.pyx":1866
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.centroidDistance(drf(M.mtxFloat),drf(center.mtxFloat))
 *         if out.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.mtxDouble = self.view.centroidDistance(drf(M.mtxDouble),drf(center.mtxDouble))
 *         return out
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1866, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 1866, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "miololib.pyx":1867
 *             out.mtxFloat = self.view.centroidDistance(drf(M.mtxFloat),drf(center.mtxFloat))
 *         if out.ctype=="double":
 *             out.mtxDouble = self.view.centroidDistance(drf(M.mtxDouble),drf(center.mtxDouble))             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
    __pyx_v_out->__pyx_base.mtxDouble = __pyx_v_self->view.centroidDistance((*__pyx_v_M->__pyx_base.mtxDouble), (*__pyx_v_center->__pyx_base.mtxDouble));

    /* "miololib.pyx":1866
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.centroidDistance(drf(M.mtxFloat),drf(center.mtxFloat))
 *         if out.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.mtxDouble = self.view.centroidDistance(drf(M.mtxDouble),drf(center.mtxDouble))
 *         return out
 */
  }

  /* "miololib.pyx":1868
 *         if out.ctype=="double":
 *             out.mtxDouble = self.view.centroidDistance(drf(M.mtxDouble),drf(center.mtxDouble))
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     def kmpp(self, Matrix M, int k):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_out);
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "miololib.pyx":1852
 *         return out
 * 
 *     def centroidDistance(self, Matrix M, Matrix center):             # <<<<<<<<<<<<<<
 *         """
 *             Returns the distance of rows in M to rows in center.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("miolo.Euclidean.centroidDistance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":1870
 *         return out
 * 
 *     def kmpp(self, Matrix M, int k):             # <<<<<<<<<<<<<<
 *         """
 *             K-means++ algorithm for seeding.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_9Euclidean_19kmpp(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_9Euclidean_18kmpp, "Euclidean.kmpp(self, Matrix M, int k)\n\n            K-means++ algorithm for seeding.\n        ");
static PyMethodDef __pyx_mdef_5miolo_9Euclidean_19kmpp = {"kmpp", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_9Euclidean_19kmpp, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_9Euclidean_18kmpp};
static PyObject *__pyx_pw_5miolo_9Euclidean_19kmpp(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_M = 0;
  int __pyx_v_k;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("kmpp (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_M,&__pyx_n_s_k,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_M)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1870, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_k)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1870, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("kmpp", 1, 2, 2, 1); __PYX_ERR(1, 1870, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "kmpp") < 0)) __PYX_ERR(1, 1870, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_M = ((struct __pyx_obj_5miolo_Matrix *)values[0]);
    __pyx_v_k = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_k == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1870, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("kmpp", 1, 2, 2, __pyx_nargs); __PYX_ERR(1, 1870, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.Euclidean.kmpp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_M), __pyx_ptype_5miolo_Matrix, 1, "M", 0))) __PYX_ERR(1, 1870, __pyx_L1_error)
  __pyx_r = __pyx_pf_5miolo_9Euclidean_18kmpp(((struct __pyx_obj_5miolo_Euclidean *)__pyx_v_self), __pyx_v_M, __pyx_v_k);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_9Euclidean_18kmpp(struct __pyx_obj_5miolo_Euclidean *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_M, int __pyx_v_k) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("kmpp", 1);

  /* "miololib.pyx":1874
 *             K-means++ algorithm for seeding.
 *         """
 *         out = Matrix(ctype=M.ctype)             # <<<<<<<<<<<<<<
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.kmpp(drf(M.mtxInt),k)
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1874, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1874, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ctype, __pyx_t_2) < 0) __PYX_ERR(1, 1874, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Matrix), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1874, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_out = ((struct __pyx_obj_5miolo_Matrix *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "miololib.pyx":1875
 *         """
 *         out = Matrix(ctype=M.ctype)
 *         if out.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.mtxInt = self.view.kmpp(drf(M.mtxInt),k)
 *         if out.ctype=="float":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1875, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1875, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":1876
 *         out = Matrix(ctype=M.ctype)
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.kmpp(drf(M.mtxInt),k)             # <<<<<<<<<<<<<<
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.kmpp(drf(M.mtxFloat),k)
 */
    __pyx_v_out->__pyx_base.mtxInt = __pyx_v_self->view.kmpp((*__pyx_v_M->__pyx_base.mtxInt), __pyx_v_k);

    /* "miololib.pyx":1875
 *         """
 *         out = Matrix(ctype=M.ctype)
 *         if out.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.mtxInt = self.view.kmpp(drf(M.mtxInt),k)
 *         if out.ctype=="float":
 */
  }

  /* "miololib.pyx":1877
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.kmpp(drf(M.mtxInt),k)
 *         if out.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.mtxFloat = self.view.kmpp(drf(M.mtxFloat),k)
 *         if out.ctype=="double":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1877, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1877, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":1878
 *             out.mtxInt = self.view.kmpp(drf(M.mtxInt),k)
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.kmpp(drf(M.mtxFloat),k)             # <<<<<<<<<<<<<<
 *         if out.ctype=="double":
 *             out.mtxDouble = self.view.kmpp(drf(M.mtxDouble),k)
 */
    __pyx_v_out->__pyx_base.mtxFloat = __pyx_v_self->view.kmpp((*__pyx_v_M->__pyx_base.mtxFloat), __pyx_v_k);

    /* "miololib.pyx":1877
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.kmpp(drf(M.mtxInt),k)
 *         if out.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.mtxFloat = self.view.kmpp(drf(M.mtxFloat),k)
 *         if out.ctype=="double":
 */
  }

  /* "miololib.pyx":1879
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.kmpp(drf(M.mtxFloat),k)
 *         if out.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.mtxDouble = self.view.kmpp(drf(M.mtxDouble),k)
 *         return out
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1879, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1879, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":1880
 *             out.mtxFloat = self.view.kmpp(drf(M.mtxFloat),k)
 *         if out.ctype=="double":
 *             out.mtxDouble = self.view.kmpp(drf(M.mtxDouble),k)             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
    __pyx_v_out->__pyx_base.mtxDouble = __pyx_v_self->view.kmpp((*__pyx_v_M->__pyx_base.mtxDouble), __pyx_v_k);

    /* "miololib.pyx":1879
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.kmpp(drf(M.mtxFloat),k)
 *         if out.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.mtxDouble = self.view.kmpp(drf(M.mtxDouble),k)
 *         return out
 */
  }

  /* "miololib.pyx":1881
 *         if out.ctype=="double":
 *             out.mtxDouble = self.view.kmpp(drf(M.mtxDouble),k)
 *         return out             # <<<<<<<<<<<<<<
 * 
 * cdef class Sphere(Manifold):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_out);
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "miololib.pyx":1870
 *         return out
 * 
 *     def kmpp(self, Matrix M, int k):             # <<<<<<<<<<<<<<
 *         """
 *             K-means++ algorithm for seeding.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("miolo.Euclidean.kmpp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_9Euclidean_21__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_9Euclidean_20__reduce_cython__, "Euclidean.__reduce_cython__(self)");
static PyMethodDef __pyx_mdef_5miolo_9Euclidean_21__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_9Euclidean_21__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_9Euclidean_20__reduce_cython__};
static PyObject *__pyx_pw_5miolo_9Euclidean_21__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_5miolo_9Euclidean_20__reduce_cython__(((struct __pyx_obj_5miolo_Euclidean *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_9Euclidean_20__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_Euclidean *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_view_cannot_be_converted_to, 0, 0);
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("miolo.Euclidean.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_9Euclidean_23__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_9Euclidean_22__setstate_cython__, "Euclidean.__setstate_cython__(self, __pyx_state)");
static PyMethodDef __pyx_mdef_5miolo_9Euclidean_23__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_9Euclidean_23__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_9Euclidean_22__setstate_cython__};
static PyObject *__pyx_pw_5miolo_9Euclidean_23__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(0, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.Euclidean.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5miolo_9Euclidean_22__setstate_cython__(((struct __pyx_obj_5miolo_Euclidean *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_9Euclidean_22__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_Euclidean *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_view_cannot_be_converted_to, 0, 0);
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("miolo.Euclidean.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":1893
 *     cdef mld.sphere view
 * 
 *     def __init__(self, radius=1):             # <<<<<<<<<<<<<<
 *         self.view.r = radius
 * 
 */

/* Python wrapper */
static int __pyx_pw_5miolo_6Sphere_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5miolo_6Sphere_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_radius = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_radius,0};
    values[0] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)__pyx_int_1));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_radius);
          if (value) { values[0] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1893, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__init__") < 0)) __PYX_ERR(1, 1893, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_radius = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 1, __pyx_nargs); __PYX_ERR(1, 1893, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.Sphere.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5miolo_6Sphere___init__(((struct __pyx_obj_5miolo_Sphere *)__pyx_v_self), __pyx_v_radius);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5miolo_6Sphere___init__(struct __pyx_obj_5miolo_Sphere *__pyx_v_self, PyObject *__pyx_v_radius) {
  int __pyx_r;
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "miololib.pyx":1894
 * 
 *     def __init__(self, radius=1):
 *         self.view.r = radius             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_radius); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1894, __pyx_L1_error)
  __pyx_v_self->view.r = __pyx_t_1;

  /* "miololib.pyx":1893
 *     cdef mld.sphere view
 * 
 *     def __init__(self, radius=1):             # <<<<<<<<<<<<<<
 *         self.view.r = radius
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("miolo.Sphere.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "miololib.pyx":1896
 *         self.view.r = radius
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def radius(self):
 *         return self.view.r
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_6Sphere_6radius_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5miolo_6Sphere_6radius_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5miolo_6Sphere_6radius___get__(((struct __pyx_obj_5miolo_Sphere *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_6Sphere_6radius___get__(struct __pyx_obj_5miolo_Sphere *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "miololib.pyx":1898
 *     @property
 *     def radius(self):
 *         return self.view.r             # <<<<<<<<<<<<<<
 *     @radius.setter
 *     def radius(self, r):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->view.r); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1898, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "miololib.pyx":1896
 *         self.view.r = radius
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def radius(self):
 *         return self.view.r
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("miolo.Sphere.radius.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":1899
 *     def radius(self):
 *         return self.view.r
 *     @radius.setter             # <<<<<<<<<<<<<<
 *     def radius(self, r):
 *         if r<=0:
 */

/* Python wrapper */
static int __pyx_pw_5miolo_6Sphere_6radius_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_r); /*proto*/
static int __pyx_pw_5miolo_6Sphere_6radius_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_r) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5miolo_6Sphere_6radius_2__set__(((struct __pyx_obj_5miolo_Sphere *)__pyx_v_self), ((PyObject *)__pyx_v_r));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5miolo_6Sphere_6radius_2__set__(struct __pyx_obj_5miolo_Sphere *__pyx_v_self, PyObject *__pyx_v_r) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  double __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 1);

  /* "miololib.pyx":1901
 *     @radius.setter
 *     def radius(self, r):
 *         if r<=0:             # <<<<<<<<<<<<<<
 *             raise Exception("Sphere radius must be greater than 0.")
 *         self.view.r = r
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_r, __pyx_int_0, Py_LE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1901, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 1901, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(__pyx_t_2)) {

    /* "miololib.pyx":1902
 *     def radius(self, r):
 *         if r<=0:
 *             raise Exception("Sphere radius must be greater than 0.")             # <<<<<<<<<<<<<<
 *         self.view.r = r
 * 
 */
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__69, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1902, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 1902, __pyx_L1_error)

    /* "miololib.pyx":1901
 *     @radius.setter
 *     def radius(self, r):
 *         if r<=0:             # <<<<<<<<<<<<<<
 *             raise Exception("Sphere radius must be greater than 0.")
 *         self.view.r = r
 */
  }

  /* "miololib.pyx":1903
 *         if r<=0:
 *             raise Exception("Sphere radius must be greater than 0.")
 *         self.view.r = r             # <<<<<<<<<<<<<<
 * 
 *     def stereographicProjection(self, Matrix M):
 */
  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_v_r); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1903, __pyx_L1_error)
  __pyx_v_self->view.r = __pyx_t_3;

  /* "miololib.pyx":1899
 *     def radius(self):
 *         return self.view.r
 *     @radius.setter             # <<<<<<<<<<<<<<
 *     def radius(self, r):
 *         if r<=0:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("miolo.Sphere.radius.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":1905
 *         self.view.r = r
 * 
 *     def stereographicProjection(self, Matrix M):             # <<<<<<<<<<<<<<
 *         """
 *             Returns the matrix for which each row is the stereographic
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_6Sphere_3stereographicProjection(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_6Sphere_2stereographicProjection, "Sphere.stereographicProjection(self, Matrix M)\n\n            Returns the matrix for which each row is the stereographic \n            projection of the corresponding row in M over the sphere.\n        ");
static PyMethodDef __pyx_mdef_5miolo_6Sphere_3stereographicProjection = {"stereographicProjection", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_6Sphere_3stereographicProjection, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_6Sphere_2stereographicProjection};
static PyObject *__pyx_pw_5miolo_6Sphere_3stereographicProjection(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_M = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("stereographicProjection (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_M,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_M)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1905, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "stereographicProjection") < 0)) __PYX_ERR(1, 1905, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_M = ((struct __pyx_obj_5miolo_Matrix *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("stereographicProjection", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 1905, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.Sphere.stereographicProjection", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_M), __pyx_ptype_5miolo_Matrix, 1, "M", 0))) __PYX_ERR(1, 1905, __pyx_L1_error)
  __pyx_r = __pyx_pf_5miolo_6Sphere_2stereographicProjection(((struct __pyx_obj_5miolo_Sphere *)__pyx_v_self), __pyx_v_M);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_6Sphere_2stereographicProjection(struct __pyx_obj_5miolo_Sphere *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_M) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("stereographicProjection", 1);

  /* "miololib.pyx":1910
 *             projection of the corresponding row in M over the sphere.
 *         """
 *         out = Matrix(ctype=M.ctype)             # <<<<<<<<<<<<<<
 *         if M.ctype=="int":
 *             out.mtxInt = self.view.stereographicProjection(drf(M.mtxInt))
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1910, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1910, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ctype, __pyx_t_2) < 0) __PYX_ERR(1, 1910, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Matrix), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1910, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_out = ((struct __pyx_obj_5miolo_Matrix *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "miololib.pyx":1911
 *         """
 *         out = Matrix(ctype=M.ctype)
 *         if M.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.mtxInt = self.view.stereographicProjection(drf(M.mtxInt))
 *         if M.ctype=="float":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1911, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1911, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":1912
 *         out = Matrix(ctype=M.ctype)
 *         if M.ctype=="int":
 *             out.mtxInt = self.view.stereographicProjection(drf(M.mtxInt))             # <<<<<<<<<<<<<<
 *         if M.ctype=="float":
 *             out.mtxFloat = self.view.stereographicProjection(drf(M.mtxFloat))
 */
    __pyx_v_out->__pyx_base.mtxInt = __pyx_v_self->view.stereographicProjection((*__pyx_v_M->__pyx_base.mtxInt));

    /* "miololib.pyx":1911
 *         """
 *         out = Matrix(ctype=M.ctype)
 *         if M.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.mtxInt = self.view.stereographicProjection(drf(M.mtxInt))
 *         if M.ctype=="float":
 */
  }

  /* "miololib.pyx":1913
 *         if M.ctype=="int":
 *             out.mtxInt = self.view.stereographicProjection(drf(M.mtxInt))
 *         if M.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.mtxFloat = self.view.stereographicProjection(drf(M.mtxFloat))
 *         if M.ctype=="double":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1913, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1913, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":1914
 *             out.mtxInt = self.view.stereographicProjection(drf(M.mtxInt))
 *         if M.ctype=="float":
 *             out.mtxFloat = self.view.stereographicProjection(drf(M.mtxFloat))             # <<<<<<<<<<<<<<
 *         if M.ctype=="double":
 *             out.mtxDouble = self.view.stereographicProjection(drf(M.mtxDouble))
 */
    __pyx_v_out->__pyx_base.mtxFloat = __pyx_v_self->view.stereographicProjection((*__pyx_v_M->__pyx_base.mtxFloat));

    /* "miololib.pyx":1913
 *         if M.ctype=="int":
 *             out.mtxInt = self.view.stereographicProjection(drf(M.mtxInt))
 *         if M.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.mtxFloat = self.view.stereographicProjection(drf(M.mtxFloat))
 *         if M.ctype=="double":
 */
  }

  /* "miololib.pyx":1915
 *         if M.ctype=="float":
 *             out.mtxFloat = self.view.stereographicProjection(drf(M.mtxFloat))
 *         if M.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.mtxDouble = self.view.stereographicProjection(drf(M.mtxDouble))
 *         return out
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1915, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1915, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":1916
 *             out.mtxFloat = self.view.stereographicProjection(drf(M.mtxFloat))
 *         if M.ctype=="double":
 *             out.mtxDouble = self.view.stereographicProjection(drf(M.mtxDouble))             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
    __pyx_v_out->__pyx_base.mtxDouble = __pyx_v_self->view.stereographicProjection((*__pyx_v_M->__pyx_base.mtxDouble));

    /* "miololib.pyx":1915
 *         if M.ctype=="float":
 *             out.mtxFloat = self.view.stereographicProjection(drf(M.mtxFloat))
 *         if M.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.mtxDouble = self.view.stereographicProjection(drf(M.mtxDouble))
 *         return out
 */
  }

  /* "miololib.pyx":1917
 *         if M.ctype=="double":
 *             out.mtxDouble = self.view.stereographicProjection(drf(M.mtxDouble))
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     def fromEuclidean(self, Matrix M):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_out);
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "miololib.pyx":1905
 *         self.view.r = r
 * 
 *     def stereographicProjection(self, Matrix M):             # <<<<<<<<<<<<<<
 *         """
 *             Returns the matrix for which each row is the stereographic
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("miolo.Sphere.stereographicProjection", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":1919
 *         return out
 * 
 *     def fromEuclidean(self, Matrix M):             # <<<<<<<<<<<<<<
 *         """
 *             Returns the Matrix for which each row r has M.cols+1 columns and is
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_6Sphere_5fromEuclidean(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_6Sphere_4fromEuclidean, "Sphere.fromEuclidean(self, Matrix M)\n\n            Returns the Matrix for which each row r has M.cols+1 columns and is\n            the mapping of the r row of M to the sphere embedded in the euclidean\n            space of dimension M.cols+1. \n        ");
static PyMethodDef __pyx_mdef_5miolo_6Sphere_5fromEuclidean = {"fromEuclidean", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_6Sphere_5fromEuclidean, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_6Sphere_4fromEuclidean};
static PyObject *__pyx_pw_5miolo_6Sphere_5fromEuclidean(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_M = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fromEuclidean (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_M,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_M)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1919, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "fromEuclidean") < 0)) __PYX_ERR(1, 1919, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_M = ((struct __pyx_obj_5miolo_Matrix *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("fromEuclidean", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 1919, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.Sphere.fromEuclidean", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_M), __pyx_ptype_5miolo_Matrix, 1, "M", 0))) __PYX_ERR(1, 1919, __pyx_L1_error)
  __pyx_r = __pyx_pf_5miolo_6Sphere_4fromEuclidean(((struct __pyx_obj_5miolo_Sphere *)__pyx_v_self), __pyx_v_M);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_6Sphere_4fromEuclidean(struct __pyx_obj_5miolo_Sphere *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_M) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("fromEuclidean", 1);

  /* "miololib.pyx":1925
 *             space of dimension M.cols+1.
 *         """
 *         out = Matrix(ctype=M.ctype)             # <<<<<<<<<<<<<<
 *         if M.ctype=="int":
 *             out.mtxInt = self.view.fromEuclidean(drf(M.mtxInt))
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1925, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1925, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ctype, __pyx_t_2) < 0) __PYX_ERR(1, 1925, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Matrix), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1925, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_out = ((struct __pyx_obj_5miolo_Matrix *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "miololib.pyx":1926
 *         """
 *         out = Matrix(ctype=M.ctype)
 *         if M.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.mtxInt = self.view.fromEuclidean(drf(M.mtxInt))
 *         if M.ctype=="float":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1926, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1926, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":1927
 *         out = Matrix(ctype=M.ctype)
 *         if M.ctype=="int":
 *             out.mtxInt = self.view.fromEuclidean(drf(M.mtxInt))             # <<<<<<<<<<<<<<
 *         if M.ctype=="float":
 *             out.mtxFloat = self.view.fromEuclidean(drf(M.mtxFloat))
 */
    __pyx_v_out->__pyx_base.mtxInt = __pyx_v_self->view.fromEuclidean((*__pyx_v_M->__pyx_base.mtxInt));

    /* "miololib.pyx":1926
 *         """
 *         out = Matrix(ctype=M.ctype)
 *         if M.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.mtxInt = self.view.fromEuclidean(drf(M.mtxInt))
 *         if M.ctype=="float":
 */
  }

  /* "miololib.pyx":1928
 *         if M.ctype=="int":
 *             out.mtxInt = self.view.fromEuclidean(drf(M.mtxInt))
 *         if M.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.mtxFloat = self.view.fromEuclidean(drf(M.mtxFloat))
 *         if M.ctype=="double":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1928, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1928, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":1929
 *             out.mtxInt = self.view.fromEuclidean(drf(M.mtxInt))
 *         if M.ctype=="float":
 *             out.mtxFloat = self.view.fromEuclidean(drf(M.mtxFloat))             # <<<<<<<<<<<<<<
 *         if M.ctype=="double":
 *             out.mtxDouble = self.view.fromEuclidean(drf(M.mtxDouble))
 */
    __pyx_v_out->__pyx_base.mtxFloat = __pyx_v_self->view.fromEuclidean((*__pyx_v_M->__pyx_base.mtxFloat));

    /* "miololib.pyx":1928
 *         if M.ctype=="int":
 *             out.mtxInt = self.view.fromEuclidean(drf(M.mtxInt))
 *         if M.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.mtxFloat = self.view.fromEuclidean(drf(M.mtxFloat))
 *         if M.ctype=="double":
 */
  }

  /* "miololib.pyx":1930
 *         if M.ctype=="float":
 *             out.mtxFloat = self.view.fromEuclidean(drf(M.mtxFloat))
 *         if M.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.mtxDouble = self.view.fromEuclidean(drf(M.mtxDouble))
 *         return out
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1930, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1930, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":1931
 *             out.mtxFloat = self.view.fromEuclidean(drf(M.mtxFloat))
 *         if M.ctype=="double":
 *             out.mtxDouble = self.view.fromEuclidean(drf(M.mtxDouble))             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
    __pyx_v_out->__pyx_base.mtxDouble = __pyx_v_self->view.fromEuclidean((*__pyx_v_M->__pyx_base.mtxDouble));

    /* "miololib.pyx":1930
 *         if M.ctype=="float":
 *             out.mtxFloat = self.view.fromEuclidean(drf(M.mtxFloat))
 *         if M.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.mtxDouble = self.view.fromEuclidean(drf(M.mtxDouble))
 *         return out
 */
  }

  /* "miololib.pyx":1932
 *         if M.ctype=="double":
 *             out.mtxDouble = self.view.fromEuclidean(drf(M.mtxDouble))
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     def toEuclidean(self, Matrix M):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_out);
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "miololib.pyx":1919
 *         return out
 * 
 *     def fromEuclidean(self, Matrix M):             # <<<<<<<<<<<<<<
 *         """
 *             Returns the Matrix for which each row r has M.cols+1 columns and is
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("miolo.Sphere.fromEuclidean", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":1934
 *         return out
 * 
 *     def toEuclidean(self, Matrix M):             # <<<<<<<<<<<<<<
 *         """
 *             Returns the Matrix for which each row r has M.cols-1 columns and is
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_6Sphere_7toEuclidean(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_6Sphere_6toEuclidean, "Sphere.toEuclidean(self, Matrix M)\n\n            Returns the Matrix for which each row r has M.cols-1 columns and is\n            the mapping of the r row of M to the sphere embedded in the euclidean\n            space of dimension M.cols+1.  \n        ");
static PyMethodDef __pyx_mdef_5miolo_6Sphere_7toEuclidean = {"toEuclidean", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_6Sphere_7toEuclidean, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_6Sphere_6toEuclidean};
static PyObject *__pyx_pw_5miolo_6Sphere_7toEuclidean(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_M = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("toEuclidean (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_M,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_M)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1934, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "toEuclidean") < 0)) __PYX_ERR(1, 1934, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_M = ((struct __pyx_obj_5miolo_Matrix *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("toEuclidean", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 1934, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.Sphere.toEuclidean", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_M), __pyx_ptype_5miolo_Matrix, 1, "M", 0))) __PYX_ERR(1, 1934, __pyx_L1_error)
  __pyx_r = __pyx_pf_5miolo_6Sphere_6toEuclidean(((struct __pyx_obj_5miolo_Sphere *)__pyx_v_self), __pyx_v_M);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_6Sphere_6toEuclidean(struct __pyx_obj_5miolo_Sphere *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_M) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("toEuclidean", 1);

  /* "miololib.pyx":1940
 *             space of dimension M.cols+1.
 *         """
 *         out = Matrix(ctype=M.ctype)             # <<<<<<<<<<<<<<
 *         if M.ctype=="int":
 *             out.mtxInt = self.view.toEuclidean(drf(M.mtxInt))
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1940, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1940, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ctype, __pyx_t_2) < 0) __PYX_ERR(1, 1940, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Matrix), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1940, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_out = ((struct __pyx_obj_5miolo_Matrix *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "miololib.pyx":1941
 *         """
 *         out = Matrix(ctype=M.ctype)
 *         if M.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.mtxInt = self.view.toEuclidean(drf(M.mtxInt))
 *         if M.ctype=="float":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1941, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1941, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":1942
 *         out = Matrix(ctype=M.ctype)
 *         if M.ctype=="int":
 *             out.mtxInt = self.view.toEuclidean(drf(M.mtxInt))             # <<<<<<<<<<<<<<
 *         if M.ctype=="float":
 *             out.mtxFloat = self.view.toEuclidean(drf(M.mtxFloat))
 */
    __pyx_v_out->__pyx_base.mtxInt = __pyx_v_self->view.toEuclidean((*__pyx_v_M->__pyx_base.mtxInt));

    /* "miololib.pyx":1941
 *         """
 *         out = Matrix(ctype=M.ctype)
 *         if M.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.mtxInt = self.view.toEuclidean(drf(M.mtxInt))
 *         if M.ctype=="float":
 */
  }

  /* "miololib.pyx":1943
 *         if M.ctype=="int":
 *             out.mtxInt = self.view.toEuclidean(drf(M.mtxInt))
 *         if M.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.mtxFloat = self.view.toEuclidean(drf(M.mtxFloat))
 *         if M.ctype=="double":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1943, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1943, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":1944
 *             out.mtxInt = self.view.toEuclidean(drf(M.mtxInt))
 *         if M.ctype=="float":
 *             out.mtxFloat = self.view.toEuclidean(drf(M.mtxFloat))             # <<<<<<<<<<<<<<
 *         if M.ctype=="double":
 *             out.mtxDouble = self.view.toEuclidean(drf(M.mtxDouble))
 */
    __pyx_v_out->__pyx_base.mtxFloat = __pyx_v_self->view.toEuclidean((*__pyx_v_M->__pyx_base.mtxFloat));

    /* "miololib.pyx":1943
 *         if M.ctype=="int":
 *             out.mtxInt = self.view.toEuclidean(drf(M.mtxInt))
 *         if M.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.mtxFloat = self.view.toEuclidean(drf(M.mtxFloat))
 *         if M.ctype=="double":
 */
  }

  /* "miololib.pyx":1945
 *         if M.ctype=="float":
 *             out.mtxFloat = self.view.toEuclidean(drf(M.mtxFloat))
 *         if M.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.mtxDouble = self.view.toEuclidean(drf(M.mtxDouble))
 *         return out
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1945, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1945, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":1946
 *             out.mtxFloat = self.view.toEuclidean(drf(M.mtxFloat))
 *         if M.ctype=="double":
 *             out.mtxDouble = self.view.toEuclidean(drf(M.mtxDouble))             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
    __pyx_v_out->__pyx_base.mtxDouble = __pyx_v_self->view.toEuclidean((*__pyx_v_M->__pyx_base.mtxDouble));

    /* "miololib.pyx":1945
 *         if M.ctype=="float":
 *             out.mtxFloat = self.view.toEuclidean(drf(M.mtxFloat))
 *         if M.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.mtxDouble = self.view.toEuclidean(drf(M.mtxDouble))
 *         return out
 */
  }

  /* "miololib.pyx":1947
 *         if M.ctype=="double":
 *             out.mtxDouble = self.view.toEuclidean(drf(M.mtxDouble))
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     def coordinateReady(self, Matrix M, unsigned long azimuth=0):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_out);
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "miololib.pyx":1934
 *         return out
 * 
 *     def toEuclidean(self, Matrix M):             # <<<<<<<<<<<<<<
 *         """
 *             Returns the Matrix for which each row r has M.cols-1 columns and is
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("miolo.Sphere.toEuclidean", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":1949
 *         return out
 * 
 *     def coordinateReady(self, Matrix M, unsigned long azimuth=0):             # <<<<<<<<<<<<<<
 *         """
 *             Transforms M in order to make its rows suitable spherical coordinates.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_6Sphere_9coordinateReady(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_6Sphere_8coordinateReady, "Sphere.coordinateReady(self, Matrix M, unsigned long azimuth=0)\n\n            Transforms M in order to make its rows suitable spherical coordinates.\n            First, minmax normalization is done and then columns are multiplied\n            by PI, with the exception of azimuth, which is multiplied by 2*PI.\n        ");
static PyMethodDef __pyx_mdef_5miolo_6Sphere_9coordinateReady = {"coordinateReady", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_6Sphere_9coordinateReady, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_6Sphere_8coordinateReady};
static PyObject *__pyx_pw_5miolo_6Sphere_9coordinateReady(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_M = 0;
  unsigned long __pyx_v_azimuth;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("coordinateReady (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_M,&__pyx_n_s_azimuth,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_M)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1949, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_azimuth);
          if (value) { values[1] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1949, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "coordinateReady") < 0)) __PYX_ERR(1, 1949, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_M = ((struct __pyx_obj_5miolo_Matrix *)values[0]);
    if (values[1]) {
      __pyx_v_azimuth = __Pyx_PyInt_As_unsigned_long(values[1]); if (unlikely((__pyx_v_azimuth == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1949, __pyx_L3_error)
    } else {
      __pyx_v_azimuth = ((unsigned long)0);
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("coordinateReady", 0, 1, 2, __pyx_nargs); __PYX_ERR(1, 1949, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.Sphere.coordinateReady", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_M), __pyx_ptype_5miolo_Matrix, 1, "M", 0))) __PYX_ERR(1, 1949, __pyx_L1_error)
  __pyx_r = __pyx_pf_5miolo_6Sphere_8coordinateReady(((struct __pyx_obj_5miolo_Sphere *)__pyx_v_self), __pyx_v_M, __pyx_v_azimuth);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_6Sphere_8coordinateReady(struct __pyx_obj_5miolo_Sphere *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_M, unsigned long __pyx_v_azimuth) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("coordinateReady", 1);

  /* "miololib.pyx":1955
 *             by PI, with the exception of azimuth, which is multiplied by 2*PI.
 *         """
 *         if azimuth>=M.cols:             # <<<<<<<<<<<<<<
 *             raise ValueError("azimuth must be smaller than M.cols.")
 *         out = Matrix(ctype=M.ctype)
 */
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_long(__pyx_v_azimuth); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1955, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_cols); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1955, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_GE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1955, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 1955, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(__pyx_t_4)) {

    /* "miololib.pyx":1956
 *         """
 *         if azimuth>=M.cols:
 *             raise ValueError("azimuth must be smaller than M.cols.")             # <<<<<<<<<<<<<<
 *         out = Matrix(ctype=M.ctype)
 *         if M.ctype=="int":
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__70, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1956, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 1956, __pyx_L1_error)

    /* "miololib.pyx":1955
 *             by PI, with the exception of azimuth, which is multiplied by 2*PI.
 *         """
 *         if azimuth>=M.cols:             # <<<<<<<<<<<<<<
 *             raise ValueError("azimuth must be smaller than M.cols.")
 *         out = Matrix(ctype=M.ctype)
 */
  }

  /* "miololib.pyx":1957
 *         if azimuth>=M.cols:
 *             raise ValueError("azimuth must be smaller than M.cols.")
 *         out = Matrix(ctype=M.ctype)             # <<<<<<<<<<<<<<
 *         if M.ctype=="int":
 *             out.mtxInt = self.view.coordinateReady(drf(M.mtxInt),azimuth)
 */
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1957, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1957, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_ctype, __pyx_t_2) < 0) __PYX_ERR(1, 1957, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Matrix), __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1957, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_out = ((struct __pyx_obj_5miolo_Matrix *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "miololib.pyx":1958
 *             raise ValueError("azimuth must be smaller than M.cols.")
 *         out = Matrix(ctype=M.ctype)
 *         if M.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.mtxInt = self.view.coordinateReady(drf(M.mtxInt),azimuth)
 *         if M.ctype=="float":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1958, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 1958, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "miololib.pyx":1959
 *         out = Matrix(ctype=M.ctype)
 *         if M.ctype=="int":
 *             out.mtxInt = self.view.coordinateReady(drf(M.mtxInt),azimuth)             # <<<<<<<<<<<<<<
 *         if M.ctype=="float":
 *             out.mtxFloat = self.view.coordinateReady(drf(M.mtxFloat),azimuth)
 */
    __pyx_v_out->__pyx_base.mtxInt = __pyx_v_self->view.coordinateReady((*__pyx_v_M->__pyx_base.mtxInt), __pyx_v_azimuth);

    /* "miololib.pyx":1958
 *             raise ValueError("azimuth must be smaller than M.cols.")
 *         out = Matrix(ctype=M.ctype)
 *         if M.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.mtxInt = self.view.coordinateReady(drf(M.mtxInt),azimuth)
 *         if M.ctype=="float":
 */
  }

  /* "miololib.pyx":1960
 *         if M.ctype=="int":
 *             out.mtxInt = self.view.coordinateReady(drf(M.mtxInt),azimuth)
 *         if M.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.mtxFloat = self.view.coordinateReady(drf(M.mtxFloat),azimuth)
 *         if M.ctype=="double":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1960, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 1960, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "miololib.pyx":1961
 *             out.mtxInt = self.view.coordinateReady(drf(M.mtxInt),azimuth)
 *         if M.ctype=="float":
 *             out.mtxFloat = self.view.coordinateReady(drf(M.mtxFloat),azimuth)             # <<<<<<<<<<<<<<
 *         if M.ctype=="double":
 *             out.mtxDouble = self.view.coordinateReady(drf(M.mtxDouble),azimuth)
 */
    __pyx_v_out->__pyx_base.mtxFloat = __pyx_v_self->view.coordinateReady((*__pyx_v_M->__pyx_base.mtxFloat), __pyx_v_azimuth);

    /* "miololib.pyx":1960
 *         if M.ctype=="int":
 *             out.mtxInt = self.view.coordinateReady(drf(M.mtxInt),azimuth)
 *         if M.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.mtxFloat = self.view.coordinateReady(drf(M.mtxFloat),azimuth)
 *         if M.ctype=="double":
 */
  }

  /* "miololib.pyx":1962
 *         if M.ctype=="float":
 *             out.mtxFloat = self.view.coordinateReady(drf(M.mtxFloat),azimuth)
 *         if M.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.mtxDouble = self.view.coordinateReady(drf(M.mtxDouble),azimuth)
 *         return out
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1962, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 1962, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "miololib.pyx":1963
 *             out.mtxFloat = self.view.coordinateReady(drf(M.mtxFloat),azimuth)
 *         if M.ctype=="double":
 *             out.mtxDouble = self.view.coordinateReady(drf(M.mtxDouble),azimuth)             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
    __pyx_v_out->__pyx_base.mtxDouble = __pyx_v_self->view.coordinateReady((*__pyx_v_M->__pyx_base.mtxDouble), __pyx_v_azimuth);

    /* "miololib.pyx":1962
 *         if M.ctype=="float":
 *             out.mtxFloat = self.view.coordinateReady(drf(M.mtxFloat),azimuth)
 *         if M.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.mtxDouble = self.view.coordinateReady(drf(M.mtxDouble),azimuth)
 *         return out
 */
  }

  /* "miololib.pyx":1964
 *         if M.ctype=="double":
 *             out.mtxDouble = self.view.coordinateReady(drf(M.mtxDouble),azimuth)
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     def distance(self, Matrix M):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_out);
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "miololib.pyx":1949
 *         return out
 * 
 *     def coordinateReady(self, Matrix M, unsigned long azimuth=0):             # <<<<<<<<<<<<<<
 *         """
 *             Transforms M in order to make its rows suitable spherical coordinates.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("miolo.Sphere.coordinateReady", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":1966
 *         return out
 * 
 *     def distance(self, Matrix M):             # <<<<<<<<<<<<<<
 *         """
 *             Return a square Matrix for which each entry is the geodesic distance
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_6Sphere_11distance(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_6Sphere_10distance, "Sphere.distance(self, Matrix M)\n\n            Return a square Matrix for which each entry is the geodesic distance\n            between the pair of (i,j) rows of M.\n        ");
static PyMethodDef __pyx_mdef_5miolo_6Sphere_11distance = {"distance", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_6Sphere_11distance, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_6Sphere_10distance};
static PyObject *__pyx_pw_5miolo_6Sphere_11distance(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_M = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("distance (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_M,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_M)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1966, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "distance") < 0)) __PYX_ERR(1, 1966, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_M = ((struct __pyx_obj_5miolo_Matrix *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("distance", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 1966, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.Sphere.distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_M), __pyx_ptype_5miolo_Matrix, 1, "M", 0))) __PYX_ERR(1, 1966, __pyx_L1_error)
  __pyx_r = __pyx_pf_5miolo_6Sphere_10distance(((struct __pyx_obj_5miolo_Sphere *)__pyx_v_self), __pyx_v_M);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_6Sphere_10distance(struct __pyx_obj_5miolo_Sphere *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_M) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("distance", 1);

  /* "miololib.pyx":1971
 *             between the pair of (i,j) rows of M.
 *         """
 *         out = Matrix(ctype=M.ctype)             # <<<<<<<<<<<<<<
 *         if M.ctype=="int":
 *             out.mtxInt = self.view.distance(drf(M.mtxInt))
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1971, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1971, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ctype, __pyx_t_2) < 0) __PYX_ERR(1, 1971, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Matrix), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1971, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_out = ((struct __pyx_obj_5miolo_Matrix *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "miololib.pyx":1972
 *         """
 *         out = Matrix(ctype=M.ctype)
 *         if M.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.mtxInt = self.view.distance(drf(M.mtxInt))
 *         if M.ctype=="float":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1972, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1972, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":1973
 *         out = Matrix(ctype=M.ctype)
 *         if M.ctype=="int":
 *             out.mtxInt = self.view.distance(drf(M.mtxInt))             # <<<<<<<<<<<<<<
 *         if M.ctype=="float":
 *             out.mtxFloat = self.view.distance(drf(M.mtxFloat))
 */
    __pyx_v_out->__pyx_base.mtxInt = __pyx_v_self->view.distance((*__pyx_v_M->__pyx_base.mtxInt));

    /* "miololib.pyx":1972
 *         """
 *         out = Matrix(ctype=M.ctype)
 *         if M.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.mtxInt = self.view.distance(drf(M.mtxInt))
 *         if M.ctype=="float":
 */
  }

  /* "miololib.pyx":1974
 *         if M.ctype=="int":
 *             out.mtxInt = self.view.distance(drf(M.mtxInt))
 *         if M.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.mtxFloat = self.view.distance(drf(M.mtxFloat))
 *         if M.ctype=="double":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1974, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1974, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":1975
 *             out.mtxInt = self.view.distance(drf(M.mtxInt))
 *         if M.ctype=="float":
 *             out.mtxFloat = self.view.distance(drf(M.mtxFloat))             # <<<<<<<<<<<<<<
 *         if M.ctype=="double":
 *             out.mtxDouble = self.view.distance(drf(M.mtxDouble))
 */
    __pyx_v_out->__pyx_base.mtxFloat = __pyx_v_self->view.distance((*__pyx_v_M->__pyx_base.mtxFloat));

    /* "miololib.pyx":1974
 *         if M.ctype=="int":
 *             out.mtxInt = self.view.distance(drf(M.mtxInt))
 *         if M.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.mtxFloat = self.view.distance(drf(M.mtxFloat))
 *         if M.ctype=="double":
 */
  }

  /* "miololib.pyx":1976
 *         if M.ctype=="float":
 *             out.mtxFloat = self.view.distance(drf(M.mtxFloat))
 *         if M.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.mtxDouble = self.view.distance(drf(M.mtxDouble))
 *         return out
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1976, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1976, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":1977
 *             out.mtxFloat = self.view.distance(drf(M.mtxFloat))
 *         if M.ctype=="double":
 *             out.mtxDouble = self.view.distance(drf(M.mtxDouble))             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
    __pyx_v_out->__pyx_base.mtxDouble = __pyx_v_self->view.distance((*__pyx_v_M->__pyx_base.mtxDouble));

    /* "miololib.pyx":1976
 *         if M.ctype=="float":
 *             out.mtxFloat = self.view.distance(drf(M.mtxFloat))
 *         if M.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.mtxDouble = self.view.distance(drf(M.mtxDouble))
 *         return out
 */
  }

  /* "miololib.pyx":1978
 *         if M.ctype=="double":
 *             out.mtxDouble = self.view.distance(drf(M.mtxDouble))
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     def isIn(self, Matrix M, double tolerance=0.001):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_out);
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "miololib.pyx":1966
 *         return out
 * 
 *     def distance(self, Matrix M):             # <<<<<<<<<<<<<<
 *         """
 *             Return a square Matrix for which each entry is the geodesic distance
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("miolo.Sphere.distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":1980
 *         return out
 * 
 *     def isIn(self, Matrix M, double tolerance=0.001):             # <<<<<<<<<<<<<<
 *         """
 *             Checks if each row of M is on the sphere.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_6Sphere_13isIn(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_6Sphere_12isIn, "Sphere.isIn(self, Matrix M, double tolerance=0.001)\n\n            Checks if each row of M is on the sphere.\n            tolerance: numerical tolerance for acceptance.\n        ");
static PyMethodDef __pyx_mdef_5miolo_6Sphere_13isIn = {"isIn", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_6Sphere_13isIn, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_6Sphere_12isIn};
static PyObject *__pyx_pw_5miolo_6Sphere_13isIn(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_M = 0;
  double __pyx_v_tolerance;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isIn (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_M,&__pyx_n_s_tolerance,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_M)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1980, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_tolerance);
          if (value) { values[1] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1980, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "isIn") < 0)) __PYX_ERR(1, 1980, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_M = ((struct __pyx_obj_5miolo_Matrix *)values[0]);
    if (values[1]) {
      __pyx_v_tolerance = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_tolerance == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1980, __pyx_L3_error)
    } else {
      __pyx_v_tolerance = ((double)0.001);
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("isIn", 0, 1, 2, __pyx_nargs); __PYX_ERR(1, 1980, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.Sphere.isIn", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_M), __pyx_ptype_5miolo_Matrix, 1, "M", 0))) __PYX_ERR(1, 1980, __pyx_L1_error)
  __pyx_r = __pyx_pf_5miolo_6Sphere_12isIn(((struct __pyx_obj_5miolo_Sphere *)__pyx_v_self), __pyx_v_M, __pyx_v_tolerance);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_6Sphere_12isIn(struct __pyx_obj_5miolo_Sphere *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_M, double __pyx_v_tolerance) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isIn", 1);

  /* "miololib.pyx":1985
 *             tolerance: numerical tolerance for acceptance.
 *         """
 *         if M.ctype=="int":             # <<<<<<<<<<<<<<
 *             return self.view.isIn(drf(M.mtxInt),<int>tolerance)
 *         if M.ctype=="float":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1985, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 1985, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":1986
 *         """
 *         if M.ctype=="int":
 *             return self.view.isIn(drf(M.mtxInt),<int>tolerance)             # <<<<<<<<<<<<<<
 *         if M.ctype=="float":
 *             return self.view.isIn(drf(M.mtxFloat),<float>tolerance)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->view.isIn((*__pyx_v_M->__pyx_base.mtxInt), ((int)__pyx_v_tolerance))); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1986, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "miololib.pyx":1985
 *             tolerance: numerical tolerance for acceptance.
 *         """
 *         if M.ctype=="int":             # <<<<<<<<<<<<<<
 *             return self.view.isIn(drf(M.mtxInt),<int>tolerance)
 *         if M.ctype=="float":
 */
  }

  /* "miololib.pyx":1987
 *         if M.ctype=="int":
 *             return self.view.isIn(drf(M.mtxInt),<int>tolerance)
 *         if M.ctype=="float":             # <<<<<<<<<<<<<<
 *             return self.view.isIn(drf(M.mtxFloat),<float>tolerance)
 *         if M.ctype=="double":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1987, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 1987, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":1988
 *             return self.view.isIn(drf(M.mtxInt),<int>tolerance)
 *         if M.ctype=="float":
 *             return self.view.isIn(drf(M.mtxFloat),<float>tolerance)             # <<<<<<<<<<<<<<
 *         if M.ctype=="double":
 *             return self.view.isIn(drf(M.mtxDouble),tolerance)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->view.isIn((*__pyx_v_M->__pyx_base.mtxFloat), ((float)__pyx_v_tolerance))); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1988, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "miololib.pyx":1987
 *         if M.ctype=="int":
 *             return self.view.isIn(drf(M.mtxInt),<int>tolerance)
 *         if M.ctype=="float":             # <<<<<<<<<<<<<<
 *             return self.view.isIn(drf(M.mtxFloat),<float>tolerance)
 *         if M.ctype=="double":
 */
  }

  /* "miololib.pyx":1989
 *         if M.ctype=="float":
 *             return self.view.isIn(drf(M.mtxFloat),<float>tolerance)
 *         if M.ctype=="double":             # <<<<<<<<<<<<<<
 *             return self.view.isIn(drf(M.mtxDouble),tolerance)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1989, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 1989, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":1990
 *             return self.view.isIn(drf(M.mtxFloat),<float>tolerance)
 *         if M.ctype=="double":
 *             return self.view.isIn(drf(M.mtxDouble),tolerance)             # <<<<<<<<<<<<<<
 * 
 *     def isTangent(self, Matrix at, Matrix M, double tolerance=0.001):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->view.isIn((*__pyx_v_M->__pyx_base.mtxDouble), __pyx_v_tolerance)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1990, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "miololib.pyx":1989
 *         if M.ctype=="float":
 *             return self.view.isIn(drf(M.mtxFloat),<float>tolerance)
 *         if M.ctype=="double":             # <<<<<<<<<<<<<<
 *             return self.view.isIn(drf(M.mtxDouble),tolerance)
 * 
 */
  }

  /* "miololib.pyx":1980
 *         return out
 * 
 *     def isIn(self, Matrix M, double tolerance=0.001):             # <<<<<<<<<<<<<<
 *         """
 *             Checks if each row of M is on the sphere.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("miolo.Sphere.isIn", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":1992
 *             return self.view.isIn(drf(M.mtxDouble),tolerance)
 * 
 *     def isTangent(self, Matrix at, Matrix M, double tolerance=0.001):             # <<<<<<<<<<<<<<
 *         """
 *             Checks if each row of M is on the tangent space of the corresponding
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_6Sphere_15isTangent(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_6Sphere_14isTangent, "Sphere.isTangent(self, Matrix at, Matrix M, double tolerance=0.001)\n\n            Checks if each row of M is on the tangent space of the corresponding\n            row of at.\n            tolerance: numerical tolerance for acceptance.\n        ");
static PyMethodDef __pyx_mdef_5miolo_6Sphere_15isTangent = {"isTangent", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_6Sphere_15isTangent, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_6Sphere_14isTangent};
static PyObject *__pyx_pw_5miolo_6Sphere_15isTangent(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_at = 0;
  struct __pyx_obj_5miolo_Matrix *__pyx_v_M = 0;
  double __pyx_v_tolerance;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isTangent (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_at,&__pyx_n_s_M,&__pyx_n_s_tolerance,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_at)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1992, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_M)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1992, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("isTangent", 0, 2, 3, 1); __PYX_ERR(1, 1992, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_tolerance);
          if (value) { values[2] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1992, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "isTangent") < 0)) __PYX_ERR(1, 1992, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_at = ((struct __pyx_obj_5miolo_Matrix *)values[0]);
    __pyx_v_M = ((struct __pyx_obj_5miolo_Matrix *)values[1]);
    if (values[2]) {
      __pyx_v_tolerance = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_tolerance == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1992, __pyx_L3_error)
    } else {
      __pyx_v_tolerance = ((double)0.001);
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("isTangent", 0, 2, 3, __pyx_nargs); __PYX_ERR(1, 1992, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.Sphere.isTangent", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_at), __pyx_ptype_5miolo_Matrix, 1, "at", 0))) __PYX_ERR(1, 1992, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_M), __pyx_ptype_5miolo_Matrix, 1, "M", 0))) __PYX_ERR(1, 1992, __pyx_L1_error)
  __pyx_r = __pyx_pf_5miolo_6Sphere_14isTangent(((struct __pyx_obj_5miolo_Sphere *)__pyx_v_self), __pyx_v_at, __pyx_v_M, __pyx_v_tolerance);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_6Sphere_14isTangent(struct __pyx_obj_5miolo_Sphere *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_at, struct __pyx_obj_5miolo_Matrix *__pyx_v_M, double __pyx_v_tolerance) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isTangent", 1);

  /* "miololib.pyx":1998
 *             tolerance: numerical tolerance for acceptance.
 *         """
 *         if at.rows!=M.rows or at.cols!=M.cols:             # <<<<<<<<<<<<<<
 *             raise Exception("at and M must have same shape.")
 *         if at.ctype!=M.ctype:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_at), __pyx_n_s_rows); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1998, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_rows); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1998, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_2, __pyx_t_3, Py_NE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1998, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(1, 1998, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!__pyx_t_5) {
  } else {
    __pyx_t_1 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_at), __pyx_n_s_cols); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1998, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_cols); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1998, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_4, __pyx_t_3, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1998, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(1, 1998, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_1 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "miololib.pyx":1999
 *         """
 *         if at.rows!=M.rows or at.cols!=M.cols:
 *             raise Exception("at and M must have same shape.")             # <<<<<<<<<<<<<<
 *         if at.ctype!=M.ctype:
 *             raise TypeError("at and M must have same ctype.")
 */
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__71, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1999, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 1999, __pyx_L1_error)

    /* "miololib.pyx":1998
 *             tolerance: numerical tolerance for acceptance.
 *         """
 *         if at.rows!=M.rows or at.cols!=M.cols:             # <<<<<<<<<<<<<<
 *             raise Exception("at and M must have same shape.")
 *         if at.ctype!=M.ctype:
 */
  }

  /* "miololib.pyx":2000
 *         if at.rows!=M.rows or at.cols!=M.cols:
 *             raise Exception("at and M must have same shape.")
 *         if at.ctype!=M.ctype:             # <<<<<<<<<<<<<<
 *             raise TypeError("at and M must have same ctype.")
 *         if M.ctype=="int":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_at), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2000, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2000, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_2, __pyx_t_3, Py_NE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2000, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 2000, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(__pyx_t_1)) {

    /* "miololib.pyx":2001
 *             raise Exception("at and M must have same shape.")
 *         if at.ctype!=M.ctype:
 *             raise TypeError("at and M must have same ctype.")             # <<<<<<<<<<<<<<
 *         if M.ctype=="int":
 *             return self.view.isTangent(drf(at.mtxInt),drf(M.mtxInt),<int>tolerance)
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__72, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2001, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(1, 2001, __pyx_L1_error)

    /* "miololib.pyx":2000
 *         if at.rows!=M.rows or at.cols!=M.cols:
 *             raise Exception("at and M must have same shape.")
 *         if at.ctype!=M.ctype:             # <<<<<<<<<<<<<<
 *             raise TypeError("at and M must have same ctype.")
 *         if M.ctype=="int":
 */
  }

  /* "miololib.pyx":2002
 *         if at.ctype!=M.ctype:
 *             raise TypeError("at and M must have same ctype.")
 *         if M.ctype=="int":             # <<<<<<<<<<<<<<
 *             return self.view.isTangent(drf(at.mtxInt),drf(M.mtxInt),<int>tolerance)
 *         if M.ctype=="float":
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_ctype); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2002, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_t_4, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 2002, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_1) {

    /* "miololib.pyx":2003
 *             raise TypeError("at and M must have same ctype.")
 *         if M.ctype=="int":
 *             return self.view.isTangent(drf(at.mtxInt),drf(M.mtxInt),<int>tolerance)             # <<<<<<<<<<<<<<
 *         if M.ctype=="float":
 *             return self.view.isTangent(drf(at.mtxFloat),drf(M.mtxFloat),<float>tolerance)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_v_self->view.isTangent((*__pyx_v_at->__pyx_base.mtxInt), (*__pyx_v_M->__pyx_base.mtxInt), ((int)__pyx_v_tolerance))); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2003, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "miololib.pyx":2002
 *         if at.ctype!=M.ctype:
 *             raise TypeError("at and M must have same ctype.")
 *         if M.ctype=="int":             # <<<<<<<<<<<<<<
 *             return self.view.isTangent(drf(at.mtxInt),drf(M.mtxInt),<int>tolerance)
 *         if M.ctype=="float":
 */
  }

  /* "miololib.pyx":2004
 *         if M.ctype=="int":
 *             return self.view.isTangent(drf(at.mtxInt),drf(M.mtxInt),<int>tolerance)
 *         if M.ctype=="float":             # <<<<<<<<<<<<<<
 *             return self.view.isTangent(drf(at.mtxFloat),drf(M.mtxFloat),<float>tolerance)
 *         if M.ctype=="double":
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_ctype); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2004, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_t_4, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 2004, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_1) {

    /* "miololib.pyx":2005
 *             return self.view.isTangent(drf(at.mtxInt),drf(M.mtxInt),<int>tolerance)
 *         if M.ctype=="float":
 *             return self.view.isTangent(drf(at.mtxFloat),drf(M.mtxFloat),<float>tolerance)             # <<<<<<<<<<<<<<
 *         if M.ctype=="double":
 *             return self.view.isTangent(drf(at.mtxDouble),drf(M.mtxDouble),tolerance)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_v_self->view.isTangent((*__pyx_v_at->__pyx_base.mtxFloat), (*__pyx_v_M->__pyx_base.mtxFloat), ((float)__pyx_v_tolerance))); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2005, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "miololib.pyx":2004
 *         if M.ctype=="int":
 *             return self.view.isTangent(drf(at.mtxInt),drf(M.mtxInt),<int>tolerance)
 *         if M.ctype=="float":             # <<<<<<<<<<<<<<
 *             return self.view.isTangent(drf(at.mtxFloat),drf(M.mtxFloat),<float>tolerance)
 *         if M.ctype=="double":
 */
  }

  /* "miololib.pyx":2006
 *         if M.ctype=="float":
 *             return self.view.isTangent(drf(at.mtxFloat),drf(M.mtxFloat),<float>tolerance)
 *         if M.ctype=="double":             # <<<<<<<<<<<<<<
 *             return self.view.isTangent(drf(at.mtxDouble),drf(M.mtxDouble),tolerance)
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_ctype); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2006, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_t_4, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 2006, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_1) {

    /* "miololib.pyx":2007
 *             return self.view.isTangent(drf(at.mtxFloat),drf(M.mtxFloat),<float>tolerance)
 *         if M.ctype=="double":
 *             return self.view.isTangent(drf(at.mtxDouble),drf(M.mtxDouble),tolerance)             # <<<<<<<<<<<<<<
 * 
 *     def exp(self, Matrix at, Matrix tangent):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_v_self->view.isTangent((*__pyx_v_at->__pyx_base.mtxDouble), (*__pyx_v_M->__pyx_base.mtxDouble), __pyx_v_tolerance)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2007, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "miololib.pyx":2006
 *         if M.ctype=="float":
 *             return self.view.isTangent(drf(at.mtxFloat),drf(M.mtxFloat),<float>tolerance)
 *         if M.ctype=="double":             # <<<<<<<<<<<<<<
 *             return self.view.isTangent(drf(at.mtxDouble),drf(M.mtxDouble),tolerance)
 * 
 */
  }

  /* "miololib.pyx":1992
 *             return self.view.isIn(drf(M.mtxDouble),tolerance)
 * 
 *     def isTangent(self, Matrix at, Matrix M, double tolerance=0.001):             # <<<<<<<<<<<<<<
 *         """
 *             Checks if each row of M is on the tangent space of the corresponding
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("miolo.Sphere.isTangent", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":2009
 *             return self.view.isTangent(drf(at.mtxDouble),drf(M.mtxDouble),tolerance)
 * 
 *     def exp(self, Matrix at, Matrix tangent):             # <<<<<<<<<<<<<<
 *         """
 *             Exponential map on the sphere.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_6Sphere_17exp(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_6Sphere_16exp, "Sphere.exp(self, Matrix at, Matrix tangent)\n\n            Exponential map on the sphere.\n            @params:\n                at: point on the sphere\n                tangent: a tangent vector of at. \n            Note: no checking is done for either at or tangent. Ensure before\n            applying.\n        ");
static PyMethodDef __pyx_mdef_5miolo_6Sphere_17exp = {"exp", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_6Sphere_17exp, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_6Sphere_16exp};
static PyObject *__pyx_pw_5miolo_6Sphere_17exp(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_at = 0;
  struct __pyx_obj_5miolo_Matrix *__pyx_v_tangent = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("exp (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_at,&__pyx_n_s_tangent,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_at)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 2009, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_tangent)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 2009, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("exp", 1, 2, 2, 1); __PYX_ERR(1, 2009, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "exp") < 0)) __PYX_ERR(1, 2009, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_at = ((struct __pyx_obj_5miolo_Matrix *)values[0]);
    __pyx_v_tangent = ((struct __pyx_obj_5miolo_Matrix *)values[1]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("exp", 1, 2, 2, __pyx_nargs); __PYX_ERR(1, 2009, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.Sphere.exp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_at), __pyx_ptype_5miolo_Matrix, 1, "at", 0))) __PYX_ERR(1, 2009, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_tangent), __pyx_ptype_5miolo_Matrix, 1, "tangent", 0))) __PYX_ERR(1, 2009, __pyx_L1_error)
  __pyx_r = __pyx_pf_5miolo_6Sphere_16exp(((struct __pyx_obj_5miolo_Sphere *)__pyx_v_self), __pyx_v_at, __pyx_v_tangent);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_6Sphere_16exp(struct __pyx_obj_5miolo_Sphere *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_at, struct __pyx_obj_5miolo_Matrix *__pyx_v_tangent) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("exp", 1);

  /* "miololib.pyx":2018
 *             applying.
 *         """
 *         if at.cols!=tangent.cols:             # <<<<<<<<<<<<<<
 *             raise Exception("at and tangent must have same number of cols.")
 *         if at.rows!=1 and at.rows!=tangent.rows:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_at), __pyx_n_s_cols); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2018, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_tangent), __pyx_n_s_cols); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2018, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2018, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 2018, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(__pyx_t_4)) {

    /* "miololib.pyx":2019
 *         """
 *         if at.cols!=tangent.cols:
 *             raise Exception("at and tangent must have same number of cols.")             # <<<<<<<<<<<<<<
 *         if at.rows!=1 and at.rows!=tangent.rows:
 *             raise Exception("Invalid shape for at.")
 */
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__73, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2019, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 2019, __pyx_L1_error)

    /* "miololib.pyx":2018
 *             applying.
 *         """
 *         if at.cols!=tangent.cols:             # <<<<<<<<<<<<<<
 *             raise Exception("at and tangent must have same number of cols.")
 *         if at.rows!=1 and at.rows!=tangent.rows:
 */
  }

  /* "miololib.pyx":2020
 *         if at.cols!=tangent.cols:
 *             raise Exception("at and tangent must have same number of cols.")
 *         if at.rows!=1 and at.rows!=tangent.rows:             # <<<<<<<<<<<<<<
 *             raise Exception("Invalid shape for at.")
 *         if at.ctype!=tangent.ctype:
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_at), __pyx_n_s_rows); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2020, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = (__Pyx_PyInt_BoolNeObjC(__pyx_t_3, __pyx_int_1, 1, 0)); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(1, 2020, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_5) {
  } else {
    __pyx_t_4 = __pyx_t_5;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_at), __pyx_n_s_rows); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2020, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_tangent), __pyx_n_s_rows); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2020, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_3, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2020, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(1, 2020, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __pyx_t_5;
  __pyx_L5_bool_binop_done:;
  if (unlikely(__pyx_t_4)) {

    /* "miololib.pyx":2021
 *             raise Exception("at and tangent must have same number of cols.")
 *         if at.rows!=1 and at.rows!=tangent.rows:
 *             raise Exception("Invalid shape for at.")             # <<<<<<<<<<<<<<
 *         if at.ctype!=tangent.ctype:
 *             raise TypeError("at and tanget must have same ctype.")
 */
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__74, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2021, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 2021, __pyx_L1_error)

    /* "miololib.pyx":2020
 *         if at.cols!=tangent.cols:
 *             raise Exception("at and tangent must have same number of cols.")
 *         if at.rows!=1 and at.rows!=tangent.rows:             # <<<<<<<<<<<<<<
 *             raise Exception("Invalid shape for at.")
 *         if at.ctype!=tangent.ctype:
 */
  }

  /* "miololib.pyx":2022
 *         if at.rows!=1 and at.rows!=tangent.rows:
 *             raise Exception("Invalid shape for at.")
 *         if at.ctype!=tangent.ctype:             # <<<<<<<<<<<<<<
 *             raise TypeError("at and tanget must have same ctype.")
 *         out = Matrix(ctype=at.ctype)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_at), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2022, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_tangent), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2022, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2022, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 2022, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(__pyx_t_4)) {

    /* "miololib.pyx":2023
 *             raise Exception("Invalid shape for at.")
 *         if at.ctype!=tangent.ctype:
 *             raise TypeError("at and tanget must have same ctype.")             # <<<<<<<<<<<<<<
 *         out = Matrix(ctype=at.ctype)
 *         if at.rows==tangent.rows:
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__75, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2023, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 2023, __pyx_L1_error)

    /* "miololib.pyx":2022
 *         if at.rows!=1 and at.rows!=tangent.rows:
 *             raise Exception("Invalid shape for at.")
 *         if at.ctype!=tangent.ctype:             # <<<<<<<<<<<<<<
 *             raise TypeError("at and tanget must have same ctype.")
 *         out = Matrix(ctype=at.ctype)
 */
  }

  /* "miololib.pyx":2024
 *         if at.ctype!=tangent.ctype:
 *             raise TypeError("at and tanget must have same ctype.")
 *         out = Matrix(ctype=at.ctype)             # <<<<<<<<<<<<<<
 *         if at.rows==tangent.rows:
 *             if out.ctype=="int":
 */
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2024, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_at), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2024, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_ctype, __pyx_t_2) < 0) __PYX_ERR(1, 2024, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Matrix), __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2024, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_out = ((struct __pyx_obj_5miolo_Matrix *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "miololib.pyx":2025
 *             raise TypeError("at and tanget must have same ctype.")
 *         out = Matrix(ctype=at.ctype)
 *         if at.rows==tangent.rows:             # <<<<<<<<<<<<<<
 *             if out.ctype=="int":
 *                 out.mtxInt = self.view.exponential(
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_at), __pyx_n_s_rows); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2025, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_tangent), __pyx_n_s_rows); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2025, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_2, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2025, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 2025, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "miololib.pyx":2026
 *         out = Matrix(ctype=at.ctype)
 *         if at.rows==tangent.rows:
 *             if out.ctype=="int":             # <<<<<<<<<<<<<<
 *                 out.mtxInt = self.view.exponential(
 *                     drf(at.mtxInt),drf(tangent.mtxInt)
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2026, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 2026, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_4) {

      /* "miololib.pyx":2027
 *         if at.rows==tangent.rows:
 *             if out.ctype=="int":
 *                 out.mtxInt = self.view.exponential(             # <<<<<<<<<<<<<<
 *                     drf(at.mtxInt),drf(tangent.mtxInt)
 *                 )
 */
      __pyx_v_out->__pyx_base.mtxInt = __pyx_v_self->view.exponential((*__pyx_v_at->__pyx_base.mtxInt), (*__pyx_v_tangent->__pyx_base.mtxInt));

      /* "miololib.pyx":2026
 *         out = Matrix(ctype=at.ctype)
 *         if at.rows==tangent.rows:
 *             if out.ctype=="int":             # <<<<<<<<<<<<<<
 *                 out.mtxInt = self.view.exponential(
 *                     drf(at.mtxInt),drf(tangent.mtxInt)
 */
    }

    /* "miololib.pyx":2030
 *                     drf(at.mtxInt),drf(tangent.mtxInt)
 *                 )
 *             if out.ctype=="float":             # <<<<<<<<<<<<<<
 *                 out.mtxFloat = self.view.exponential(
 *                     drf(at.mtxFloat),drf(tangent.mtxFloat)
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2030, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 2030, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_4) {

      /* "miololib.pyx":2031
 *                 )
 *             if out.ctype=="float":
 *                 out.mtxFloat = self.view.exponential(             # <<<<<<<<<<<<<<
 *                     drf(at.mtxFloat),drf(tangent.mtxFloat)
 *                 )
 */
      __pyx_v_out->__pyx_base.mtxFloat = __pyx_v_self->view.exponential((*__pyx_v_at->__pyx_base.mtxFloat), (*__pyx_v_tangent->__pyx_base.mtxFloat));

      /* "miololib.pyx":2030
 *                     drf(at.mtxInt),drf(tangent.mtxInt)
 *                 )
 *             if out.ctype=="float":             # <<<<<<<<<<<<<<
 *                 out.mtxFloat = self.view.exponential(
 *                     drf(at.mtxFloat),drf(tangent.mtxFloat)
 */
    }

    /* "miololib.pyx":2034
 *                     drf(at.mtxFloat),drf(tangent.mtxFloat)
 *                 )
 *             if out.ctype=="double":             # <<<<<<<<<<<<<<
 *                 out.mtxDouble = self.view.exponential(
 *                     drf(at.mtxDouble),drf(tangent.mtxDouble)
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2034, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 2034, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_4) {

      /* "miololib.pyx":2035
 *                 )
 *             if out.ctype=="double":
 *                 out.mtxDouble = self.view.exponential(             # <<<<<<<<<<<<<<
 *                     drf(at.mtxDouble),drf(tangent.mtxDouble)
 *                 )
 */
      __pyx_v_out->__pyx_base.mtxDouble = __pyx_v_self->view.exponential((*__pyx_v_at->__pyx_base.mtxDouble), (*__pyx_v_tangent->__pyx_base.mtxDouble));

      /* "miololib.pyx":2034
 *                     drf(at.mtxFloat),drf(tangent.mtxFloat)
 *                 )
 *             if out.ctype=="double":             # <<<<<<<<<<<<<<
 *                 out.mtxDouble = self.view.exponential(
 *                     drf(at.mtxDouble),drf(tangent.mtxDouble)
 */
    }

    /* "miololib.pyx":2025
 *             raise TypeError("at and tanget must have same ctype.")
 *         out = Matrix(ctype=at.ctype)
 *         if at.rows==tangent.rows:             # <<<<<<<<<<<<<<
 *             if out.ctype=="int":
 *                 out.mtxInt = self.view.exponential(
 */
  }

  /* "miololib.pyx":2038
 *                     drf(at.mtxDouble),drf(tangent.mtxDouble)
 *                 )
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     def centroidDistance(self, Matrix M, Matrix center):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_out);
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "miololib.pyx":2009
 *             return self.view.isTangent(drf(at.mtxDouble),drf(M.mtxDouble),tolerance)
 * 
 *     def exp(self, Matrix at, Matrix tangent):             # <<<<<<<<<<<<<<
 *         """
 *             Exponential map on the sphere.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("miolo.Sphere.exp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":2040
 *         return out
 * 
 *     def centroidDistance(self, Matrix M, Matrix center):             # <<<<<<<<<<<<<<
 *         """
 *             Returns the distance of each row in M to each row of center.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_6Sphere_19centroidDistance(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_6Sphere_18centroidDistance, "Sphere.centroidDistance(self, Matrix M, Matrix center)\n\n            Returns the distance of each row in M to each row of center.\n            Useful for implementing k-means.\n        ");
static PyMethodDef __pyx_mdef_5miolo_6Sphere_19centroidDistance = {"centroidDistance", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_6Sphere_19centroidDistance, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_6Sphere_18centroidDistance};
static PyObject *__pyx_pw_5miolo_6Sphere_19centroidDistance(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_M = 0;
  struct __pyx_obj_5miolo_Matrix *__pyx_v_center = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("centroidDistance (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_M,&__pyx_n_s_center,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_M)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 2040, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_center)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 2040, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("centroidDistance", 1, 2, 2, 1); __PYX_ERR(1, 2040, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "centroidDistance") < 0)) __PYX_ERR(1, 2040, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_M = ((struct __pyx_obj_5miolo_Matrix *)values[0]);
    __pyx_v_center = ((struct __pyx_obj_5miolo_Matrix *)values[1]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("centroidDistance", 1, 2, 2, __pyx_nargs); __PYX_ERR(1, 2040, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.Sphere.centroidDistance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_M), __pyx_ptype_5miolo_Matrix, 1, "M", 0))) __PYX_ERR(1, 2040, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_center), __pyx_ptype_5miolo_Matrix, 1, "center", 0))) __PYX_ERR(1, 2040, __pyx_L1_error)
  __pyx_r = __pyx_pf_5miolo_6Sphere_18centroidDistance(((struct __pyx_obj_5miolo_Sphere *)__pyx_v_self), __pyx_v_M, __pyx_v_center);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_6Sphere_18centroidDistance(struct __pyx_obj_5miolo_Sphere *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_M, struct __pyx_obj_5miolo_Matrix *__pyx_v_center) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("centroidDistance", 1);

  /* "miololib.pyx":2045
 *             Useful for implementing k-means.
 *         """
 *         if M.ctype!=center.ctype:             # <<<<<<<<<<<<<<
 *             raise TypeError("M and center must have same ctype.")
 *         if M.cols!=center.cols:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2045, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_center), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2045, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2045, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 2045, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(__pyx_t_4)) {

    /* "miololib.pyx":2046
 *         """
 *         if M.ctype!=center.ctype:
 *             raise TypeError("M and center must have same ctype.")             # <<<<<<<<<<<<<<
 *         if M.cols!=center.cols:
 *             raise Exception("M.cols must be equal to center.cols.")
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__67, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2046, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 2046, __pyx_L1_error)

    /* "miololib.pyx":2045
 *             Useful for implementing k-means.
 *         """
 *         if M.ctype!=center.ctype:             # <<<<<<<<<<<<<<
 *             raise TypeError("M and center must have same ctype.")
 *         if M.cols!=center.cols:
 */
  }

  /* "miololib.pyx":2047
 *         if M.ctype!=center.ctype:
 *             raise TypeError("M and center must have same ctype.")
 *         if M.cols!=center.cols:             # <<<<<<<<<<<<<<
 *             raise Exception("M.cols must be equal to center.cols.")
 *         out = Matrix(ctype=M.ctype)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_cols); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2047, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_center), __pyx_n_s_cols); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2047, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_3, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2047, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 2047, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(__pyx_t_4)) {

    /* "miololib.pyx":2048
 *             raise TypeError("M and center must have same ctype.")
 *         if M.cols!=center.cols:
 *             raise Exception("M.cols must be equal to center.cols.")             # <<<<<<<<<<<<<<
 *         out = Matrix(ctype=M.ctype)
 *         if out.ctype=="int":
 */
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__68, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2048, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 2048, __pyx_L1_error)

    /* "miololib.pyx":2047
 *         if M.ctype!=center.ctype:
 *             raise TypeError("M and center must have same ctype.")
 *         if M.cols!=center.cols:             # <<<<<<<<<<<<<<
 *             raise Exception("M.cols must be equal to center.cols.")
 *         out = Matrix(ctype=M.ctype)
 */
  }

  /* "miololib.pyx":2049
 *         if M.cols!=center.cols:
 *             raise Exception("M.cols must be equal to center.cols.")
 *         out = Matrix(ctype=M.ctype)             # <<<<<<<<<<<<<<
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.centroidDistance(drf(M.mtxInt),drf(center.mtxInt))
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2049, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2049, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ctype, __pyx_t_2) < 0) __PYX_ERR(1, 2049, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Matrix), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2049, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_out = ((struct __pyx_obj_5miolo_Matrix *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "miololib.pyx":2050
 *             raise Exception("M.cols must be equal to center.cols.")
 *         out = Matrix(ctype=M.ctype)
 *         if out.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.mtxInt = self.view.centroidDistance(drf(M.mtxInt),drf(center.mtxInt))
 *         if out.ctype=="float":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2050, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 2050, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "miololib.pyx":2051
 *         out = Matrix(ctype=M.ctype)
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.centroidDistance(drf(M.mtxInt),drf(center.mtxInt))             # <<<<<<<<<<<<<<
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.centroidDistance(drf(M.mtxFloat),drf(center.mtxFloat))
 */
    __pyx_v_out->__pyx_base.mtxInt = __pyx_v_self->view.centroidDistance((*__pyx_v_M->__pyx_base.mtxInt), (*__pyx_v_center->__pyx_base.mtxInt));

    /* "miololib.pyx":2050
 *             raise Exception("M.cols must be equal to center.cols.")
 *         out = Matrix(ctype=M.ctype)
 *         if out.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.mtxInt = self.view.centroidDistance(drf(M.mtxInt),drf(center.mtxInt))
 *         if out.ctype=="float":
 */
  }

  /* "miololib.pyx":2052
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.centroidDistance(drf(M.mtxInt),drf(center.mtxInt))
 *         if out.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.mtxFloat = self.view.centroidDistance(drf(M.mtxFloat),drf(center.mtxFloat))
 *         if out.ctype=="double":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2052, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 2052, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "miololib.pyx":2053
 *             out.mtxInt = self.view.centroidDistance(drf(M.mtxInt),drf(center.mtxInt))
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.centroidDistance(drf(M.mtxFloat),drf(center.mtxFloat))             # <<<<<<<<<<<<<<
 *         if out.ctype=="double":
 *             out.mtxDouble = self.view.centroidDistance(drf(M.mtxDouble),drf(center.mtxDouble))
 */
    __pyx_v_out->__pyx_base.mtxFloat = __pyx_v_self->view.centroidDistance((*__pyx_v_M->__pyx_base.mtxFloat), (*__pyx_v_center->__pyx_base.mtxFloat));

    /* "miololib.pyx":2052
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.centroidDistance(drf(M.mtxInt),drf(center.mtxInt))
 *         if out.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.mtxFloat = self.view.centroidDistance(drf(M.mtxFloat),drf(center.mtxFloat))
 *         if out.ctype=="double":
 */
  }

  /* "miololib.pyx":2054
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.centroidDistance(drf(M.mtxFloat),drf(center.mtxFloat))
 *         if out.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.mtxDouble = self.view.centroidDistance(drf(M.mtxDouble),drf(center.mtxDouble))
 *         return out
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2054, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 2054, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "miololib.pyx":2055
 *             out.mtxFloat = self.view.centroidDistance(drf(M.mtxFloat),drf(center.mtxFloat))
 *         if out.ctype=="double":
 *             out.mtxDouble = self.view.centroidDistance(drf(M.mtxDouble),drf(center.mtxDouble))             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
    __pyx_v_out->__pyx_base.mtxDouble = __pyx_v_self->view.centroidDistance((*__pyx_v_M->__pyx_base.mtxDouble), (*__pyx_v_center->__pyx_base.mtxDouble));

    /* "miololib.pyx":2054
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.centroidDistance(drf(M.mtxFloat),drf(center.mtxFloat))
 *         if out.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.mtxDouble = self.view.centroidDistance(drf(M.mtxDouble),drf(center.mtxDouble))
 *         return out
 */
  }

  /* "miololib.pyx":2056
 *         if out.ctype=="double":
 *             out.mtxDouble = self.view.centroidDistance(drf(M.mtxDouble),drf(center.mtxDouble))
 *         return out             # <<<<<<<<<<<<<<
 * 
 * cdef class Poincare(Manifold):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_out);
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "miololib.pyx":2040
 *         return out
 * 
 *     def centroidDistance(self, Matrix M, Matrix center):             # <<<<<<<<<<<<<<
 *         """
 *             Returns the distance of each row in M to each row of center.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("miolo.Sphere.centroidDistance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_6Sphere_21__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_6Sphere_20__reduce_cython__, "Sphere.__reduce_cython__(self)");
static PyMethodDef __pyx_mdef_5miolo_6Sphere_21__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_6Sphere_21__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_6Sphere_20__reduce_cython__};
static PyObject *__pyx_pw_5miolo_6Sphere_21__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_5miolo_6Sphere_20__reduce_cython__(((struct __pyx_obj_5miolo_Sphere *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_6Sphere_20__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_Sphere *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_view_cannot_be_converted_to, 0, 0);
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("miolo.Sphere.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_6Sphere_23__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_6Sphere_22__setstate_cython__, "Sphere.__setstate_cython__(self, __pyx_state)");
static PyMethodDef __pyx_mdef_5miolo_6Sphere_23__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_6Sphere_23__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_6Sphere_22__setstate_cython__};
static PyObject *__pyx_pw_5miolo_6Sphere_23__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(0, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.Sphere.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5miolo_6Sphere_22__setstate_cython__(((struct __pyx_obj_5miolo_Sphere *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_6Sphere_22__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_Sphere *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_view_cannot_be_converted_to, 0, 0);
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("miolo.Sphere.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":2067
 *     cdef mld.poincare view
 * 
 *     def __init__(self, curvature=1):             # <<<<<<<<<<<<<<
 *         self.view.c = curvature
 * 
 */

/* Python wrapper */
static int __pyx_pw_5miolo_8Poincare_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5miolo_8Poincare_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_curvature = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_curvature,0};
    values[0] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)__pyx_int_1));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_curvature);
          if (value) { values[0] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 2067, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__init__") < 0)) __PYX_ERR(1, 2067, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_curvature = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 1, __pyx_nargs); __PYX_ERR(1, 2067, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.Poincare.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5miolo_8Poincare___init__(((struct __pyx_obj_5miolo_Poincare *)__pyx_v_self), __pyx_v_curvature);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5miolo_8Poincare___init__(struct __pyx_obj_5miolo_Poincare *__pyx_v_self, PyObject *__pyx_v_curvature) {
  int __pyx_r;
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "miololib.pyx":2068
 * 
 *     def __init__(self, curvature=1):
 *         self.view.c = curvature             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_curvature); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 2068, __pyx_L1_error)
  __pyx_v_self->view.c = __pyx_t_1;

  /* "miololib.pyx":2067
 *     cdef mld.poincare view
 * 
 *     def __init__(self, curvature=1):             # <<<<<<<<<<<<<<
 *         self.view.c = curvature
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("miolo.Poincare.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "miololib.pyx":2070
 *         self.view.c = curvature
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def curvature(self):
 *         return self.view.c
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_8Poincare_9curvature_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5miolo_8Poincare_9curvature_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5miolo_8Poincare_9curvature___get__(((struct __pyx_obj_5miolo_Poincare *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_8Poincare_9curvature___get__(struct __pyx_obj_5miolo_Poincare *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "miololib.pyx":2072
 *     @property
 *     def curvature(self):
 *         return self.view.c             # <<<<<<<<<<<<<<
 *     @curvature.setter
 *     def curvature(self, curv):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->view.c); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2072, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "miololib.pyx":2070
 *         self.view.c = curvature
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def curvature(self):
 *         return self.view.c
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("miolo.Poincare.curvature.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":2073
 *     def curvature(self):
 *         return self.view.c
 *     @curvature.setter             # <<<<<<<<<<<<<<
 *     def curvature(self, curv):
 *         self.view.c = curv
 */

/* Python wrapper */
static int __pyx_pw_5miolo_8Poincare_9curvature_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_curv); /*proto*/
static int __pyx_pw_5miolo_8Poincare_9curvature_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_curv) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5miolo_8Poincare_9curvature_2__set__(((struct __pyx_obj_5miolo_Poincare *)__pyx_v_self), ((PyObject *)__pyx_v_curv));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5miolo_8Poincare_9curvature_2__set__(struct __pyx_obj_5miolo_Poincare *__pyx_v_self, PyObject *__pyx_v_curv) {
  int __pyx_r;
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "miololib.pyx":2075
 *     @curvature.setter
 *     def curvature(self, curv):
 *         self.view.c = curv             # <<<<<<<<<<<<<<
 * 
 *     def distance(self, Matrix M):
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_curv); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 2075, __pyx_L1_error)
  __pyx_v_self->view.c = __pyx_t_1;

  /* "miololib.pyx":2073
 *     def curvature(self):
 *         return self.view.c
 *     @curvature.setter             # <<<<<<<<<<<<<<
 *     def curvature(self, curv):
 *         self.view.c = curv
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("miolo.Poincare.curvature.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "miololib.pyx":2077
 *         self.view.c = curv
 * 
 *     def distance(self, Matrix M):             # <<<<<<<<<<<<<<
 *         """
 *             Return a square Matrix for which each entry is the geodesic distance
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_8Poincare_3distance(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_8Poincare_2distance, "Poincare.distance(self, Matrix M)\n\n            Return a square Matrix for which each entry is the geodesic distance\n            between the pair of (i,j) rows of M.\n        ");
static PyMethodDef __pyx_mdef_5miolo_8Poincare_3distance = {"distance", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_8Poincare_3distance, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_8Poincare_2distance};
static PyObject *__pyx_pw_5miolo_8Poincare_3distance(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_M = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("distance (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_M,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_M)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 2077, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "distance") < 0)) __PYX_ERR(1, 2077, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_M = ((struct __pyx_obj_5miolo_Matrix *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("distance", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 2077, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.Poincare.distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_M), __pyx_ptype_5miolo_Matrix, 1, "M", 0))) __PYX_ERR(1, 2077, __pyx_L1_error)
  __pyx_r = __pyx_pf_5miolo_8Poincare_2distance(((struct __pyx_obj_5miolo_Poincare *)__pyx_v_self), __pyx_v_M);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_8Poincare_2distance(struct __pyx_obj_5miolo_Poincare *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_M) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("distance", 1);

  /* "miololib.pyx":2082
 *             between the pair of (i,j) rows of M.
 *         """
 *         out = Matrix(ctype=M.ctype)             # <<<<<<<<<<<<<<
 *         if M.ctype=="int":
 *             out.mtxInt = self.view.distance(drf(M.mtxInt))
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2082, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2082, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ctype, __pyx_t_2) < 0) __PYX_ERR(1, 2082, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Matrix), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2082, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_out = ((struct __pyx_obj_5miolo_Matrix *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "miololib.pyx":2083
 *         """
 *         out = Matrix(ctype=M.ctype)
 *         if M.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.mtxInt = self.view.distance(drf(M.mtxInt))
 *         if M.ctype=="float":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2083, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 2083, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":2084
 *         out = Matrix(ctype=M.ctype)
 *         if M.ctype=="int":
 *             out.mtxInt = self.view.distance(drf(M.mtxInt))             # <<<<<<<<<<<<<<
 *         if M.ctype=="float":
 *             out.mtxFloat = self.view.distance(drf(M.mtxFloat))
 */
    __pyx_v_out->__pyx_base.mtxInt = __pyx_v_self->view.distance((*__pyx_v_M->__pyx_base.mtxInt));

    /* "miololib.pyx":2083
 *         """
 *         out = Matrix(ctype=M.ctype)
 *         if M.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.mtxInt = self.view.distance(drf(M.mtxInt))
 *         if M.ctype=="float":
 */
  }

  /* "miololib.pyx":2085
 *         if M.ctype=="int":
 *             out.mtxInt = self.view.distance(drf(M.mtxInt))
 *         if M.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.mtxFloat = self.view.distance(drf(M.mtxFloat))
 *         if M.ctype=="double":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2085, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 2085, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":2086
 *             out.mtxInt = self.view.distance(drf(M.mtxInt))
 *         if M.ctype=="float":
 *             out.mtxFloat = self.view.distance(drf(M.mtxFloat))             # <<<<<<<<<<<<<<
 *         if M.ctype=="double":
 *             out.mtxDouble = self.view.distance(drf(M.mtxDouble))
 */
    __pyx_v_out->__pyx_base.mtxFloat = __pyx_v_self->view.distance((*__pyx_v_M->__pyx_base.mtxFloat));

    /* "miololib.pyx":2085
 *         if M.ctype=="int":
 *             out.mtxInt = self.view.distance(drf(M.mtxInt))
 *         if M.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.mtxFloat = self.view.distance(drf(M.mtxFloat))
 *         if M.ctype=="double":
 */
  }

  /* "miololib.pyx":2087
 *         if M.ctype=="float":
 *             out.mtxFloat = self.view.distance(drf(M.mtxFloat))
 *         if M.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.mtxDouble = self.view.distance(drf(M.mtxDouble))
 *         return out
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2087, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 2087, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":2088
 *             out.mtxFloat = self.view.distance(drf(M.mtxFloat))
 *         if M.ctype=="double":
 *             out.mtxDouble = self.view.distance(drf(M.mtxDouble))             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
    __pyx_v_out->__pyx_base.mtxDouble = __pyx_v_self->view.distance((*__pyx_v_M->__pyx_base.mtxDouble));

    /* "miololib.pyx":2087
 *         if M.ctype=="float":
 *             out.mtxFloat = self.view.distance(drf(M.mtxFloat))
 *         if M.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.mtxDouble = self.view.distance(drf(M.mtxDouble))
 *         return out
 */
  }

  /* "miololib.pyx":2089
 *         if M.ctype=="double":
 *             out.mtxDouble = self.view.distance(drf(M.mtxDouble))
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     def isIn(self, Matrix M):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_out);
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "miololib.pyx":2077
 *         self.view.c = curv
 * 
 *     def distance(self, Matrix M):             # <<<<<<<<<<<<<<
 *         """
 *             Return a square Matrix for which each entry is the geodesic distance
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("miolo.Poincare.distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":2091
 *         return out
 * 
 *     def isIn(self, Matrix M):             # <<<<<<<<<<<<<<
 *         """
 *             Check if rows of M belong to the M.cols-dimensional Poincare Disk.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_8Poincare_5isIn(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_8Poincare_4isIn, "Poincare.isIn(self, Matrix M)\n\n            Check if rows of M belong to the M.cols-dimensional Poincare Disk.\n        ");
static PyMethodDef __pyx_mdef_5miolo_8Poincare_5isIn = {"isIn", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_8Poincare_5isIn, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_8Poincare_4isIn};
static PyObject *__pyx_pw_5miolo_8Poincare_5isIn(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_M = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isIn (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_M,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_M)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 2091, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "isIn") < 0)) __PYX_ERR(1, 2091, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_M = ((struct __pyx_obj_5miolo_Matrix *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("isIn", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 2091, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.Poincare.isIn", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_M), __pyx_ptype_5miolo_Matrix, 1, "M", 0))) __PYX_ERR(1, 2091, __pyx_L1_error)
  __pyx_r = __pyx_pf_5miolo_8Poincare_4isIn(((struct __pyx_obj_5miolo_Poincare *)__pyx_v_self), __pyx_v_M);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_8Poincare_4isIn(struct __pyx_obj_5miolo_Poincare *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_M) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isIn", 1);

  /* "miololib.pyx":2095
 *             Check if rows of M belong to the M.cols-dimensional Poincare Disk.
 *         """
 *         if M.ctype=="int":             # <<<<<<<<<<<<<<
 *             return self.view.isIn(drf(M.mtxInt))
 *         if M.ctype=="float":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2095, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 2095, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":2096
 *         """
 *         if M.ctype=="int":
 *             return self.view.isIn(drf(M.mtxInt))             # <<<<<<<<<<<<<<
 *         if M.ctype=="float":
 *             return self.view.isIn(drf(M.mtxFloat))
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->view.isIn((*__pyx_v_M->__pyx_base.mtxInt))); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2096, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "miololib.pyx":2095
 *             Check if rows of M belong to the M.cols-dimensional Poincare Disk.
 *         """
 *         if M.ctype=="int":             # <<<<<<<<<<<<<<
 *             return self.view.isIn(drf(M.mtxInt))
 *         if M.ctype=="float":
 */
  }

  /* "miololib.pyx":2097
 *         if M.ctype=="int":
 *             return self.view.isIn(drf(M.mtxInt))
 *         if M.ctype=="float":             # <<<<<<<<<<<<<<
 *             return self.view.isIn(drf(M.mtxFloat))
 *         if M.ctype=="double":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2097, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 2097, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":2098
 *             return self.view.isIn(drf(M.mtxInt))
 *         if M.ctype=="float":
 *             return self.view.isIn(drf(M.mtxFloat))             # <<<<<<<<<<<<<<
 *         if M.ctype=="double":
 *             return self.view.isIn(drf(M.mtxDouble))
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->view.isIn((*__pyx_v_M->__pyx_base.mtxFloat))); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2098, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "miololib.pyx":2097
 *         if M.ctype=="int":
 *             return self.view.isIn(drf(M.mtxInt))
 *         if M.ctype=="float":             # <<<<<<<<<<<<<<
 *             return self.view.isIn(drf(M.mtxFloat))
 *         if M.ctype=="double":
 */
  }

  /* "miololib.pyx":2099
 *         if M.ctype=="float":
 *             return self.view.isIn(drf(M.mtxFloat))
 *         if M.ctype=="double":             # <<<<<<<<<<<<<<
 *             return self.view.isIn(drf(M.mtxDouble))
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2099, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 2099, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":2100
 *             return self.view.isIn(drf(M.mtxFloat))
 *         if M.ctype=="double":
 *             return self.view.isIn(drf(M.mtxDouble))             # <<<<<<<<<<<<<<
 * 
 *     def add(self, Matrix A, Matrix B):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->view.isIn((*__pyx_v_M->__pyx_base.mtxDouble))); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2100, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "miololib.pyx":2099
 *         if M.ctype=="float":
 *             return self.view.isIn(drf(M.mtxFloat))
 *         if M.ctype=="double":             # <<<<<<<<<<<<<<
 *             return self.view.isIn(drf(M.mtxDouble))
 * 
 */
  }

  /* "miololib.pyx":2091
 *         return out
 * 
 *     def isIn(self, Matrix M):             # <<<<<<<<<<<<<<
 *         """
 *             Check if rows of M belong to the M.cols-dimensional Poincare Disk.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("miolo.Poincare.isIn", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":2102
 *             return self.view.isIn(drf(M.mtxDouble))
 * 
 *     def add(self, Matrix A, Matrix B):             # <<<<<<<<<<<<<<
 *         """
 *             Mobius addition.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_8Poincare_7add(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_8Poincare_6add, "Poincare.add(self, Matrix A, Matrix B)\n\n            Mobius addition.\n        ");
static PyMethodDef __pyx_mdef_5miolo_8Poincare_7add = {"add", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_8Poincare_7add, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_8Poincare_6add};
static PyObject *__pyx_pw_5miolo_8Poincare_7add(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_A = 0;
  struct __pyx_obj_5miolo_Matrix *__pyx_v_B = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_A,&__pyx_n_s_B,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_A)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 2102, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_B)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 2102, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("add", 1, 2, 2, 1); __PYX_ERR(1, 2102, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "add") < 0)) __PYX_ERR(1, 2102, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_A = ((struct __pyx_obj_5miolo_Matrix *)values[0]);
    __pyx_v_B = ((struct __pyx_obj_5miolo_Matrix *)values[1]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add", 1, 2, 2, __pyx_nargs); __PYX_ERR(1, 2102, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.Poincare.add", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_A), __pyx_ptype_5miolo_Matrix, 1, "A", 0))) __PYX_ERR(1, 2102, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_B), __pyx_ptype_5miolo_Matrix, 1, "B", 0))) __PYX_ERR(1, 2102, __pyx_L1_error)
  __pyx_r = __pyx_pf_5miolo_8Poincare_6add(((struct __pyx_obj_5miolo_Poincare *)__pyx_v_self), __pyx_v_A, __pyx_v_B);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_8Poincare_6add(struct __pyx_obj_5miolo_Poincare *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_A, struct __pyx_obj_5miolo_Matrix *__pyx_v_B) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add", 1);

  /* "miololib.pyx":2106
 *             Mobius addition.
 *         """
 *         if A.rows!=B.rows or A.cols!=B.cols:             # <<<<<<<<<<<<<<
 *             raise Exception("Matrices must have same shape.")
 *         if A.ctype!=B.ctype:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_A), __pyx_n_s_rows); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_B), __pyx_n_s_rows); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_2, __pyx_t_3, Py_NE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2106, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(1, 2106, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!__pyx_t_5) {
  } else {
    __pyx_t_1 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_A), __pyx_n_s_cols); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_B), __pyx_n_s_cols); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_4, __pyx_t_3, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2106, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(1, 2106, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_1 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "miololib.pyx":2107
 *         """
 *         if A.rows!=B.rows or A.cols!=B.cols:
 *             raise Exception("Matrices must have same shape.")             # <<<<<<<<<<<<<<
 *         if A.ctype!=B.ctype:
 *             raise TypeError("Matrices must have same ctype.")
 */
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2107, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 2107, __pyx_L1_error)

    /* "miololib.pyx":2106
 *             Mobius addition.
 *         """
 *         if A.rows!=B.rows or A.cols!=B.cols:             # <<<<<<<<<<<<<<
 *             raise Exception("Matrices must have same shape.")
 *         if A.ctype!=B.ctype:
 */
  }

  /* "miololib.pyx":2108
 *         if A.rows!=B.rows or A.cols!=B.cols:
 *             raise Exception("Matrices must have same shape.")
 *         if A.ctype!=B.ctype:             # <<<<<<<<<<<<<<
 *             raise TypeError("Matrices must have same ctype.")
 *         out = Matrix(ctype=A.ctype)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_A), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_B), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_2, __pyx_t_3, Py_NE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2108, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 2108, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(__pyx_t_1)) {

    /* "miololib.pyx":2109
 *             raise Exception("Matrices must have same shape.")
 *         if A.ctype!=B.ctype:
 *             raise TypeError("Matrices must have same ctype.")             # <<<<<<<<<<<<<<
 *         out = Matrix(ctype=A.ctype)
 *         if out.ctype=="int":
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__76, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2109, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(1, 2109, __pyx_L1_error)

    /* "miololib.pyx":2108
 *         if A.rows!=B.rows or A.cols!=B.cols:
 *             raise Exception("Matrices must have same shape.")
 *         if A.ctype!=B.ctype:             # <<<<<<<<<<<<<<
 *             raise TypeError("Matrices must have same ctype.")
 *         out = Matrix(ctype=A.ctype)
 */
  }

  /* "miololib.pyx":2110
 *         if A.ctype!=B.ctype:
 *             raise TypeError("Matrices must have same ctype.")
 *         out = Matrix(ctype=A.ctype)             # <<<<<<<<<<<<<<
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.madd(drf(A.mtxInt),drf(B.mtxInt))
 */
  __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_A), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_ctype, __pyx_t_3) < 0) __PYX_ERR(1, 2110, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Matrix), __pyx_empty_tuple, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_out = ((struct __pyx_obj_5miolo_Matrix *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "miololib.pyx":2111
 *             raise TypeError("Matrices must have same ctype.")
 *         out = Matrix(ctype=A.ctype)
 *         if out.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.mtxInt = self.view.madd(drf(A.mtxInt),drf(B.mtxInt))
 *         if out.ctype=="float":
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 2111, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_1) {

    /* "miololib.pyx":2112
 *         out = Matrix(ctype=A.ctype)
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.madd(drf(A.mtxInt),drf(B.mtxInt))             # <<<<<<<<<<<<<<
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.madd(drf(A.mtxFloat),drf(B.mtxFloat))
 */
    __pyx_v_out->__pyx_base.mtxInt = __pyx_v_self->view.madd((*__pyx_v_A->__pyx_base.mtxInt), (*__pyx_v_B->__pyx_base.mtxInt));

    /* "miololib.pyx":2111
 *             raise TypeError("Matrices must have same ctype.")
 *         out = Matrix(ctype=A.ctype)
 *         if out.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.mtxInt = self.view.madd(drf(A.mtxInt),drf(B.mtxInt))
 *         if out.ctype=="float":
 */
  }

  /* "miololib.pyx":2113
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.madd(drf(A.mtxInt),drf(B.mtxInt))
 *         if out.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.mtxFloat = self.view.madd(drf(A.mtxFloat),drf(B.mtxFloat))
 *         if out.ctype=="double":
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 2113, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_1) {

    /* "miololib.pyx":2114
 *             out.mtxInt = self.view.madd(drf(A.mtxInt),drf(B.mtxInt))
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.madd(drf(A.mtxFloat),drf(B.mtxFloat))             # <<<<<<<<<<<<<<
 *         if out.ctype=="double":
 *             out.mtxDouble = self.view.madd(drf(A.mtxDouble),drf(B.mtxDouble))
 */
    __pyx_v_out->__pyx_base.mtxFloat = __pyx_v_self->view.madd((*__pyx_v_A->__pyx_base.mtxFloat), (*__pyx_v_B->__pyx_base.mtxFloat));

    /* "miololib.pyx":2113
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.madd(drf(A.mtxInt),drf(B.mtxInt))
 *         if out.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.mtxFloat = self.view.madd(drf(A.mtxFloat),drf(B.mtxFloat))
 *         if out.ctype=="double":
 */
  }

  /* "miololib.pyx":2115
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.madd(drf(A.mtxFloat),drf(B.mtxFloat))
 *         if out.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.mtxDouble = self.view.madd(drf(A.mtxDouble),drf(B.mtxDouble))
 *         return out
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 2115, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_1) {

    /* "miololib.pyx":2116
 *             out.mtxFloat = self.view.madd(drf(A.mtxFloat),drf(B.mtxFloat))
 *         if out.ctype=="double":
 *             out.mtxDouble = self.view.madd(drf(A.mtxDouble),drf(B.mtxDouble))             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
    __pyx_v_out->__pyx_base.mtxDouble = __pyx_v_self->view.madd((*__pyx_v_A->__pyx_base.mtxDouble), (*__pyx_v_B->__pyx_base.mtxDouble));

    /* "miololib.pyx":2115
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.madd(drf(A.mtxFloat),drf(B.mtxFloat))
 *         if out.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.mtxDouble = self.view.madd(drf(A.mtxDouble),drf(B.mtxDouble))
 *         return out
 */
  }

  /* "miololib.pyx":2117
 *         if out.ctype=="double":
 *             out.mtxDouble = self.view.madd(drf(A.mtxDouble),drf(B.mtxDouble))
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     def exp(self, Matrix at, Matrix M):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_out);
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "miololib.pyx":2102
 *             return self.view.isIn(drf(M.mtxDouble))
 * 
 *     def add(self, Matrix A, Matrix B):             # <<<<<<<<<<<<<<
 *         """
 *             Mobius addition.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("miolo.Poincare.add", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":2119
 *         return out
 * 
 *     def exp(self, Matrix at, Matrix M):             # <<<<<<<<<<<<<<
 *         """
 *             Mobius addition.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_8Poincare_9exp(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_8Poincare_8exp, "Poincare.exp(self, Matrix at, Matrix M)\n\n            Mobius addition.\n        ");
static PyMethodDef __pyx_mdef_5miolo_8Poincare_9exp = {"exp", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_8Poincare_9exp, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_8Poincare_8exp};
static PyObject *__pyx_pw_5miolo_8Poincare_9exp(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_at = 0;
  struct __pyx_obj_5miolo_Matrix *__pyx_v_M = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("exp (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_at,&__pyx_n_s_M,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_at)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 2119, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_M)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 2119, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("exp", 1, 2, 2, 1); __PYX_ERR(1, 2119, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "exp") < 0)) __PYX_ERR(1, 2119, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_at = ((struct __pyx_obj_5miolo_Matrix *)values[0]);
    __pyx_v_M = ((struct __pyx_obj_5miolo_Matrix *)values[1]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("exp", 1, 2, 2, __pyx_nargs); __PYX_ERR(1, 2119, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.Poincare.exp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_at), __pyx_ptype_5miolo_Matrix, 1, "at", 0))) __PYX_ERR(1, 2119, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_M), __pyx_ptype_5miolo_Matrix, 1, "M", 0))) __PYX_ERR(1, 2119, __pyx_L1_error)
  __pyx_r = __pyx_pf_5miolo_8Poincare_8exp(((struct __pyx_obj_5miolo_Poincare *)__pyx_v_self), __pyx_v_at, __pyx_v_M);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_8Poincare_8exp(struct __pyx_obj_5miolo_Poincare *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_at, struct __pyx_obj_5miolo_Matrix *__pyx_v_M) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("exp", 1);

  /* "miololib.pyx":2123
 *             Mobius addition.
 *         """
 *         if at.rows!=M.rows or at.cols!=M.cols:             # <<<<<<<<<<<<<<
 *             raise Exception("Matrices must have same shape.")
 *         if at.ctype!=M.ctype:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_at), __pyx_n_s_rows); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_rows); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_2, __pyx_t_3, Py_NE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2123, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(1, 2123, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!__pyx_t_5) {
  } else {
    __pyx_t_1 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_at), __pyx_n_s_cols); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_cols); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_4, __pyx_t_3, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2123, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(1, 2123, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_1 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "miololib.pyx":2124
 *         """
 *         if at.rows!=M.rows or at.cols!=M.cols:
 *             raise Exception("Matrices must have same shape.")             # <<<<<<<<<<<<<<
 *         if at.ctype!=M.ctype:
 *             raise TypeError("Matrices must have same ctype.")
 */
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2124, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 2124, __pyx_L1_error)

    /* "miololib.pyx":2123
 *             Mobius addition.
 *         """
 *         if at.rows!=M.rows or at.cols!=M.cols:             # <<<<<<<<<<<<<<
 *             raise Exception("Matrices must have same shape.")
 *         if at.ctype!=M.ctype:
 */
  }

  /* "miololib.pyx":2125
 *         if at.rows!=M.rows or at.cols!=M.cols:
 *             raise Exception("Matrices must have same shape.")
 *         if at.ctype!=M.ctype:             # <<<<<<<<<<<<<<
 *             raise TypeError("Matrices must have same ctype.")
 *         out = Matrix(ctype=at.ctype)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_at), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_2, __pyx_t_3, Py_NE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2125, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 2125, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(__pyx_t_1)) {

    /* "miololib.pyx":2126
 *             raise Exception("Matrices must have same shape.")
 *         if at.ctype!=M.ctype:
 *             raise TypeError("Matrices must have same ctype.")             # <<<<<<<<<<<<<<
 *         out = Matrix(ctype=at.ctype)
 *         if out.ctype=="int":
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__76, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2126, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(1, 2126, __pyx_L1_error)

    /* "miololib.pyx":2125
 *         if at.rows!=M.rows or at.cols!=M.cols:
 *             raise Exception("Matrices must have same shape.")
 *         if at.ctype!=M.ctype:             # <<<<<<<<<<<<<<
 *             raise TypeError("Matrices must have same ctype.")
 *         out = Matrix(ctype=at.ctype)
 */
  }

  /* "miololib.pyx":2127
 *         if at.ctype!=M.ctype:
 *             raise TypeError("Matrices must have same ctype.")
 *         out = Matrix(ctype=at.ctype)             # <<<<<<<<<<<<<<
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.exponential(drf(at.mtxInt),drf(M.mtxInt))
 */
  __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_at), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_ctype, __pyx_t_3) < 0) __PYX_ERR(1, 2127, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Matrix), __pyx_empty_tuple, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_out = ((struct __pyx_obj_5miolo_Matrix *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "miololib.pyx":2128
 *             raise TypeError("Matrices must have same ctype.")
 *         out = Matrix(ctype=at.ctype)
 *         if out.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.mtxInt = self.view.exponential(drf(at.mtxInt),drf(M.mtxInt))
 *         if out.ctype=="float":
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2128, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 2128, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_1) {

    /* "miololib.pyx":2129
 *         out = Matrix(ctype=at.ctype)
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.exponential(drf(at.mtxInt),drf(M.mtxInt))             # <<<<<<<<<<<<<<
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.exponential(drf(at.mtxFloat),drf(M.mtxFloat))
 */
    __pyx_v_out->__pyx_base.mtxInt = __pyx_v_self->view.exponential((*__pyx_v_at->__pyx_base.mtxInt), (*__pyx_v_M->__pyx_base.mtxInt));

    /* "miololib.pyx":2128
 *             raise TypeError("Matrices must have same ctype.")
 *         out = Matrix(ctype=at.ctype)
 *         if out.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.mtxInt = self.view.exponential(drf(at.mtxInt),drf(M.mtxInt))
 *         if out.ctype=="float":
 */
  }

  /* "miololib.pyx":2130
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.exponential(drf(at.mtxInt),drf(M.mtxInt))
 *         if out.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.mtxFloat = self.view.exponential(drf(at.mtxFloat),drf(M.mtxFloat))
 *         if out.ctype=="double":
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 2130, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_1) {

    /* "miololib.pyx":2131
 *             out.mtxInt = self.view.exponential(drf(at.mtxInt),drf(M.mtxInt))
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.exponential(drf(at.mtxFloat),drf(M.mtxFloat))             # <<<<<<<<<<<<<<
 *         if out.ctype=="double":
 *             out.mtxDouble = self.view.exponential(drf(at.mtxDouble),drf(M.mtxDouble))
 */
    __pyx_v_out->__pyx_base.mtxFloat = __pyx_v_self->view.exponential((*__pyx_v_at->__pyx_base.mtxFloat), (*__pyx_v_M->__pyx_base.mtxFloat));

    /* "miololib.pyx":2130
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.exponential(drf(at.mtxInt),drf(M.mtxInt))
 *         if out.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.mtxFloat = self.view.exponential(drf(at.mtxFloat),drf(M.mtxFloat))
 *         if out.ctype=="double":
 */
  }

  /* "miololib.pyx":2132
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.exponential(drf(at.mtxFloat),drf(M.mtxFloat))
 *         if out.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.mtxDouble = self.view.exponential(drf(at.mtxDouble),drf(M.mtxDouble))
 *         return out
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 2132, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_1) {

    /* "miololib.pyx":2133
 *             out.mtxFloat = self.view.exponential(drf(at.mtxFloat),drf(M.mtxFloat))
 *         if out.ctype=="double":
 *             out.mtxDouble = self.view.exponential(drf(at.mtxDouble),drf(M.mtxDouble))             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
    __pyx_v_out->__pyx_base.mtxDouble = __pyx_v_self->view.exponential((*__pyx_v_at->__pyx_base.mtxDouble), (*__pyx_v_M->__pyx_base.mtxDouble));

    /* "miololib.pyx":2132
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.exponential(drf(at.mtxFloat),drf(M.mtxFloat))
 *         if out.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.mtxDouble = self.view.exponential(drf(at.mtxDouble),drf(M.mtxDouble))
 *         return out
 */
  }

  /* "miololib.pyx":2134
 *         if out.ctype=="double":
 *             out.mtxDouble = self.view.exponential(drf(at.mtxDouble),drf(M.mtxDouble))
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     def log(self, Matrix start, Matrix end):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_out);
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "miololib.pyx":2119
 *         return out
 * 
 *     def exp(self, Matrix at, Matrix M):             # <<<<<<<<<<<<<<
 *         """
 *             Mobius addition.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("miolo.Poincare.exp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":2136
 *         return out
 * 
 *     def log(self, Matrix start, Matrix end):             # <<<<<<<<<<<<<<
 *         """
 *             Mobius addition.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_8Poincare_11log(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_8Poincare_10log, "Poincare.log(self, Matrix start, Matrix end)\n\n            Mobius addition.\n        ");
static PyMethodDef __pyx_mdef_5miolo_8Poincare_11log = {"log", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_8Poincare_11log, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_8Poincare_10log};
static PyObject *__pyx_pw_5miolo_8Poincare_11log(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_start = 0;
  struct __pyx_obj_5miolo_Matrix *__pyx_v_end = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("log (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_start,&__pyx_n_s_end,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_start)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 2136, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_end)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 2136, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("log", 1, 2, 2, 1); __PYX_ERR(1, 2136, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "log") < 0)) __PYX_ERR(1, 2136, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_start = ((struct __pyx_obj_5miolo_Matrix *)values[0]);
    __pyx_v_end = ((struct __pyx_obj_5miolo_Matrix *)values[1]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("log", 1, 2, 2, __pyx_nargs); __PYX_ERR(1, 2136, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.Poincare.log", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_start), __pyx_ptype_5miolo_Matrix, 1, "start", 0))) __PYX_ERR(1, 2136, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_end), __pyx_ptype_5miolo_Matrix, 1, "end", 0))) __PYX_ERR(1, 2136, __pyx_L1_error)
  __pyx_r = __pyx_pf_5miolo_8Poincare_10log(((struct __pyx_obj_5miolo_Poincare *)__pyx_v_self), __pyx_v_start, __pyx_v_end);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_8Poincare_10log(struct __pyx_obj_5miolo_Poincare *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_start, struct __pyx_obj_5miolo_Matrix *__pyx_v_end) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("log", 1);

  /* "miololib.pyx":2140
 *             Mobius addition.
 *         """
 *         if start.rows!=end.rows or start.cols!=end.cols:             # <<<<<<<<<<<<<<
 *             raise Exception("Matrices must have same shape.")
 *         if start.ctype!=end.ctype:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_start), __pyx_n_s_rows); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_end), __pyx_n_s_rows); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_2, __pyx_t_3, Py_NE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2140, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(1, 2140, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!__pyx_t_5) {
  } else {
    __pyx_t_1 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_start), __pyx_n_s_cols); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_end), __pyx_n_s_cols); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_4, __pyx_t_3, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2140, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(1, 2140, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_1 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "miololib.pyx":2141
 *         """
 *         if start.rows!=end.rows or start.cols!=end.cols:
 *             raise Exception("Matrices must have same shape.")             # <<<<<<<<<<<<<<
 *         if start.ctype!=end.ctype:
 *             raise TypeError("Matrices must have same ctype.")
 */
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2141, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 2141, __pyx_L1_error)

    /* "miololib.pyx":2140
 *             Mobius addition.
 *         """
 *         if start.rows!=end.rows or start.cols!=end.cols:             # <<<<<<<<<<<<<<
 *             raise Exception("Matrices must have same shape.")
 *         if start.ctype!=end.ctype:
 */
  }

  /* "miololib.pyx":2142
 *         if start.rows!=end.rows or start.cols!=end.cols:
 *             raise Exception("Matrices must have same shape.")
 *         if start.ctype!=end.ctype:             # <<<<<<<<<<<<<<
 *             raise TypeError("Matrices must have same ctype.")
 *         out = Matrix(ctype=start.ctype)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_start), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_end), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_2, __pyx_t_3, Py_NE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2142, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 2142, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(__pyx_t_1)) {

    /* "miololib.pyx":2143
 *             raise Exception("Matrices must have same shape.")
 *         if start.ctype!=end.ctype:
 *             raise TypeError("Matrices must have same ctype.")             # <<<<<<<<<<<<<<
 *         out = Matrix(ctype=start.ctype)
 *         if out.ctype=="int":
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__76, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2143, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(1, 2143, __pyx_L1_error)

    /* "miololib.pyx":2142
 *         if start.rows!=end.rows or start.cols!=end.cols:
 *             raise Exception("Matrices must have same shape.")
 *         if start.ctype!=end.ctype:             # <<<<<<<<<<<<<<
 *             raise TypeError("Matrices must have same ctype.")
 *         out = Matrix(ctype=start.ctype)
 */
  }

  /* "miololib.pyx":2144
 *         if start.ctype!=end.ctype:
 *             raise TypeError("Matrices must have same ctype.")
 *         out = Matrix(ctype=start.ctype)             # <<<<<<<<<<<<<<
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.logarithm(drf(start.mtxInt),drf(end.mtxInt))
 */
  __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_start), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_ctype, __pyx_t_3) < 0) __PYX_ERR(1, 2144, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Matrix), __pyx_empty_tuple, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_out = ((struct __pyx_obj_5miolo_Matrix *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "miololib.pyx":2145
 *             raise TypeError("Matrices must have same ctype.")
 *         out = Matrix(ctype=start.ctype)
 *         if out.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.mtxInt = self.view.logarithm(drf(start.mtxInt),drf(end.mtxInt))
 *         if out.ctype=="float":
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 2145, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_1) {

    /* "miololib.pyx":2146
 *         out = Matrix(ctype=start.ctype)
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.logarithm(drf(start.mtxInt),drf(end.mtxInt))             # <<<<<<<<<<<<<<
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.logarithm(drf(start.mtxFloat),drf(end.mtxFloat))
 */
    __pyx_v_out->__pyx_base.mtxInt = __pyx_v_self->view.logarithm((*__pyx_v_start->__pyx_base.mtxInt), (*__pyx_v_end->__pyx_base.mtxInt));

    /* "miololib.pyx":2145
 *             raise TypeError("Matrices must have same ctype.")
 *         out = Matrix(ctype=start.ctype)
 *         if out.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.mtxInt = self.view.logarithm(drf(start.mtxInt),drf(end.mtxInt))
 *         if out.ctype=="float":
 */
  }

  /* "miololib.pyx":2147
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.logarithm(drf(start.mtxInt),drf(end.mtxInt))
 *         if out.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.mtxFloat = self.view.logarithm(drf(start.mtxFloat),drf(end.mtxFloat))
 *         if out.ctype=="double":
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 2147, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_1) {

    /* "miololib.pyx":2148
 *             out.mtxInt = self.view.logarithm(drf(start.mtxInt),drf(end.mtxInt))
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.logarithm(drf(start.mtxFloat),drf(end.mtxFloat))             # <<<<<<<<<<<<<<
 *         if out.ctype=="double":
 *             out.mtxDouble = self.view.logarithm(drf(start.mtxDouble),drf(end.mtxDouble))
 */
    __pyx_v_out->__pyx_base.mtxFloat = __pyx_v_self->view.logarithm((*__pyx_v_start->__pyx_base.mtxFloat), (*__pyx_v_end->__pyx_base.mtxFloat));

    /* "miololib.pyx":2147
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.logarithm(drf(start.mtxInt),drf(end.mtxInt))
 *         if out.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.mtxFloat = self.view.logarithm(drf(start.mtxFloat),drf(end.mtxFloat))
 *         if out.ctype=="double":
 */
  }

  /* "miololib.pyx":2149
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.logarithm(drf(start.mtxFloat),drf(end.mtxFloat))
 *         if out.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.mtxDouble = self.view.logarithm(drf(start.mtxDouble),drf(end.mtxDouble))
 *         return out
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 2149, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_1) {

    /* "miololib.pyx":2150
 *             out.mtxFloat = self.view.logarithm(drf(start.mtxFloat),drf(end.mtxFloat))
 *         if out.ctype=="double":
 *             out.mtxDouble = self.view.logarithm(drf(start.mtxDouble),drf(end.mtxDouble))             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
    __pyx_v_out->__pyx_base.mtxDouble = __pyx_v_self->view.logarithm((*__pyx_v_start->__pyx_base.mtxDouble), (*__pyx_v_end->__pyx_base.mtxDouble));

    /* "miololib.pyx":2149
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.logarithm(drf(start.mtxFloat),drf(end.mtxFloat))
 *         if out.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.mtxDouble = self.view.logarithm(drf(start.mtxDouble),drf(end.mtxDouble))
 *         return out
 */
  }

  /* "miololib.pyx":2151
 *         if out.ctype=="double":
 *             out.mtxDouble = self.view.logarithm(drf(start.mtxDouble),drf(end.mtxDouble))
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     def mean(self, Matrix M):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_out);
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "miololib.pyx":2136
 *         return out
 * 
 *     def log(self, Matrix start, Matrix end):             # <<<<<<<<<<<<<<
 *         """
 *             Mobius addition.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("miolo.Poincare.log", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":2153
 *         return out
 * 
 *     def mean(self, Matrix M):             # <<<<<<<<<<<<<<
 *         """
 *             Returns the Einstein Midpoint of rows of M.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_8Poincare_13mean(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_8Poincare_12mean, "Poincare.mean(self, Matrix M)\n\n            Returns the Einstein Midpoint of rows of M.\n        ");
static PyMethodDef __pyx_mdef_5miolo_8Poincare_13mean = {"mean", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_8Poincare_13mean, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_8Poincare_12mean};
static PyObject *__pyx_pw_5miolo_8Poincare_13mean(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_M = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("mean (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_M,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_M)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 2153, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "mean") < 0)) __PYX_ERR(1, 2153, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_M = ((struct __pyx_obj_5miolo_Matrix *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mean", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 2153, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.Poincare.mean", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_M), __pyx_ptype_5miolo_Matrix, 1, "M", 0))) __PYX_ERR(1, 2153, __pyx_L1_error)
  __pyx_r = __pyx_pf_5miolo_8Poincare_12mean(((struct __pyx_obj_5miolo_Poincare *)__pyx_v_self), __pyx_v_M);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_8Poincare_12mean(struct __pyx_obj_5miolo_Poincare *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_M) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("mean", 1);

  /* "miololib.pyx":2157
 *             Returns the Einstein Midpoint of rows of M.
 *         """
 *         out = Matrix(ctype=M.ctype)             # <<<<<<<<<<<<<<
 *         if M.ctype=="int":
 *             out.mtxInt = self.view.mean(drf(M.mtxInt))
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ctype, __pyx_t_2) < 0) __PYX_ERR(1, 2157, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Matrix), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_out = ((struct __pyx_obj_5miolo_Matrix *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "miololib.pyx":2158
 *         """
 *         out = Matrix(ctype=M.ctype)
 *         if M.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.mtxInt = self.view.mean(drf(M.mtxInt))
 *         if M.ctype=="float":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 2158, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":2159
 *         out = Matrix(ctype=M.ctype)
 *         if M.ctype=="int":
 *             out.mtxInt = self.view.mean(drf(M.mtxInt))             # <<<<<<<<<<<<<<
 *         if M.ctype=="float":
 *             out.mtxFloat = self.view.mean(drf(M.mtxFloat))
 */
    __pyx_v_out->__pyx_base.mtxInt = __pyx_v_self->view.mean((*__pyx_v_M->__pyx_base.mtxInt));

    /* "miololib.pyx":2158
 *         """
 *         out = Matrix(ctype=M.ctype)
 *         if M.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.mtxInt = self.view.mean(drf(M.mtxInt))
 *         if M.ctype=="float":
 */
  }

  /* "miololib.pyx":2160
 *         if M.ctype=="int":
 *             out.mtxInt = self.view.mean(drf(M.mtxInt))
 *         if M.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.mtxFloat = self.view.mean(drf(M.mtxFloat))
 *         if M.ctype=="double":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 2160, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":2161
 *             out.mtxInt = self.view.mean(drf(M.mtxInt))
 *         if M.ctype=="float":
 *             out.mtxFloat = self.view.mean(drf(M.mtxFloat))             # <<<<<<<<<<<<<<
 *         if M.ctype=="double":
 *             out.mtxDouble = self.view.mean(drf(M.mtxDouble))
 */
    __pyx_v_out->__pyx_base.mtxFloat = __pyx_v_self->view.mean((*__pyx_v_M->__pyx_base.mtxFloat));

    /* "miololib.pyx":2160
 *         if M.ctype=="int":
 *             out.mtxInt = self.view.mean(drf(M.mtxInt))
 *         if M.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.mtxFloat = self.view.mean(drf(M.mtxFloat))
 *         if M.ctype=="double":
 */
  }

  /* "miololib.pyx":2162
 *         if M.ctype=="float":
 *             out.mtxFloat = self.view.mean(drf(M.mtxFloat))
 *         if M.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.mtxDouble = self.view.mean(drf(M.mtxDouble))
 *         return out
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 2162, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":2163
 *             out.mtxFloat = self.view.mean(drf(M.mtxFloat))
 *         if M.ctype=="double":
 *             out.mtxDouble = self.view.mean(drf(M.mtxDouble))             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
    __pyx_v_out->__pyx_base.mtxDouble = __pyx_v_self->view.mean((*__pyx_v_M->__pyx_base.mtxDouble));

    /* "miololib.pyx":2162
 *         if M.ctype=="float":
 *             out.mtxFloat = self.view.mean(drf(M.mtxFloat))
 *         if M.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.mtxDouble = self.view.mean(drf(M.mtxDouble))
 *         return out
 */
  }

  /* "miololib.pyx":2164
 *         if M.ctype=="double":
 *             out.mtxDouble = self.view.mean(drf(M.mtxDouble))
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     def centroidDistance(self, Matrix M, Matrix center):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_out);
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "miololib.pyx":2153
 *         return out
 * 
 *     def mean(self, Matrix M):             # <<<<<<<<<<<<<<
 *         """
 *             Returns the Einstein Midpoint of rows of M.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("miolo.Poincare.mean", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":2166
 *         return out
 * 
 *     def centroidDistance(self, Matrix M, Matrix center):             # <<<<<<<<<<<<<<
 *         """
 *             Returns the distance of each row in M to each row of center.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_8Poincare_15centroidDistance(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_8Poincare_14centroidDistance, "Poincare.centroidDistance(self, Matrix M, Matrix center)\n\n            Returns the distance of each row in M to each row of center.\n            Useful for implementing k-means.\n        ");
static PyMethodDef __pyx_mdef_5miolo_8Poincare_15centroidDistance = {"centroidDistance", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_8Poincare_15centroidDistance, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_8Poincare_14centroidDistance};
static PyObject *__pyx_pw_5miolo_8Poincare_15centroidDistance(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_M = 0;
  struct __pyx_obj_5miolo_Matrix *__pyx_v_center = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("centroidDistance (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_M,&__pyx_n_s_center,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_M)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 2166, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_center)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 2166, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("centroidDistance", 1, 2, 2, 1); __PYX_ERR(1, 2166, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "centroidDistance") < 0)) __PYX_ERR(1, 2166, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_M = ((struct __pyx_obj_5miolo_Matrix *)values[0]);
    __pyx_v_center = ((struct __pyx_obj_5miolo_Matrix *)values[1]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("centroidDistance", 1, 2, 2, __pyx_nargs); __PYX_ERR(1, 2166, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.Poincare.centroidDistance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_M), __pyx_ptype_5miolo_Matrix, 1, "M", 0))) __PYX_ERR(1, 2166, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_center), __pyx_ptype_5miolo_Matrix, 1, "center", 0))) __PYX_ERR(1, 2166, __pyx_L1_error)
  __pyx_r = __pyx_pf_5miolo_8Poincare_14centroidDistance(((struct __pyx_obj_5miolo_Poincare *)__pyx_v_self), __pyx_v_M, __pyx_v_center);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_8Poincare_14centroidDistance(struct __pyx_obj_5miolo_Poincare *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_M, struct __pyx_obj_5miolo_Matrix *__pyx_v_center) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("centroidDistance", 1);

  /* "miololib.pyx":2171
 *             Useful for implementing k-means.
 *         """
 *         if M.ctype!=center.ctype:             # <<<<<<<<<<<<<<
 *             raise TypeError("M and center must have same ctype.")
 *         if M.cols!=center.cols:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_center), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2171, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 2171, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(__pyx_t_4)) {

    /* "miololib.pyx":2172
 *         """
 *         if M.ctype!=center.ctype:
 *             raise TypeError("M and center must have same ctype.")             # <<<<<<<<<<<<<<
 *         if M.cols!=center.cols:
 *             raise Exception("M.cols must be equal to center.cols.")
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__67, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2172, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 2172, __pyx_L1_error)

    /* "miololib.pyx":2171
 *             Useful for implementing k-means.
 *         """
 *         if M.ctype!=center.ctype:             # <<<<<<<<<<<<<<
 *             raise TypeError("M and center must have same ctype.")
 *         if M.cols!=center.cols:
 */
  }

  /* "miololib.pyx":2173
 *         if M.ctype!=center.ctype:
 *             raise TypeError("M and center must have same ctype.")
 *         if M.cols!=center.cols:             # <<<<<<<<<<<<<<
 *             raise Exception("M.cols must be equal to center.cols.")
 *         out = Matrix(ctype=M.ctype)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_cols); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2173, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_center), __pyx_n_s_cols); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2173, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_3, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2173, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 2173, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(__pyx_t_4)) {

    /* "miololib.pyx":2174
 *             raise TypeError("M and center must have same ctype.")
 *         if M.cols!=center.cols:
 *             raise Exception("M.cols must be equal to center.cols.")             # <<<<<<<<<<<<<<
 *         out = Matrix(ctype=M.ctype)
 *         if out.ctype=="int":
 */
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__68, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2174, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 2174, __pyx_L1_error)

    /* "miololib.pyx":2173
 *         if M.ctype!=center.ctype:
 *             raise TypeError("M and center must have same ctype.")
 *         if M.cols!=center.cols:             # <<<<<<<<<<<<<<
 *             raise Exception("M.cols must be equal to center.cols.")
 *         out = Matrix(ctype=M.ctype)
 */
  }

  /* "miololib.pyx":2175
 *         if M.cols!=center.cols:
 *             raise Exception("M.cols must be equal to center.cols.")
 *         out = Matrix(ctype=M.ctype)             # <<<<<<<<<<<<<<
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.centroidDistance(drf(M.mtxInt),drf(center.mtxInt))
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ctype, __pyx_t_2) < 0) __PYX_ERR(1, 2175, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Matrix), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_out = ((struct __pyx_obj_5miolo_Matrix *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "miololib.pyx":2176
 *             raise Exception("M.cols must be equal to center.cols.")
 *         out = Matrix(ctype=M.ctype)
 *         if out.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.mtxInt = self.view.centroidDistance(drf(M.mtxInt),drf(center.mtxInt))
 *         if out.ctype=="float":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 2176, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "miololib.pyx":2177
 *         out = Matrix(ctype=M.ctype)
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.centroidDistance(drf(M.mtxInt),drf(center.mtxInt))             # <<<<<<<<<<<<<<
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.centroidDistance(drf(M.mtxFloat),drf(center.mtxFloat))
 */
    __pyx_v_out->__pyx_base.mtxInt = __pyx_v_self->view.centroidDistance((*__pyx_v_M->__pyx_base.mtxInt), (*__pyx_v_center->__pyx_base.mtxInt));

    /* "miololib.pyx":2176
 *             raise Exception("M.cols must be equal to center.cols.")
 *         out = Matrix(ctype=M.ctype)
 *         if out.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.mtxInt = self.view.centroidDistance(drf(M.mtxInt),drf(center.mtxInt))
 *         if out.ctype=="float":
 */
  }

  /* "miololib.pyx":2178
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.centroidDistance(drf(M.mtxInt),drf(center.mtxInt))
 *         if out.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.mtxFloat = self.view.centroidDistance(drf(M.mtxFloat),drf(center.mtxFloat))
 *         if out.ctype=="double":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 2178, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "miololib.pyx":2179
 *             out.mtxInt = self.view.centroidDistance(drf(M.mtxInt),drf(center.mtxInt))
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.centroidDistance(drf(M.mtxFloat),drf(center.mtxFloat))             # <<<<<<<<<<<<<<
 *         if out.ctype=="double":
 *             out.mtxDouble = self.view.centroidDistance(drf(M.mtxDouble),drf(center.mtxDouble))
 */
    __pyx_v_out->__pyx_base.mtxFloat = __pyx_v_self->view.centroidDistance((*__pyx_v_M->__pyx_base.mtxFloat), (*__pyx_v_center->__pyx_base.mtxFloat));

    /* "miololib.pyx":2178
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.centroidDistance(drf(M.mtxInt),drf(center.mtxInt))
 *         if out.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.mtxFloat = self.view.centroidDistance(drf(M.mtxFloat),drf(center.mtxFloat))
 *         if out.ctype=="double":
 */
  }

  /* "miololib.pyx":2180
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.centroidDistance(drf(M.mtxFloat),drf(center.mtxFloat))
 *         if out.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.mtxDouble = self.view.centroidDistance(drf(M.mtxDouble),drf(center.mtxDouble))
 *         return out
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 2180, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "miololib.pyx":2181
 *             out.mtxFloat = self.view.centroidDistance(drf(M.mtxFloat),drf(center.mtxFloat))
 *         if out.ctype=="double":
 *             out.mtxDouble = self.view.centroidDistance(drf(M.mtxDouble),drf(center.mtxDouble))             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
    __pyx_v_out->__pyx_base.mtxDouble = __pyx_v_self->view.centroidDistance((*__pyx_v_M->__pyx_base.mtxDouble), (*__pyx_v_center->__pyx_base.mtxDouble));

    /* "miololib.pyx":2180
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.centroidDistance(drf(M.mtxFloat),drf(center.mtxFloat))
 *         if out.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.mtxDouble = self.view.centroidDistance(drf(M.mtxDouble),drf(center.mtxDouble))
 *         return out
 */
  }

  /* "miololib.pyx":2182
 *         if out.ctype=="double":
 *             out.mtxDouble = self.view.centroidDistance(drf(M.mtxDouble),drf(center.mtxDouble))
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     def hyperbolicity(self, Matrix M):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_out);
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "miololib.pyx":2166
 *         return out
 * 
 *     def centroidDistance(self, Matrix M, Matrix center):             # <<<<<<<<<<<<<<
 *         """
 *             Returns the distance of each row in M to each row of center.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("miolo.Poincare.centroidDistance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":2184
 *         return out
 * 
 *     def hyperbolicity(self, Matrix M):             # <<<<<<<<<<<<<<
 *         """
 *             Returns the Gromov hiperbolicity of the rows of M.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_8Poincare_17hyperbolicity(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_8Poincare_16hyperbolicity, "Poincare.hyperbolicity(self, Matrix M)\n\n            Returns the Gromov hiperbolicity of the rows of M.\n        ");
static PyMethodDef __pyx_mdef_5miolo_8Poincare_17hyperbolicity = {"hyperbolicity", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_8Poincare_17hyperbolicity, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_8Poincare_16hyperbolicity};
static PyObject *__pyx_pw_5miolo_8Poincare_17hyperbolicity(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_M = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("hyperbolicity (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_M,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_M)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 2184, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "hyperbolicity") < 0)) __PYX_ERR(1, 2184, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_M = ((struct __pyx_obj_5miolo_Matrix *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("hyperbolicity", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 2184, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.Poincare.hyperbolicity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_M), __pyx_ptype_5miolo_Matrix, 1, "M", 0))) __PYX_ERR(1, 2184, __pyx_L1_error)
  __pyx_r = __pyx_pf_5miolo_8Poincare_16hyperbolicity(((struct __pyx_obj_5miolo_Poincare *)__pyx_v_self), __pyx_v_M);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_8Poincare_16hyperbolicity(struct __pyx_obj_5miolo_Poincare *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_M) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("hyperbolicity", 1);

  /* "miololib.pyx":2188
 *             Returns the Gromov hiperbolicity of the rows of M.
 *         """
 *         if M.ctype=="int":             # <<<<<<<<<<<<<<
 *             return self.view.hyperbolicity(drf(M.mtxInt))
 *         if M.ctype=="float":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 2188, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":2189
 *         """
 *         if M.ctype=="int":
 *             return self.view.hyperbolicity(drf(M.mtxInt))             # <<<<<<<<<<<<<<
 *         if M.ctype=="float":
 *             return self.view.hyperbolicity(drf(M.mtxFloat))
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->view.hyperbolicity((*__pyx_v_M->__pyx_base.mtxInt))); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2189, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "miololib.pyx":2188
 *             Returns the Gromov hiperbolicity of the rows of M.
 *         """
 *         if M.ctype=="int":             # <<<<<<<<<<<<<<
 *             return self.view.hyperbolicity(drf(M.mtxInt))
 *         if M.ctype=="float":
 */
  }

  /* "miololib.pyx":2190
 *         if M.ctype=="int":
 *             return self.view.hyperbolicity(drf(M.mtxInt))
 *         if M.ctype=="float":             # <<<<<<<<<<<<<<
 *             return self.view.hyperbolicity(drf(M.mtxFloat))
 *         if M.ctype=="double":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 2190, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":2191
 *             return self.view.hyperbolicity(drf(M.mtxInt))
 *         if M.ctype=="float":
 *             return self.view.hyperbolicity(drf(M.mtxFloat))             # <<<<<<<<<<<<<<
 *         if M.ctype=="double":
 *             return self.view.hyperbolicity(drf(M.mtxDouble))
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->view.hyperbolicity((*__pyx_v_M->__pyx_base.mtxFloat))); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2191, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "miololib.pyx":2190
 *         if M.ctype=="int":
 *             return self.view.hyperbolicity(drf(M.mtxInt))
 *         if M.ctype=="float":             # <<<<<<<<<<<<<<
 *             return self.view.hyperbolicity(drf(M.mtxFloat))
 *         if M.ctype=="double":
 */
  }

  /* "miololib.pyx":2192
 *         if M.ctype=="float":
 *             return self.view.hyperbolicity(drf(M.mtxFloat))
 *         if M.ctype=="double":             # <<<<<<<<<<<<<<
 *             return self.view.hyperbolicity(drf(M.mtxDouble))
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 2192, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":2193
 *             return self.view.hyperbolicity(drf(M.mtxFloat))
 *         if M.ctype=="double":
 *             return self.view.hyperbolicity(drf(M.mtxDouble))             # <<<<<<<<<<<<<<
 * 
 * cdef class Lorentz(Manifold):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->view.hyperbolicity((*__pyx_v_M->__pyx_base.mtxDouble))); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2193, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "miololib.pyx":2192
 *         if M.ctype=="float":
 *             return self.view.hyperbolicity(drf(M.mtxFloat))
 *         if M.ctype=="double":             # <<<<<<<<<<<<<<
 *             return self.view.hyperbolicity(drf(M.mtxDouble))
 * 
 */
  }

  /* "miololib.pyx":2184
 *         return out
 * 
 *     def hyperbolicity(self, Matrix M):             # <<<<<<<<<<<<<<
 *         """
 *             Returns the Gromov hiperbolicity of the rows of M.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("miolo.Poincare.hyperbolicity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_8Poincare_19__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_8Poincare_18__reduce_cython__, "Poincare.__reduce_cython__(self)");
static PyMethodDef __pyx_mdef_5miolo_8Poincare_19__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_8Poincare_19__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_8Poincare_18__reduce_cython__};
static PyObject *__pyx_pw_5miolo_8Poincare_19__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_5miolo_8Poincare_18__reduce_cython__(((struct __pyx_obj_5miolo_Poincare *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_8Poincare_18__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_Poincare *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_view_cannot_be_converted_to, 0, 0);
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("miolo.Poincare.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_8Poincare_21__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_8Poincare_20__setstate_cython__, "Poincare.__setstate_cython__(self, __pyx_state)");
static PyMethodDef __pyx_mdef_5miolo_8Poincare_21__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_8Poincare_21__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_8Poincare_20__setstate_cython__};
static PyObject *__pyx_pw_5miolo_8Poincare_21__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(0, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.Poincare.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5miolo_8Poincare_20__setstate_cython__(((struct __pyx_obj_5miolo_Poincare *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_8Poincare_20__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_Poincare *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_view_cannot_be_converted_to, 0, 0);
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("miolo.Poincare.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":2204
 *     cdef mld.lorentz view
 * 
 *     def __init__(self, beta=1):             # <<<<<<<<<<<<<<
 *         self.view.beta = beta
 * 
 */

/* Python wrapper */
static int __pyx_pw_5miolo_7Lorentz_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5miolo_7Lorentz_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_beta = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_beta,0};
    values[0] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)__pyx_int_1));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_beta);
          if (value) { values[0] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 2204, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__init__") < 0)) __PYX_ERR(1, 2204, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_beta = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 1, __pyx_nargs); __PYX_ERR(1, 2204, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.Lorentz.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5miolo_7Lorentz___init__(((struct __pyx_obj_5miolo_Lorentz *)__pyx_v_self), __pyx_v_beta);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5miolo_7Lorentz___init__(struct __pyx_obj_5miolo_Lorentz *__pyx_v_self, PyObject *__pyx_v_beta) {
  int __pyx_r;
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "miololib.pyx":2205
 * 
 *     def __init__(self, beta=1):
 *         self.view.beta = beta             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_beta); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 2205, __pyx_L1_error)
  __pyx_v_self->view.beta = __pyx_t_1;

  /* "miololib.pyx":2204
 *     cdef mld.lorentz view
 * 
 *     def __init__(self, beta=1):             # <<<<<<<<<<<<<<
 *         self.view.beta = beta
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("miolo.Lorentz.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "miololib.pyx":2207
 *         self.view.beta = beta
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def beta(self):
 *         return self.beta
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_7Lorentz_4beta_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5miolo_7Lorentz_4beta_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5miolo_7Lorentz_4beta___get__(((struct __pyx_obj_5miolo_Lorentz *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_7Lorentz_4beta___get__(struct __pyx_obj_5miolo_Lorentz *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "miololib.pyx":2209
 *     @property
 *     def beta(self):
 *         return self.beta             # <<<<<<<<<<<<<<
 *     @beta.setter
 *     def beta(self, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_beta); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "miololib.pyx":2207
 *         self.view.beta = beta
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def beta(self):
 *         return self.beta
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("miolo.Lorentz.beta.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":2210
 *     def beta(self):
 *         return self.beta
 *     @beta.setter             # <<<<<<<<<<<<<<
 *     def beta(self, b):
 *         self.view.beta = b
 */

/* Python wrapper */
static int __pyx_pw_5miolo_7Lorentz_4beta_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_b); /*proto*/
static int __pyx_pw_5miolo_7Lorentz_4beta_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_b) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5miolo_7Lorentz_4beta_2__set__(((struct __pyx_obj_5miolo_Lorentz *)__pyx_v_self), ((PyObject *)__pyx_v_b));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5miolo_7Lorentz_4beta_2__set__(struct __pyx_obj_5miolo_Lorentz *__pyx_v_self, PyObject *__pyx_v_b) {
  int __pyx_r;
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "miololib.pyx":2212
 *     @beta.setter
 *     def beta(self, b):
 *         self.view.beta = b             # <<<<<<<<<<<<<<
 * 
 *     def isIn(self, Matrix M, tolerance):
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_b); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 2212, __pyx_L1_error)
  __pyx_v_self->view.beta = __pyx_t_1;

  /* "miololib.pyx":2210
 *     def beta(self):
 *         return self.beta
 *     @beta.setter             # <<<<<<<<<<<<<<
 *     def beta(self, b):
 *         self.view.beta = b
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("miolo.Lorentz.beta.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "miololib.pyx":2214
 *         self.view.beta = b
 * 
 *     def isIn(self, Matrix M, tolerance):             # <<<<<<<<<<<<<<
 *         """
 *             Checks if rows of M belong to the manifold according to specified
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_7Lorentz_3isIn(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_7Lorentz_2isIn, "Lorentz.isIn(self, Matrix M, tolerance)\n\n            Checks if rows of M belong to the manifold according to specified\n            tolerance.\n        ");
static PyMethodDef __pyx_mdef_5miolo_7Lorentz_3isIn = {"isIn", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_7Lorentz_3isIn, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_7Lorentz_2isIn};
static PyObject *__pyx_pw_5miolo_7Lorentz_3isIn(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_M = 0;
  PyObject *__pyx_v_tolerance = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isIn (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_M,&__pyx_n_s_tolerance,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_M)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 2214, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_tolerance)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 2214, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("isIn", 1, 2, 2, 1); __PYX_ERR(1, 2214, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "isIn") < 0)) __PYX_ERR(1, 2214, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_M = ((struct __pyx_obj_5miolo_Matrix *)values[0]);
    __pyx_v_tolerance = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("isIn", 1, 2, 2, __pyx_nargs); __PYX_ERR(1, 2214, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.Lorentz.isIn", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_M), __pyx_ptype_5miolo_Matrix, 1, "M", 0))) __PYX_ERR(1, 2214, __pyx_L1_error)
  __pyx_r = __pyx_pf_5miolo_7Lorentz_2isIn(((struct __pyx_obj_5miolo_Lorentz *)__pyx_v_self), __pyx_v_M, __pyx_v_tolerance);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_7Lorentz_2isIn(struct __pyx_obj_5miolo_Lorentz *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_M, PyObject *__pyx_v_tolerance) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  double __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isIn", 1);

  /* "miololib.pyx":2219
 *             tolerance.
 *         """
 *         if M.ctype=="int":             # <<<<<<<<<<<<<<
 *             return self.view.isIn(drf(M.mtxInt),tolerance)
 *         if M.ctype=="float":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2219, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 2219, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":2220
 *         """
 *         if M.ctype=="int":
 *             return self.view.isIn(drf(M.mtxInt),tolerance)             # <<<<<<<<<<<<<<
 *         if M.ctype=="float":
 *             return self.view.isIn(drf(M.mtxFloat),tolerance)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_v_tolerance); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 2220, __pyx_L1_error)
    __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->view.isIn((*__pyx_v_M->__pyx_base.mtxInt), __pyx_t_3)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2220, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "miololib.pyx":2219
 *             tolerance.
 *         """
 *         if M.ctype=="int":             # <<<<<<<<<<<<<<
 *             return self.view.isIn(drf(M.mtxInt),tolerance)
 *         if M.ctype=="float":
 */
  }

  /* "miololib.pyx":2221
 *         if M.ctype=="int":
 *             return self.view.isIn(drf(M.mtxInt),tolerance)
 *         if M.ctype=="float":             # <<<<<<<<<<<<<<
 *             return self.view.isIn(drf(M.mtxFloat),tolerance)
 *         if M.ctype=="double":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2221, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 2221, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":2222
 *             return self.view.isIn(drf(M.mtxInt),tolerance)
 *         if M.ctype=="float":
 *             return self.view.isIn(drf(M.mtxFloat),tolerance)             # <<<<<<<<<<<<<<
 *         if M.ctype=="double":
 *             return self.view.isIn(drf(M.mtxDouble),tolerance)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_v_tolerance); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 2222, __pyx_L1_error)
    __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->view.isIn((*__pyx_v_M->__pyx_base.mtxFloat), __pyx_t_3)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2222, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "miololib.pyx":2221
 *         if M.ctype=="int":
 *             return self.view.isIn(drf(M.mtxInt),tolerance)
 *         if M.ctype=="float":             # <<<<<<<<<<<<<<
 *             return self.view.isIn(drf(M.mtxFloat),tolerance)
 *         if M.ctype=="double":
 */
  }

  /* "miololib.pyx":2223
 *         if M.ctype=="float":
 *             return self.view.isIn(drf(M.mtxFloat),tolerance)
 *         if M.ctype=="double":             # <<<<<<<<<<<<<<
 *             return self.view.isIn(drf(M.mtxDouble),tolerance)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 2223, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "miololib.pyx":2224
 *             return self.view.isIn(drf(M.mtxFloat),tolerance)
 *         if M.ctype=="double":
 *             return self.view.isIn(drf(M.mtxDouble),tolerance)             # <<<<<<<<<<<<<<
 * 
 *     def dot(self, Matrix M):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_v_tolerance); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 2224, __pyx_L1_error)
    __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->view.isIn((*__pyx_v_M->__pyx_base.mtxDouble), __pyx_t_3)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2224, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "miololib.pyx":2223
 *         if M.ctype=="float":
 *             return self.view.isIn(drf(M.mtxFloat),tolerance)
 *         if M.ctype=="double":             # <<<<<<<<<<<<<<
 *             return self.view.isIn(drf(M.mtxDouble),tolerance)
 * 
 */
  }

  /* "miololib.pyx":2214
 *         self.view.beta = b
 * 
 *     def isIn(self, Matrix M, tolerance):             # <<<<<<<<<<<<<<
 *         """
 *             Checks if rows of M belong to the manifold according to specified
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("miolo.Lorentz.isIn", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":2226
 *             return self.view.isIn(drf(M.mtxDouble),tolerance)
 * 
 *     def dot(self, Matrix M):             # <<<<<<<<<<<<<<
 *         """
 *             Lorentz dot product between rows of M. Returns a square matrix.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_7Lorentz_5dot(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_7Lorentz_4dot, "Lorentz.dot(self, Matrix M)\n\n            Lorentz dot product between rows of M. Returns a square matrix.\n        ");
static PyMethodDef __pyx_mdef_5miolo_7Lorentz_5dot = {"dot", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_7Lorentz_5dot, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_7Lorentz_4dot};
static PyObject *__pyx_pw_5miolo_7Lorentz_5dot(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_M = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dot (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_M,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_M)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 2226, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "dot") < 0)) __PYX_ERR(1, 2226, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_M = ((struct __pyx_obj_5miolo_Matrix *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("dot", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 2226, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.Lorentz.dot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_M), __pyx_ptype_5miolo_Matrix, 1, "M", 0))) __PYX_ERR(1, 2226, __pyx_L1_error)
  __pyx_r = __pyx_pf_5miolo_7Lorentz_4dot(((struct __pyx_obj_5miolo_Lorentz *)__pyx_v_self), __pyx_v_M);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_7Lorentz_4dot(struct __pyx_obj_5miolo_Lorentz *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_M) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("dot", 1);

  /* "miololib.pyx":2230
 *             Lorentz dot product between rows of M. Returns a square matrix.
 *         """
 *         if M.cols<2:             # <<<<<<<<<<<<<<
 *             raise Exception("Number of cols must be greater than 1.")
 *         out = Matrix(ctype=M.ctype)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_cols); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2230, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_int_2, Py_LT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2230, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 2230, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(__pyx_t_3)) {

    /* "miololib.pyx":2231
 *         """
 *         if M.cols<2:
 *             raise Exception("Number of cols must be greater than 1.")             # <<<<<<<<<<<<<<
 *         out = Matrix(ctype=M.ctype)
 *         if out.ctype=="int":
 */
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__77, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2231, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 2231, __pyx_L1_error)

    /* "miololib.pyx":2230
 *             Lorentz dot product between rows of M. Returns a square matrix.
 *         """
 *         if M.cols<2:             # <<<<<<<<<<<<<<
 *             raise Exception("Number of cols must be greater than 1.")
 *         out = Matrix(ctype=M.ctype)
 */
  }

  /* "miololib.pyx":2232
 *         if M.cols<2:
 *             raise Exception("Number of cols must be greater than 1.")
 *         out = Matrix(ctype=M.ctype)             # <<<<<<<<<<<<<<
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.dot(drf(M.mtxInt))
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2232, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2232, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_ctype, __pyx_t_1) < 0) __PYX_ERR(1, 2232, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Matrix), __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2232, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_out = ((struct __pyx_obj_5miolo_Matrix *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "miololib.pyx":2233
 *             raise Exception("Number of cols must be greater than 1.")
 *         out = Matrix(ctype=M.ctype)
 *         if out.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.mtxInt = self.view.dot(drf(M.mtxInt))
 *         if out.ctype=="float":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2233, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 2233, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":2234
 *         out = Matrix(ctype=M.ctype)
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.dot(drf(M.mtxInt))             # <<<<<<<<<<<<<<
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.dot(drf(M.mtxFloat))
 */
    __pyx_v_out->__pyx_base.mtxInt = __pyx_v_self->view.dot((*__pyx_v_M->__pyx_base.mtxInt));

    /* "miololib.pyx":2233
 *             raise Exception("Number of cols must be greater than 1.")
 *         out = Matrix(ctype=M.ctype)
 *         if out.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.mtxInt = self.view.dot(drf(M.mtxInt))
 *         if out.ctype=="float":
 */
  }

  /* "miololib.pyx":2235
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.dot(drf(M.mtxInt))
 *         if out.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.mtxFloat = self.view.dot(drf(M.mtxFloat))
 *         if out.ctype=="double":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 2235, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":2236
 *             out.mtxInt = self.view.dot(drf(M.mtxInt))
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.dot(drf(M.mtxFloat))             # <<<<<<<<<<<<<<
 *         if out.ctype=="double":
 *             out.mtxDouble = self.view.dot(drf(M.mtxDouble))
 */
    __pyx_v_out->__pyx_base.mtxFloat = __pyx_v_self->view.dot((*__pyx_v_M->__pyx_base.mtxFloat));

    /* "miololib.pyx":2235
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.dot(drf(M.mtxInt))
 *         if out.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.mtxFloat = self.view.dot(drf(M.mtxFloat))
 *         if out.ctype=="double":
 */
  }

  /* "miololib.pyx":2237
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.dot(drf(M.mtxFloat))
 *         if out.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.mtxDouble = self.view.dot(drf(M.mtxDouble))
 *         return out
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 2237, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":2238
 *             out.mtxFloat = self.view.dot(drf(M.mtxFloat))
 *         if out.ctype=="double":
 *             out.mtxDouble = self.view.dot(drf(M.mtxDouble))             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
    __pyx_v_out->__pyx_base.mtxDouble = __pyx_v_self->view.dot((*__pyx_v_M->__pyx_base.mtxDouble));

    /* "miololib.pyx":2237
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.dot(drf(M.mtxFloat))
 *         if out.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.mtxDouble = self.view.dot(drf(M.mtxDouble))
 *         return out
 */
  }

  /* "miololib.pyx":2239
 *         if out.ctype=="double":
 *             out.mtxDouble = self.view.dot(drf(M.mtxDouble))
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     def metricDistance(self, Matrix M):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_out);
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "miololib.pyx":2226
 *             return self.view.isIn(drf(M.mtxDouble),tolerance)
 * 
 *     def dot(self, Matrix M):             # <<<<<<<<<<<<<<
 *         """
 *             Lorentz dot product between rows of M. Returns a square matrix.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("miolo.Lorentz.dot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":2241
 *         return out
 * 
 *     def metricDistance(self, Matrix M):             # <<<<<<<<<<<<<<
 *         """
 *             Distance in the lorentz model. Returns a square matrix.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_7Lorentz_7metricDistance(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_7Lorentz_6metricDistance, "Lorentz.metricDistance(self, Matrix M)\n\n            Distance in the lorentz model. Returns a square matrix.\n        ");
static PyMethodDef __pyx_mdef_5miolo_7Lorentz_7metricDistance = {"metricDistance", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_7Lorentz_7metricDistance, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_7Lorentz_6metricDistance};
static PyObject *__pyx_pw_5miolo_7Lorentz_7metricDistance(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_M = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("metricDistance (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_M,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_M)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 2241, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "metricDistance") < 0)) __PYX_ERR(1, 2241, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_M = ((struct __pyx_obj_5miolo_Matrix *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("metricDistance", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 2241, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.Lorentz.metricDistance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_M), __pyx_ptype_5miolo_Matrix, 1, "M", 0))) __PYX_ERR(1, 2241, __pyx_L1_error)
  __pyx_r = __pyx_pf_5miolo_7Lorentz_6metricDistance(((struct __pyx_obj_5miolo_Lorentz *)__pyx_v_self), __pyx_v_M);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_7Lorentz_6metricDistance(struct __pyx_obj_5miolo_Lorentz *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_M) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("metricDistance", 1);

  /* "miololib.pyx":2245
 *             Distance in the lorentz model. Returns a square matrix.
 *         """
 *         if M.cols<2:             # <<<<<<<<<<<<<<
 *             raise Exception("Number of cols must be greater than 1.")
 *         out = Matrix(ctype=M.ctype)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_cols); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2245, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_int_2, Py_LT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2245, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 2245, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(__pyx_t_3)) {

    /* "miololib.pyx":2246
 *         """
 *         if M.cols<2:
 *             raise Exception("Number of cols must be greater than 1.")             # <<<<<<<<<<<<<<
 *         out = Matrix(ctype=M.ctype)
 *         if out.ctype=="int":
 */
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__77, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2246, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 2246, __pyx_L1_error)

    /* "miololib.pyx":2245
 *             Distance in the lorentz model. Returns a square matrix.
 *         """
 *         if M.cols<2:             # <<<<<<<<<<<<<<
 *             raise Exception("Number of cols must be greater than 1.")
 *         out = Matrix(ctype=M.ctype)
 */
  }

  /* "miololib.pyx":2247
 *         if M.cols<2:
 *             raise Exception("Number of cols must be greater than 1.")
 *         out = Matrix(ctype=M.ctype)             # <<<<<<<<<<<<<<
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.distance(drf(M.mtxInt))
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_ctype, __pyx_t_1) < 0) __PYX_ERR(1, 2247, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Matrix), __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_out = ((struct __pyx_obj_5miolo_Matrix *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "miololib.pyx":2248
 *             raise Exception("Number of cols must be greater than 1.")
 *         out = Matrix(ctype=M.ctype)
 *         if out.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.mtxInt = self.view.distance(drf(M.mtxInt))
 *         if out.ctype=="float":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 2248, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":2249
 *         out = Matrix(ctype=M.ctype)
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.distance(drf(M.mtxInt))             # <<<<<<<<<<<<<<
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.distance(drf(M.mtxFloat))
 */
    __pyx_v_out->__pyx_base.mtxInt = __pyx_v_self->view.distance((*__pyx_v_M->__pyx_base.mtxInt));

    /* "miololib.pyx":2248
 *             raise Exception("Number of cols must be greater than 1.")
 *         out = Matrix(ctype=M.ctype)
 *         if out.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.mtxInt = self.view.distance(drf(M.mtxInt))
 *         if out.ctype=="float":
 */
  }

  /* "miololib.pyx":2250
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.distance(drf(M.mtxInt))
 *         if out.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.mtxFloat = self.view.distance(drf(M.mtxFloat))
 *         if out.ctype=="double":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2250, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 2250, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":2251
 *             out.mtxInt = self.view.distance(drf(M.mtxInt))
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.distance(drf(M.mtxFloat))             # <<<<<<<<<<<<<<
 *         if out.ctype=="double":
 *             out.mtxDouble = self.view.distance(drf(M.mtxDouble))
 */
    __pyx_v_out->__pyx_base.mtxFloat = __pyx_v_self->view.distance((*__pyx_v_M->__pyx_base.mtxFloat));

    /* "miololib.pyx":2250
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.distance(drf(M.mtxInt))
 *         if out.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.mtxFloat = self.view.distance(drf(M.mtxFloat))
 *         if out.ctype=="double":
 */
  }

  /* "miololib.pyx":2252
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.distance(drf(M.mtxFloat))
 *         if out.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.mtxDouble = self.view.distance(drf(M.mtxDouble))
 *         return out
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2252, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 2252, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":2253
 *             out.mtxFloat = self.view.distance(drf(M.mtxFloat))
 *         if out.ctype=="double":
 *             out.mtxDouble = self.view.distance(drf(M.mtxDouble))             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
    __pyx_v_out->__pyx_base.mtxDouble = __pyx_v_self->view.distance((*__pyx_v_M->__pyx_base.mtxDouble));

    /* "miololib.pyx":2252
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.distance(drf(M.mtxFloat))
 *         if out.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.mtxDouble = self.view.distance(drf(M.mtxDouble))
 *         return out
 */
  }

  /* "miololib.pyx":2254
 *         if out.ctype=="double":
 *             out.mtxDouble = self.view.distance(drf(M.mtxDouble))
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     def lorentzDistance(self, Matrix M):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_out);
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "miololib.pyx":2241
 *         return out
 * 
 *     def metricDistance(self, Matrix M):             # <<<<<<<<<<<<<<
 *         """
 *             Distance in the lorentz model. Returns a square matrix.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("miolo.Lorentz.metricDistance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":2256
 *         return out
 * 
 *     def lorentzDistance(self, Matrix M):             # <<<<<<<<<<<<<<
 *         """
 *             Lorentz norm with respect to the lorentzian inner product.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_7Lorentz_9lorentzDistance(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_7Lorentz_8lorentzDistance, "Lorentz.lorentzDistance(self, Matrix M)\n\n            Lorentz norm with respect to the lorentzian inner product. \n            Returns a square matrix.\n        ");
static PyMethodDef __pyx_mdef_5miolo_7Lorentz_9lorentzDistance = {"lorentzDistance", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_7Lorentz_9lorentzDistance, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_7Lorentz_8lorentzDistance};
static PyObject *__pyx_pw_5miolo_7Lorentz_9lorentzDistance(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_M = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lorentzDistance (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_M,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_M)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 2256, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "lorentzDistance") < 0)) __PYX_ERR(1, 2256, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_M = ((struct __pyx_obj_5miolo_Matrix *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("lorentzDistance", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 2256, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.Lorentz.lorentzDistance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_M), __pyx_ptype_5miolo_Matrix, 1, "M", 0))) __PYX_ERR(1, 2256, __pyx_L1_error)
  __pyx_r = __pyx_pf_5miolo_7Lorentz_8lorentzDistance(((struct __pyx_obj_5miolo_Lorentz *)__pyx_v_self), __pyx_v_M);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_7Lorentz_8lorentzDistance(struct __pyx_obj_5miolo_Lorentz *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_M) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("lorentzDistance", 1);

  /* "miololib.pyx":2261
 *             Returns a square matrix.
 *         """
 *         if M.cols<2:             # <<<<<<<<<<<<<<
 *             raise Exception("Number of cols must be greater than 1.")
 *         out = Matrix(ctype=M.ctype)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_cols); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2261, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_int_2, Py_LT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2261, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 2261, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(__pyx_t_3)) {

    /* "miololib.pyx":2262
 *         """
 *         if M.cols<2:
 *             raise Exception("Number of cols must be greater than 1.")             # <<<<<<<<<<<<<<
 *         out = Matrix(ctype=M.ctype)
 *         if out.ctype=="int":
 */
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__77, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2262, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 2262, __pyx_L1_error)

    /* "miololib.pyx":2261
 *             Returns a square matrix.
 *         """
 *         if M.cols<2:             # <<<<<<<<<<<<<<
 *             raise Exception("Number of cols must be greater than 1.")
 *         out = Matrix(ctype=M.ctype)
 */
  }

  /* "miololib.pyx":2263
 *         if M.cols<2:
 *             raise Exception("Number of cols must be greater than 1.")
 *         out = Matrix(ctype=M.ctype)             # <<<<<<<<<<<<<<
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.lorentzDistance(drf(M.mtxInt))
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_ctype, __pyx_t_1) < 0) __PYX_ERR(1, 2263, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Matrix), __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_out = ((struct __pyx_obj_5miolo_Matrix *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "miololib.pyx":2264
 *             raise Exception("Number of cols must be greater than 1.")
 *         out = Matrix(ctype=M.ctype)
 *         if out.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.mtxInt = self.view.lorentzDistance(drf(M.mtxInt))
 *         if out.ctype=="float":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 2264, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":2265
 *         out = Matrix(ctype=M.ctype)
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.lorentzDistance(drf(M.mtxInt))             # <<<<<<<<<<<<<<
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.lorentzDistance(drf(M.mtxFloat))
 */
    __pyx_v_out->__pyx_base.mtxInt = __pyx_v_self->view.lorentzDistance((*__pyx_v_M->__pyx_base.mtxInt));

    /* "miololib.pyx":2264
 *             raise Exception("Number of cols must be greater than 1.")
 *         out = Matrix(ctype=M.ctype)
 *         if out.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.mtxInt = self.view.lorentzDistance(drf(M.mtxInt))
 *         if out.ctype=="float":
 */
  }

  /* "miololib.pyx":2266
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.lorentzDistance(drf(M.mtxInt))
 *         if out.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.mtxFloat = self.view.lorentzDistance(drf(M.mtxFloat))
 *         if out.ctype=="double":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 2266, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":2267
 *             out.mtxInt = self.view.lorentzDistance(drf(M.mtxInt))
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.lorentzDistance(drf(M.mtxFloat))             # <<<<<<<<<<<<<<
 *         if out.ctype=="double":
 *             out.mtxDouble = self.view.lorentzDistance(drf(M.mtxDouble))
 */
    __pyx_v_out->__pyx_base.mtxFloat = __pyx_v_self->view.lorentzDistance((*__pyx_v_M->__pyx_base.mtxFloat));

    /* "miololib.pyx":2266
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.lorentzDistance(drf(M.mtxInt))
 *         if out.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.mtxFloat = self.view.lorentzDistance(drf(M.mtxFloat))
 *         if out.ctype=="double":
 */
  }

  /* "miololib.pyx":2268
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.lorentzDistance(drf(M.mtxFloat))
 *         if out.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.mtxDouble = self.view.lorentzDistance(drf(M.mtxDouble))
 *         return out
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2268, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 2268, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":2269
 *             out.mtxFloat = self.view.lorentzDistance(drf(M.mtxFloat))
 *         if out.ctype=="double":
 *             out.mtxDouble = self.view.lorentzDistance(drf(M.mtxDouble))             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
    __pyx_v_out->__pyx_base.mtxDouble = __pyx_v_self->view.lorentzDistance((*__pyx_v_M->__pyx_base.mtxDouble));

    /* "miololib.pyx":2268
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.lorentzDistance(drf(M.mtxFloat))
 *         if out.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.mtxDouble = self.view.lorentzDistance(drf(M.mtxDouble))
 *         return out
 */
  }

  /* "miololib.pyx":2270
 *         if out.ctype=="double":
 *             out.mtxDouble = self.view.lorentzDistance(drf(M.mtxDouble))
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     def fromEuclidean(self, Matrix M):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_out);
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "miololib.pyx":2256
 *         return out
 * 
 *     def lorentzDistance(self, Matrix M):             # <<<<<<<<<<<<<<
 *         """
 *             Lorentz norm with respect to the lorentzian inner product.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("miolo.Lorentz.lorentzDistance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":2272
 *         return out
 * 
 *     def fromEuclidean(self, Matrix M):             # <<<<<<<<<<<<<<
 *         """
 *             Maps from euclidean n-dimensional space to the space of timelike
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_7Lorentz_11fromEuclidean(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_7Lorentz_10fromEuclidean, "Lorentz.fromEuclidean(self, Matrix M)\n\n            Maps from euclidean n-dimensional space to the space of timelike\n            vectors in the n-dimensional Lorentz model embedded in the \n            n+1-dimensional euclidean space. \n        ");
static PyMethodDef __pyx_mdef_5miolo_7Lorentz_11fromEuclidean = {"fromEuclidean", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_7Lorentz_11fromEuclidean, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_7Lorentz_10fromEuclidean};
static PyObject *__pyx_pw_5miolo_7Lorentz_11fromEuclidean(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_M = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fromEuclidean (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_M,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_M)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 2272, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "fromEuclidean") < 0)) __PYX_ERR(1, 2272, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_M = ((struct __pyx_obj_5miolo_Matrix *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("fromEuclidean", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 2272, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.Lorentz.fromEuclidean", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_M), __pyx_ptype_5miolo_Matrix, 1, "M", 0))) __PYX_ERR(1, 2272, __pyx_L1_error)
  __pyx_r = __pyx_pf_5miolo_7Lorentz_10fromEuclidean(((struct __pyx_obj_5miolo_Lorentz *)__pyx_v_self), __pyx_v_M);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_7Lorentz_10fromEuclidean(struct __pyx_obj_5miolo_Lorentz *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_M) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("fromEuclidean", 1);

  /* "miololib.pyx":2278
 *             n+1-dimensional euclidean space.
 *         """
 *         out = Matrix(ctype=M.ctype)             # <<<<<<<<<<<<<<
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.fromEuclidean(drf(M.mtxInt))
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ctype, __pyx_t_2) < 0) __PYX_ERR(1, 2278, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Matrix), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_out = ((struct __pyx_obj_5miolo_Matrix *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "miololib.pyx":2279
 *         """
 *         out = Matrix(ctype=M.ctype)
 *         if out.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.mtxInt = self.view.fromEuclidean(drf(M.mtxInt))
 *         if out.ctype=="float":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2279, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 2279, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":2280
 *         out = Matrix(ctype=M.ctype)
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.fromEuclidean(drf(M.mtxInt))             # <<<<<<<<<<<<<<
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.fromEuclidean(drf(M.mtxFloat))
 */
    __pyx_v_out->__pyx_base.mtxInt = __pyx_v_self->view.fromEuclidean((*__pyx_v_M->__pyx_base.mtxInt));

    /* "miololib.pyx":2279
 *         """
 *         out = Matrix(ctype=M.ctype)
 *         if out.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.mtxInt = self.view.fromEuclidean(drf(M.mtxInt))
 *         if out.ctype=="float":
 */
  }

  /* "miololib.pyx":2281
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.fromEuclidean(drf(M.mtxInt))
 *         if out.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.mtxFloat = self.view.fromEuclidean(drf(M.mtxFloat))
 *         if out.ctype=="double":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2281, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 2281, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":2282
 *             out.mtxInt = self.view.fromEuclidean(drf(M.mtxInt))
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.fromEuclidean(drf(M.mtxFloat))             # <<<<<<<<<<<<<<
 *         if out.ctype=="double":
 *             out.mtxDouble = self.view.fromEuclidean(drf(M.mtxDouble))
 */
    __pyx_v_out->__pyx_base.mtxFloat = __pyx_v_self->view.fromEuclidean((*__pyx_v_M->__pyx_base.mtxFloat));

    /* "miololib.pyx":2281
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.fromEuclidean(drf(M.mtxInt))
 *         if out.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.mtxFloat = self.view.fromEuclidean(drf(M.mtxFloat))
 *         if out.ctype=="double":
 */
  }

  /* "miololib.pyx":2283
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.fromEuclidean(drf(M.mtxFloat))
 *         if out.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.mtxDouble = self.view.fromEuclidean(drf(M.mtxDouble))
 *         return out
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 2283, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":2284
 *             out.mtxFloat = self.view.fromEuclidean(drf(M.mtxFloat))
 *         if out.ctype=="double":
 *             out.mtxDouble = self.view.fromEuclidean(drf(M.mtxDouble))             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
    __pyx_v_out->__pyx_base.mtxDouble = __pyx_v_self->view.fromEuclidean((*__pyx_v_M->__pyx_base.mtxDouble));

    /* "miololib.pyx":2283
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.fromEuclidean(drf(M.mtxFloat))
 *         if out.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.mtxDouble = self.view.fromEuclidean(drf(M.mtxDouble))
 *         return out
 */
  }

  /* "miololib.pyx":2285
 *         if out.ctype=="double":
 *             out.mtxDouble = self.view.fromEuclidean(drf(M.mtxDouble))
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     def toEuclidean(self, Matrix M):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_out);
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "miololib.pyx":2272
 *         return out
 * 
 *     def fromEuclidean(self, Matrix M):             # <<<<<<<<<<<<<<
 *         """
 *             Maps from euclidean n-dimensional space to the space of timelike
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("miolo.Lorentz.fromEuclidean", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":2287
 *         return out
 * 
 *     def toEuclidean(self, Matrix M):             # <<<<<<<<<<<<<<
 *         """
 *             Maps from lorentz n-dimensional manifold embedded in (n+1)-dimensional
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_7Lorentz_13toEuclidean(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_7Lorentz_12toEuclidean, "Lorentz.toEuclidean(self, Matrix M)\n\n            Maps from lorentz n-dimensional manifold embedded in (n+1)-dimensional\n            euclidean space to the n-dimensional euclidean space.\n        ");
static PyMethodDef __pyx_mdef_5miolo_7Lorentz_13toEuclidean = {"toEuclidean", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_7Lorentz_13toEuclidean, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_7Lorentz_12toEuclidean};
static PyObject *__pyx_pw_5miolo_7Lorentz_13toEuclidean(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_M = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("toEuclidean (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_M,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_M)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 2287, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "toEuclidean") < 0)) __PYX_ERR(1, 2287, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_M = ((struct __pyx_obj_5miolo_Matrix *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("toEuclidean", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 2287, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.Lorentz.toEuclidean", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_M), __pyx_ptype_5miolo_Matrix, 1, "M", 0))) __PYX_ERR(1, 2287, __pyx_L1_error)
  __pyx_r = __pyx_pf_5miolo_7Lorentz_12toEuclidean(((struct __pyx_obj_5miolo_Lorentz *)__pyx_v_self), __pyx_v_M);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_7Lorentz_12toEuclidean(struct __pyx_obj_5miolo_Lorentz *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_M) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("toEuclidean", 1);

  /* "miololib.pyx":2292
 *             euclidean space to the n-dimensional euclidean space.
 *         """
 *         if M.cols<2:             # <<<<<<<<<<<<<<
 *             raise Exception("Number of cols must be greater than 1.")
 *         out = Matrix(ctype=M.ctype)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_cols); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_int_2, Py_LT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2292, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 2292, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(__pyx_t_3)) {

    /* "miololib.pyx":2293
 *         """
 *         if M.cols<2:
 *             raise Exception("Number of cols must be greater than 1.")             # <<<<<<<<<<<<<<
 *         out = Matrix(ctype=M.ctype)
 *         if out.ctype=="int":
 */
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__77, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2293, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 2293, __pyx_L1_error)

    /* "miololib.pyx":2292
 *             euclidean space to the n-dimensional euclidean space.
 *         """
 *         if M.cols<2:             # <<<<<<<<<<<<<<
 *             raise Exception("Number of cols must be greater than 1.")
 *         out = Matrix(ctype=M.ctype)
 */
  }

  /* "miololib.pyx":2294
 *         if M.cols<2:
 *             raise Exception("Number of cols must be greater than 1.")
 *         out = Matrix(ctype=M.ctype)             # <<<<<<<<<<<<<<
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.toEuclidean(drf(M.mtxInt))
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2294, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2294, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_ctype, __pyx_t_1) < 0) __PYX_ERR(1, 2294, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Matrix), __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2294, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_out = ((struct __pyx_obj_5miolo_Matrix *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "miololib.pyx":2295
 *             raise Exception("Number of cols must be greater than 1.")
 *         out = Matrix(ctype=M.ctype)
 *         if out.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.mtxInt = self.view.toEuclidean(drf(M.mtxInt))
 *         if out.ctype=="float":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 2295, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":2296
 *         out = Matrix(ctype=M.ctype)
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.toEuclidean(drf(M.mtxInt))             # <<<<<<<<<<<<<<
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.toEuclidean(drf(M.mtxFloat))
 */
    __pyx_v_out->__pyx_base.mtxInt = __pyx_v_self->view.toEuclidean((*__pyx_v_M->__pyx_base.mtxInt));

    /* "miololib.pyx":2295
 *             raise Exception("Number of cols must be greater than 1.")
 *         out = Matrix(ctype=M.ctype)
 *         if out.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.mtxInt = self.view.toEuclidean(drf(M.mtxInt))
 *         if out.ctype=="float":
 */
  }

  /* "miololib.pyx":2297
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.toEuclidean(drf(M.mtxInt))
 *         if out.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.mtxFloat = self.view.toEuclidean(drf(M.mtxFloat))
 *         if out.ctype=="double":
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 2297, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":2298
 *             out.mtxInt = self.view.toEuclidean(drf(M.mtxInt))
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.toEuclidean(drf(M.mtxFloat))             # <<<<<<<<<<<<<<
 *         if out.ctype=="double":
 *             out.mtxDouble = self.view.toEuclidean(drf(M.mtxDouble))
 */
    __pyx_v_out->__pyx_base.mtxFloat = __pyx_v_self->view.toEuclidean((*__pyx_v_M->__pyx_base.mtxFloat));

    /* "miololib.pyx":2297
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.toEuclidean(drf(M.mtxInt))
 *         if out.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.mtxFloat = self.view.toEuclidean(drf(M.mtxFloat))
 *         if out.ctype=="double":
 */
  }

  /* "miololib.pyx":2299
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.toEuclidean(drf(M.mtxFloat))
 *         if out.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.mtxDouble = self.view.toEuclidean(drf(M.mtxDouble))
 *         return out
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2299, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 2299, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":2300
 *             out.mtxFloat = self.view.toEuclidean(drf(M.mtxFloat))
 *         if out.ctype=="double":
 *             out.mtxDouble = self.view.toEuclidean(drf(M.mtxDouble))             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
    __pyx_v_out->__pyx_base.mtxDouble = __pyx_v_self->view.toEuclidean((*__pyx_v_M->__pyx_base.mtxDouble));

    /* "miololib.pyx":2299
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.toEuclidean(drf(M.mtxFloat))
 *         if out.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.mtxDouble = self.view.toEuclidean(drf(M.mtxDouble))
 *         return out
 */
  }

  /* "miololib.pyx":2301
 *         if out.ctype=="double":
 *             out.mtxDouble = self.view.toEuclidean(drf(M.mtxDouble))
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     def exp(self, Matrix at, Matrix M):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_out);
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "miololib.pyx":2287
 *         return out
 * 
 *     def toEuclidean(self, Matrix M):             # <<<<<<<<<<<<<<
 *         """
 *             Maps from lorentz n-dimensional manifold embedded in (n+1)-dimensional
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("miolo.Lorentz.toEuclidean", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":2303
 *         return out
 * 
 *     def exp(self, Matrix at, Matrix M):             # <<<<<<<<<<<<<<
 *         """
 *             Exponential map in the Lorentz model.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_7Lorentz_15exp(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_7Lorentz_14exp, "Lorentz.exp(self, Matrix at, Matrix M)\n\n            Exponential map in the Lorentz model.\n        ");
static PyMethodDef __pyx_mdef_5miolo_7Lorentz_15exp = {"exp", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_7Lorentz_15exp, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_7Lorentz_14exp};
static PyObject *__pyx_pw_5miolo_7Lorentz_15exp(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_at = 0;
  struct __pyx_obj_5miolo_Matrix *__pyx_v_M = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("exp (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_at,&__pyx_n_s_M,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_at)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 2303, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_M)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 2303, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("exp", 1, 2, 2, 1); __PYX_ERR(1, 2303, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "exp") < 0)) __PYX_ERR(1, 2303, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_at = ((struct __pyx_obj_5miolo_Matrix *)values[0]);
    __pyx_v_M = ((struct __pyx_obj_5miolo_Matrix *)values[1]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("exp", 1, 2, 2, __pyx_nargs); __PYX_ERR(1, 2303, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.Lorentz.exp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_at), __pyx_ptype_5miolo_Matrix, 1, "at", 0))) __PYX_ERR(1, 2303, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_M), __pyx_ptype_5miolo_Matrix, 1, "M", 0))) __PYX_ERR(1, 2303, __pyx_L1_error)
  __pyx_r = __pyx_pf_5miolo_7Lorentz_14exp(((struct __pyx_obj_5miolo_Lorentz *)__pyx_v_self), __pyx_v_at, __pyx_v_M);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_7Lorentz_14exp(struct __pyx_obj_5miolo_Lorentz *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_at, struct __pyx_obj_5miolo_Matrix *__pyx_v_M) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("exp", 1);

  /* "miololib.pyx":2307
 *             Exponential map in the Lorentz model.
 *         """
 *         if at.cols!=M.cols:             # <<<<<<<<<<<<<<
 *             raise Exception("at and M must have same number of cols.")
 *         if at.rows!=M.rows:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_at), __pyx_n_s_cols); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2307, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_cols); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2307, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2307, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 2307, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(__pyx_t_4)) {

    /* "miololib.pyx":2308
 *         """
 *         if at.cols!=M.cols:
 *             raise Exception("at and M must have same number of cols.")             # <<<<<<<<<<<<<<
 *         if at.rows!=M.rows:
 *             raise Exception("at and M must have same number of rows.")
 */
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__78, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2308, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 2308, __pyx_L1_error)

    /* "miololib.pyx":2307
 *             Exponential map in the Lorentz model.
 *         """
 *         if at.cols!=M.cols:             # <<<<<<<<<<<<<<
 *             raise Exception("at and M must have same number of cols.")
 *         if at.rows!=M.rows:
 */
  }

  /* "miololib.pyx":2309
 *         if at.cols!=M.cols:
 *             raise Exception("at and M must have same number of cols.")
 *         if at.rows!=M.rows:             # <<<<<<<<<<<<<<
 *             raise Exception("at and M must have same number of rows.")
 *         if at.ctype!=M.ctype:
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_at), __pyx_n_s_rows); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_rows); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_3, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2309, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 2309, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(__pyx_t_4)) {

    /* "miololib.pyx":2310
 *             raise Exception("at and M must have same number of cols.")
 *         if at.rows!=M.rows:
 *             raise Exception("at and M must have same number of rows.")             # <<<<<<<<<<<<<<
 *         if at.ctype!=M.ctype:
 *             raise TypeError("at and M must have same ctype.")
 */
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__79, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2310, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 2310, __pyx_L1_error)

    /* "miololib.pyx":2309
 *         if at.cols!=M.cols:
 *             raise Exception("at and M must have same number of cols.")
 *         if at.rows!=M.rows:             # <<<<<<<<<<<<<<
 *             raise Exception("at and M must have same number of rows.")
 *         if at.ctype!=M.ctype:
 */
  }

  /* "miololib.pyx":2311
 *         if at.rows!=M.rows:
 *             raise Exception("at and M must have same number of rows.")
 *         if at.ctype!=M.ctype:             # <<<<<<<<<<<<<<
 *             raise TypeError("at and M must have same ctype.")
 *         if M.cols<2:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_at), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2311, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 2311, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(__pyx_t_4)) {

    /* "miololib.pyx":2312
 *             raise Exception("at and M must have same number of rows.")
 *         if at.ctype!=M.ctype:
 *             raise TypeError("at and M must have same ctype.")             # <<<<<<<<<<<<<<
 *         if M.cols<2:
 *             raise Exception("Number of cols must be greater than 1.")
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__72, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2312, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 2312, __pyx_L1_error)

    /* "miololib.pyx":2311
 *         if at.rows!=M.rows:
 *             raise Exception("at and M must have same number of rows.")
 *         if at.ctype!=M.ctype:             # <<<<<<<<<<<<<<
 *             raise TypeError("at and M must have same ctype.")
 *         if M.cols<2:
 */
  }

  /* "miololib.pyx":2313
 *         if at.ctype!=M.ctype:
 *             raise TypeError("at and M must have same ctype.")
 *         if M.cols<2:             # <<<<<<<<<<<<<<
 *             raise Exception("Number of cols must be greater than 1.")
 *         out = Matrix(ctype=M.ctype)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_cols); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_3, __pyx_int_2, Py_LT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2313, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 2313, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(__pyx_t_4)) {

    /* "miololib.pyx":2314
 *             raise TypeError("at and M must have same ctype.")
 *         if M.cols<2:
 *             raise Exception("Number of cols must be greater than 1.")             # <<<<<<<<<<<<<<
 *         out = Matrix(ctype=M.ctype)
 *         if out.ctype=="int":
 */
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__77, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2314, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 2314, __pyx_L1_error)

    /* "miololib.pyx":2313
 *         if at.ctype!=M.ctype:
 *             raise TypeError("at and M must have same ctype.")
 *         if M.cols<2:             # <<<<<<<<<<<<<<
 *             raise Exception("Number of cols must be greater than 1.")
 *         out = Matrix(ctype=M.ctype)
 */
  }

  /* "miololib.pyx":2315
 *         if M.cols<2:
 *             raise Exception("Number of cols must be greater than 1.")
 *         out = Matrix(ctype=M.ctype)             # <<<<<<<<<<<<<<
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.exponential(drf(at.mtxInt),drf(M.mtxInt))
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2315, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2315, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_ctype, __pyx_t_3) < 0) __PYX_ERR(1, 2315, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Matrix), __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2315, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_out = ((struct __pyx_obj_5miolo_Matrix *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "miololib.pyx":2316
 *             raise Exception("Number of cols must be greater than 1.")
 *         out = Matrix(ctype=M.ctype)
 *         if out.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.mtxInt = self.view.exponential(drf(at.mtxInt),drf(M.mtxInt))
 *         if out.ctype=="float":
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2316, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 2316, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_4) {

    /* "miololib.pyx":2317
 *         out = Matrix(ctype=M.ctype)
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.exponential(drf(at.mtxInt),drf(M.mtxInt))             # <<<<<<<<<<<<<<
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.exponential(drf(at.mtxFloat),drf(M.mtxFloat))
 */
    __pyx_v_out->__pyx_base.mtxInt = __pyx_v_self->view.exponential((*__pyx_v_at->__pyx_base.mtxInt), (*__pyx_v_M->__pyx_base.mtxInt));

    /* "miololib.pyx":2316
 *             raise Exception("Number of cols must be greater than 1.")
 *         out = Matrix(ctype=M.ctype)
 *         if out.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.mtxInt = self.view.exponential(drf(at.mtxInt),drf(M.mtxInt))
 *         if out.ctype=="float":
 */
  }

  /* "miololib.pyx":2318
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.exponential(drf(at.mtxInt),drf(M.mtxInt))
 *         if out.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.mtxFloat = self.view.exponential(drf(at.mtxFloat),drf(M.mtxFloat))
 *         if out.ctype=="double":
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 2318, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_4) {

    /* "miololib.pyx":2319
 *             out.mtxInt = self.view.exponential(drf(at.mtxInt),drf(M.mtxInt))
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.exponential(drf(at.mtxFloat),drf(M.mtxFloat))             # <<<<<<<<<<<<<<
 *         if out.ctype=="double":
 *             out.mtxDouble = self.view.exponential(drf(at.mtxDouble),drf(M.mtxDouble))
 */
    __pyx_v_out->__pyx_base.mtxFloat = __pyx_v_self->view.exponential((*__pyx_v_at->__pyx_base.mtxFloat), (*__pyx_v_M->__pyx_base.mtxFloat));

    /* "miololib.pyx":2318
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.exponential(drf(at.mtxInt),drf(M.mtxInt))
 *         if out.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.mtxFloat = self.view.exponential(drf(at.mtxFloat),drf(M.mtxFloat))
 *         if out.ctype=="double":
 */
  }

  /* "miololib.pyx":2320
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.exponential(drf(at.mtxFloat),drf(M.mtxFloat))
 *         if out.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.mtxDouble = self.view.exponential(drf(at.mtxDouble),drf(M.mtxDouble))
 *         return out
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2320, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 2320, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_4) {

    /* "miololib.pyx":2321
 *             out.mtxFloat = self.view.exponential(drf(at.mtxFloat),drf(M.mtxFloat))
 *         if out.ctype=="double":
 *             out.mtxDouble = self.view.exponential(drf(at.mtxDouble),drf(M.mtxDouble))             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
    __pyx_v_out->__pyx_base.mtxDouble = __pyx_v_self->view.exponential((*__pyx_v_at->__pyx_base.mtxDouble), (*__pyx_v_M->__pyx_base.mtxDouble));

    /* "miololib.pyx":2320
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.exponential(drf(at.mtxFloat),drf(M.mtxFloat))
 *         if out.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.mtxDouble = self.view.exponential(drf(at.mtxDouble),drf(M.mtxDouble))
 *         return out
 */
  }

  /* "miololib.pyx":2322
 *         if out.ctype=="double":
 *             out.mtxDouble = self.view.exponential(drf(at.mtxDouble),drf(M.mtxDouble))
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     def tangentProjection(self, Matrix at, Matrix M):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_out);
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "miololib.pyx":2303
 *         return out
 * 
 *     def exp(self, Matrix at, Matrix M):             # <<<<<<<<<<<<<<
 *         """
 *             Exponential map in the Lorentz model.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("miolo.Lorentz.exp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":2324
 *         return out
 * 
 *     def tangentProjection(self, Matrix at, Matrix M):             # <<<<<<<<<<<<<<
 *         """
 *             Projection of M on the the tangent space.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_7Lorentz_17tangentProjection(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_7Lorentz_16tangentProjection, "Lorentz.tangentProjection(self, Matrix at, Matrix M)\n\n            Projection of M on the the tangent space.\n        ");
static PyMethodDef __pyx_mdef_5miolo_7Lorentz_17tangentProjection = {"tangentProjection", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_7Lorentz_17tangentProjection, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_7Lorentz_16tangentProjection};
static PyObject *__pyx_pw_5miolo_7Lorentz_17tangentProjection(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_at = 0;
  struct __pyx_obj_5miolo_Matrix *__pyx_v_M = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("tangentProjection (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_at,&__pyx_n_s_M,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_at)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 2324, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_M)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 2324, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("tangentProjection", 1, 2, 2, 1); __PYX_ERR(1, 2324, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "tangentProjection") < 0)) __PYX_ERR(1, 2324, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_at = ((struct __pyx_obj_5miolo_Matrix *)values[0]);
    __pyx_v_M = ((struct __pyx_obj_5miolo_Matrix *)values[1]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("tangentProjection", 1, 2, 2, __pyx_nargs); __PYX_ERR(1, 2324, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.Lorentz.tangentProjection", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_at), __pyx_ptype_5miolo_Matrix, 1, "at", 0))) __PYX_ERR(1, 2324, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_M), __pyx_ptype_5miolo_Matrix, 1, "M", 0))) __PYX_ERR(1, 2324, __pyx_L1_error)
  __pyx_r = __pyx_pf_5miolo_7Lorentz_16tangentProjection(((struct __pyx_obj_5miolo_Lorentz *)__pyx_v_self), __pyx_v_at, __pyx_v_M);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_7Lorentz_16tangentProjection(struct __pyx_obj_5miolo_Lorentz *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_at, struct __pyx_obj_5miolo_Matrix *__pyx_v_M) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("tangentProjection", 1);

  /* "miololib.pyx":2328
 *             Projection of M on the the tangent space.
 *         """
 *         if at.cols!=M.cols:             # <<<<<<<<<<<<<<
 *             raise Exception("at and M must have same number of cols.")
 *         if at.rows!=M.rows:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_at), __pyx_n_s_cols); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2328, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_cols); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2328, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2328, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 2328, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(__pyx_t_4)) {

    /* "miololib.pyx":2329
 *         """
 *         if at.cols!=M.cols:
 *             raise Exception("at and M must have same number of cols.")             # <<<<<<<<<<<<<<
 *         if at.rows!=M.rows:
 *             raise Exception("at and M must have same number of rows.")
 */
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__78, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2329, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 2329, __pyx_L1_error)

    /* "miololib.pyx":2328
 *             Projection of M on the the tangent space.
 *         """
 *         if at.cols!=M.cols:             # <<<<<<<<<<<<<<
 *             raise Exception("at and M must have same number of cols.")
 *         if at.rows!=M.rows:
 */
  }

  /* "miololib.pyx":2330
 *         if at.cols!=M.cols:
 *             raise Exception("at and M must have same number of cols.")
 *         if at.rows!=M.rows:             # <<<<<<<<<<<<<<
 *             raise Exception("at and M must have same number of rows.")
 *         if at.ctype!=M.ctype:
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_at), __pyx_n_s_rows); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2330, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_rows); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2330, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_3, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2330, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 2330, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(__pyx_t_4)) {

    /* "miololib.pyx":2331
 *             raise Exception("at and M must have same number of cols.")
 *         if at.rows!=M.rows:
 *             raise Exception("at and M must have same number of rows.")             # <<<<<<<<<<<<<<
 *         if at.ctype!=M.ctype:
 *             raise TypeError("at and M must have same ctype.")
 */
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__79, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2331, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 2331, __pyx_L1_error)

    /* "miololib.pyx":2330
 *         if at.cols!=M.cols:
 *             raise Exception("at and M must have same number of cols.")
 *         if at.rows!=M.rows:             # <<<<<<<<<<<<<<
 *             raise Exception("at and M must have same number of rows.")
 *         if at.ctype!=M.ctype:
 */
  }

  /* "miololib.pyx":2332
 *         if at.rows!=M.rows:
 *             raise Exception("at and M must have same number of rows.")
 *         if at.ctype!=M.ctype:             # <<<<<<<<<<<<<<
 *             raise TypeError("at and M must have same ctype.")
 *         if M.cols<2:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_at), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2332, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2332, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2332, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 2332, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(__pyx_t_4)) {

    /* "miololib.pyx":2333
 *             raise Exception("at and M must have same number of rows.")
 *         if at.ctype!=M.ctype:
 *             raise TypeError("at and M must have same ctype.")             # <<<<<<<<<<<<<<
 *         if M.cols<2:
 *             raise Exception("Number of cols must be greater than 1.")
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__72, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2333, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 2333, __pyx_L1_error)

    /* "miololib.pyx":2332
 *         if at.rows!=M.rows:
 *             raise Exception("at and M must have same number of rows.")
 *         if at.ctype!=M.ctype:             # <<<<<<<<<<<<<<
 *             raise TypeError("at and M must have same ctype.")
 *         if M.cols<2:
 */
  }

  /* "miololib.pyx":2334
 *         if at.ctype!=M.ctype:
 *             raise TypeError("at and M must have same ctype.")
 *         if M.cols<2:             # <<<<<<<<<<<<<<
 *             raise Exception("Number of cols must be greater than 1.")
 *         out = Matrix(ctype=M.ctype)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_cols); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2334, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_3, __pyx_int_2, Py_LT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2334, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 2334, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(__pyx_t_4)) {

    /* "miololib.pyx":2335
 *             raise TypeError("at and M must have same ctype.")
 *         if M.cols<2:
 *             raise Exception("Number of cols must be greater than 1.")             # <<<<<<<<<<<<<<
 *         out = Matrix(ctype=M.ctype)
 *         if out.ctype=="int":
 */
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__77, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2335, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 2335, __pyx_L1_error)

    /* "miololib.pyx":2334
 *         if at.ctype!=M.ctype:
 *             raise TypeError("at and M must have same ctype.")
 *         if M.cols<2:             # <<<<<<<<<<<<<<
 *             raise Exception("Number of cols must be greater than 1.")
 *         out = Matrix(ctype=M.ctype)
 */
  }

  /* "miololib.pyx":2336
 *         if M.cols<2:
 *             raise Exception("Number of cols must be greater than 1.")
 *         out = Matrix(ctype=M.ctype)             # <<<<<<<<<<<<<<
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.tangentProjection(drf(at.mtxInt),drf(M.mtxInt))
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_ctype, __pyx_t_3) < 0) __PYX_ERR(1, 2336, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Matrix), __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_out = ((struct __pyx_obj_5miolo_Matrix *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "miololib.pyx":2337
 *             raise Exception("Number of cols must be greater than 1.")
 *         out = Matrix(ctype=M.ctype)
 *         if out.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.mtxInt = self.view.tangentProjection(drf(at.mtxInt),drf(M.mtxInt))
 *         if out.ctype=="float":
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2337, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 2337, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_4) {

    /* "miololib.pyx":2338
 *         out = Matrix(ctype=M.ctype)
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.tangentProjection(drf(at.mtxInt),drf(M.mtxInt))             # <<<<<<<<<<<<<<
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.tangentProjection(drf(at.mtxFloat),drf(M.mtxFloat))
 */
    __pyx_v_out->__pyx_base.mtxInt = __pyx_v_self->view.tangentProjection((*__pyx_v_at->__pyx_base.mtxInt), (*__pyx_v_M->__pyx_base.mtxInt));

    /* "miololib.pyx":2337
 *             raise Exception("Number of cols must be greater than 1.")
 *         out = Matrix(ctype=M.ctype)
 *         if out.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.mtxInt = self.view.tangentProjection(drf(at.mtxInt),drf(M.mtxInt))
 *         if out.ctype=="float":
 */
  }

  /* "miololib.pyx":2339
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.tangentProjection(drf(at.mtxInt),drf(M.mtxInt))
 *         if out.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.mtxFloat = self.view.tangentProjection(drf(at.mtxFloat),drf(M.mtxFloat))
 *         if out.ctype=="double":
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 2339, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_4) {

    /* "miololib.pyx":2340
 *             out.mtxInt = self.view.tangentProjection(drf(at.mtxInt),drf(M.mtxInt))
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.tangentProjection(drf(at.mtxFloat),drf(M.mtxFloat))             # <<<<<<<<<<<<<<
 *         if out.ctype=="double":
 *             out.mtxDouble = self.view.tangentProjection(drf(at.mtxDouble),drf(M.mtxDouble))
 */
    __pyx_v_out->__pyx_base.mtxFloat = __pyx_v_self->view.tangentProjection((*__pyx_v_at->__pyx_base.mtxFloat), (*__pyx_v_M->__pyx_base.mtxFloat));

    /* "miololib.pyx":2339
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.tangentProjection(drf(at.mtxInt),drf(M.mtxInt))
 *         if out.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.mtxFloat = self.view.tangentProjection(drf(at.mtxFloat),drf(M.mtxFloat))
 *         if out.ctype=="double":
 */
  }

  /* "miololib.pyx":2341
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.tangentProjection(drf(at.mtxFloat),drf(M.mtxFloat))
 *         if out.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.mtxDouble = self.view.tangentProjection(drf(at.mtxDouble),drf(M.mtxDouble))
 *         return out
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2341, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 2341, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_4) {

    /* "miololib.pyx":2342
 *             out.mtxFloat = self.view.tangentProjection(drf(at.mtxFloat),drf(M.mtxFloat))
 *         if out.ctype=="double":
 *             out.mtxDouble = self.view.tangentProjection(drf(at.mtxDouble),drf(M.mtxDouble))             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
    __pyx_v_out->__pyx_base.mtxDouble = __pyx_v_self->view.tangentProjection((*__pyx_v_at->__pyx_base.mtxDouble), (*__pyx_v_M->__pyx_base.mtxDouble));

    /* "miololib.pyx":2341
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.tangentProjection(drf(at.mtxFloat),drf(M.mtxFloat))
 *         if out.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.mtxDouble = self.view.tangentProjection(drf(at.mtxDouble),drf(M.mtxDouble))
 *         return out
 */
  }

  /* "miololib.pyx":2343
 *         if out.ctype=="double":
 *             out.mtxDouble = self.view.tangentProjection(drf(at.mtxDouble),drf(M.mtxDouble))
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     def centroidDistance(self, Matrix M, Matrix center):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_out);
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "miololib.pyx":2324
 *         return out
 * 
 *     def tangentProjection(self, Matrix at, Matrix M):             # <<<<<<<<<<<<<<
 *         """
 *             Projection of M on the the tangent space.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("miolo.Lorentz.tangentProjection", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":2345
 *         return out
 * 
 *     def centroidDistance(self, Matrix M, Matrix center):             # <<<<<<<<<<<<<<
 *         """
 *             Returns the distance of each row in M to each row of center.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_7Lorentz_19centroidDistance(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_7Lorentz_18centroidDistance, "Lorentz.centroidDistance(self, Matrix M, Matrix center)\n\n            Returns the distance of each row in M to each row of center.\n            Useful for implementing k-means.\n        ");
static PyMethodDef __pyx_mdef_5miolo_7Lorentz_19centroidDistance = {"centroidDistance", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_7Lorentz_19centroidDistance, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_7Lorentz_18centroidDistance};
static PyObject *__pyx_pw_5miolo_7Lorentz_19centroidDistance(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_M = 0;
  struct __pyx_obj_5miolo_Matrix *__pyx_v_center = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("centroidDistance (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_M,&__pyx_n_s_center,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_M)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 2345, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_center)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 2345, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("centroidDistance", 1, 2, 2, 1); __PYX_ERR(1, 2345, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "centroidDistance") < 0)) __PYX_ERR(1, 2345, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_M = ((struct __pyx_obj_5miolo_Matrix *)values[0]);
    __pyx_v_center = ((struct __pyx_obj_5miolo_Matrix *)values[1]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("centroidDistance", 1, 2, 2, __pyx_nargs); __PYX_ERR(1, 2345, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.Lorentz.centroidDistance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_M), __pyx_ptype_5miolo_Matrix, 1, "M", 0))) __PYX_ERR(1, 2345, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_center), __pyx_ptype_5miolo_Matrix, 1, "center", 0))) __PYX_ERR(1, 2345, __pyx_L1_error)
  __pyx_r = __pyx_pf_5miolo_7Lorentz_18centroidDistance(((struct __pyx_obj_5miolo_Lorentz *)__pyx_v_self), __pyx_v_M, __pyx_v_center);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_7Lorentz_18centroidDistance(struct __pyx_obj_5miolo_Lorentz *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_M, struct __pyx_obj_5miolo_Matrix *__pyx_v_center) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("centroidDistance", 1);

  /* "miololib.pyx":2350
 *             Useful for implementing k-means.
 *         """
 *         if M.ctype!=center.ctype:             # <<<<<<<<<<<<<<
 *             raise TypeError("M and center must have same ctype.")
 *         if M.cols!=center.cols:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2350, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_center), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2350, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2350, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 2350, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(__pyx_t_4)) {

    /* "miololib.pyx":2351
 *         """
 *         if M.ctype!=center.ctype:
 *             raise TypeError("M and center must have same ctype.")             # <<<<<<<<<<<<<<
 *         if M.cols!=center.cols:
 *             raise Exception("M.cols must be equal to center.cols.")
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__67, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2351, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 2351, __pyx_L1_error)

    /* "miololib.pyx":2350
 *             Useful for implementing k-means.
 *         """
 *         if M.ctype!=center.ctype:             # <<<<<<<<<<<<<<
 *             raise TypeError("M and center must have same ctype.")
 *         if M.cols!=center.cols:
 */
  }

  /* "miololib.pyx":2352
 *         if M.ctype!=center.ctype:
 *             raise TypeError("M and center must have same ctype.")
 *         if M.cols!=center.cols:             # <<<<<<<<<<<<<<
 *             raise Exception("M.cols must be equal to center.cols.")
 *         out = Matrix(ctype=M.ctype)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_cols); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2352, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_center), __pyx_n_s_cols); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2352, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_3, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2352, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 2352, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(__pyx_t_4)) {

    /* "miololib.pyx":2353
 *             raise TypeError("M and center must have same ctype.")
 *         if M.cols!=center.cols:
 *             raise Exception("M.cols must be equal to center.cols.")             # <<<<<<<<<<<<<<
 *         out = Matrix(ctype=M.ctype)
 *         if out.ctype=="int":
 */
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__68, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2353, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 2353, __pyx_L1_error)

    /* "miololib.pyx":2352
 *         if M.ctype!=center.ctype:
 *             raise TypeError("M and center must have same ctype.")
 *         if M.cols!=center.cols:             # <<<<<<<<<<<<<<
 *             raise Exception("M.cols must be equal to center.cols.")
 *         out = Matrix(ctype=M.ctype)
 */
  }

  /* "miololib.pyx":2354
 *         if M.cols!=center.cols:
 *             raise Exception("M.cols must be equal to center.cols.")
 *         out = Matrix(ctype=M.ctype)             # <<<<<<<<<<<<<<
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.centroidDistance(drf(M.mtxInt),drf(center.mtxInt))
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2354, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2354, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ctype, __pyx_t_2) < 0) __PYX_ERR(1, 2354, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Matrix), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2354, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_out = ((struct __pyx_obj_5miolo_Matrix *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "miololib.pyx":2355
 *             raise Exception("M.cols must be equal to center.cols.")
 *         out = Matrix(ctype=M.ctype)
 *         if out.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.mtxInt = self.view.centroidDistance(drf(M.mtxInt),drf(center.mtxInt))
 *         if out.ctype=="float":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2355, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 2355, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "miololib.pyx":2356
 *         out = Matrix(ctype=M.ctype)
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.centroidDistance(drf(M.mtxInt),drf(center.mtxInt))             # <<<<<<<<<<<<<<
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.centroidDistance(drf(M.mtxFloat),drf(center.mtxFloat))
 */
    __pyx_v_out->__pyx_base.mtxInt = __pyx_v_self->view.centroidDistance((*__pyx_v_M->__pyx_base.mtxInt), (*__pyx_v_center->__pyx_base.mtxInt));

    /* "miololib.pyx":2355
 *             raise Exception("M.cols must be equal to center.cols.")
 *         out = Matrix(ctype=M.ctype)
 *         if out.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.mtxInt = self.view.centroidDistance(drf(M.mtxInt),drf(center.mtxInt))
 *         if out.ctype=="float":
 */
  }

  /* "miololib.pyx":2357
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.centroidDistance(drf(M.mtxInt),drf(center.mtxInt))
 *         if out.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.mtxFloat = self.view.centroidDistance(drf(M.mtxFloat),drf(center.mtxFloat))
 *         if out.ctype=="double":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2357, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 2357, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "miololib.pyx":2358
 *             out.mtxInt = self.view.centroidDistance(drf(M.mtxInt),drf(center.mtxInt))
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.centroidDistance(drf(M.mtxFloat),drf(center.mtxFloat))             # <<<<<<<<<<<<<<
 *         if out.ctype=="double":
 *             out.mtxDouble = self.view.centroidDistance(drf(M.mtxDouble),drf(center.mtxDouble))
 */
    __pyx_v_out->__pyx_base.mtxFloat = __pyx_v_self->view.centroidDistance((*__pyx_v_M->__pyx_base.mtxFloat), (*__pyx_v_center->__pyx_base.mtxFloat));

    /* "miololib.pyx":2357
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.centroidDistance(drf(M.mtxInt),drf(center.mtxInt))
 *         if out.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.mtxFloat = self.view.centroidDistance(drf(M.mtxFloat),drf(center.mtxFloat))
 *         if out.ctype=="double":
 */
  }

  /* "miololib.pyx":2359
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.centroidDistance(drf(M.mtxFloat),drf(center.mtxFloat))
 *         if out.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.mtxDouble = self.view.centroidDistance(drf(M.mtxDouble),drf(center.mtxDouble))
 *         return out
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2359, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 2359, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "miololib.pyx":2360
 *             out.mtxFloat = self.view.centroidDistance(drf(M.mtxFloat),drf(center.mtxFloat))
 *         if out.ctype=="double":
 *             out.mtxDouble = self.view.centroidDistance(drf(M.mtxDouble),drf(center.mtxDouble))             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
    __pyx_v_out->__pyx_base.mtxDouble = __pyx_v_self->view.centroidDistance((*__pyx_v_M->__pyx_base.mtxDouble), (*__pyx_v_center->__pyx_base.mtxDouble));

    /* "miololib.pyx":2359
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.centroidDistance(drf(M.mtxFloat),drf(center.mtxFloat))
 *         if out.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.mtxDouble = self.view.centroidDistance(drf(M.mtxDouble),drf(center.mtxDouble))
 *         return out
 */
  }

  /* "miololib.pyx":2361
 *         if out.ctype=="double":
 *             out.mtxDouble = self.view.centroidDistance(drf(M.mtxDouble),drf(center.mtxDouble))
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     def mean(self, Matrix M):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_out);
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "miololib.pyx":2345
 *         return out
 * 
 *     def centroidDistance(self, Matrix M, Matrix center):             # <<<<<<<<<<<<<<
 *         """
 *             Returns the distance of each row in M to each row of center.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("miolo.Lorentz.centroidDistance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":2363
 *         return out
 * 
 *     def mean(self, Matrix M):             # <<<<<<<<<<<<<<
 *         """
 *             Returns the mean of rows in M in lorentzian space.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_7Lorentz_21mean(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_7Lorentz_20mean, "Lorentz.mean(self, Matrix M)\n\n            Returns the mean of rows in M in lorentzian space.\n        ");
static PyMethodDef __pyx_mdef_5miolo_7Lorentz_21mean = {"mean", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_7Lorentz_21mean, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_7Lorentz_20mean};
static PyObject *__pyx_pw_5miolo_7Lorentz_21mean(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_M = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("mean (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_M,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_M)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 2363, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "mean") < 0)) __PYX_ERR(1, 2363, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_M = ((struct __pyx_obj_5miolo_Matrix *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mean", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 2363, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.Lorentz.mean", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_M), __pyx_ptype_5miolo_Matrix, 1, "M", 0))) __PYX_ERR(1, 2363, __pyx_L1_error)
  __pyx_r = __pyx_pf_5miolo_7Lorentz_20mean(((struct __pyx_obj_5miolo_Lorentz *)__pyx_v_self), __pyx_v_M);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_7Lorentz_20mean(struct __pyx_obj_5miolo_Lorentz *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_M) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("mean", 1);

  /* "miololib.pyx":2367
 *             Returns the mean of rows in M in lorentzian space.
 *         """
 *         out = Matrix(ctype=M.ctype)             # <<<<<<<<<<<<<<
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.mean(drf(M.mtxInt))
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2367, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2367, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ctype, __pyx_t_2) < 0) __PYX_ERR(1, 2367, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Matrix), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2367, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_out = ((struct __pyx_obj_5miolo_Matrix *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "miololib.pyx":2368
 *         """
 *         out = Matrix(ctype=M.ctype)
 *         if out.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.mtxInt = self.view.mean(drf(M.mtxInt))
 *         if out.ctype=="float":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2368, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 2368, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":2369
 *         out = Matrix(ctype=M.ctype)
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.mean(drf(M.mtxInt))             # <<<<<<<<<<<<<<
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.mean(drf(M.mtxFloat))
 */
    __pyx_v_out->__pyx_base.mtxInt = __pyx_v_self->view.mean((*__pyx_v_M->__pyx_base.mtxInt));

    /* "miololib.pyx":2368
 *         """
 *         out = Matrix(ctype=M.ctype)
 *         if out.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.mtxInt = self.view.mean(drf(M.mtxInt))
 *         if out.ctype=="float":
 */
  }

  /* "miololib.pyx":2370
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.mean(drf(M.mtxInt))
 *         if out.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.mtxFloat = self.view.mean(drf(M.mtxFloat))
 *         if out.ctype=="double":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2370, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 2370, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":2371
 *             out.mtxInt = self.view.mean(drf(M.mtxInt))
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.mean(drf(M.mtxFloat))             # <<<<<<<<<<<<<<
 *         if out.ctype=="double":
 *             out.mtxDouble = self.view.mean(drf(M.mtxDouble))
 */
    __pyx_v_out->__pyx_base.mtxFloat = __pyx_v_self->view.mean((*__pyx_v_M->__pyx_base.mtxFloat));

    /* "miololib.pyx":2370
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.mean(drf(M.mtxInt))
 *         if out.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.mtxFloat = self.view.mean(drf(M.mtxFloat))
 *         if out.ctype=="double":
 */
  }

  /* "miololib.pyx":2372
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.mean(drf(M.mtxFloat))
 *         if out.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.mtxDouble = self.view.mean(drf(M.mtxDouble))
 *         return out
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2372, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 2372, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":2373
 *             out.mtxFloat = self.view.mean(drf(M.mtxFloat))
 *         if out.ctype=="double":
 *             out.mtxDouble = self.view.mean(drf(M.mtxDouble))             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
    __pyx_v_out->__pyx_base.mtxDouble = __pyx_v_self->view.mean((*__pyx_v_M->__pyx_base.mtxDouble));

    /* "miololib.pyx":2372
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.mean(drf(M.mtxFloat))
 *         if out.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.mtxDouble = self.view.mean(drf(M.mtxDouble))
 *         return out
 */
  }

  /* "miololib.pyx":2374
 *         if out.ctype=="double":
 *             out.mtxDouble = self.view.mean(drf(M.mtxDouble))
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     def mean(self, Matrix M):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_out);
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "miololib.pyx":2363
 *         return out
 * 
 *     def mean(self, Matrix M):             # <<<<<<<<<<<<<<
 *         """
 *             Returns the mean of rows in M in lorentzian space.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("miolo.Lorentz.mean", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":2376
 *         return out
 * 
 *     def mean(self, Matrix M):             # <<<<<<<<<<<<<<
 *         """
 *             Returns the variance of rows in M in lorentzian space.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_7Lorentz_23mean(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_7Lorentz_22mean, "Lorentz.mean(self, Matrix M)\n\n            Returns the variance of rows in M in lorentzian space.\n        ");
static PyMethodDef __pyx_mdef_5miolo_7Lorentz_23mean = {"mean", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_7Lorentz_23mean, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_7Lorentz_22mean};
static PyObject *__pyx_pw_5miolo_7Lorentz_23mean(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_M = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("mean (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_M,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_M)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 2376, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "mean") < 0)) __PYX_ERR(1, 2376, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_M = ((struct __pyx_obj_5miolo_Matrix *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mean", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 2376, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.Lorentz.mean", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_M), __pyx_ptype_5miolo_Matrix, 1, "M", 0))) __PYX_ERR(1, 2376, __pyx_L1_error)
  __pyx_r = __pyx_pf_5miolo_7Lorentz_22mean(((struct __pyx_obj_5miolo_Lorentz *)__pyx_v_self), __pyx_v_M);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_7Lorentz_22mean(struct __pyx_obj_5miolo_Lorentz *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_M) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("mean", 1);

  /* "miololib.pyx":2380
 *             Returns the variance of rows in M in lorentzian space.
 *         """
 *         out = Matrix(ctype=M.ctype)             # <<<<<<<<<<<<<<
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.variance(drf(M.mtxInt))
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2380, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2380, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ctype, __pyx_t_2) < 0) __PYX_ERR(1, 2380, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Matrix), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2380, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_out = ((struct __pyx_obj_5miolo_Matrix *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "miololib.pyx":2381
 *         """
 *         out = Matrix(ctype=M.ctype)
 *         if out.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.mtxInt = self.view.variance(drf(M.mtxInt))
 *         if out.ctype=="float":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2381, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 2381, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":2382
 *         out = Matrix(ctype=M.ctype)
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.variance(drf(M.mtxInt))             # <<<<<<<<<<<<<<
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.variance(drf(M.mtxFloat))
 */
    __pyx_v_out->__pyx_base.mtxInt = __pyx_v_self->view.variance((*__pyx_v_M->__pyx_base.mtxInt));

    /* "miololib.pyx":2381
 *         """
 *         out = Matrix(ctype=M.ctype)
 *         if out.ctype=="int":             # <<<<<<<<<<<<<<
 *             out.mtxInt = self.view.variance(drf(M.mtxInt))
 *         if out.ctype=="float":
 */
  }

  /* "miololib.pyx":2383
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.variance(drf(M.mtxInt))
 *         if out.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.mtxFloat = self.view.variance(drf(M.mtxFloat))
 *         if out.ctype=="double":
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2383, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 2383, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":2384
 *             out.mtxInt = self.view.variance(drf(M.mtxInt))
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.variance(drf(M.mtxFloat))             # <<<<<<<<<<<<<<
 *         if out.ctype=="double":
 *             out.mtxDouble = self.view.variance(drf(M.mtxDouble))
 */
    __pyx_v_out->__pyx_base.mtxFloat = __pyx_v_self->view.variance((*__pyx_v_M->__pyx_base.mtxFloat));

    /* "miololib.pyx":2383
 *         if out.ctype=="int":
 *             out.mtxInt = self.view.variance(drf(M.mtxInt))
 *         if out.ctype=="float":             # <<<<<<<<<<<<<<
 *             out.mtxFloat = self.view.variance(drf(M.mtxFloat))
 *         if out.ctype=="double":
 */
  }

  /* "miololib.pyx":2385
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.variance(drf(M.mtxFloat))
 *         if out.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.mtxDouble = self.view.variance(drf(M.mtxDouble))
 *         return out
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 2385, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "miololib.pyx":2386
 *             out.mtxFloat = self.view.variance(drf(M.mtxFloat))
 *         if out.ctype=="double":
 *             out.mtxDouble = self.view.variance(drf(M.mtxDouble))             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
    __pyx_v_out->__pyx_base.mtxDouble = __pyx_v_self->view.variance((*__pyx_v_M->__pyx_base.mtxDouble));

    /* "miololib.pyx":2385
 *         if out.ctype=="float":
 *             out.mtxFloat = self.view.variance(drf(M.mtxFloat))
 *         if out.ctype=="double":             # <<<<<<<<<<<<<<
 *             out.mtxDouble = self.view.variance(drf(M.mtxDouble))
 *         return out
 */
  }

  /* "miololib.pyx":2387
 *         if out.ctype=="double":
 *             out.mtxDouble = self.view.variance(drf(M.mtxDouble))
 *         return out             # <<<<<<<<<<<<<<
 * 
 * #-------------------------------------------------------------------------------
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_out);
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "miololib.pyx":2376
 *         return out
 * 
 *     def mean(self, Matrix M):             # <<<<<<<<<<<<<<
 *         """
 *             Returns the variance of rows in M in lorentzian space.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("miolo.Lorentz.mean", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_7Lorentz_25__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_7Lorentz_24__reduce_cython__, "Lorentz.__reduce_cython__(self)");
static PyMethodDef __pyx_mdef_5miolo_7Lorentz_25__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_7Lorentz_25__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_7Lorentz_24__reduce_cython__};
static PyObject *__pyx_pw_5miolo_7Lorentz_25__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_5miolo_7Lorentz_24__reduce_cython__(((struct __pyx_obj_5miolo_Lorentz *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_7Lorentz_24__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_Lorentz *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_view_cannot_be_converted_to, 0, 0);
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("miolo.Lorentz.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_7Lorentz_27__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_7Lorentz_26__setstate_cython__, "Lorentz.__setstate_cython__(self, __pyx_state)");
static PyMethodDef __pyx_mdef_5miolo_7Lorentz_27__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_7Lorentz_27__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_7Lorentz_26__setstate_cython__};
static PyObject *__pyx_pw_5miolo_7Lorentz_27__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(0, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.Lorentz.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5miolo_7Lorentz_26__setstate_cython__(((struct __pyx_obj_5miolo_Lorentz *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_7Lorentz_26__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_Lorentz *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_view_cannot_be_converted_to, 0, 0);
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("miolo.Lorentz.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":2404
 *     cdef mld.ufunction view
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static int __pyx_pw_5miolo_9ufunction_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5miolo_9ufunction_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, __pyx_nargs); return -1;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_VARARGS(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_5miolo_9ufunction___init__(((struct __pyx_obj_5miolo_ufunction *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5miolo_9ufunction___init__(CYTHON_UNUSED struct __pyx_obj_5miolo_ufunction *__pyx_v_self) {
  int __pyx_r;

  /* function exit code */
  __pyx_r = 0;
  return __pyx_r;
}

/* "miololib.pyx":2407
 *         pass
 * 
 *     def __call__(self, mioloObject X):             # <<<<<<<<<<<<<<
 *         if isinstance(X,Matrix):
 *             out = Matrix(ctype=X.ctype)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_9ufunction_3__call__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_5miolo_9ufunction_3__call__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_5miolo_mioloObject *__pyx_v_X = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__call__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_X,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_X)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 2407, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__call__") < 0)) __PYX_ERR(1, 2407, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
    }
    __pyx_v_X = ((struct __pyx_obj_5miolo_mioloObject *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__call__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 2407, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.ufunction.__call__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_X), __pyx_ptype_5miolo_mioloObject, 1, "X", 0))) __PYX_ERR(1, 2407, __pyx_L1_error)
  __pyx_r = __pyx_pf_5miolo_9ufunction_2__call__(((struct __pyx_obj_5miolo_ufunction *)__pyx_v_self), __pyx_v_X);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_9ufunction_2__call__(struct __pyx_obj_5miolo_ufunction *__pyx_v_self, struct __pyx_obj_5miolo_mioloObject *__pyx_v_X) {
  struct __pyx_obj_5miolo_mioloObject *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__call__", 1);

  /* "miololib.pyx":2408
 * 
 *     def __call__(self, mioloObject X):
 *         if isinstance(X,Matrix):             # <<<<<<<<<<<<<<
 *             out = Matrix(ctype=X.ctype)
 *             if out.ctype=="int":
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_X), __pyx_ptype_5miolo_Matrix); 
  if (__pyx_t_1) {

    /* "miololib.pyx":2409
 *     def __call__(self, mioloObject X):
 *         if isinstance(X,Matrix):
 *             out = Matrix(ctype=X.ctype)             # <<<<<<<<<<<<<<
 *             if out.ctype=="int":
 *                 out.mtxInt = self.view.mtxApply(drf(X.mtxInt))
 */
    __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2409, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_X), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2409, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_ctype, __pyx_t_3) < 0) __PYX_ERR(1, 2409, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Matrix), __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2409, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_out = ((struct __pyx_obj_5miolo_mioloObject *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "miololib.pyx":2410
 *         if isinstance(X,Matrix):
 *             out = Matrix(ctype=X.ctype)
 *             if out.ctype=="int":             # <<<<<<<<<<<<<<
 *                 out.mtxInt = self.view.mtxApply(drf(X.mtxInt))
 *             if out.ctype=="float":
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2410, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 2410, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_1) {

      /* "miololib.pyx":2411
 *             out = Matrix(ctype=X.ctype)
 *             if out.ctype=="int":
 *                 out.mtxInt = self.view.mtxApply(drf(X.mtxInt))             # <<<<<<<<<<<<<<
 *             if out.ctype=="float":
 *                 out.mtxFloat = self.view.mtxApply(drf(X.mtxFloat))
 */
      __pyx_v_out->mtxInt = __pyx_v_self->view.mtxApply((*__pyx_v_X->mtxInt));

      /* "miololib.pyx":2410
 *         if isinstance(X,Matrix):
 *             out = Matrix(ctype=X.ctype)
 *             if out.ctype=="int":             # <<<<<<<<<<<<<<
 *                 out.mtxInt = self.view.mtxApply(drf(X.mtxInt))
 *             if out.ctype=="float":
 */
    }

    /* "miololib.pyx":2412
 *             if out.ctype=="int":
 *                 out.mtxInt = self.view.mtxApply(drf(X.mtxInt))
 *             if out.ctype=="float":             # <<<<<<<<<<<<<<
 *                 out.mtxFloat = self.view.mtxApply(drf(X.mtxFloat))
 *             if out.ctype=="double":
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2412, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 2412, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_1) {

      /* "miololib.pyx":2413
 *                 out.mtxInt = self.view.mtxApply(drf(X.mtxInt))
 *             if out.ctype=="float":
 *                 out.mtxFloat = self.view.mtxApply(drf(X.mtxFloat))             # <<<<<<<<<<<<<<
 *             if out.ctype=="double":
 *                 out.mtxDouble = self.view.mtxApply(drf(X.mtxDouble))
 */
      __pyx_v_out->mtxFloat = __pyx_v_self->view.mtxApply((*__pyx_v_X->mtxFloat));

      /* "miololib.pyx":2412
 *             if out.ctype=="int":
 *                 out.mtxInt = self.view.mtxApply(drf(X.mtxInt))
 *             if out.ctype=="float":             # <<<<<<<<<<<<<<
 *                 out.mtxFloat = self.view.mtxApply(drf(X.mtxFloat))
 *             if out.ctype=="double":
 */
    }

    /* "miololib.pyx":2414
 *             if out.ctype=="float":
 *                 out.mtxFloat = self.view.mtxApply(drf(X.mtxFloat))
 *             if out.ctype=="double":             # <<<<<<<<<<<<<<
 *                 out.mtxDouble = self.view.mtxApply(drf(X.mtxDouble))
 *             return out
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2414, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 2414, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_1) {

      /* "miololib.pyx":2415
 *                 out.mtxFloat = self.view.mtxApply(drf(X.mtxFloat))
 *             if out.ctype=="double":
 *                 out.mtxDouble = self.view.mtxApply(drf(X.mtxDouble))             # <<<<<<<<<<<<<<
 *             return out
 *         if isinstance(X,Graph):
 */
      __pyx_v_out->mtxDouble = __pyx_v_self->view.mtxApply((*__pyx_v_X->mtxDouble));

      /* "miololib.pyx":2414
 *             if out.ctype=="float":
 *                 out.mtxFloat = self.view.mtxApply(drf(X.mtxFloat))
 *             if out.ctype=="double":             # <<<<<<<<<<<<<<
 *                 out.mtxDouble = self.view.mtxApply(drf(X.mtxDouble))
 *             return out
 */
    }

    /* "miololib.pyx":2416
 *             if out.ctype=="double":
 *                 out.mtxDouble = self.view.mtxApply(drf(X.mtxDouble))
 *             return out             # <<<<<<<<<<<<<<
 *         if isinstance(X,Graph):
 *             out = Graph(ctype=X.ctype)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_out);
    __pyx_r = ((PyObject *)__pyx_v_out);
    goto __pyx_L0;

    /* "miololib.pyx":2408
 * 
 *     def __call__(self, mioloObject X):
 *         if isinstance(X,Matrix):             # <<<<<<<<<<<<<<
 *             out = Matrix(ctype=X.ctype)
 *             if out.ctype=="int":
 */
  }

  /* "miololib.pyx":2417
 *                 out.mtxDouble = self.view.mtxApply(drf(X.mtxDouble))
 *             return out
 *         if isinstance(X,Graph):             # <<<<<<<<<<<<<<
 *             out = Graph(ctype=X.ctype)
 *             if out.ctype=="int":
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_X), __pyx_ptype_5miolo_Graph); 
  if (__pyx_t_1) {

    /* "miololib.pyx":2418
 *             return out
 *         if isinstance(X,Graph):
 *             out = Graph(ctype=X.ctype)             # <<<<<<<<<<<<<<
 *             if out.ctype=="int":
 *                 out.graphInt = self.view.graphApply(drf(X.graphInt))
 */
    __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2418, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_X), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2418, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_ctype, __pyx_t_2) < 0) __PYX_ERR(1, 2418, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Graph), __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2418, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_out = ((struct __pyx_obj_5miolo_mioloObject *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "miololib.pyx":2419
 *         if isinstance(X,Graph):
 *             out = Graph(ctype=X.ctype)
 *             if out.ctype=="int":             # <<<<<<<<<<<<<<
 *                 out.graphInt = self.view.graphApply(drf(X.graphInt))
 *             if out.ctype=="float":
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2419, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 2419, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_1) {

      /* "miololib.pyx":2420
 *             out = Graph(ctype=X.ctype)
 *             if out.ctype=="int":
 *                 out.graphInt = self.view.graphApply(drf(X.graphInt))             # <<<<<<<<<<<<<<
 *             if out.ctype=="float":
 *                 out.graphFloat = self.view.graphApply(drf(X.graphFloat))
 */
      __pyx_v_out->graphInt = __pyx_v_self->view.graphApply((*__pyx_v_X->graphInt));

      /* "miololib.pyx":2419
 *         if isinstance(X,Graph):
 *             out = Graph(ctype=X.ctype)
 *             if out.ctype=="int":             # <<<<<<<<<<<<<<
 *                 out.graphInt = self.view.graphApply(drf(X.graphInt))
 *             if out.ctype=="float":
 */
    }

    /* "miololib.pyx":2421
 *             if out.ctype=="int":
 *                 out.graphInt = self.view.graphApply(drf(X.graphInt))
 *             if out.ctype=="float":             # <<<<<<<<<<<<<<
 *                 out.graphFloat = self.view.graphApply(drf(X.graphFloat))
 *             if out.ctype=="double":
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2421, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 2421, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_1) {

      /* "miololib.pyx":2422
 *                 out.graphInt = self.view.graphApply(drf(X.graphInt))
 *             if out.ctype=="float":
 *                 out.graphFloat = self.view.graphApply(drf(X.graphFloat))             # <<<<<<<<<<<<<<
 *             if out.ctype=="double":
 *                 out.graphDouble = self.view.graphApply(drf(X.graphDouble))
 */
      __pyx_v_out->graphFloat = __pyx_v_self->view.graphApply((*__pyx_v_X->graphFloat));

      /* "miololib.pyx":2421
 *             if out.ctype=="int":
 *                 out.graphInt = self.view.graphApply(drf(X.graphInt))
 *             if out.ctype=="float":             # <<<<<<<<<<<<<<
 *                 out.graphFloat = self.view.graphApply(drf(X.graphFloat))
 *             if out.ctype=="double":
 */
    }

    /* "miololib.pyx":2423
 *             if out.ctype=="float":
 *                 out.graphFloat = self.view.graphApply(drf(X.graphFloat))
 *             if out.ctype=="double":             # <<<<<<<<<<<<<<
 *                 out.graphDouble = self.view.graphApply(drf(X.graphDouble))
 *             return out
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2423, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 2423, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_1) {

      /* "miololib.pyx":2424
 *                 out.graphFloat = self.view.graphApply(drf(X.graphFloat))
 *             if out.ctype=="double":
 *                 out.graphDouble = self.view.graphApply(drf(X.graphDouble))             # <<<<<<<<<<<<<<
 *             return out
 *         if isinstance(X,Digraph):
 */
      __pyx_v_out->graphDouble = __pyx_v_self->view.graphApply((*__pyx_v_X->graphDouble));

      /* "miololib.pyx":2423
 *             if out.ctype=="float":
 *                 out.graphFloat = self.view.graphApply(drf(X.graphFloat))
 *             if out.ctype=="double":             # <<<<<<<<<<<<<<
 *                 out.graphDouble = self.view.graphApply(drf(X.graphDouble))
 *             return out
 */
    }

    /* "miololib.pyx":2425
 *             if out.ctype=="double":
 *                 out.graphDouble = self.view.graphApply(drf(X.graphDouble))
 *             return out             # <<<<<<<<<<<<<<
 *         if isinstance(X,Digraph):
 *             out = Digraph(ctype=X.ctype)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_out);
    __pyx_r = ((PyObject *)__pyx_v_out);
    goto __pyx_L0;

    /* "miololib.pyx":2417
 *                 out.mtxDouble = self.view.mtxApply(drf(X.mtxDouble))
 *             return out
 *         if isinstance(X,Graph):             # <<<<<<<<<<<<<<
 *             out = Graph(ctype=X.ctype)
 *             if out.ctype=="int":
 */
  }

  /* "miololib.pyx":2426
 *                 out.graphDouble = self.view.graphApply(drf(X.graphDouble))
 *             return out
 *         if isinstance(X,Digraph):             # <<<<<<<<<<<<<<
 *             out = Digraph(ctype=X.ctype)
 *             if out.ctype=="int":
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_X), __pyx_ptype_5miolo_Digraph); 
  if (__pyx_t_1) {

    /* "miololib.pyx":2427
 *             return out
 *         if isinstance(X,Digraph):
 *             out = Digraph(ctype=X.ctype)             # <<<<<<<<<<<<<<
 *             if out.ctype=="int":
 *                 out.digraphInt = self.view.digraphApply(drf(X.digraphInt))
 */
    __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2427, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_X), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2427, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_ctype, __pyx_t_3) < 0) __PYX_ERR(1, 2427, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5miolo_Digraph), __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2427, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_out = ((struct __pyx_obj_5miolo_mioloObject *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "miololib.pyx":2428
 *         if isinstance(X,Digraph):
 *             out = Digraph(ctype=X.ctype)
 *             if out.ctype=="int":             # <<<<<<<<<<<<<<
 *                 out.digraphInt = self.view.digraphApply(drf(X.digraphInt))
 *             if out.ctype=="float":
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2428, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 2428, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_1) {

      /* "miololib.pyx":2429
 *             out = Digraph(ctype=X.ctype)
 *             if out.ctype=="int":
 *                 out.digraphInt = self.view.digraphApply(drf(X.digraphInt))             # <<<<<<<<<<<<<<
 *             if out.ctype=="float":
 *                 out.digraphFloat = self.view.digraphApply(drf(X.digraphFloat))
 */
      __pyx_v_out->digraphInt = __pyx_v_self->view.digraphApply((*__pyx_v_X->digraphInt));

      /* "miololib.pyx":2428
 *         if isinstance(X,Digraph):
 *             out = Digraph(ctype=X.ctype)
 *             if out.ctype=="int":             # <<<<<<<<<<<<<<
 *                 out.digraphInt = self.view.digraphApply(drf(X.digraphInt))
 *             if out.ctype=="float":
 */
    }

    /* "miololib.pyx":2430
 *             if out.ctype=="int":
 *                 out.digraphInt = self.view.digraphApply(drf(X.digraphInt))
 *             if out.ctype=="float":             # <<<<<<<<<<<<<<
 *                 out.digraphFloat = self.view.digraphApply(drf(X.digraphFloat))
 *             if out.ctype=="double":
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2430, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 2430, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_1) {

      /* "miololib.pyx":2431
 *                 out.digraphInt = self.view.digraphApply(drf(X.digraphInt))
 *             if out.ctype=="float":
 *                 out.digraphFloat = self.view.digraphApply(drf(X.digraphFloat))             # <<<<<<<<<<<<<<
 *             if out.ctype=="double":
 *                 out.digraphDouble = self.view.digraphApply(drf(X.digraphDouble))
 */
      __pyx_v_out->digraphFloat = __pyx_v_self->view.digraphApply((*__pyx_v_X->digraphFloat));

      /* "miololib.pyx":2430
 *             if out.ctype=="int":
 *                 out.digraphInt = self.view.digraphApply(drf(X.digraphInt))
 *             if out.ctype=="float":             # <<<<<<<<<<<<<<
 *                 out.digraphFloat = self.view.digraphApply(drf(X.digraphFloat))
 *             if out.ctype=="double":
 */
    }

    /* "miololib.pyx":2432
 *             if out.ctype=="float":
 *                 out.digraphFloat = self.view.digraphApply(drf(X.digraphFloat))
 *             if out.ctype=="double":             # <<<<<<<<<<<<<<
 *                 out.digraphDouble = self.view.digraphApply(drf(X.digraphDouble))
 *             return out
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2432, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 2432, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_1) {

      /* "miololib.pyx":2433
 *                 out.digraphFloat = self.view.digraphApply(drf(X.digraphFloat))
 *             if out.ctype=="double":
 *                 out.digraphDouble = self.view.digraphApply(drf(X.digraphDouble))             # <<<<<<<<<<<<<<
 *             return out
 * 
 */
      __pyx_v_out->digraphDouble = __pyx_v_self->view.digraphApply((*__pyx_v_X->digraphDouble));

      /* "miololib.pyx":2432
 *             if out.ctype=="float":
 *                 out.digraphFloat = self.view.digraphApply(drf(X.digraphFloat))
 *             if out.ctype=="double":             # <<<<<<<<<<<<<<
 *                 out.digraphDouble = self.view.digraphApply(drf(X.digraphDouble))
 *             return out
 */
    }

    /* "miololib.pyx":2434
 *             if out.ctype=="double":
 *                 out.digraphDouble = self.view.digraphApply(drf(X.digraphDouble))
 *             return out             # <<<<<<<<<<<<<<
 * 
 * cdef class sin(ufunction):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_out);
    __pyx_r = ((PyObject *)__pyx_v_out);
    goto __pyx_L0;

    /* "miololib.pyx":2426
 *                 out.graphDouble = self.view.graphApply(drf(X.graphDouble))
 *             return out
 *         if isinstance(X,Digraph):             # <<<<<<<<<<<<<<
 *             out = Digraph(ctype=X.ctype)
 *             if out.ctype=="int":
 */
  }

  /* "miololib.pyx":2407
 *         pass
 * 
 *     def __call__(self, mioloObject X):             # <<<<<<<<<<<<<<
 *         if isinstance(X,Matrix):
 *             out = Matrix(ctype=X.ctype)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("miolo.ufunction.__call__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_9ufunction_5__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_9ufunction_4__reduce_cython__, "ufunction.__reduce_cython__(self)");
static PyMethodDef __pyx_mdef_5miolo_9ufunction_5__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_9ufunction_5__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_9ufunction_4__reduce_cython__};
static PyObject *__pyx_pw_5miolo_9ufunction_5__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_5miolo_9ufunction_4__reduce_cython__(((struct __pyx_obj_5miolo_ufunction *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_9ufunction_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_ufunction *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_view_cannot_be_converted_to, 0, 0);
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("miolo.ufunction.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_9ufunction_7__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_9ufunction_6__setstate_cython__, "ufunction.__setstate_cython__(self, __pyx_state)");
static PyMethodDef __pyx_mdef_5miolo_9ufunction_7__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_9ufunction_7__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_9ufunction_6__setstate_cython__};
static PyObject *__pyx_pw_5miolo_9ufunction_7__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(0, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.ufunction.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5miolo_9ufunction_6__setstate_cython__(((struct __pyx_obj_5miolo_ufunction *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_9ufunction_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_ufunction *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_view_cannot_be_converted_to, 0, 0);
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("miolo.ufunction.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":2437
 * 
 * cdef class sin(ufunction):
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.view.f = mld.sin
 * cdef class cos(ufunction):
 */

/* Python wrapper */
static int __pyx_pw_5miolo_3sin_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5miolo_3sin_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, __pyx_nargs); return -1;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_VARARGS(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_5miolo_3sin___init__(((struct __pyx_obj_5miolo_sin *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5miolo_3sin___init__(struct __pyx_obj_5miolo_sin *__pyx_v_self) {
  int __pyx_r;

  /* "miololib.pyx":2438
 * cdef class sin(ufunction):
 *     def __init__(self):
 *         self.view.f = mld.sin             # <<<<<<<<<<<<<<
 * cdef class cos(ufunction):
 *     def __init__(self):
 */
  __pyx_v_self->__pyx_base.view.f = sin;

  /* "miololib.pyx":2437
 * 
 * cdef class sin(ufunction):
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.view.f = mld.sin
 * cdef class cos(ufunction):
 */

  /* function exit code */
  __pyx_r = 0;
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_3sin_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_3sin_2__reduce_cython__, "sin.__reduce_cython__(self)");
static PyMethodDef __pyx_mdef_5miolo_3sin_3__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_3sin_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_3sin_2__reduce_cython__};
static PyObject *__pyx_pw_5miolo_3sin_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_5miolo_3sin_2__reduce_cython__(((struct __pyx_obj_5miolo_sin *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_3sin_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_sin *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_view_cannot_be_converted_to, 0, 0);
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("miolo.sin.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_3sin_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_3sin_4__setstate_cython__, "sin.__setstate_cython__(self, __pyx_state)");
static PyMethodDef __pyx_mdef_5miolo_3sin_5__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_3sin_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_3sin_4__setstate_cython__};
static PyObject *__pyx_pw_5miolo_3sin_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(0, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.sin.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5miolo_3sin_4__setstate_cython__(((struct __pyx_obj_5miolo_sin *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_3sin_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_sin *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_view_cannot_be_converted_to, 0, 0);
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("miolo.sin.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":2440
 *         self.view.f = mld.sin
 * cdef class cos(ufunction):
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.view.f = mld.cos
 * cdef class tan(ufunction):
 */

/* Python wrapper */
static int __pyx_pw_5miolo_3cos_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5miolo_3cos_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, __pyx_nargs); return -1;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_VARARGS(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_5miolo_3cos___init__(((struct __pyx_obj_5miolo_cos *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5miolo_3cos___init__(struct __pyx_obj_5miolo_cos *__pyx_v_self) {
  int __pyx_r;

  /* "miololib.pyx":2441
 * cdef class cos(ufunction):
 *     def __init__(self):
 *         self.view.f = mld.cos             # <<<<<<<<<<<<<<
 * cdef class tan(ufunction):
 *     def __init__(self):
 */
  __pyx_v_self->__pyx_base.view.f = cos;

  /* "miololib.pyx":2440
 *         self.view.f = mld.sin
 * cdef class cos(ufunction):
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.view.f = mld.cos
 * cdef class tan(ufunction):
 */

  /* function exit code */
  __pyx_r = 0;
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_3cos_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_3cos_2__reduce_cython__, "cos.__reduce_cython__(self)");
static PyMethodDef __pyx_mdef_5miolo_3cos_3__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_3cos_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_3cos_2__reduce_cython__};
static PyObject *__pyx_pw_5miolo_3cos_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_5miolo_3cos_2__reduce_cython__(((struct __pyx_obj_5miolo_cos *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_3cos_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_cos *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_view_cannot_be_converted_to, 0, 0);
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("miolo.cos.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_3cos_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_3cos_4__setstate_cython__, "cos.__setstate_cython__(self, __pyx_state)");
static PyMethodDef __pyx_mdef_5miolo_3cos_5__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_3cos_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_3cos_4__setstate_cython__};
static PyObject *__pyx_pw_5miolo_3cos_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(0, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.cos.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5miolo_3cos_4__setstate_cython__(((struct __pyx_obj_5miolo_cos *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_3cos_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_cos *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_view_cannot_be_converted_to, 0, 0);
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("miolo.cos.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":2443
 *         self.view.f = mld.cos
 * cdef class tan(ufunction):
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.view.f = mld.tan
 * 
 */

/* Python wrapper */
static int __pyx_pw_5miolo_3tan_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5miolo_3tan_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, __pyx_nargs); return -1;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_VARARGS(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_5miolo_3tan___init__(((struct __pyx_obj_5miolo_tan *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5miolo_3tan___init__(struct __pyx_obj_5miolo_tan *__pyx_v_self) {
  int __pyx_r;

  /* "miololib.pyx":2444
 * cdef class tan(ufunction):
 *     def __init__(self):
 *         self.view.f = mld.tan             # <<<<<<<<<<<<<<
 * 
 * cdef class asin(ufunction):
 */
  __pyx_v_self->__pyx_base.view.f = tan;

  /* "miololib.pyx":2443
 *         self.view.f = mld.cos
 * cdef class tan(ufunction):
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.view.f = mld.tan
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_3tan_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_3tan_2__reduce_cython__, "tan.__reduce_cython__(self)");
static PyMethodDef __pyx_mdef_5miolo_3tan_3__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_3tan_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_3tan_2__reduce_cython__};
static PyObject *__pyx_pw_5miolo_3tan_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_5miolo_3tan_2__reduce_cython__(((struct __pyx_obj_5miolo_tan *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_3tan_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_tan *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_view_cannot_be_converted_to, 0, 0);
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("miolo.tan.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_3tan_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_3tan_4__setstate_cython__, "tan.__setstate_cython__(self, __pyx_state)");
static PyMethodDef __pyx_mdef_5miolo_3tan_5__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_3tan_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_3tan_4__setstate_cython__};
static PyObject *__pyx_pw_5miolo_3tan_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(0, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.tan.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5miolo_3tan_4__setstate_cython__(((struct __pyx_obj_5miolo_tan *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_3tan_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_tan *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_view_cannot_be_converted_to, 0, 0);
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("miolo.tan.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":2447
 * 
 * cdef class asin(ufunction):
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.view.f = mld.asin
 * cdef class acos(ufunction):
 */

/* Python wrapper */
static int __pyx_pw_5miolo_4asin_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5miolo_4asin_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, __pyx_nargs); return -1;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_VARARGS(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_5miolo_4asin___init__(((struct __pyx_obj_5miolo_asin *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5miolo_4asin___init__(struct __pyx_obj_5miolo_asin *__pyx_v_self) {
  int __pyx_r;

  /* "miololib.pyx":2448
 * cdef class asin(ufunction):
 *     def __init__(self):
 *         self.view.f = mld.asin             # <<<<<<<<<<<<<<
 * cdef class acos(ufunction):
 *     def __init__(self):
 */
  __pyx_v_self->__pyx_base.view.f = asin;

  /* "miololib.pyx":2447
 * 
 * cdef class asin(ufunction):
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.view.f = mld.asin
 * cdef class acos(ufunction):
 */

  /* function exit code */
  __pyx_r = 0;
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_4asin_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_4asin_2__reduce_cython__, "asin.__reduce_cython__(self)");
static PyMethodDef __pyx_mdef_5miolo_4asin_3__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_4asin_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_4asin_2__reduce_cython__};
static PyObject *__pyx_pw_5miolo_4asin_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_5miolo_4asin_2__reduce_cython__(((struct __pyx_obj_5miolo_asin *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_4asin_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_asin *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_view_cannot_be_converted_to, 0, 0);
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("miolo.asin.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_4asin_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_4asin_4__setstate_cython__, "asin.__setstate_cython__(self, __pyx_state)");
static PyMethodDef __pyx_mdef_5miolo_4asin_5__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_4asin_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_4asin_4__setstate_cython__};
static PyObject *__pyx_pw_5miolo_4asin_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(0, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.asin.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5miolo_4asin_4__setstate_cython__(((struct __pyx_obj_5miolo_asin *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_4asin_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_asin *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_view_cannot_be_converted_to, 0, 0);
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("miolo.asin.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":2450
 *         self.view.f = mld.asin
 * cdef class acos(ufunction):
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.view.f = mld.acos
 * cdef class atan(ufunction):
 */

/* Python wrapper */
static int __pyx_pw_5miolo_4acos_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5miolo_4acos_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, __pyx_nargs); return -1;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_VARARGS(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_5miolo_4acos___init__(((struct __pyx_obj_5miolo_acos *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5miolo_4acos___init__(struct __pyx_obj_5miolo_acos *__pyx_v_self) {
  int __pyx_r;

  /* "miololib.pyx":2451
 * cdef class acos(ufunction):
 *     def __init__(self):
 *         self.view.f = mld.acos             # <<<<<<<<<<<<<<
 * cdef class atan(ufunction):
 *     def __init__(self):
 */
  __pyx_v_self->__pyx_base.view.f = acos;

  /* "miololib.pyx":2450
 *         self.view.f = mld.asin
 * cdef class acos(ufunction):
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.view.f = mld.acos
 * cdef class atan(ufunction):
 */

  /* function exit code */
  __pyx_r = 0;
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_4acos_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_4acos_2__reduce_cython__, "acos.__reduce_cython__(self)");
static PyMethodDef __pyx_mdef_5miolo_4acos_3__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_4acos_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_4acos_2__reduce_cython__};
static PyObject *__pyx_pw_5miolo_4acos_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_5miolo_4acos_2__reduce_cython__(((struct __pyx_obj_5miolo_acos *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_4acos_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_acos *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_view_cannot_be_converted_to, 0, 0);
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("miolo.acos.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_4acos_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_4acos_4__setstate_cython__, "acos.__setstate_cython__(self, __pyx_state)");
static PyMethodDef __pyx_mdef_5miolo_4acos_5__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_4acos_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_4acos_4__setstate_cython__};
static PyObject *__pyx_pw_5miolo_4acos_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(0, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.acos.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5miolo_4acos_4__setstate_cython__(((struct __pyx_obj_5miolo_acos *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_4acos_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_acos *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_view_cannot_be_converted_to, 0, 0);
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("miolo.acos.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":2453
 *         self.view.f = mld.acos
 * cdef class atan(ufunction):
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.view.f = mld.atan
 * 
 */

/* Python wrapper */
static int __pyx_pw_5miolo_4atan_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5miolo_4atan_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, __pyx_nargs); return -1;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_VARARGS(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_5miolo_4atan___init__(((struct __pyx_obj_5miolo_atan *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5miolo_4atan___init__(struct __pyx_obj_5miolo_atan *__pyx_v_self) {
  int __pyx_r;

  /* "miololib.pyx":2454
 * cdef class atan(ufunction):
 *     def __init__(self):
 *         self.view.f = mld.atan             # <<<<<<<<<<<<<<
 * 
 * cdef class cosh(ufunction):
 */
  __pyx_v_self->__pyx_base.view.f = atan;

  /* "miololib.pyx":2453
 *         self.view.f = mld.acos
 * cdef class atan(ufunction):
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.view.f = mld.atan
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_4atan_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_4atan_2__reduce_cython__, "atan.__reduce_cython__(self)");
static PyMethodDef __pyx_mdef_5miolo_4atan_3__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_4atan_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_4atan_2__reduce_cython__};
static PyObject *__pyx_pw_5miolo_4atan_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_5miolo_4atan_2__reduce_cython__(((struct __pyx_obj_5miolo_atan *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_4atan_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_atan *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_view_cannot_be_converted_to, 0, 0);
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("miolo.atan.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_4atan_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_4atan_4__setstate_cython__, "atan.__setstate_cython__(self, __pyx_state)");
static PyMethodDef __pyx_mdef_5miolo_4atan_5__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_4atan_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_4atan_4__setstate_cython__};
static PyObject *__pyx_pw_5miolo_4atan_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(0, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.atan.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5miolo_4atan_4__setstate_cython__(((struct __pyx_obj_5miolo_atan *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_4atan_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_atan *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_view_cannot_be_converted_to, 0, 0);
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("miolo.atan.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":2457
 * 
 * cdef class cosh(ufunction):
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.view.f = mld.cosh
 * cdef class sinh(ufunction):
 */

/* Python wrapper */
static int __pyx_pw_5miolo_4cosh_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5miolo_4cosh_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, __pyx_nargs); return -1;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_VARARGS(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_5miolo_4cosh___init__(((struct __pyx_obj_5miolo_cosh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5miolo_4cosh___init__(struct __pyx_obj_5miolo_cosh *__pyx_v_self) {
  int __pyx_r;

  /* "miololib.pyx":2458
 * cdef class cosh(ufunction):
 *     def __init__(self):
 *         self.view.f = mld.cosh             # <<<<<<<<<<<<<<
 * cdef class sinh(ufunction):
 *     def __init__(self):
 */
  __pyx_v_self->__pyx_base.view.f = cosh;

  /* "miololib.pyx":2457
 * 
 * cdef class cosh(ufunction):
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.view.f = mld.cosh
 * cdef class sinh(ufunction):
 */

  /* function exit code */
  __pyx_r = 0;
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_4cosh_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_4cosh_2__reduce_cython__, "cosh.__reduce_cython__(self)");
static PyMethodDef __pyx_mdef_5miolo_4cosh_3__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_4cosh_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_4cosh_2__reduce_cython__};
static PyObject *__pyx_pw_5miolo_4cosh_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_5miolo_4cosh_2__reduce_cython__(((struct __pyx_obj_5miolo_cosh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_4cosh_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_cosh *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_view_cannot_be_converted_to, 0, 0);
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("miolo.cosh.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_4cosh_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_4cosh_4__setstate_cython__, "cosh.__setstate_cython__(self, __pyx_state)");
static PyMethodDef __pyx_mdef_5miolo_4cosh_5__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_4cosh_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_4cosh_4__setstate_cython__};
static PyObject *__pyx_pw_5miolo_4cosh_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(0, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.cosh.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5miolo_4cosh_4__setstate_cython__(((struct __pyx_obj_5miolo_cosh *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_4cosh_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_cosh *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_view_cannot_be_converted_to, 0, 0);
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("miolo.cosh.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":2460
 *         self.view.f = mld.cosh
 * cdef class sinh(ufunction):
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.view.f = mld.sinh
 * cdef class tanh(ufunction):
 */

/* Python wrapper */
static int __pyx_pw_5miolo_4sinh_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5miolo_4sinh_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, __pyx_nargs); return -1;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_VARARGS(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_5miolo_4sinh___init__(((struct __pyx_obj_5miolo_sinh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5miolo_4sinh___init__(struct __pyx_obj_5miolo_sinh *__pyx_v_self) {
  int __pyx_r;

  /* "miololib.pyx":2461
 * cdef class sinh(ufunction):
 *     def __init__(self):
 *         self.view.f = mld.sinh             # <<<<<<<<<<<<<<
 * cdef class tanh(ufunction):
 *     def __init__(self):
 */
  __pyx_v_self->__pyx_base.view.f = sinh;

  /* "miololib.pyx":2460
 *         self.view.f = mld.cosh
 * cdef class sinh(ufunction):
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.view.f = mld.sinh
 * cdef class tanh(ufunction):
 */

  /* function exit code */
  __pyx_r = 0;
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_4sinh_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_4sinh_2__reduce_cython__, "sinh.__reduce_cython__(self)");
static PyMethodDef __pyx_mdef_5miolo_4sinh_3__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_4sinh_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_4sinh_2__reduce_cython__};
static PyObject *__pyx_pw_5miolo_4sinh_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_5miolo_4sinh_2__reduce_cython__(((struct __pyx_obj_5miolo_sinh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_4sinh_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_sinh *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_view_cannot_be_converted_to, 0, 0);
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("miolo.sinh.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_4sinh_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_4sinh_4__setstate_cython__, "sinh.__setstate_cython__(self, __pyx_state)");
static PyMethodDef __pyx_mdef_5miolo_4sinh_5__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_4sinh_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_4sinh_4__setstate_cython__};
static PyObject *__pyx_pw_5miolo_4sinh_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(0, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.sinh.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5miolo_4sinh_4__setstate_cython__(((struct __pyx_obj_5miolo_sinh *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_4sinh_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_sinh *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_view_cannot_be_converted_to, 0, 0);
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("miolo.sinh.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":2463
 *         self.view.f = mld.sinh
 * cdef class tanh(ufunction):
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.view.f = mld.tanh
 * 
 */

/* Python wrapper */
static int __pyx_pw_5miolo_4tanh_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5miolo_4tanh_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, __pyx_nargs); return -1;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_VARARGS(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_5miolo_4tanh___init__(((struct __pyx_obj_5miolo_tanh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5miolo_4tanh___init__(struct __pyx_obj_5miolo_tanh *__pyx_v_self) {
  int __pyx_r;

  /* "miololib.pyx":2464
 * cdef class tanh(ufunction):
 *     def __init__(self):
 *         self.view.f = mld.tanh             # <<<<<<<<<<<<<<
 * 
 * cdef class acosh(ufunction):
 */
  __pyx_v_self->__pyx_base.view.f = tanh;

  /* "miololib.pyx":2463
 *         self.view.f = mld.sinh
 * cdef class tanh(ufunction):
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.view.f = mld.tanh
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_4tanh_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_4tanh_2__reduce_cython__, "tanh.__reduce_cython__(self)");
static PyMethodDef __pyx_mdef_5miolo_4tanh_3__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_4tanh_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_4tanh_2__reduce_cython__};
static PyObject *__pyx_pw_5miolo_4tanh_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_5miolo_4tanh_2__reduce_cython__(((struct __pyx_obj_5miolo_tanh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_4tanh_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_tanh *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_view_cannot_be_converted_to, 0, 0);
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("miolo.tanh.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_4tanh_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_4tanh_4__setstate_cython__, "tanh.__setstate_cython__(self, __pyx_state)");
static PyMethodDef __pyx_mdef_5miolo_4tanh_5__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_4tanh_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_4tanh_4__setstate_cython__};
static PyObject *__pyx_pw_5miolo_4tanh_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(0, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.tanh.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5miolo_4tanh_4__setstate_cython__(((struct __pyx_obj_5miolo_tanh *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_4tanh_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_tanh *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_view_cannot_be_converted_to, 0, 0);
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("miolo.tanh.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":2467
 * 
 * cdef class acosh(ufunction):
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.view.f = mld.acosh
 * cdef class asinh(ufunction):
 */

/* Python wrapper */
static int __pyx_pw_5miolo_5acosh_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5miolo_5acosh_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, __pyx_nargs); return -1;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_VARARGS(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_5miolo_5acosh___init__(((struct __pyx_obj_5miolo_acosh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5miolo_5acosh___init__(struct __pyx_obj_5miolo_acosh *__pyx_v_self) {
  int __pyx_r;

  /* "miololib.pyx":2468
 * cdef class acosh(ufunction):
 *     def __init__(self):
 *         self.view.f = mld.acosh             # <<<<<<<<<<<<<<
 * cdef class asinh(ufunction):
 *     def __init__(self):
 */
  __pyx_v_self->__pyx_base.view.f = acosh;

  /* "miololib.pyx":2467
 * 
 * cdef class acosh(ufunction):
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.view.f = mld.acosh
 * cdef class asinh(ufunction):
 */

  /* function exit code */
  __pyx_r = 0;
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_5acosh_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_5acosh_2__reduce_cython__, "acosh.__reduce_cython__(self)");
static PyMethodDef __pyx_mdef_5miolo_5acosh_3__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_5acosh_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_5acosh_2__reduce_cython__};
static PyObject *__pyx_pw_5miolo_5acosh_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_5miolo_5acosh_2__reduce_cython__(((struct __pyx_obj_5miolo_acosh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_5acosh_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_acosh *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_view_cannot_be_converted_to, 0, 0);
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("miolo.acosh.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_5acosh_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_5acosh_4__setstate_cython__, "acosh.__setstate_cython__(self, __pyx_state)");
static PyMethodDef __pyx_mdef_5miolo_5acosh_5__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_5acosh_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_5acosh_4__setstate_cython__};
static PyObject *__pyx_pw_5miolo_5acosh_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(0, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.acosh.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5miolo_5acosh_4__setstate_cython__(((struct __pyx_obj_5miolo_acosh *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_5acosh_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_acosh *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_view_cannot_be_converted_to, 0, 0);
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("miolo.acosh.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":2470
 *         self.view.f = mld.acosh
 * cdef class asinh(ufunction):
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.view.f = mld.asinh
 * cdef class atanh(ufunction):
 */

/* Python wrapper */
static int __pyx_pw_5miolo_5asinh_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5miolo_5asinh_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, __pyx_nargs); return -1;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_VARARGS(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_5miolo_5asinh___init__(((struct __pyx_obj_5miolo_asinh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5miolo_5asinh___init__(struct __pyx_obj_5miolo_asinh *__pyx_v_self) {
  int __pyx_r;

  /* "miololib.pyx":2471
 * cdef class asinh(ufunction):
 *     def __init__(self):
 *         self.view.f = mld.asinh             # <<<<<<<<<<<<<<
 * cdef class atanh(ufunction):
 *     def __init__(self):
 */
  __pyx_v_self->__pyx_base.view.f = asinh;

  /* "miololib.pyx":2470
 *         self.view.f = mld.acosh
 * cdef class asinh(ufunction):
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.view.f = mld.asinh
 * cdef class atanh(ufunction):
 */

  /* function exit code */
  __pyx_r = 0;
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_5asinh_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_5asinh_2__reduce_cython__, "asinh.__reduce_cython__(self)");
static PyMethodDef __pyx_mdef_5miolo_5asinh_3__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_5asinh_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_5asinh_2__reduce_cython__};
static PyObject *__pyx_pw_5miolo_5asinh_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_5miolo_5asinh_2__reduce_cython__(((struct __pyx_obj_5miolo_asinh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_5asinh_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_asinh *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_view_cannot_be_converted_to, 0, 0);
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("miolo.asinh.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_5asinh_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_5asinh_4__setstate_cython__, "asinh.__setstate_cython__(self, __pyx_state)");
static PyMethodDef __pyx_mdef_5miolo_5asinh_5__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_5asinh_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_5asinh_4__setstate_cython__};
static PyObject *__pyx_pw_5miolo_5asinh_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(0, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.asinh.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5miolo_5asinh_4__setstate_cython__(((struct __pyx_obj_5miolo_asinh *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_5asinh_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_asinh *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_view_cannot_be_converted_to, 0, 0);
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("miolo.asinh.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":2473
 *         self.view.f = mld.asinh
 * cdef class atanh(ufunction):
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.view.f = mld.atanh
 * 
 */

/* Python wrapper */
static int __pyx_pw_5miolo_5atanh_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5miolo_5atanh_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, __pyx_nargs); return -1;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_VARARGS(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_5miolo_5atanh___init__(((struct __pyx_obj_5miolo_atanh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5miolo_5atanh___init__(struct __pyx_obj_5miolo_atanh *__pyx_v_self) {
  int __pyx_r;

  /* "miololib.pyx":2474
 * cdef class atanh(ufunction):
 *     def __init__(self):
 *         self.view.f = mld.atanh             # <<<<<<<<<<<<<<
 * 
 * cdef class exp(ufunction):
 */
  __pyx_v_self->__pyx_base.view.f = atanh;

  /* "miololib.pyx":2473
 *         self.view.f = mld.asinh
 * cdef class atanh(ufunction):
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.view.f = mld.atanh
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_5atanh_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_5atanh_2__reduce_cython__, "atanh.__reduce_cython__(self)");
static PyMethodDef __pyx_mdef_5miolo_5atanh_3__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_5atanh_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_5atanh_2__reduce_cython__};
static PyObject *__pyx_pw_5miolo_5atanh_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_5miolo_5atanh_2__reduce_cython__(((struct __pyx_obj_5miolo_atanh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_5atanh_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_atanh *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_view_cannot_be_converted_to, 0, 0);
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("miolo.atanh.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_5atanh_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_5atanh_4__setstate_cython__, "atanh.__setstate_cython__(self, __pyx_state)");
static PyMethodDef __pyx_mdef_5miolo_5atanh_5__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_5atanh_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_5atanh_4__setstate_cython__};
static PyObject *__pyx_pw_5miolo_5atanh_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(0, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.atanh.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5miolo_5atanh_4__setstate_cython__(((struct __pyx_obj_5miolo_atanh *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_5atanh_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_atanh *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_view_cannot_be_converted_to, 0, 0);
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("miolo.atanh.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":2477
 * 
 * cdef class exp(ufunction):
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         super().__init__()
 *         self.view.f = mld.exp
 */

/* Python wrapper */
static int __pyx_pw_5miolo_3exp_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5miolo_3exp_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, __pyx_nargs); return -1;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_VARARGS(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_5miolo_3exp___init__(((struct __pyx_obj_5miolo_exp *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5miolo_3exp___init__(struct __pyx_obj_5miolo_exp *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 1);

  /* "miololib.pyx":2478
 * cdef class exp(ufunction):
 *     def __init__(self):
 *         super().__init__()             # <<<<<<<<<<<<<<
 *         self.view.f = mld.exp
 * cdef class log(ufunction):
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2478, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF((PyObject *)__pyx_ptype_5miolo_exp);
  __Pyx_GIVEREF((PyObject *)__pyx_ptype_5miolo_exp);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_5miolo_exp))) __PYX_ERR(1, 2478, __pyx_L1_error);
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self))) __PYX_ERR(1, 2478, __pyx_L1_error);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2478, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_init_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2478, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2478, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "miololib.pyx":2479
 *     def __init__(self):
 *         super().__init__()
 *         self.view.f = mld.exp             # <<<<<<<<<<<<<<
 * cdef class log(ufunction):
 *     def __init__(self):
 */
  __pyx_v_self->__pyx_base.view.f = exp;

  /* "miololib.pyx":2477
 * 
 * cdef class exp(ufunction):
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         super().__init__()
 *         self.view.f = mld.exp
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("miolo.exp.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_3exp_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_3exp_2__reduce_cython__, "exp.__reduce_cython__(self)");
static PyMethodDef __pyx_mdef_5miolo_3exp_3__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_3exp_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_3exp_2__reduce_cython__};
static PyObject *__pyx_pw_5miolo_3exp_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_5miolo_3exp_2__reduce_cython__(((struct __pyx_obj_5miolo_exp *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_3exp_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_exp *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_view_cannot_be_converted_to, 0, 0);
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("miolo.exp.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_3exp_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_3exp_4__setstate_cython__, "exp.__setstate_cython__(self, __pyx_state)");
static PyMethodDef __pyx_mdef_5miolo_3exp_5__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_3exp_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_3exp_4__setstate_cython__};
static PyObject *__pyx_pw_5miolo_3exp_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(0, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.exp.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5miolo_3exp_4__setstate_cython__(((struct __pyx_obj_5miolo_exp *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_3exp_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_exp *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_view_cannot_be_converted_to, 0, 0);
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("miolo.exp.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":2481
 *         self.view.f = mld.exp
 * cdef class log(ufunction):
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.view.f = mld.log
 * 
 */

/* Python wrapper */
static int __pyx_pw_5miolo_3log_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5miolo_3log_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, __pyx_nargs); return -1;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_VARARGS(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_5miolo_3log___init__(((struct __pyx_obj_5miolo_log *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5miolo_3log___init__(struct __pyx_obj_5miolo_log *__pyx_v_self) {
  int __pyx_r;

  /* "miololib.pyx":2482
 * cdef class log(ufunction):
 *     def __init__(self):
 *         self.view.f = mld.log             # <<<<<<<<<<<<<<
 * 
 * cdef class fabs(ufunction):
 */
  __pyx_v_self->__pyx_base.view.f = log;

  /* "miololib.pyx":2481
 *         self.view.f = mld.exp
 * cdef class log(ufunction):
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.view.f = mld.log
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_3log_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_3log_2__reduce_cython__, "log.__reduce_cython__(self)");
static PyMethodDef __pyx_mdef_5miolo_3log_3__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_3log_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_3log_2__reduce_cython__};
static PyObject *__pyx_pw_5miolo_3log_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_5miolo_3log_2__reduce_cython__(((struct __pyx_obj_5miolo_log *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_3log_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_log *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_view_cannot_be_converted_to, 0, 0);
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("miolo.log.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_3log_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_3log_4__setstate_cython__, "log.__setstate_cython__(self, __pyx_state)");
static PyMethodDef __pyx_mdef_5miolo_3log_5__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_3log_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_3log_4__setstate_cython__};
static PyObject *__pyx_pw_5miolo_3log_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(0, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.log.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5miolo_3log_4__setstate_cython__(((struct __pyx_obj_5miolo_log *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_3log_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_log *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_view_cannot_be_converted_to, 0, 0);
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("miolo.log.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":2485
 * 
 * cdef class fabs(ufunction):
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.view.f = mld.fabs
 * cdef class sqrt(ufunction):
 */

/* Python wrapper */
static int __pyx_pw_5miolo_4fabs_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5miolo_4fabs_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, __pyx_nargs); return -1;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_VARARGS(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_5miolo_4fabs___init__(((struct __pyx_obj_5miolo_fabs *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5miolo_4fabs___init__(struct __pyx_obj_5miolo_fabs *__pyx_v_self) {
  int __pyx_r;

  /* "miololib.pyx":2486
 * cdef class fabs(ufunction):
 *     def __init__(self):
 *         self.view.f = mld.fabs             # <<<<<<<<<<<<<<
 * cdef class sqrt(ufunction):
 *     def __init__(self):
 */
  __pyx_v_self->__pyx_base.view.f = fabs;

  /* "miololib.pyx":2485
 * 
 * cdef class fabs(ufunction):
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.view.f = mld.fabs
 * cdef class sqrt(ufunction):
 */

  /* function exit code */
  __pyx_r = 0;
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_4fabs_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_4fabs_2__reduce_cython__, "fabs.__reduce_cython__(self)");
static PyMethodDef __pyx_mdef_5miolo_4fabs_3__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_4fabs_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_4fabs_2__reduce_cython__};
static PyObject *__pyx_pw_5miolo_4fabs_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_5miolo_4fabs_2__reduce_cython__(((struct __pyx_obj_5miolo_fabs *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_4fabs_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_fabs *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_view_cannot_be_converted_to, 0, 0);
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("miolo.fabs.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_4fabs_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_4fabs_4__setstate_cython__, "fabs.__setstate_cython__(self, __pyx_state)");
static PyMethodDef __pyx_mdef_5miolo_4fabs_5__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_4fabs_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_4fabs_4__setstate_cython__};
static PyObject *__pyx_pw_5miolo_4fabs_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(0, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.fabs.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5miolo_4fabs_4__setstate_cython__(((struct __pyx_obj_5miolo_fabs *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_4fabs_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_fabs *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_view_cannot_be_converted_to, 0, 0);
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("miolo.fabs.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":2488
 *         self.view.f = mld.fabs
 * cdef class sqrt(ufunction):
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.view.f = mld.sqrt
 * cdef class recp(ufunction):
 */

/* Python wrapper */
static int __pyx_pw_5miolo_4sqrt_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5miolo_4sqrt_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, __pyx_nargs); return -1;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_VARARGS(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_5miolo_4sqrt___init__(((struct __pyx_obj_5miolo_sqrt *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5miolo_4sqrt___init__(struct __pyx_obj_5miolo_sqrt *__pyx_v_self) {
  int __pyx_r;

  /* "miololib.pyx":2489
 * cdef class sqrt(ufunction):
 *     def __init__(self):
 *         self.view.f = mld.sqrt             # <<<<<<<<<<<<<<
 * cdef class recp(ufunction):
 *     def __init__(self):
 */
  __pyx_v_self->__pyx_base.view.f = sqrt;

  /* "miololib.pyx":2488
 *         self.view.f = mld.fabs
 * cdef class sqrt(ufunction):
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.view.f = mld.sqrt
 * cdef class recp(ufunction):
 */

  /* function exit code */
  __pyx_r = 0;
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_4sqrt_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_4sqrt_2__reduce_cython__, "sqrt.__reduce_cython__(self)");
static PyMethodDef __pyx_mdef_5miolo_4sqrt_3__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_4sqrt_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_4sqrt_2__reduce_cython__};
static PyObject *__pyx_pw_5miolo_4sqrt_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_5miolo_4sqrt_2__reduce_cython__(((struct __pyx_obj_5miolo_sqrt *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_4sqrt_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_sqrt *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_view_cannot_be_converted_to, 0, 0);
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("miolo.sqrt.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_4sqrt_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_4sqrt_4__setstate_cython__, "sqrt.__setstate_cython__(self, __pyx_state)");
static PyMethodDef __pyx_mdef_5miolo_4sqrt_5__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_4sqrt_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_4sqrt_4__setstate_cython__};
static PyObject *__pyx_pw_5miolo_4sqrt_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(0, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.sqrt.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5miolo_4sqrt_4__setstate_cython__(((struct __pyx_obj_5miolo_sqrt *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_4sqrt_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_sqrt *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_view_cannot_be_converted_to, 0, 0);
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("miolo.sqrt.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":2491
 *         self.view.f = mld.sqrt
 * cdef class recp(ufunction):
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.view.f = mld.reciprocal
 * 
 */

/* Python wrapper */
static int __pyx_pw_5miolo_4recp_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5miolo_4recp_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, __pyx_nargs); return -1;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_VARARGS(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_5miolo_4recp___init__(((struct __pyx_obj_5miolo_recp *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5miolo_4recp___init__(struct __pyx_obj_5miolo_recp *__pyx_v_self) {
  int __pyx_r;

  /* "miololib.pyx":2492
 * cdef class recp(ufunction):
 *     def __init__(self):
 *         self.view.f = mld.reciprocal             # <<<<<<<<<<<<<<
 * 
 * #-------------------------------------------------------------------------------
 */
  __pyx_v_self->__pyx_base.view.f = reciprocal;

  /* "miololib.pyx":2491
 *         self.view.f = mld.sqrt
 * cdef class recp(ufunction):
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.view.f = mld.reciprocal
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_4recp_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_4recp_2__reduce_cython__, "recp.__reduce_cython__(self)");
static PyMethodDef __pyx_mdef_5miolo_4recp_3__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_4recp_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_4recp_2__reduce_cython__};
static PyObject *__pyx_pw_5miolo_4recp_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_5miolo_4recp_2__reduce_cython__(((struct __pyx_obj_5miolo_recp *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_4recp_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_recp *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_view_cannot_be_converted_to, 0, 0);
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("miolo.recp.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_4recp_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_4recp_4__setstate_cython__, "recp.__setstate_cython__(self, __pyx_state)");
static PyMethodDef __pyx_mdef_5miolo_4recp_5__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_4recp_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_4recp_4__setstate_cython__};
static PyObject *__pyx_pw_5miolo_4recp_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(0, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.recp.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5miolo_4recp_4__setstate_cython__(((struct __pyx_obj_5miolo_recp *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_4recp_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_recp *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_view_cannot_be_converted_to, 0, 0);
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("miolo.recp.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":2504
 *     cdef mld.classSeparation view
 * 
 *     def intra(self, mioloObject O, int[:] labels):             # <<<<<<<<<<<<<<
 *         """
 *             Computes intraclass distance.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_15classSeparation_1intra(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_15classSeparation_intra, "classSeparation.intra(self, mioloObject O, int[:] labels)\n\n            Computes intraclass distance.\n            Dist: distance matrix between features. Must be square.\n            labels: array with labels for each instance.\n        ");
static PyMethodDef __pyx_mdef_5miolo_15classSeparation_1intra = {"intra", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_15classSeparation_1intra, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_15classSeparation_intra};
static PyObject *__pyx_pw_5miolo_15classSeparation_1intra(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_5miolo_mioloObject *__pyx_v_O = 0;
  __Pyx_memviewslice __pyx_v_labels = { 0, 0, { 0 }, { 0 }, { 0 } };
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("intra (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_O,&__pyx_n_s_labels,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_O)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 2504, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_labels)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 2504, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("intra", 1, 2, 2, 1); __PYX_ERR(1, 2504, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "intra") < 0)) __PYX_ERR(1, 2504, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_O = ((struct __pyx_obj_5miolo_mioloObject *)values[0]);
    __pyx_v_labels = __Pyx_PyObject_to_MemoryviewSlice_ds_int(values[1], PyBUF_WRITABLE); if (unlikely(!__pyx_v_labels.memview)) __PYX_ERR(1, 2504, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("intra", 1, 2, 2, __pyx_nargs); __PYX_ERR(1, 2504, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __PYX_XCLEAR_MEMVIEW(&__pyx_v_labels, 1);
  __Pyx_AddTraceback("miolo.classSeparation.intra", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_O), __pyx_ptype_5miolo_mioloObject, 1, "O", 0))) __PYX_ERR(1, 2504, __pyx_L1_error)
  __pyx_r = __pyx_pf_5miolo_15classSeparation_intra(((struct __pyx_obj_5miolo_classSeparation *)__pyx_v_self), __pyx_v_O, __pyx_v_labels);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XCLEAR_MEMVIEW(&__pyx_v_labels, 1);
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_15classSeparation_intra(struct __pyx_obj_5miolo_classSeparation *__pyx_v_self, struct __pyx_obj_5miolo_mioloObject *__pyx_v_O, __Pyx_memviewslice __pyx_v_labels) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("intra", 1);

  /* "miololib.pyx":2510
 *             labels: array with labels for each instance.
 *         """
 *         if isinstance(O,Matrix):             # <<<<<<<<<<<<<<
 *             if O.rows!=O.cols:
 *                 raise Exception("Only square matrices are allowed.")
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_O), __pyx_ptype_5miolo_Matrix); 
  if (__pyx_t_1) {

    /* "miololib.pyx":2511
 *         """
 *         if isinstance(O,Matrix):
 *             if O.rows!=O.cols:             # <<<<<<<<<<<<<<
 *                 raise Exception("Only square matrices are allowed.")
 *             if O.rows!=labels.size:
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_O), __pyx_n_s_rows); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2511, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_O), __pyx_n_s_cols); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2511, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyObject_RichCompare(__pyx_t_2, __pyx_t_3, Py_NE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2511, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 2511, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(__pyx_t_1)) {

      /* "miololib.pyx":2512
 *         if isinstance(O,Matrix):
 *             if O.rows!=O.cols:
 *                 raise Exception("Only square matrices are allowed.")             # <<<<<<<<<<<<<<
 *             if O.rows!=labels.size:
 *                 raise Exception("Dist.rows must be equal to labels length.")
 */
      __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__80, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2512, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __PYX_ERR(1, 2512, __pyx_L1_error)

      /* "miololib.pyx":2511
 *         """
 *         if isinstance(O,Matrix):
 *             if O.rows!=O.cols:             # <<<<<<<<<<<<<<
 *                 raise Exception("Only square matrices are allowed.")
 *             if O.rows!=labels.size:
 */
    }

    /* "miololib.pyx":2513
 *             if O.rows!=O.cols:
 *                 raise Exception("Only square matrices are allowed.")
 *             if O.rows!=labels.size:             # <<<<<<<<<<<<<<
 *                 raise Exception("Dist.rows must be equal to labels length.")
 *             if O.ctype=="int":
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_O), __pyx_n_s_rows); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2513, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_labels, 1, (PyObject *(*)(char *)) __pyx_memview_get_int, (int (*)(char *, PyObject *)) __pyx_memview_set_int, 0);; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2513, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_size); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2513, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_4, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2513, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 2513, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(__pyx_t_1)) {

      /* "miololib.pyx":2514
 *                 raise Exception("Only square matrices are allowed.")
 *             if O.rows!=labels.size:
 *                 raise Exception("Dist.rows must be equal to labels length.")             # <<<<<<<<<<<<<<
 *             if O.ctype=="int":
 *                 return self.view(drf(O.mtxInt),&labels[0],True)
 */
      __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__81, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2514, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(1, 2514, __pyx_L1_error)

      /* "miololib.pyx":2513
 *             if O.rows!=O.cols:
 *                 raise Exception("Only square matrices are allowed.")
 *             if O.rows!=labels.size:             # <<<<<<<<<<<<<<
 *                 raise Exception("Dist.rows must be equal to labels length.")
 *             if O.ctype=="int":
 */
    }

    /* "miololib.pyx":2515
 *             if O.rows!=labels.size:
 *                 raise Exception("Dist.rows must be equal to labels length.")
 *             if O.ctype=="int":             # <<<<<<<<<<<<<<
 *                 return self.view(drf(O.mtxInt),&labels[0],True)
 *             if O.ctype=="float":
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_O), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2515, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 2515, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_1) {

      /* "miololib.pyx":2516
 *                 raise Exception("Dist.rows must be equal to labels length.")
 *             if O.ctype=="int":
 *                 return self.view(drf(O.mtxInt),&labels[0],True)             # <<<<<<<<<<<<<<
 *             if O.ctype=="float":
 *                 return self.view(drf(O.mtxFloat),&labels[0],True)
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_5 = 0;
      if (__pyx_t_5 < 0) __pyx_t_5 += __pyx_v_labels.shape[0];
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_self->view((*__pyx_v_O->mtxInt), (&(*((int *) ( /* dim=0 */ (__pyx_v_labels.data + __pyx_t_5 * __pyx_v_labels.strides[0]) )))), 1)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2516, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "miololib.pyx":2515
 *             if O.rows!=labels.size:
 *                 raise Exception("Dist.rows must be equal to labels length.")
 *             if O.ctype=="int":             # <<<<<<<<<<<<<<
 *                 return self.view(drf(O.mtxInt),&labels[0],True)
 *             if O.ctype=="float":
 */
    }

    /* "miololib.pyx":2517
 *             if O.ctype=="int":
 *                 return self.view(drf(O.mtxInt),&labels[0],True)
 *             if O.ctype=="float":             # <<<<<<<<<<<<<<
 *                 return self.view(drf(O.mtxFloat),&labels[0],True)
 *             if O.ctype=="double":
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_O), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2517, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 2517, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_1) {

      /* "miololib.pyx":2518
 *                 return self.view(drf(O.mtxInt),&labels[0],True)
 *             if O.ctype=="float":
 *                 return self.view(drf(O.mtxFloat),&labels[0],True)             # <<<<<<<<<<<<<<
 *             if O.ctype=="double":
 *                 return self.view(drf(O.mtxDouble),&labels[0],True)
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_5 = 0;
      if (__pyx_t_5 < 0) __pyx_t_5 += __pyx_v_labels.shape[0];
      __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->view((*__pyx_v_O->mtxFloat), (&(*((int *) ( /* dim=0 */ (__pyx_v_labels.data + __pyx_t_5 * __pyx_v_labels.strides[0]) )))), 1)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2518, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "miololib.pyx":2517
 *             if O.ctype=="int":
 *                 return self.view(drf(O.mtxInt),&labels[0],True)
 *             if O.ctype=="float":             # <<<<<<<<<<<<<<
 *                 return self.view(drf(O.mtxFloat),&labels[0],True)
 *             if O.ctype=="double":
 */
    }

    /* "miololib.pyx":2519
 *             if O.ctype=="float":
 *                 return self.view(drf(O.mtxFloat),&labels[0],True)
 *             if O.ctype=="double":             # <<<<<<<<<<<<<<
 *                 return self.view(drf(O.mtxDouble),&labels[0],True)
 *         if isinstance(O,Graph):
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_O), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2519, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 2519, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_1) {

      /* "miololib.pyx":2520
 *                 return self.view(drf(O.mtxFloat),&labels[0],True)
 *             if O.ctype=="double":
 *                 return self.view(drf(O.mtxDouble),&labels[0],True)             # <<<<<<<<<<<<<<
 *         if isinstance(O,Graph):
 *             if O.nodes!=labels.size:
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_5 = 0;
      if (__pyx_t_5 < 0) __pyx_t_5 += __pyx_v_labels.shape[0];
      __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->view((*__pyx_v_O->mtxDouble), (&(*((int *) ( /* dim=0 */ (__pyx_v_labels.data + __pyx_t_5 * __pyx_v_labels.strides[0]) )))), 1)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2520, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "miololib.pyx":2519
 *             if O.ctype=="float":
 *                 return self.view(drf(O.mtxFloat),&labels[0],True)
 *             if O.ctype=="double":             # <<<<<<<<<<<<<<
 *                 return self.view(drf(O.mtxDouble),&labels[0],True)
 *         if isinstance(O,Graph):
 */
    }

    /* "miololib.pyx":2510
 *             labels: array with labels for each instance.
 *         """
 *         if isinstance(O,Matrix):             # <<<<<<<<<<<<<<
 *             if O.rows!=O.cols:
 *                 raise Exception("Only square matrices are allowed.")
 */
  }

  /* "miololib.pyx":2521
 *             if O.ctype=="double":
 *                 return self.view(drf(O.mtxDouble),&labels[0],True)
 *         if isinstance(O,Graph):             # <<<<<<<<<<<<<<
 *             if O.nodes!=labels.size:
 *                 raise Exception("Dist.rows must be equal to labels length.")
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_O), __pyx_ptype_5miolo_Graph); 
  if (__pyx_t_1) {

    /* "miololib.pyx":2522
 *                 return self.view(drf(O.mtxDouble),&labels[0],True)
 *         if isinstance(O,Graph):
 *             if O.nodes!=labels.size:             # <<<<<<<<<<<<<<
 *                 raise Exception("Dist.rows must be equal to labels length.")
 *             if O.ctype=="int":
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_O), __pyx_n_s_nodes); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2522, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __pyx_memoryview_fromslice(__pyx_v_labels, 1, (PyObject *(*)(char *)) __pyx_memview_get_int, (int (*)(char *, PyObject *)) __pyx_memview_set_int, 0);; if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2522, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_size); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2522, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_RichCompare(__pyx_t_3, __pyx_t_4, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2522, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 2522, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(__pyx_t_1)) {

      /* "miololib.pyx":2523
 *         if isinstance(O,Graph):
 *             if O.nodes!=labels.size:
 *                 raise Exception("Dist.rows must be equal to labels length.")             # <<<<<<<<<<<<<<
 *             if O.ctype=="int":
 *                 return self.view(drf(O.graphInt),&labels[0],True)
 */
      __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__81, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2523, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_Raise(__pyx_t_2, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __PYX_ERR(1, 2523, __pyx_L1_error)

      /* "miololib.pyx":2522
 *                 return self.view(drf(O.mtxDouble),&labels[0],True)
 *         if isinstance(O,Graph):
 *             if O.nodes!=labels.size:             # <<<<<<<<<<<<<<
 *                 raise Exception("Dist.rows must be equal to labels length.")
 *             if O.ctype=="int":
 */
    }

    /* "miololib.pyx":2524
 *             if O.nodes!=labels.size:
 *                 raise Exception("Dist.rows must be equal to labels length.")
 *             if O.ctype=="int":             # <<<<<<<<<<<<<<
 *                 return self.view(drf(O.graphInt),&labels[0],True)
 *             if O.ctype=="float":
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_O), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2524, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 2524, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_1) {

      /* "miololib.pyx":2525
 *                 raise Exception("Dist.rows must be equal to labels length.")
 *             if O.ctype=="int":
 *                 return self.view(drf(O.graphInt),&labels[0],True)             # <<<<<<<<<<<<<<
 *             if O.ctype=="float":
 *                 return self.view(drf(O.graphFloat),&labels[0],True)
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_5 = 0;
      if (__pyx_t_5 < 0) __pyx_t_5 += __pyx_v_labels.shape[0];
      __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->view((*__pyx_v_O->graphInt), (&(*((int *) ( /* dim=0 */ (__pyx_v_labels.data + __pyx_t_5 * __pyx_v_labels.strides[0]) )))), 1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2525, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      goto __pyx_L0;

      /* "miololib.pyx":2524
 *             if O.nodes!=labels.size:
 *                 raise Exception("Dist.rows must be equal to labels length.")
 *             if O.ctype=="int":             # <<<<<<<<<<<<<<
 *                 return self.view(drf(O.graphInt),&labels[0],True)
 *             if O.ctype=="float":
 */
    }

    /* "miololib.pyx":2526
 *             if O.ctype=="int":
 *                 return self.view(drf(O.graphInt),&labels[0],True)
 *             if O.ctype=="float":             # <<<<<<<<<<<<<<
 *                 return self.view(drf(O.graphFloat),&labels[0],True)
 *             if O.ctype=="double":
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_O), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2526, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 2526, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_1) {

      /* "miololib.pyx":2527
 *                 return self.view(drf(O.graphInt),&labels[0],True)
 *             if O.ctype=="float":
 *                 return self.view(drf(O.graphFloat),&labels[0],True)             # <<<<<<<<<<<<<<
 *             if O.ctype=="double":
 *                 return self.view(drf(O.graphDouble),&labels[0],True)
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_5 = 0;
      if (__pyx_t_5 < 0) __pyx_t_5 += __pyx_v_labels.shape[0];
      __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->view((*__pyx_v_O->graphFloat), (&(*((int *) ( /* dim=0 */ (__pyx_v_labels.data + __pyx_t_5 * __pyx_v_labels.strides[0]) )))), 1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2527, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      goto __pyx_L0;

      /* "miololib.pyx":2526
 *             if O.ctype=="int":
 *                 return self.view(drf(O.graphInt),&labels[0],True)
 *             if O.ctype=="float":             # <<<<<<<<<<<<<<
 *                 return self.view(drf(O.graphFloat),&labels[0],True)
 *             if O.ctype=="double":
 */
    }

    /* "miololib.pyx":2528
 *             if O.ctype=="float":
 *                 return self.view(drf(O.graphFloat),&labels[0],True)
 *             if O.ctype=="double":             # <<<<<<<<<<<<<<
 *                 return self.view(drf(O.graphDouble),&labels[0],True)
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_O), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2528, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 2528, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_1) {

      /* "miololib.pyx":2529
 *                 return self.view(drf(O.graphFloat),&labels[0],True)
 *             if O.ctype=="double":
 *                 return self.view(drf(O.graphDouble),&labels[0],True)             # <<<<<<<<<<<<<<
 * 
 *     def extra(self, mioloObject O, int[:] labels):
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_5 = 0;
      if (__pyx_t_5 < 0) __pyx_t_5 += __pyx_v_labels.shape[0];
      __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->view((*__pyx_v_O->graphDouble), (&(*((int *) ( /* dim=0 */ (__pyx_v_labels.data + __pyx_t_5 * __pyx_v_labels.strides[0]) )))), 1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2529, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      goto __pyx_L0;

      /* "miololib.pyx":2528
 *             if O.ctype=="float":
 *                 return self.view(drf(O.graphFloat),&labels[0],True)
 *             if O.ctype=="double":             # <<<<<<<<<<<<<<
 *                 return self.view(drf(O.graphDouble),&labels[0],True)
 * 
 */
    }

    /* "miololib.pyx":2521
 *             if O.ctype=="double":
 *                 return self.view(drf(O.mtxDouble),&labels[0],True)
 *         if isinstance(O,Graph):             # <<<<<<<<<<<<<<
 *             if O.nodes!=labels.size:
 *                 raise Exception("Dist.rows must be equal to labels length.")
 */
  }

  /* "miololib.pyx":2504
 *     cdef mld.classSeparation view
 * 
 *     def intra(self, mioloObject O, int[:] labels):             # <<<<<<<<<<<<<<
 *         """
 *             Computes intraclass distance.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("miolo.classSeparation.intra", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":2531
 *                 return self.view(drf(O.graphDouble),&labels[0],True)
 * 
 *     def extra(self, mioloObject O, int[:] labels):             # <<<<<<<<<<<<<<
 *         """
 *             Computes intraclass distance.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_15classSeparation_3extra(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_15classSeparation_2extra, "classSeparation.extra(self, mioloObject O, int[:] labels)\n\n            Computes intraclass distance.\n            Dist: distance matrix between features. Must be square.\n            labels: array with labels for each instance.\n        ");
static PyMethodDef __pyx_mdef_5miolo_15classSeparation_3extra = {"extra", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_15classSeparation_3extra, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_15classSeparation_2extra};
static PyObject *__pyx_pw_5miolo_15classSeparation_3extra(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_5miolo_mioloObject *__pyx_v_O = 0;
  __Pyx_memviewslice __pyx_v_labels = { 0, 0, { 0 }, { 0 }, { 0 } };
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("extra (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_O,&__pyx_n_s_labels,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_O)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 2531, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_labels)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 2531, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("extra", 1, 2, 2, 1); __PYX_ERR(1, 2531, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "extra") < 0)) __PYX_ERR(1, 2531, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_O = ((struct __pyx_obj_5miolo_mioloObject *)values[0]);
    __pyx_v_labels = __Pyx_PyObject_to_MemoryviewSlice_ds_int(values[1], PyBUF_WRITABLE); if (unlikely(!__pyx_v_labels.memview)) __PYX_ERR(1, 2531, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("extra", 1, 2, 2, __pyx_nargs); __PYX_ERR(1, 2531, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __PYX_XCLEAR_MEMVIEW(&__pyx_v_labels, 1);
  __Pyx_AddTraceback("miolo.classSeparation.extra", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_O), __pyx_ptype_5miolo_mioloObject, 1, "O", 0))) __PYX_ERR(1, 2531, __pyx_L1_error)
  __pyx_r = __pyx_pf_5miolo_15classSeparation_2extra(((struct __pyx_obj_5miolo_classSeparation *)__pyx_v_self), __pyx_v_O, __pyx_v_labels);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XCLEAR_MEMVIEW(&__pyx_v_labels, 1);
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_15classSeparation_2extra(struct __pyx_obj_5miolo_classSeparation *__pyx_v_self, struct __pyx_obj_5miolo_mioloObject *__pyx_v_O, __Pyx_memviewslice __pyx_v_labels) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("extra", 1);

  /* "miololib.pyx":2537
 *             labels: array with labels for each instance.
 *         """
 *         if isinstance(O,Matrix):             # <<<<<<<<<<<<<<
 *             if O.rows!=O.cols:
 *                 raise Exception("Only square matrices are allowed.")
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_O), __pyx_ptype_5miolo_Matrix); 
  if (__pyx_t_1) {

    /* "miololib.pyx":2538
 *         """
 *         if isinstance(O,Matrix):
 *             if O.rows!=O.cols:             # <<<<<<<<<<<<<<
 *                 raise Exception("Only square matrices are allowed.")
 *             if O.rows!=labels.size:
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_O), __pyx_n_s_rows); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2538, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_O), __pyx_n_s_cols); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2538, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyObject_RichCompare(__pyx_t_2, __pyx_t_3, Py_NE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2538, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 2538, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(__pyx_t_1)) {

      /* "miololib.pyx":2539
 *         if isinstance(O,Matrix):
 *             if O.rows!=O.cols:
 *                 raise Exception("Only square matrices are allowed.")             # <<<<<<<<<<<<<<
 *             if O.rows!=labels.size:
 *                 raise Exception("Dist.rows must be equal to labels length.")
 */
      __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__80, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2539, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __PYX_ERR(1, 2539, __pyx_L1_error)

      /* "miololib.pyx":2538
 *         """
 *         if isinstance(O,Matrix):
 *             if O.rows!=O.cols:             # <<<<<<<<<<<<<<
 *                 raise Exception("Only square matrices are allowed.")
 *             if O.rows!=labels.size:
 */
    }

    /* "miololib.pyx":2540
 *             if O.rows!=O.cols:
 *                 raise Exception("Only square matrices are allowed.")
 *             if O.rows!=labels.size:             # <<<<<<<<<<<<<<
 *                 raise Exception("Dist.rows must be equal to labels length.")
 *             if O.ctype=="int":
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_O), __pyx_n_s_rows); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2540, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_labels, 1, (PyObject *(*)(char *)) __pyx_memview_get_int, (int (*)(char *, PyObject *)) __pyx_memview_set_int, 0);; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2540, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_size); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2540, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_4, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2540, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 2540, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(__pyx_t_1)) {

      /* "miololib.pyx":2541
 *                 raise Exception("Only square matrices are allowed.")
 *             if O.rows!=labels.size:
 *                 raise Exception("Dist.rows must be equal to labels length.")             # <<<<<<<<<<<<<<
 *             if O.ctype=="int":
 *                 return self.view(drf(O.mtxInt),&labels[0],False)
 */
      __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__81, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2541, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(1, 2541, __pyx_L1_error)

      /* "miololib.pyx":2540
 *             if O.rows!=O.cols:
 *                 raise Exception("Only square matrices are allowed.")
 *             if O.rows!=labels.size:             # <<<<<<<<<<<<<<
 *                 raise Exception("Dist.rows must be equal to labels length.")
 *             if O.ctype=="int":
 */
    }

    /* "miololib.pyx":2542
 *             if O.rows!=labels.size:
 *                 raise Exception("Dist.rows must be equal to labels length.")
 *             if O.ctype=="int":             # <<<<<<<<<<<<<<
 *                 return self.view(drf(O.mtxInt),&labels[0],False)
 *             if O.ctype=="float":
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_O), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2542, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 2542, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_1) {

      /* "miololib.pyx":2543
 *                 raise Exception("Dist.rows must be equal to labels length.")
 *             if O.ctype=="int":
 *                 return self.view(drf(O.mtxInt),&labels[0],False)             # <<<<<<<<<<<<<<
 *             if O.ctype=="float":
 *                 return self.view(drf(O.mtxFloat),&labels[0],False)
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_5 = 0;
      if (__pyx_t_5 < 0) __pyx_t_5 += __pyx_v_labels.shape[0];
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_self->view((*__pyx_v_O->mtxInt), (&(*((int *) ( /* dim=0 */ (__pyx_v_labels.data + __pyx_t_5 * __pyx_v_labels.strides[0]) )))), 0)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2543, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "miololib.pyx":2542
 *             if O.rows!=labels.size:
 *                 raise Exception("Dist.rows must be equal to labels length.")
 *             if O.ctype=="int":             # <<<<<<<<<<<<<<
 *                 return self.view(drf(O.mtxInt),&labels[0],False)
 *             if O.ctype=="float":
 */
    }

    /* "miololib.pyx":2544
 *             if O.ctype=="int":
 *                 return self.view(drf(O.mtxInt),&labels[0],False)
 *             if O.ctype=="float":             # <<<<<<<<<<<<<<
 *                 return self.view(drf(O.mtxFloat),&labels[0],False)
 *             if O.ctype=="double":
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_O), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2544, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 2544, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_1) {

      /* "miololib.pyx":2545
 *                 return self.view(drf(O.mtxInt),&labels[0],False)
 *             if O.ctype=="float":
 *                 return self.view(drf(O.mtxFloat),&labels[0],False)             # <<<<<<<<<<<<<<
 *             if O.ctype=="double":
 *                 return self.view(drf(O.mtxDouble),&labels[0],False)
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_5 = 0;
      if (__pyx_t_5 < 0) __pyx_t_5 += __pyx_v_labels.shape[0];
      __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->view((*__pyx_v_O->mtxFloat), (&(*((int *) ( /* dim=0 */ (__pyx_v_labels.data + __pyx_t_5 * __pyx_v_labels.strides[0]) )))), 0)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2545, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "miololib.pyx":2544
 *             if O.ctype=="int":
 *                 return self.view(drf(O.mtxInt),&labels[0],False)
 *             if O.ctype=="float":             # <<<<<<<<<<<<<<
 *                 return self.view(drf(O.mtxFloat),&labels[0],False)
 *             if O.ctype=="double":
 */
    }

    /* "miololib.pyx":2546
 *             if O.ctype=="float":
 *                 return self.view(drf(O.mtxFloat),&labels[0],False)
 *             if O.ctype=="double":             # <<<<<<<<<<<<<<
 *                 return self.view(drf(O.mtxDouble),&labels[0],False)
 *         if isinstance(O,Graph):
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_O), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2546, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 2546, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_1) {

      /* "miololib.pyx":2547
 *                 return self.view(drf(O.mtxFloat),&labels[0],False)
 *             if O.ctype=="double":
 *                 return self.view(drf(O.mtxDouble),&labels[0],False)             # <<<<<<<<<<<<<<
 *         if isinstance(O,Graph):
 *             if O.nodes!=labels.size:
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_5 = 0;
      if (__pyx_t_5 < 0) __pyx_t_5 += __pyx_v_labels.shape[0];
      __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->view((*__pyx_v_O->mtxDouble), (&(*((int *) ( /* dim=0 */ (__pyx_v_labels.data + __pyx_t_5 * __pyx_v_labels.strides[0]) )))), 0)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2547, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "miololib.pyx":2546
 *             if O.ctype=="float":
 *                 return self.view(drf(O.mtxFloat),&labels[0],False)
 *             if O.ctype=="double":             # <<<<<<<<<<<<<<
 *                 return self.view(drf(O.mtxDouble),&labels[0],False)
 *         if isinstance(O,Graph):
 */
    }

    /* "miololib.pyx":2537
 *             labels: array with labels for each instance.
 *         """
 *         if isinstance(O,Matrix):             # <<<<<<<<<<<<<<
 *             if O.rows!=O.cols:
 *                 raise Exception("Only square matrices are allowed.")
 */
  }

  /* "miololib.pyx":2548
 *             if O.ctype=="double":
 *                 return self.view(drf(O.mtxDouble),&labels[0],False)
 *         if isinstance(O,Graph):             # <<<<<<<<<<<<<<
 *             if O.nodes!=labels.size:
 *                 raise Exception("Dist.rows must be equal to labels length.")
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_O), __pyx_ptype_5miolo_Graph); 
  if (__pyx_t_1) {

    /* "miololib.pyx":2549
 *                 return self.view(drf(O.mtxDouble),&labels[0],False)
 *         if isinstance(O,Graph):
 *             if O.nodes!=labels.size:             # <<<<<<<<<<<<<<
 *                 raise Exception("Dist.rows must be equal to labels length.")
 *             if O.ctype=="int":
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_O), __pyx_n_s_nodes); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2549, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __pyx_memoryview_fromslice(__pyx_v_labels, 1, (PyObject *(*)(char *)) __pyx_memview_get_int, (int (*)(char *, PyObject *)) __pyx_memview_set_int, 0);; if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2549, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_size); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2549, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_RichCompare(__pyx_t_3, __pyx_t_4, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2549, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 2549, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(__pyx_t_1)) {

      /* "miololib.pyx":2550
 *         if isinstance(O,Graph):
 *             if O.nodes!=labels.size:
 *                 raise Exception("Dist.rows must be equal to labels length.")             # <<<<<<<<<<<<<<
 *             if O.ctype=="int":
 *                 return self.view(drf(O.graphInt),&labels[0],False)
 */
      __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__81, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2550, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_Raise(__pyx_t_2, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __PYX_ERR(1, 2550, __pyx_L1_error)

      /* "miololib.pyx":2549
 *                 return self.view(drf(O.mtxDouble),&labels[0],False)
 *         if isinstance(O,Graph):
 *             if O.nodes!=labels.size:             # <<<<<<<<<<<<<<
 *                 raise Exception("Dist.rows must be equal to labels length.")
 *             if O.ctype=="int":
 */
    }

    /* "miololib.pyx":2551
 *             if O.nodes!=labels.size:
 *                 raise Exception("Dist.rows must be equal to labels length.")
 *             if O.ctype=="int":             # <<<<<<<<<<<<<<
 *                 return self.view(drf(O.graphInt),&labels[0],False)
 *             if O.ctype=="float":
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_O), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2551, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 2551, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_1) {

      /* "miololib.pyx":2552
 *                 raise Exception("Dist.rows must be equal to labels length.")
 *             if O.ctype=="int":
 *                 return self.view(drf(O.graphInt),&labels[0],False)             # <<<<<<<<<<<<<<
 *             if O.ctype=="float":
 *                 return self.view(drf(O.graphFloat),&labels[0],False)
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_5 = 0;
      if (__pyx_t_5 < 0) __pyx_t_5 += __pyx_v_labels.shape[0];
      __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->view((*__pyx_v_O->graphInt), (&(*((int *) ( /* dim=0 */ (__pyx_v_labels.data + __pyx_t_5 * __pyx_v_labels.strides[0]) )))), 0)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2552, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      goto __pyx_L0;

      /* "miololib.pyx":2551
 *             if O.nodes!=labels.size:
 *                 raise Exception("Dist.rows must be equal to labels length.")
 *             if O.ctype=="int":             # <<<<<<<<<<<<<<
 *                 return self.view(drf(O.graphInt),&labels[0],False)
 *             if O.ctype=="float":
 */
    }

    /* "miololib.pyx":2553
 *             if O.ctype=="int":
 *                 return self.view(drf(O.graphInt),&labels[0],False)
 *             if O.ctype=="float":             # <<<<<<<<<<<<<<
 *                 return self.view(drf(O.graphFloat),&labels[0],False)
 *             if O.ctype=="double":
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_O), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2553, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 2553, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_1) {

      /* "miololib.pyx":2554
 *                 return self.view(drf(O.graphInt),&labels[0],False)
 *             if O.ctype=="float":
 *                 return self.view(drf(O.graphFloat),&labels[0],False)             # <<<<<<<<<<<<<<
 *             if O.ctype=="double":
 *                 return self.view(drf(O.graphDouble),&labels[0],False)
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_5 = 0;
      if (__pyx_t_5 < 0) __pyx_t_5 += __pyx_v_labels.shape[0];
      __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->view((*__pyx_v_O->graphFloat), (&(*((int *) ( /* dim=0 */ (__pyx_v_labels.data + __pyx_t_5 * __pyx_v_labels.strides[0]) )))), 0)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2554, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      goto __pyx_L0;

      /* "miololib.pyx":2553
 *             if O.ctype=="int":
 *                 return self.view(drf(O.graphInt),&labels[0],False)
 *             if O.ctype=="float":             # <<<<<<<<<<<<<<
 *                 return self.view(drf(O.graphFloat),&labels[0],False)
 *             if O.ctype=="double":
 */
    }

    /* "miololib.pyx":2555
 *             if O.ctype=="float":
 *                 return self.view(drf(O.graphFloat),&labels[0],False)
 *             if O.ctype=="double":             # <<<<<<<<<<<<<<
 *                 return self.view(drf(O.graphDouble),&labels[0],False)
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_O), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2555, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 2555, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_1) {

      /* "miololib.pyx":2556
 *                 return self.view(drf(O.graphFloat),&labels[0],False)
 *             if O.ctype=="double":
 *                 return self.view(drf(O.graphDouble),&labels[0],False)             # <<<<<<<<<<<<<<
 * 
 * cdef class weightedSquareDistance:
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_5 = 0;
      if (__pyx_t_5 < 0) __pyx_t_5 += __pyx_v_labels.shape[0];
      __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->view((*__pyx_v_O->graphDouble), (&(*((int *) ( /* dim=0 */ (__pyx_v_labels.data + __pyx_t_5 * __pyx_v_labels.strides[0]) )))), 0)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2556, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      goto __pyx_L0;

      /* "miololib.pyx":2555
 *             if O.ctype=="float":
 *                 return self.view(drf(O.graphFloat),&labels[0],False)
 *             if O.ctype=="double":             # <<<<<<<<<<<<<<
 *                 return self.view(drf(O.graphDouble),&labels[0],False)
 * 
 */
    }

    /* "miololib.pyx":2548
 *             if O.ctype=="double":
 *                 return self.view(drf(O.mtxDouble),&labels[0],False)
 *         if isinstance(O,Graph):             # <<<<<<<<<<<<<<
 *             if O.nodes!=labels.size:
 *                 raise Exception("Dist.rows must be equal to labels length.")
 */
  }

  /* "miololib.pyx":2531
 *                 return self.view(drf(O.graphDouble),&labels[0],True)
 * 
 *     def extra(self, mioloObject O, int[:] labels):             # <<<<<<<<<<<<<<
 *         """
 *             Computes intraclass distance.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("miolo.classSeparation.extra", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_15classSeparation_5__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_15classSeparation_4__reduce_cython__, "classSeparation.__reduce_cython__(self)");
static PyMethodDef __pyx_mdef_5miolo_15classSeparation_5__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_15classSeparation_5__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_15classSeparation_4__reduce_cython__};
static PyObject *__pyx_pw_5miolo_15classSeparation_5__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_5miolo_15classSeparation_4__reduce_cython__(((struct __pyx_obj_5miolo_classSeparation *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_15classSeparation_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_classSeparation *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_view_cannot_be_converted_to, 0, 0);
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("miolo.classSeparation.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_15classSeparation_7__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_15classSeparation_6__setstate_cython__, "classSeparation.__setstate_cython__(self, __pyx_state)");
static PyMethodDef __pyx_mdef_5miolo_15classSeparation_7__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_15classSeparation_7__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_15classSeparation_6__setstate_cython__};
static PyObject *__pyx_pw_5miolo_15classSeparation_7__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(0, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.classSeparation.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5miolo_15classSeparation_6__setstate_cython__(((struct __pyx_obj_5miolo_classSeparation *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_15classSeparation_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_classSeparation *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_view_cannot_be_converted_to, 0, 0);
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("miolo.classSeparation.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":2562
 *     cdef mld.weightedSquareDistance view
 * 
 *     def __call__(self, Matrix M, mioloObject Weights):             # <<<<<<<<<<<<<<
 *         """
 *             Computes the sum of distances of rows in M weighted by Weights. M and
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_22weightedSquareDistance_1__call__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_22weightedSquareDistance___call__, "\n            Computes the sum of distances of rows in M weighted by Weights. M and\n            Weights must have same number of rows.\n            M: feature Matrix.\n            Weights: weight matrix between rows. Must be square Matrix or Graph.\n        ");
#if CYTHON_UPDATE_DESCRIPTOR_DOC
struct wrapperbase __pyx_wrapperbase_5miolo_22weightedSquareDistance___call__;
#endif
static PyObject *__pyx_pw_5miolo_22weightedSquareDistance_1__call__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_M = 0;
  struct __pyx_obj_5miolo_mioloObject *__pyx_v_Weights = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__call__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_M,&__pyx_n_s_Weights,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_M)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 2562, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_Weights)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 2562, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__call__", 1, 2, 2, 1); __PYX_ERR(1, 2562, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__call__") < 0)) __PYX_ERR(1, 2562, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
      values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
    }
    __pyx_v_M = ((struct __pyx_obj_5miolo_Matrix *)values[0]);
    __pyx_v_Weights = ((struct __pyx_obj_5miolo_mioloObject *)values[1]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__call__", 1, 2, 2, __pyx_nargs); __PYX_ERR(1, 2562, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.weightedSquareDistance.__call__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_M), __pyx_ptype_5miolo_Matrix, 1, "M", 0))) __PYX_ERR(1, 2562, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_Weights), __pyx_ptype_5miolo_mioloObject, 1, "Weights", 0))) __PYX_ERR(1, 2562, __pyx_L1_error)
  __pyx_r = __pyx_pf_5miolo_22weightedSquareDistance___call__(((struct __pyx_obj_5miolo_weightedSquareDistance *)__pyx_v_self), __pyx_v_M, __pyx_v_Weights);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_22weightedSquareDistance___call__(struct __pyx_obj_5miolo_weightedSquareDistance *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_M, struct __pyx_obj_5miolo_mioloObject *__pyx_v_Weights) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__call__", 1);

  /* "miololib.pyx":2569
 *             Weights: weight matrix between rows. Must be square Matrix or Graph.
 *         """
 *         if M.ctype!=Weights.ctype:             # <<<<<<<<<<<<<<
 *             raise TypeError("M and Weights must have same ctype.")
 *         if isinstance(Weights,Matrix):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2569, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_Weights), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2569, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2569, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 2569, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(__pyx_t_4)) {

    /* "miololib.pyx":2570
 *         """
 *         if M.ctype!=Weights.ctype:
 *             raise TypeError("M and Weights must have same ctype.")             # <<<<<<<<<<<<<<
 *         if isinstance(Weights,Matrix):
 *             if Weights.rows!=Weights.cols:
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__82, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2570, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 2570, __pyx_L1_error)

    /* "miololib.pyx":2569
 *             Weights: weight matrix between rows. Must be square Matrix or Graph.
 *         """
 *         if M.ctype!=Weights.ctype:             # <<<<<<<<<<<<<<
 *             raise TypeError("M and Weights must have same ctype.")
 *         if isinstance(Weights,Matrix):
 */
  }

  /* "miololib.pyx":2571
 *         if M.ctype!=Weights.ctype:
 *             raise TypeError("M and Weights must have same ctype.")
 *         if isinstance(Weights,Matrix):             # <<<<<<<<<<<<<<
 *             if Weights.rows!=Weights.cols:
 *                 raise Exception("Only square weight matrices are allowed.")
 */
  __pyx_t_4 = __Pyx_TypeCheck(((PyObject *)__pyx_v_Weights), __pyx_ptype_5miolo_Matrix); 
  if (__pyx_t_4) {

    /* "miololib.pyx":2572
 *             raise TypeError("M and Weights must have same ctype.")
 *         if isinstance(Weights,Matrix):
 *             if Weights.rows!=Weights.cols:             # <<<<<<<<<<<<<<
 *                 raise Exception("Only square weight matrices are allowed.")
 *             if M.rows!=Weights.rows:
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_Weights), __pyx_n_s_rows); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2572, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_Weights), __pyx_n_s_cols); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2572, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyObject_RichCompare(__pyx_t_3, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2572, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 2572, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__pyx_t_4)) {

      /* "miololib.pyx":2573
 *         if isinstance(Weights,Matrix):
 *             if Weights.rows!=Weights.cols:
 *                 raise Exception("Only square weight matrices are allowed.")             # <<<<<<<<<<<<<<
 *             if M.rows!=Weights.rows:
 *                 raise Exception("M and Weights must have same number of rows.")
 */
      __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__83, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2573, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_Raise(__pyx_t_1, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __PYX_ERR(1, 2573, __pyx_L1_error)

      /* "miololib.pyx":2572
 *             raise TypeError("M and Weights must have same ctype.")
 *         if isinstance(Weights,Matrix):
 *             if Weights.rows!=Weights.cols:             # <<<<<<<<<<<<<<
 *                 raise Exception("Only square weight matrices are allowed.")
 *             if M.rows!=Weights.rows:
 */
    }

    /* "miololib.pyx":2574
 *             if Weights.rows!=Weights.cols:
 *                 raise Exception("Only square weight matrices are allowed.")
 *             if M.rows!=Weights.rows:             # <<<<<<<<<<<<<<
 *                 raise Exception("M and Weights must have same number of rows.")
 *             if M.ctype=="int":
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_rows); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2574, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_Weights), __pyx_n_s_rows); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2574, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2574, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 2574, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(__pyx_t_4)) {

      /* "miololib.pyx":2575
 *                 raise Exception("Only square weight matrices are allowed.")
 *             if M.rows!=Weights.rows:
 *                 raise Exception("M and Weights must have same number of rows.")             # <<<<<<<<<<<<<<
 *             if M.ctype=="int":
 *                 return self.view(drf(M.mtxInt),drf(Weights.mtxInt))
 */
      __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__84, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2575, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(1, 2575, __pyx_L1_error)

      /* "miololib.pyx":2574
 *             if Weights.rows!=Weights.cols:
 *                 raise Exception("Only square weight matrices are allowed.")
 *             if M.rows!=Weights.rows:             # <<<<<<<<<<<<<<
 *                 raise Exception("M and Weights must have same number of rows.")
 *             if M.ctype=="int":
 */
    }

    /* "miololib.pyx":2576
 *             if M.rows!=Weights.rows:
 *                 raise Exception("M and Weights must have same number of rows.")
 *             if M.ctype=="int":             # <<<<<<<<<<<<<<
 *                 return self.view(drf(M.mtxInt),drf(Weights.mtxInt))
 *             if M.ctype=="float":
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2576, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 2576, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_4) {

      /* "miololib.pyx":2577
 *                 raise Exception("M and Weights must have same number of rows.")
 *             if M.ctype=="int":
 *                 return self.view(drf(M.mtxInt),drf(Weights.mtxInt))             # <<<<<<<<<<<<<<
 *             if M.ctype=="float":
 *                 return self.view(drf(M.mtxFloat),drf(Weights.mtxFloat))
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_self->view((*__pyx_v_M->__pyx_base.mtxInt), (*__pyx_v_Weights->mtxInt))); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2577, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "miololib.pyx":2576
 *             if M.rows!=Weights.rows:
 *                 raise Exception("M and Weights must have same number of rows.")
 *             if M.ctype=="int":             # <<<<<<<<<<<<<<
 *                 return self.view(drf(M.mtxInt),drf(Weights.mtxInt))
 *             if M.ctype=="float":
 */
    }

    /* "miololib.pyx":2578
 *             if M.ctype=="int":
 *                 return self.view(drf(M.mtxInt),drf(Weights.mtxInt))
 *             if M.ctype=="float":             # <<<<<<<<<<<<<<
 *                 return self.view(drf(M.mtxFloat),drf(Weights.mtxFloat))
 *             if M.ctype=="double":
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2578, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 2578, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_4) {

      /* "miololib.pyx":2579
 *                 return self.view(drf(M.mtxInt),drf(Weights.mtxInt))
 *             if M.ctype=="float":
 *                 return self.view(drf(M.mtxFloat),drf(Weights.mtxFloat))             # <<<<<<<<<<<<<<
 *             if M.ctype=="double":
 *                 return self.view(drf(M.mtxDouble),drf(Weights.mtxDouble))
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->view((*__pyx_v_M->__pyx_base.mtxFloat), (*__pyx_v_Weights->mtxFloat))); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2579, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "miololib.pyx":2578
 *             if M.ctype=="int":
 *                 return self.view(drf(M.mtxInt),drf(Weights.mtxInt))
 *             if M.ctype=="float":             # <<<<<<<<<<<<<<
 *                 return self.view(drf(M.mtxFloat),drf(Weights.mtxFloat))
 *             if M.ctype=="double":
 */
    }

    /* "miololib.pyx":2580
 *             if M.ctype=="float":
 *                 return self.view(drf(M.mtxFloat),drf(Weights.mtxFloat))
 *             if M.ctype=="double":             # <<<<<<<<<<<<<<
 *                 return self.view(drf(M.mtxDouble),drf(Weights.mtxDouble))
 *         if isinstance(Weights,Graph):
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2580, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 2580, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_4) {

      /* "miololib.pyx":2581
 *                 return self.view(drf(M.mtxFloat),drf(Weights.mtxFloat))
 *             if M.ctype=="double":
 *                 return self.view(drf(M.mtxDouble),drf(Weights.mtxDouble))             # <<<<<<<<<<<<<<
 *         if isinstance(Weights,Graph):
 *             if Weights.nodes!=M.rows:
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->view((*__pyx_v_M->__pyx_base.mtxDouble), (*__pyx_v_Weights->mtxDouble))); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2581, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "miololib.pyx":2580
 *             if M.ctype=="float":
 *                 return self.view(drf(M.mtxFloat),drf(Weights.mtxFloat))
 *             if M.ctype=="double":             # <<<<<<<<<<<<<<
 *                 return self.view(drf(M.mtxDouble),drf(Weights.mtxDouble))
 *         if isinstance(Weights,Graph):
 */
    }

    /* "miololib.pyx":2571
 *         if M.ctype!=Weights.ctype:
 *             raise TypeError("M and Weights must have same ctype.")
 *         if isinstance(Weights,Matrix):             # <<<<<<<<<<<<<<
 *             if Weights.rows!=Weights.cols:
 *                 raise Exception("Only square weight matrices are allowed.")
 */
  }

  /* "miololib.pyx":2582
 *             if M.ctype=="double":
 *                 return self.view(drf(M.mtxDouble),drf(Weights.mtxDouble))
 *         if isinstance(Weights,Graph):             # <<<<<<<<<<<<<<
 *             if Weights.nodes!=M.rows:
 *                 raise Exception("Weights.nodes must be equal to M.rows.")
 */
  __pyx_t_4 = __Pyx_TypeCheck(((PyObject *)__pyx_v_Weights), __pyx_ptype_5miolo_Graph); 
  if (__pyx_t_4) {

    /* "miololib.pyx":2583
 *                 return self.view(drf(M.mtxDouble),drf(Weights.mtxDouble))
 *         if isinstance(Weights,Graph):
 *             if Weights.nodes!=M.rows:             # <<<<<<<<<<<<<<
 *                 raise Exception("Weights.nodes must be equal to M.rows.")
 *             if M.ctype=="int":
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_Weights), __pyx_n_s_nodes); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2583, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_rows); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2583, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyObject_RichCompare(__pyx_t_3, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2583, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 2583, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__pyx_t_4)) {

      /* "miololib.pyx":2584
 *         if isinstance(Weights,Graph):
 *             if Weights.nodes!=M.rows:
 *                 raise Exception("Weights.nodes must be equal to M.rows.")             # <<<<<<<<<<<<<<
 *             if M.ctype=="int":
 *                 return self.view(drf(M.mtxInt),drf(Weights.graphInt))
 */
      __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__85, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2584, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_Raise(__pyx_t_1, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __PYX_ERR(1, 2584, __pyx_L1_error)

      /* "miololib.pyx":2583
 *                 return self.view(drf(M.mtxDouble),drf(Weights.mtxDouble))
 *         if isinstance(Weights,Graph):
 *             if Weights.nodes!=M.rows:             # <<<<<<<<<<<<<<
 *                 raise Exception("Weights.nodes must be equal to M.rows.")
 *             if M.ctype=="int":
 */
    }

    /* "miololib.pyx":2585
 *             if Weights.nodes!=M.rows:
 *                 raise Exception("Weights.nodes must be equal to M.rows.")
 *             if M.ctype=="int":             # <<<<<<<<<<<<<<
 *                 return self.view(drf(M.mtxInt),drf(Weights.graphInt))
 *             if M.ctype=="float":
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2585, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 2585, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_4) {

      /* "miololib.pyx":2586
 *                 raise Exception("Weights.nodes must be equal to M.rows.")
 *             if M.ctype=="int":
 *                 return self.view(drf(M.mtxInt),drf(Weights.graphInt))             # <<<<<<<<<<<<<<
 *             if M.ctype=="float":
 *                 return self.view(drf(M.mtxFloat),drf(Weights.graphFloat))
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->view((*__pyx_v_M->__pyx_base.mtxInt), (*__pyx_v_Weights->graphInt))); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2586, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_r = __pyx_t_1;
      __pyx_t_1 = 0;
      goto __pyx_L0;

      /* "miololib.pyx":2585
 *             if Weights.nodes!=M.rows:
 *                 raise Exception("Weights.nodes must be equal to M.rows.")
 *             if M.ctype=="int":             # <<<<<<<<<<<<<<
 *                 return self.view(drf(M.mtxInt),drf(Weights.graphInt))
 *             if M.ctype=="float":
 */
    }

    /* "miololib.pyx":2587
 *             if M.ctype=="int":
 *                 return self.view(drf(M.mtxInt),drf(Weights.graphInt))
 *             if M.ctype=="float":             # <<<<<<<<<<<<<<
 *                 return self.view(drf(M.mtxFloat),drf(Weights.graphFloat))
 *             if M.ctype=="double":
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2587, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 2587, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_4) {

      /* "miololib.pyx":2588
 *                 return self.view(drf(M.mtxInt),drf(Weights.graphInt))
 *             if M.ctype=="float":
 *                 return self.view(drf(M.mtxFloat),drf(Weights.graphFloat))             # <<<<<<<<<<<<<<
 *             if M.ctype=="double":
 *                 return self.view(drf(M.mtxDouble),drf(Weights.graphDouble))
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->view((*__pyx_v_M->__pyx_base.mtxFloat), (*__pyx_v_Weights->graphFloat))); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2588, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_r = __pyx_t_1;
      __pyx_t_1 = 0;
      goto __pyx_L0;

      /* "miololib.pyx":2587
 *             if M.ctype=="int":
 *                 return self.view(drf(M.mtxInt),drf(Weights.graphInt))
 *             if M.ctype=="float":             # <<<<<<<<<<<<<<
 *                 return self.view(drf(M.mtxFloat),drf(Weights.graphFloat))
 *             if M.ctype=="double":
 */
    }

    /* "miololib.pyx":2589
 *             if M.ctype=="float":
 *                 return self.view(drf(M.mtxFloat),drf(Weights.graphFloat))
 *             if M.ctype=="double":             # <<<<<<<<<<<<<<
 *                 return self.view(drf(M.mtxDouble),drf(Weights.graphDouble))
 * 
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2589, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 2589, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_4) {

      /* "miololib.pyx":2590
 *                 return self.view(drf(M.mtxFloat),drf(Weights.graphFloat))
 *             if M.ctype=="double":
 *                 return self.view(drf(M.mtxDouble),drf(Weights.graphDouble))             # <<<<<<<<<<<<<<
 * 
 * cdef class weightedDotProduct:
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->view((*__pyx_v_M->__pyx_base.mtxDouble), (*__pyx_v_Weights->graphDouble))); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2590, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_r = __pyx_t_1;
      __pyx_t_1 = 0;
      goto __pyx_L0;

      /* "miololib.pyx":2589
 *             if M.ctype=="float":
 *                 return self.view(drf(M.mtxFloat),drf(Weights.graphFloat))
 *             if M.ctype=="double":             # <<<<<<<<<<<<<<
 *                 return self.view(drf(M.mtxDouble),drf(Weights.graphDouble))
 * 
 */
    }

    /* "miololib.pyx":2582
 *             if M.ctype=="double":
 *                 return self.view(drf(M.mtxDouble),drf(Weights.mtxDouble))
 *         if isinstance(Weights,Graph):             # <<<<<<<<<<<<<<
 *             if Weights.nodes!=M.rows:
 *                 raise Exception("Weights.nodes must be equal to M.rows.")
 */
  }

  /* "miololib.pyx":2562
 *     cdef mld.weightedSquareDistance view
 * 
 *     def __call__(self, Matrix M, mioloObject Weights):             # <<<<<<<<<<<<<<
 *         """
 *             Computes the sum of distances of rows in M weighted by Weights. M and
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("miolo.weightedSquareDistance.__call__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_22weightedSquareDistance_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_22weightedSquareDistance_2__reduce_cython__, "weightedSquareDistance.__reduce_cython__(self)");
static PyMethodDef __pyx_mdef_5miolo_22weightedSquareDistance_3__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_22weightedSquareDistance_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_22weightedSquareDistance_2__reduce_cython__};
static PyObject *__pyx_pw_5miolo_22weightedSquareDistance_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_5miolo_22weightedSquareDistance_2__reduce_cython__(((struct __pyx_obj_5miolo_weightedSquareDistance *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_22weightedSquareDistance_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_weightedSquareDistance *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_view_cannot_be_converted_to, 0, 0);
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("miolo.weightedSquareDistance.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_22weightedSquareDistance_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_22weightedSquareDistance_4__setstate_cython__, "weightedSquareDistance.__setstate_cython__(self, __pyx_state)");
static PyMethodDef __pyx_mdef_5miolo_22weightedSquareDistance_5__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_22weightedSquareDistance_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_22weightedSquareDistance_4__setstate_cython__};
static PyObject *__pyx_pw_5miolo_22weightedSquareDistance_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(0, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.weightedSquareDistance.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5miolo_22weightedSquareDistance_4__setstate_cython__(((struct __pyx_obj_5miolo_weightedSquareDistance *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_22weightedSquareDistance_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_weightedSquareDistance *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_view_cannot_be_converted_to, 0, 0);
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("miolo.weightedSquareDistance.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":2596
 *     cdef mld.weightedDot view
 * 
 *     def __call__(self, Matrix M, mioloObject Weights):             # <<<<<<<<<<<<<<
 *         """
 *             Computes the sum of dot products of rows in M weighted by Weights. M and
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_18weightedDotProduct_1__call__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_18weightedDotProduct___call__, "\n            Computes the sum of dot products of rows in M weighted by Weights. M and\n            Weights must have same number of rows.\n            M: feature Matrix.\n            Weights: weight matrix between rows. Must be square Matrix or Graph.\n        ");
#if CYTHON_UPDATE_DESCRIPTOR_DOC
struct wrapperbase __pyx_wrapperbase_5miolo_18weightedDotProduct___call__;
#endif
static PyObject *__pyx_pw_5miolo_18weightedDotProduct_1__call__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_5miolo_Matrix *__pyx_v_M = 0;
  struct __pyx_obj_5miolo_mioloObject *__pyx_v_Weights = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__call__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_M,&__pyx_n_s_Weights,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_M)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 2596, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_Weights)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 2596, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__call__", 1, 2, 2, 1); __PYX_ERR(1, 2596, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__call__") < 0)) __PYX_ERR(1, 2596, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
      values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
    }
    __pyx_v_M = ((struct __pyx_obj_5miolo_Matrix *)values[0]);
    __pyx_v_Weights = ((struct __pyx_obj_5miolo_mioloObject *)values[1]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__call__", 1, 2, 2, __pyx_nargs); __PYX_ERR(1, 2596, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.weightedDotProduct.__call__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_M), __pyx_ptype_5miolo_Matrix, 1, "M", 0))) __PYX_ERR(1, 2596, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_Weights), __pyx_ptype_5miolo_mioloObject, 1, "Weights", 0))) __PYX_ERR(1, 2596, __pyx_L1_error)
  __pyx_r = __pyx_pf_5miolo_18weightedDotProduct___call__(((struct __pyx_obj_5miolo_weightedDotProduct *)__pyx_v_self), __pyx_v_M, __pyx_v_Weights);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_18weightedDotProduct___call__(struct __pyx_obj_5miolo_weightedDotProduct *__pyx_v_self, struct __pyx_obj_5miolo_Matrix *__pyx_v_M, struct __pyx_obj_5miolo_mioloObject *__pyx_v_Weights) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__call__", 1);

  /* "miololib.pyx":2603
 *             Weights: weight matrix between rows. Must be square Matrix or Graph.
 *         """
 *         if M.ctype!=Weights.ctype:             # <<<<<<<<<<<<<<
 *             raise TypeError("M and Weights must have same ctype.")
 *         if isinstance(Weights,Matrix):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2603, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_Weights), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2603, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2603, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 2603, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(__pyx_t_4)) {

    /* "miololib.pyx":2604
 *         """
 *         if M.ctype!=Weights.ctype:
 *             raise TypeError("M and Weights must have same ctype.")             # <<<<<<<<<<<<<<
 *         if isinstance(Weights,Matrix):
 *             if Weights.rows!=Weights.cols:
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__82, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2604, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 2604, __pyx_L1_error)

    /* "miololib.pyx":2603
 *             Weights: weight matrix between rows. Must be square Matrix or Graph.
 *         """
 *         if M.ctype!=Weights.ctype:             # <<<<<<<<<<<<<<
 *             raise TypeError("M and Weights must have same ctype.")
 *         if isinstance(Weights,Matrix):
 */
  }

  /* "miololib.pyx":2605
 *         if M.ctype!=Weights.ctype:
 *             raise TypeError("M and Weights must have same ctype.")
 *         if isinstance(Weights,Matrix):             # <<<<<<<<<<<<<<
 *             if Weights.rows!=Weights.cols:
 *                 raise Exception("Only square weight matrices are allowed.")
 */
  __pyx_t_4 = __Pyx_TypeCheck(((PyObject *)__pyx_v_Weights), __pyx_ptype_5miolo_Matrix); 
  if (__pyx_t_4) {

    /* "miololib.pyx":2606
 *             raise TypeError("M and Weights must have same ctype.")
 *         if isinstance(Weights,Matrix):
 *             if Weights.rows!=Weights.cols:             # <<<<<<<<<<<<<<
 *                 raise Exception("Only square weight matrices are allowed.")
 *             if M.rows!=Weights.rows:
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_Weights), __pyx_n_s_rows); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2606, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_Weights), __pyx_n_s_cols); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2606, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyObject_RichCompare(__pyx_t_3, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2606, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 2606, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__pyx_t_4)) {

      /* "miololib.pyx":2607
 *         if isinstance(Weights,Matrix):
 *             if Weights.rows!=Weights.cols:
 *                 raise Exception("Only square weight matrices are allowed.")             # <<<<<<<<<<<<<<
 *             if M.rows!=Weights.rows:
 *                 raise Exception("M and Weights must have same number of rows.")
 */
      __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__83, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2607, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_Raise(__pyx_t_1, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __PYX_ERR(1, 2607, __pyx_L1_error)

      /* "miololib.pyx":2606
 *             raise TypeError("M and Weights must have same ctype.")
 *         if isinstance(Weights,Matrix):
 *             if Weights.rows!=Weights.cols:             # <<<<<<<<<<<<<<
 *                 raise Exception("Only square weight matrices are allowed.")
 *             if M.rows!=Weights.rows:
 */
    }

    /* "miololib.pyx":2608
 *             if Weights.rows!=Weights.cols:
 *                 raise Exception("Only square weight matrices are allowed.")
 *             if M.rows!=Weights.rows:             # <<<<<<<<<<<<<<
 *                 raise Exception("M and Weights must have same number of rows.")
 *             if M.ctype=="int":
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_rows); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2608, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_Weights), __pyx_n_s_rows); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2608, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2608, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 2608, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(__pyx_t_4)) {

      /* "miololib.pyx":2609
 *                 raise Exception("Only square weight matrices are allowed.")
 *             if M.rows!=Weights.rows:
 *                 raise Exception("M and Weights must have same number of rows.")             # <<<<<<<<<<<<<<
 *             if M.ctype=="int":
 *                 return self.view(drf(M.mtxInt),drf(Weights.mtxInt))
 */
      __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__84, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2609, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(1, 2609, __pyx_L1_error)

      /* "miololib.pyx":2608
 *             if Weights.rows!=Weights.cols:
 *                 raise Exception("Only square weight matrices are allowed.")
 *             if M.rows!=Weights.rows:             # <<<<<<<<<<<<<<
 *                 raise Exception("M and Weights must have same number of rows.")
 *             if M.ctype=="int":
 */
    }

    /* "miololib.pyx":2610
 *             if M.rows!=Weights.rows:
 *                 raise Exception("M and Weights must have same number of rows.")
 *             if M.ctype=="int":             # <<<<<<<<<<<<<<
 *                 return self.view(drf(M.mtxInt),drf(Weights.mtxInt))
 *             if M.ctype=="float":
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2610, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 2610, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_4) {

      /* "miololib.pyx":2611
 *                 raise Exception("M and Weights must have same number of rows.")
 *             if M.ctype=="int":
 *                 return self.view(drf(M.mtxInt),drf(Weights.mtxInt))             # <<<<<<<<<<<<<<
 *             if M.ctype=="float":
 *                 return self.view(drf(M.mtxFloat),drf(Weights.mtxFloat))
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_self->view((*__pyx_v_M->__pyx_base.mtxInt), (*__pyx_v_Weights->mtxInt))); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2611, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "miololib.pyx":2610
 *             if M.rows!=Weights.rows:
 *                 raise Exception("M and Weights must have same number of rows.")
 *             if M.ctype=="int":             # <<<<<<<<<<<<<<
 *                 return self.view(drf(M.mtxInt),drf(Weights.mtxInt))
 *             if M.ctype=="float":
 */
    }

    /* "miololib.pyx":2612
 *             if M.ctype=="int":
 *                 return self.view(drf(M.mtxInt),drf(Weights.mtxInt))
 *             if M.ctype=="float":             # <<<<<<<<<<<<<<
 *                 return self.view(drf(M.mtxFloat),drf(Weights.mtxFloat))
 *             if M.ctype=="double":
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2612, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 2612, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_4) {

      /* "miololib.pyx":2613
 *                 return self.view(drf(M.mtxInt),drf(Weights.mtxInt))
 *             if M.ctype=="float":
 *                 return self.view(drf(M.mtxFloat),drf(Weights.mtxFloat))             # <<<<<<<<<<<<<<
 *             if M.ctype=="double":
 *                 return self.view(drf(M.mtxDouble),drf(Weights.mtxDouble))
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->view((*__pyx_v_M->__pyx_base.mtxFloat), (*__pyx_v_Weights->mtxFloat))); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2613, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "miololib.pyx":2612
 *             if M.ctype=="int":
 *                 return self.view(drf(M.mtxInt),drf(Weights.mtxInt))
 *             if M.ctype=="float":             # <<<<<<<<<<<<<<
 *                 return self.view(drf(M.mtxFloat),drf(Weights.mtxFloat))
 *             if M.ctype=="double":
 */
    }

    /* "miololib.pyx":2614
 *             if M.ctype=="float":
 *                 return self.view(drf(M.mtxFloat),drf(Weights.mtxFloat))
 *             if M.ctype=="double":             # <<<<<<<<<<<<<<
 *                 return self.view(drf(M.mtxDouble),drf(Weights.mtxDouble))
 *         if isinstance(Weights,Graph):
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2614, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 2614, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_4) {

      /* "miololib.pyx":2615
 *                 return self.view(drf(M.mtxFloat),drf(Weights.mtxFloat))
 *             if M.ctype=="double":
 *                 return self.view(drf(M.mtxDouble),drf(Weights.mtxDouble))             # <<<<<<<<<<<<<<
 *         if isinstance(Weights,Graph):
 *             if Weights.nodes!=M.rows:
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->view((*__pyx_v_M->__pyx_base.mtxDouble), (*__pyx_v_Weights->mtxDouble))); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2615, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "miololib.pyx":2614
 *             if M.ctype=="float":
 *                 return self.view(drf(M.mtxFloat),drf(Weights.mtxFloat))
 *             if M.ctype=="double":             # <<<<<<<<<<<<<<
 *                 return self.view(drf(M.mtxDouble),drf(Weights.mtxDouble))
 *         if isinstance(Weights,Graph):
 */
    }

    /* "miololib.pyx":2605
 *         if M.ctype!=Weights.ctype:
 *             raise TypeError("M and Weights must have same ctype.")
 *         if isinstance(Weights,Matrix):             # <<<<<<<<<<<<<<
 *             if Weights.rows!=Weights.cols:
 *                 raise Exception("Only square weight matrices are allowed.")
 */
  }

  /* "miololib.pyx":2616
 *             if M.ctype=="double":
 *                 return self.view(drf(M.mtxDouble),drf(Weights.mtxDouble))
 *         if isinstance(Weights,Graph):             # <<<<<<<<<<<<<<
 *             if Weights.nodes!=M.rows:
 *                 raise Exception("Weights.nodes must be equal to M.rows.")
 */
  __pyx_t_4 = __Pyx_TypeCheck(((PyObject *)__pyx_v_Weights), __pyx_ptype_5miolo_Graph); 
  if (__pyx_t_4) {

    /* "miololib.pyx":2617
 *                 return self.view(drf(M.mtxDouble),drf(Weights.mtxDouble))
 *         if isinstance(Weights,Graph):
 *             if Weights.nodes!=M.rows:             # <<<<<<<<<<<<<<
 *                 raise Exception("Weights.nodes must be equal to M.rows.")
 *             if M.ctype=="int":
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_Weights), __pyx_n_s_nodes); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2617, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_rows); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2617, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyObject_RichCompare(__pyx_t_3, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2617, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 2617, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__pyx_t_4)) {

      /* "miololib.pyx":2618
 *         if isinstance(Weights,Graph):
 *             if Weights.nodes!=M.rows:
 *                 raise Exception("Weights.nodes must be equal to M.rows.")             # <<<<<<<<<<<<<<
 *             if M.ctype=="int":
 *                 return self.view(drf(M.mtxInt),drf(Weights.graphInt))
 */
      __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__85, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2618, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_Raise(__pyx_t_1, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __PYX_ERR(1, 2618, __pyx_L1_error)

      /* "miololib.pyx":2617
 *                 return self.view(drf(M.mtxDouble),drf(Weights.mtxDouble))
 *         if isinstance(Weights,Graph):
 *             if Weights.nodes!=M.rows:             # <<<<<<<<<<<<<<
 *                 raise Exception("Weights.nodes must be equal to M.rows.")
 *             if M.ctype=="int":
 */
    }

    /* "miololib.pyx":2619
 *             if Weights.nodes!=M.rows:
 *                 raise Exception("Weights.nodes must be equal to M.rows.")
 *             if M.ctype=="int":             # <<<<<<<<<<<<<<
 *                 return self.view(drf(M.mtxInt),drf(Weights.graphInt))
 *             if M.ctype=="float":
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2619, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 2619, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_4) {

      /* "miololib.pyx":2620
 *                 raise Exception("Weights.nodes must be equal to M.rows.")
 *             if M.ctype=="int":
 *                 return self.view(drf(M.mtxInt),drf(Weights.graphInt))             # <<<<<<<<<<<<<<
 *             if M.ctype=="float":
 *                 return self.view(drf(M.mtxFloat),drf(Weights.graphFloat))
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->view((*__pyx_v_M->__pyx_base.mtxInt), (*__pyx_v_Weights->graphInt))); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2620, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_r = __pyx_t_1;
      __pyx_t_1 = 0;
      goto __pyx_L0;

      /* "miololib.pyx":2619
 *             if Weights.nodes!=M.rows:
 *                 raise Exception("Weights.nodes must be equal to M.rows.")
 *             if M.ctype=="int":             # <<<<<<<<<<<<<<
 *                 return self.view(drf(M.mtxInt),drf(Weights.graphInt))
 *             if M.ctype=="float":
 */
    }

    /* "miololib.pyx":2621
 *             if M.ctype=="int":
 *                 return self.view(drf(M.mtxInt),drf(Weights.graphInt))
 *             if M.ctype=="float":             # <<<<<<<<<<<<<<
 *                 return self.view(drf(M.mtxFloat),drf(Weights.graphFloat))
 *             if M.ctype=="double":
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2621, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 2621, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_4) {

      /* "miololib.pyx":2622
 *                 return self.view(drf(M.mtxInt),drf(Weights.graphInt))
 *             if M.ctype=="float":
 *                 return self.view(drf(M.mtxFloat),drf(Weights.graphFloat))             # <<<<<<<<<<<<<<
 *             if M.ctype=="double":
 *                 return self.view(drf(M.mtxDouble),drf(Weights.graphDouble))
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->view((*__pyx_v_M->__pyx_base.mtxFloat), (*__pyx_v_Weights->graphFloat))); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2622, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_r = __pyx_t_1;
      __pyx_t_1 = 0;
      goto __pyx_L0;

      /* "miololib.pyx":2621
 *             if M.ctype=="int":
 *                 return self.view(drf(M.mtxInt),drf(Weights.graphInt))
 *             if M.ctype=="float":             # <<<<<<<<<<<<<<
 *                 return self.view(drf(M.mtxFloat),drf(Weights.graphFloat))
 *             if M.ctype=="double":
 */
    }

    /* "miololib.pyx":2623
 *             if M.ctype=="float":
 *                 return self.view(drf(M.mtxFloat),drf(Weights.graphFloat))
 *             if M.ctype=="double":             # <<<<<<<<<<<<<<
 *                 return self.view(drf(M.mtxDouble),drf(Weights.graphDouble))
 * 
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_M), __pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2623, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 2623, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_4) {

      /* "miololib.pyx":2624
 *                 return self.view(drf(M.mtxFloat),drf(Weights.graphFloat))
 *             if M.ctype=="double":
 *                 return self.view(drf(M.mtxDouble),drf(Weights.graphDouble))             # <<<<<<<<<<<<<<
 * 
 * cdef class pottsEnergy:
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->view((*__pyx_v_M->__pyx_base.mtxDouble), (*__pyx_v_Weights->graphDouble))); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2624, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_r = __pyx_t_1;
      __pyx_t_1 = 0;
      goto __pyx_L0;

      /* "miololib.pyx":2623
 *             if M.ctype=="float":
 *                 return self.view(drf(M.mtxFloat),drf(Weights.graphFloat))
 *             if M.ctype=="double":             # <<<<<<<<<<<<<<
 *                 return self.view(drf(M.mtxDouble),drf(Weights.graphDouble))
 * 
 */
    }

    /* "miololib.pyx":2616
 *             if M.ctype=="double":
 *                 return self.view(drf(M.mtxDouble),drf(Weights.mtxDouble))
 *         if isinstance(Weights,Graph):             # <<<<<<<<<<<<<<
 *             if Weights.nodes!=M.rows:
 *                 raise Exception("Weights.nodes must be equal to M.rows.")
 */
  }

  /* "miololib.pyx":2596
 *     cdef mld.weightedDot view
 * 
 *     def __call__(self, Matrix M, mioloObject Weights):             # <<<<<<<<<<<<<<
 *         """
 *             Computes the sum of dot products of rows in M weighted by Weights. M and
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("miolo.weightedDotProduct.__call__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_18weightedDotProduct_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_18weightedDotProduct_2__reduce_cython__, "weightedDotProduct.__reduce_cython__(self)");
static PyMethodDef __pyx_mdef_5miolo_18weightedDotProduct_3__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_18weightedDotProduct_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_18weightedDotProduct_2__reduce_cython__};
static PyObject *__pyx_pw_5miolo_18weightedDotProduct_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_5miolo_18weightedDotProduct_2__reduce_cython__(((struct __pyx_obj_5miolo_weightedDotProduct *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_18weightedDotProduct_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_weightedDotProduct *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_view_cannot_be_converted_to, 0, 0);
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("miolo.weightedDotProduct.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_18weightedDotProduct_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_18weightedDotProduct_4__setstate_cython__, "weightedDotProduct.__setstate_cython__(self, __pyx_state)");
static PyMethodDef __pyx_mdef_5miolo_18weightedDotProduct_5__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_18weightedDotProduct_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_18weightedDotProduct_4__setstate_cython__};
static PyObject *__pyx_pw_5miolo_18weightedDotProduct_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(0, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.weightedDotProduct.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5miolo_18weightedDotProduct_4__setstate_cython__(((struct __pyx_obj_5miolo_weightedDotProduct *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_18weightedDotProduct_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_weightedDotProduct *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_view_cannot_be_converted_to, 0, 0);
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("miolo.weightedDotProduct.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "miololib.pyx":2630
 *     cdef mld.pottsEnergy view
 * 
 *     def __call__(self, mioloObject Weights, int[:] labels):             # <<<<<<<<<<<<<<
 *         """
 *             Computes the sum of pairwise similarities between nodes with the
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_11pottsEnergy_1__call__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_11pottsEnergy___call__, "\n            Computes the sum of pairwise similarities between nodes with the\n            same label.\n        ");
#if CYTHON_UPDATE_DESCRIPTOR_DOC
struct wrapperbase __pyx_wrapperbase_5miolo_11pottsEnergy___call__;
#endif
static PyObject *__pyx_pw_5miolo_11pottsEnergy_1__call__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_5miolo_mioloObject *__pyx_v_Weights = 0;
  __Pyx_memviewslice __pyx_v_labels = { 0, 0, { 0 }, { 0 }, { 0 } };
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__call__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_Weights,&__pyx_n_s_labels,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_Weights)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 2630, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_labels)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 2630, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__call__", 1, 2, 2, 1); __PYX_ERR(1, 2630, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__call__") < 0)) __PYX_ERR(1, 2630, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
      values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
    }
    __pyx_v_Weights = ((struct __pyx_obj_5miolo_mioloObject *)values[0]);
    __pyx_v_labels = __Pyx_PyObject_to_MemoryviewSlice_ds_int(values[1], PyBUF_WRITABLE); if (unlikely(!__pyx_v_labels.memview)) __PYX_ERR(1, 2630, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__call__", 1, 2, 2, __pyx_nargs); __PYX_ERR(1, 2630, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __PYX_XCLEAR_MEMVIEW(&__pyx_v_labels, 1);
  __Pyx_AddTraceback("miolo.pottsEnergy.__call__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_Weights), __pyx_ptype_5miolo_mioloObject, 1, "Weights", 0))) __PYX_ERR(1, 2630, __pyx_L1_error)
  __pyx_r = __pyx_pf_5miolo_11pottsEnergy___call__(((struct __pyx_obj_5miolo_pottsEnergy *)__pyx_v_self), __pyx_v_Weights, __pyx_v_labels);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XCLEAR_MEMVIEW(&__pyx_v_labels, 1);
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_11pottsEnergy___call__(struct __pyx_obj_5miolo_pottsEnergy *__pyx_v_self, struct __pyx_obj_5miolo_mioloObject *__pyx_v_Weights, __Pyx_memviewslice __pyx_v_labels) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__call__", 1);

  /* "miololib.pyx":2635
 *             same label.
 *         """
 *         if isinstance(Weights,Matrix):             # <<<<<<<<<<<<<<
 *             if Weights.rows!=Weights.cols:
 *                 raise Exception("Only square weight matrices are allowed.")
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_Weights), __pyx_ptype_5miolo_Matrix); 
  if (__pyx_t_1) {

    /* "miololib.pyx":2636
 *         """
 *         if isinstance(Weights,Matrix):
 *             if Weights.rows!=Weights.cols:             # <<<<<<<<<<<<<<
 *                 raise Exception("Only square weight matrices are allowed.")
 *             if Weights.rows!=labels.size:
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_Weights), __pyx_n_s_rows); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2636, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_Weights), __pyx_n_s_cols); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2636, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyObject_RichCompare(__pyx_t_2, __pyx_t_3, Py_NE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2636, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 2636, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(__pyx_t_1)) {

      /* "miololib.pyx":2637
 *         if isinstance(Weights,Matrix):
 *             if Weights.rows!=Weights.cols:
 *                 raise Exception("Only square weight matrices are allowed.")             # <<<<<<<<<<<<<<
 *             if Weights.rows!=labels.size:
 *                 raise Exception("Size of labels must be equal to Weights.rows.")
 */
      __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__83, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2637, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __PYX_ERR(1, 2637, __pyx_L1_error)

      /* "miololib.pyx":2636
 *         """
 *         if isinstance(Weights,Matrix):
 *             if Weights.rows!=Weights.cols:             # <<<<<<<<<<<<<<
 *                 raise Exception("Only square weight matrices are allowed.")
 *             if Weights.rows!=labels.size:
 */
    }

    /* "miololib.pyx":2638
 *             if Weights.rows!=Weights.cols:
 *                 raise Exception("Only square weight matrices are allowed.")
 *             if Weights.rows!=labels.size:             # <<<<<<<<<<<<<<
 *                 raise Exception("Size of labels must be equal to Weights.rows.")
 *             if Weights.ctype=="int":
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_Weights), __pyx_n_s_rows); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2638, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_labels, 1, (PyObject *(*)(char *)) __pyx_memview_get_int, (int (*)(char *, PyObject *)) __pyx_memview_set_int, 0);; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2638, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_size); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2638, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_4, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2638, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 2638, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(__pyx_t_1)) {

      /* "miololib.pyx":2639
 *                 raise Exception("Only square weight matrices are allowed.")
 *             if Weights.rows!=labels.size:
 *                 raise Exception("Size of labels must be equal to Weights.rows.")             # <<<<<<<<<<<<<<
 *             if Weights.ctype=="int":
 *                 return self.view(drf(Weights.mtxInt),&labels[0])
 */
      __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__86, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2639, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(1, 2639, __pyx_L1_error)

      /* "miololib.pyx":2638
 *             if Weights.rows!=Weights.cols:
 *                 raise Exception("Only square weight matrices are allowed.")
 *             if Weights.rows!=labels.size:             # <<<<<<<<<<<<<<
 *                 raise Exception("Size of labels must be equal to Weights.rows.")
 *             if Weights.ctype=="int":
 */
    }

    /* "miololib.pyx":2640
 *             if Weights.rows!=labels.size:
 *                 raise Exception("Size of labels must be equal to Weights.rows.")
 *             if Weights.ctype=="int":             # <<<<<<<<<<<<<<
 *                 return self.view(drf(Weights.mtxInt),&labels[0])
 *             if Weights.ctype=="float":
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_Weights), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2640, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 2640, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_1) {

      /* "miololib.pyx":2641
 *                 raise Exception("Size of labels must be equal to Weights.rows.")
 *             if Weights.ctype=="int":
 *                 return self.view(drf(Weights.mtxInt),&labels[0])             # <<<<<<<<<<<<<<
 *             if Weights.ctype=="float":
 *                 return self.view(drf(Weights.mtxFloat),&labels[0])
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_5 = 0;
      if (__pyx_t_5 < 0) __pyx_t_5 += __pyx_v_labels.shape[0];
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_self->view((*__pyx_v_Weights->mtxInt), (&(*((int *) ( /* dim=0 */ (__pyx_v_labels.data + __pyx_t_5 * __pyx_v_labels.strides[0]) )))))); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2641, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "miololib.pyx":2640
 *             if Weights.rows!=labels.size:
 *                 raise Exception("Size of labels must be equal to Weights.rows.")
 *             if Weights.ctype=="int":             # <<<<<<<<<<<<<<
 *                 return self.view(drf(Weights.mtxInt),&labels[0])
 *             if Weights.ctype=="float":
 */
    }

    /* "miololib.pyx":2642
 *             if Weights.ctype=="int":
 *                 return self.view(drf(Weights.mtxInt),&labels[0])
 *             if Weights.ctype=="float":             # <<<<<<<<<<<<<<
 *                 return self.view(drf(Weights.mtxFloat),&labels[0])
 *             if Weights.ctype=="double":
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_Weights), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2642, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 2642, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_1) {

      /* "miololib.pyx":2643
 *                 return self.view(drf(Weights.mtxInt),&labels[0])
 *             if Weights.ctype=="float":
 *                 return self.view(drf(Weights.mtxFloat),&labels[0])             # <<<<<<<<<<<<<<
 *             if Weights.ctype=="double":
 *                 return self.view(drf(Weights.mtxDouble),&labels[0])
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_5 = 0;
      if (__pyx_t_5 < 0) __pyx_t_5 += __pyx_v_labels.shape[0];
      __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->view((*__pyx_v_Weights->mtxFloat), (&(*((int *) ( /* dim=0 */ (__pyx_v_labels.data + __pyx_t_5 * __pyx_v_labels.strides[0]) )))))); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2643, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "miololib.pyx":2642
 *             if Weights.ctype=="int":
 *                 return self.view(drf(Weights.mtxInt),&labels[0])
 *             if Weights.ctype=="float":             # <<<<<<<<<<<<<<
 *                 return self.view(drf(Weights.mtxFloat),&labels[0])
 *             if Weights.ctype=="double":
 */
    }

    /* "miololib.pyx":2644
 *             if Weights.ctype=="float":
 *                 return self.view(drf(Weights.mtxFloat),&labels[0])
 *             if Weights.ctype=="double":             # <<<<<<<<<<<<<<
 *                 return self.view(drf(Weights.mtxDouble),&labels[0])
 *         if isinstance(Weights,Graph):
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_Weights), __pyx_n_s_ctype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2644, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 2644, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_1) {

      /* "miololib.pyx":2645
 *                 return self.view(drf(Weights.mtxFloat),&labels[0])
 *             if Weights.ctype=="double":
 *                 return self.view(drf(Weights.mtxDouble),&labels[0])             # <<<<<<<<<<<<<<
 *         if isinstance(Weights,Graph):
 *             if Weights.nodes!=labels.size:
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_5 = 0;
      if (__pyx_t_5 < 0) __pyx_t_5 += __pyx_v_labels.shape[0];
      __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->view((*__pyx_v_Weights->mtxDouble), (&(*((int *) ( /* dim=0 */ (__pyx_v_labels.data + __pyx_t_5 * __pyx_v_labels.strides[0]) )))))); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2645, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "miololib.pyx":2644
 *             if Weights.ctype=="float":
 *                 return self.view(drf(Weights.mtxFloat),&labels[0])
 *             if Weights.ctype=="double":             # <<<<<<<<<<<<<<
 *                 return self.view(drf(Weights.mtxDouble),&labels[0])
 *         if isinstance(Weights,Graph):
 */
    }

    /* "miololib.pyx":2635
 *             same label.
 *         """
 *         if isinstance(Weights,Matrix):             # <<<<<<<<<<<<<<
 *             if Weights.rows!=Weights.cols:
 *                 raise Exception("Only square weight matrices are allowed.")
 */
  }

  /* "miololib.pyx":2646
 *             if Weights.ctype=="double":
 *                 return self.view(drf(Weights.mtxDouble),&labels[0])
 *         if isinstance(Weights,Graph):             # <<<<<<<<<<<<<<
 *             if Weights.nodes!=labels.size:
 *                 raise Exception("Size of labels must be equal to Weights.nodes")
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_Weights), __pyx_ptype_5miolo_Graph); 
  if (__pyx_t_1) {

    /* "miololib.pyx":2647
 *                 return self.view(drf(Weights.mtxDouble),&labels[0])
 *         if isinstance(Weights,Graph):
 *             if Weights.nodes!=labels.size:             # <<<<<<<<<<<<<<
 *                 raise Exception("Size of labels must be equal to Weights.nodes")
 *             if Weights.ctype=="int":
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_Weights), __pyx_n_s_nodes); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2647, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __pyx_memoryview_fromslice(__pyx_v_labels, 1, (PyObject *(*)(char *)) __pyx_memview_get_int, (int (*)(char *, PyObject *)) __pyx_memview_set_int, 0);; if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2647, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_size); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2647, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_RichCompare(__pyx_t_3, __pyx_t_4, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2647, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 2647, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(__pyx_t_1)) {

      /* "miololib.pyx":2648
 *         if isinstance(Weights,Graph):
 *             if Weights.nodes!=labels.size:
 *                 raise Exception("Size of labels must be equal to Weights.nodes")             # <<<<<<<<<<<<<<
 *             if Weights.ctype=="int":
 *                 return self.view(drf(Weights.graphInt),&labels[0])
 */
      __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__87, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2648, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_Raise(__pyx_t_2, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __PYX_ERR(1, 2648, __pyx_L1_error)

      /* "miololib.pyx":2647
 *                 return self.view(drf(Weights.mtxDouble),&labels[0])
 *         if isinstance(Weights,Graph):
 *             if Weights.nodes!=labels.size:             # <<<<<<<<<<<<<<
 *                 raise Exception("Size of labels must be equal to Weights.nodes")
 *             if Weights.ctype=="int":
 */
    }

    /* "miololib.pyx":2649
 *             if Weights.nodes!=labels.size:
 *                 raise Exception("Size of labels must be equal to Weights.nodes")
 *             if Weights.ctype=="int":             # <<<<<<<<<<<<<<
 *                 return self.view(drf(Weights.graphInt),&labels[0])
 *             if Weights.ctype=="float":
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_Weights), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2649, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_int, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 2649, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_1) {

      /* "miololib.pyx":2650
 *                 raise Exception("Size of labels must be equal to Weights.nodes")
 *             if Weights.ctype=="int":
 *                 return self.view(drf(Weights.graphInt),&labels[0])             # <<<<<<<<<<<<<<
 *             if Weights.ctype=="float":
 *                 return self.view(drf(Weights.graphFloat),&labels[0])
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_5 = 0;
      if (__pyx_t_5 < 0) __pyx_t_5 += __pyx_v_labels.shape[0];
      __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->view((*__pyx_v_Weights->graphInt), (&(*((int *) ( /* dim=0 */ (__pyx_v_labels.data + __pyx_t_5 * __pyx_v_labels.strides[0]) )))))); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2650, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      goto __pyx_L0;

      /* "miololib.pyx":2649
 *             if Weights.nodes!=labels.size:
 *                 raise Exception("Size of labels must be equal to Weights.nodes")
 *             if Weights.ctype=="int":             # <<<<<<<<<<<<<<
 *                 return self.view(drf(Weights.graphInt),&labels[0])
 *             if Weights.ctype=="float":
 */
    }

    /* "miololib.pyx":2651
 *             if Weights.ctype=="int":
 *                 return self.view(drf(Weights.graphInt),&labels[0])
 *             if Weights.ctype=="float":             # <<<<<<<<<<<<<<
 *                 return self.view(drf(Weights.graphFloat),&labels[0])
 *             if Weights.ctype=="double":
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_Weights), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2651, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_float, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 2651, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_1) {

      /* "miololib.pyx":2652
 *                 return self.view(drf(Weights.graphInt),&labels[0])
 *             if Weights.ctype=="float":
 *                 return self.view(drf(Weights.graphFloat),&labels[0])             # <<<<<<<<<<<<<<
 *             if Weights.ctype=="double":
 *                 return self.view(drf(Weights.graphDouble),&labels[0])
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_5 = 0;
      if (__pyx_t_5 < 0) __pyx_t_5 += __pyx_v_labels.shape[0];
      __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->view((*__pyx_v_Weights->graphFloat), (&(*((int *) ( /* dim=0 */ (__pyx_v_labels.data + __pyx_t_5 * __pyx_v_labels.strides[0]) )))))); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2652, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      goto __pyx_L0;

      /* "miololib.pyx":2651
 *             if Weights.ctype=="int":
 *                 return self.view(drf(Weights.graphInt),&labels[0])
 *             if Weights.ctype=="float":             # <<<<<<<<<<<<<<
 *                 return self.view(drf(Weights.graphFloat),&labels[0])
 *             if Weights.ctype=="double":
 */
    }

    /* "miololib.pyx":2653
 *             if Weights.ctype=="float":
 *                 return self.view(drf(Weights.graphFloat),&labels[0])
 *             if Weights.ctype=="double":             # <<<<<<<<<<<<<<
 *                 return self.view(drf(Weights.graphDouble),&labels[0])
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_Weights), __pyx_n_s_ctype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2653, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_double, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 2653, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_1) {

      /* "miololib.pyx":2654
 *                 return self.view(drf(Weights.graphFloat),&labels[0])
 *             if Weights.ctype=="double":
 *                 return self.view(drf(Weights.graphDouble),&labels[0])             # <<<<<<<<<<<<<<
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_5 = 0;
      if (__pyx_t_5 < 0) __pyx_t_5 += __pyx_v_labels.shape[0];
      __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->view((*__pyx_v_Weights->graphDouble), (&(*((int *) ( /* dim=0 */ (__pyx_v_labels.data + __pyx_t_5 * __pyx_v_labels.strides[0]) )))))); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2654, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      goto __pyx_L0;

      /* "miololib.pyx":2653
 *             if Weights.ctype=="float":
 *                 return self.view(drf(Weights.graphFloat),&labels[0])
 *             if Weights.ctype=="double":             # <<<<<<<<<<<<<<
 *                 return self.view(drf(Weights.graphDouble),&labels[0])
 */
    }

    /* "miololib.pyx":2646
 *             if Weights.ctype=="double":
 *                 return self.view(drf(Weights.mtxDouble),&labels[0])
 *         if isinstance(Weights,Graph):             # <<<<<<<<<<<<<<
 *             if Weights.nodes!=labels.size:
 *                 raise Exception("Size of labels must be equal to Weights.nodes")
 */
  }

  /* "miololib.pyx":2630
 *     cdef mld.pottsEnergy view
 * 
 *     def __call__(self, mioloObject Weights, int[:] labels):             # <<<<<<<<<<<<<<
 *         """
 *             Computes the sum of pairwise similarities between nodes with the
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("miolo.pottsEnergy.__call__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_11pottsEnergy_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_11pottsEnergy_2__reduce_cython__, "pottsEnergy.__reduce_cython__(self)");
static PyMethodDef __pyx_mdef_5miolo_11pottsEnergy_3__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_11pottsEnergy_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_11pottsEnergy_2__reduce_cython__};
static PyObject *__pyx_pw_5miolo_11pottsEnergy_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_5miolo_11pottsEnergy_2__reduce_cython__(((struct __pyx_obj_5miolo_pottsEnergy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_11pottsEnergy_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_pottsEnergy *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_view_cannot_be_converted_to, 0, 0);
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("miolo.pottsEnergy.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_11pottsEnergy_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_11pottsEnergy_4__setstate_cython__, "pottsEnergy.__setstate_cython__(self, __pyx_state)");
static PyMethodDef __pyx_mdef_5miolo_11pottsEnergy_5__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_11pottsEnergy_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_11pottsEnergy_4__setstate_cython__};
static PyObject *__pyx_pw_5miolo_11pottsEnergy_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(0, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.pottsEnergy.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5miolo_11pottsEnergy_4__setstate_cython__(((struct __pyx_obj_5miolo_pottsEnergy *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_11pottsEnergy_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5miolo_pottsEnergy *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_view_cannot_be_converted_to, 0, 0);
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("miolo.pottsEnergy.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_Manifold(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_5miolo_13__pyx_unpickle_Manifold(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5miolo_12__pyx_unpickle_Manifold, "__pyx_unpickle_Manifold(__pyx_type, long __pyx_checksum, __pyx_state)");
static PyMethodDef __pyx_mdef_5miolo_13__pyx_unpickle_Manifold = {"__pyx_unpickle_Manifold", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_13__pyx_unpickle_Manifold, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_12__pyx_unpickle_Manifold};
static PyObject *__pyx_pw_5miolo_13__pyx_unpickle_Manifold(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_Manifold (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_type)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_checksum)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Manifold", 1, 3, 3, 1); __PYX_ERR(0, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Manifold", 1, 3, 3, 2); __PYX_ERR(0, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__pyx_unpickle_Manifold") < 0)) __PYX_ERR(0, 1, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Manifold", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 1, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("miolo.__pyx_unpickle_Manifold", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5miolo_12__pyx_unpickle_Manifold(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5miolo_12__pyx_unpickle_Manifold(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Manifold", 1);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xe3b0c44, 0xda39a3e, 0xd41d8cd):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe3b0c44, 0xda39a3e, 0xd41d8cd) = ())" % __pyx_checksum
 */
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_tuple__88, Py_NE)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xe3b0c44, 0xda39a3e, 0xd41d8cd):
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe3b0c44, 0xda39a3e, 0xd41d8cd) = ())" % __pyx_checksum
 *     __pyx_result = Manifold.__new__(__pyx_type)
 */
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_PickleError)) __PYX_ERR(0, 5, __pyx_L1_error);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v___pyx_PickleError = __pyx_t_1;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum not in (0xe3b0c44, 0xda39a3e, 0xd41d8cd):
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe3b0c44, 0xda39a3e, 0xd41d8cd) = ())" % __pyx_checksum             # <<<<<<<<<<<<<<
 *     __pyx_result = Manifold.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_v___pyx_PickleError, __pyx_t_1, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xe3b0c44, 0xda39a3e, 0xd41d8cd):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe3b0c44, 0xda39a3e, 0xd41d8cd) = ())" % __pyx_checksum
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe3b0c44, 0xda39a3e, 0xd41d8cd) = ())" % __pyx_checksum
 *     __pyx_result = Manifold.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Manifold__set_state(<Manifold> __pyx_result, __pyx_state)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_5miolo_Manifold), __pyx_n_s_new); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v___pyx_type};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_v___pyx_result = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe3b0c44, 0xda39a3e, 0xd41d8cd) = ())" % __pyx_checksum
 *     __pyx_result = Manifold.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Manifold__set_state(<Manifold> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_2 = (__pyx_v___pyx_state != Py_None);
  if (__pyx_t_2) {

    /* "(tree fragment)":9
 *     __pyx_result = Manifold.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Manifold__set_state(<Manifold> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_Manifold__set_state(Manifold __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v___pyx_state))) __PYX_ERR(0, 9, __pyx_L1_error)
    __pyx_t_1 = __pyx_f_5miolo___pyx_unpickle_Manifold__set_state(((struct __pyx_obj_5miolo_Manifold *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe3b0c44, 0xda39a3e, 0xd41d8cd) = ())" % __pyx_checksum
 *     __pyx_result = Manifold.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Manifold__set_state(<Manifold> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Manifold__set_state(<Manifold> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_Manifold__set_state(Manifold __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_Manifold(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("miolo.__pyx_unpickle_Manifold", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_Manifold__set_state(<Manifold> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Manifold__set_state(Manifold __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */

static PyObject *__pyx_f_5miolo___pyx_unpickle_Manifold__set_state(struct __pyx_obj_5miolo_Manifold *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Manifold__set_state", 1);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_Manifold__set_state(Manifold __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 12, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 12, __pyx_L1_error)
  __pyx_t_3 = (__pyx_t_2 > 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 12, __pyx_L1_error)
  __pyx_t_1 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_Manifold__set_state(Manifold __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])             # <<<<<<<<<<<<<<
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_update); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 13, __pyx_L1_error)
    }
    __pyx_t_5 = NULL;
    __pyx_t_7 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_7 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_5, PyTuple_GET_ITEM(__pyx_v___pyx_state, 0)};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 13, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_Manifold__set_state(Manifold __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_Manifold__set_state(<Manifold> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Manifold__set_state(Manifold __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("miolo.__pyx_unpickle_Manifold__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_5miolo_mioloObject(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  return o;
}

static void __pyx_tp_dealloc_5miolo_mioloObject(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_5miolo_mioloObject) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static PyObject *__pyx_getprop_5miolo_11mioloObject_ctype(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5miolo_11mioloObject_5ctype_1__get__(o);
}

static PyObject *__pyx_getprop_5miolo_11mioloObject_rows(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5miolo_11mioloObject_4rows_1__get__(o);
}

static PyObject *__pyx_getprop_5miolo_11mioloObject_cols(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5miolo_11mioloObject_4cols_1__get__(o);
}

static PyObject *__pyx_getprop_5miolo_11mioloObject_nodes(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5miolo_11mioloObject_5nodes_1__get__(o);
}

static PyObject *__pyx_getprop_5miolo_11mioloObject_dim(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5miolo_11mioloObject_3dim_1__get__(o);
}

static PyMethodDef __pyx_methods_5miolo_mioloObject[] = {
  {"isMatrix", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_11mioloObject_1isMatrix, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_11mioloObject_isMatrix},
  {"isGraph", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_11mioloObject_3isGraph, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_11mioloObject_2isGraph},
  {"isDigraph", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_11mioloObject_5isDigraph, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_11mioloObject_4isDigraph},
  {"isDiagonal", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_11mioloObject_7isDiagonal, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_11mioloObject_6isDiagonal},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_11mioloObject_9__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_11mioloObject_8__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_11mioloObject_11__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_11mioloObject_10__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5miolo_mioloObject[] = {
  {(char *)"ctype", __pyx_getprop_5miolo_11mioloObject_ctype, 0, (char *)0, 0},
  {(char *)"rows", __pyx_getprop_5miolo_11mioloObject_rows, 0, (char *)0, 0},
  {(char *)"cols", __pyx_getprop_5miolo_11mioloObject_cols, 0, (char *)0, 0},
  {(char *)"nodes", __pyx_getprop_5miolo_11mioloObject_nodes, 0, (char *)0, 0},
  {(char *)"dim", __pyx_getprop_5miolo_11mioloObject_dim, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_5miolo_mioloObject_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_5miolo_mioloObject},
  {Py_tp_doc, (void *)PyDoc_STR("\n        A container object for four objects in the miolo library. This is usually\n        not useful outside Cython.\n    ")},
  {Py_tp_methods, (void *)__pyx_methods_5miolo_mioloObject},
  {Py_tp_getset, (void *)__pyx_getsets_5miolo_mioloObject},
  {Py_tp_new, (void *)__pyx_tp_new_5miolo_mioloObject},
  {0, 0},
};
static PyType_Spec __pyx_type_5miolo_mioloObject_spec = {
  "miolo.mioloObject",
  sizeof(struct __pyx_obj_5miolo_mioloObject),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_5miolo_mioloObject_slots,
};
#else

static PyTypeObject __pyx_type_5miolo_mioloObject = {
  PyVarObject_HEAD_INIT(0, 0)
  "miolo.""mioloObject", /*tp_name*/
  sizeof(struct __pyx_obj_5miolo_mioloObject), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5miolo_mioloObject, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  PyDoc_STR("\n        A container object for four objects in the miolo library. This is usually\n        not useful outside Cython.\n    "), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5miolo_mioloObject, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5miolo_mioloObject, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5miolo_mioloObject, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_5miolo_Matrix(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_5miolo_Matrix *p;
  PyObject *o = __pyx_tp_new_5miolo_mioloObject(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5miolo_Matrix *)o);
  p->cType = Py_None; Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_5miolo_6Matrix_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5miolo_Matrix(PyObject *o) {
  struct __pyx_obj_5miolo_Matrix *p = (struct __pyx_obj_5miolo_Matrix *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_5miolo_Matrix) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_5miolo_6Matrix_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->cType);
  __pyx_tp_dealloc_5miolo_mioloObject(o);
}

static int __pyx_tp_traverse_5miolo_Matrix(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5miolo_Matrix *p = (struct __pyx_obj_5miolo_Matrix *)o;
  e = ((likely(__pyx_ptype_5miolo_mioloObject)) ? ((__pyx_ptype_5miolo_mioloObject->tp_traverse) ? __pyx_ptype_5miolo_mioloObject->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_5miolo_Matrix)); if (e) return e;
  if (p->cType) {
    e = (*v)(p->cType, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5miolo_Matrix(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5miolo_Matrix *p = (struct __pyx_obj_5miolo_Matrix *)o;
  if (likely(__pyx_ptype_5miolo_mioloObject)) { if (__pyx_ptype_5miolo_mioloObject->tp_clear) __pyx_ptype_5miolo_mioloObject->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_5miolo_Matrix);
  tmp = ((PyObject*)p->cType);
  p->cType = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_5miolo_Matrix(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static int __pyx_mp_ass_subscript_5miolo_Matrix(PyObject *o, PyObject *i, PyObject *v) {
  if (v) {
    return __pyx_pw_5miolo_6Matrix_9__setitem__(o, i, v);
  }
  else {
    __Pyx_TypeName o_type_name;
    if (__pyx_ptype_5miolo_mioloObject->tp_as_mapping && __pyx_ptype_5miolo_mioloObject->tp_as_mapping->mp_ass_subscript)
      return __pyx_ptype_5miolo_mioloObject->tp_as_mapping->mp_ass_subscript(o, i, v);
    o_type_name = __Pyx_PyType_GetName(Py_TYPE(o));
    PyErr_Format(PyExc_NotImplementedError,
      "Subscript deletion not supported by " __Pyx_FMT_TYPENAME, o_type_name);
    __Pyx_DECREF_TypeName(o_type_name);
    return -1;
  }
}

static CYTHON_INLINE PyObject *__pyx_nb_add_5miolo_Matrix_maybe_call_slot(PyTypeObject* type, PyObject *left, PyObject *right ) {
    binaryfunc slot;
#if CYTHON_USE_TYPE_SLOTS || PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
    slot = type->tp_as_number ? type->tp_as_number->nb_add : NULL;
#else
    slot = (binaryfunc) PyType_GetSlot(type, Py_nb_add);
#endif
    return slot ? slot(left, right ) : __Pyx_NewRef(Py_NotImplemented);
}
static PyObject *__pyx_nb_add_5miolo_Matrix(PyObject *left, PyObject *right ) {
    int maybe_self_is_left, maybe_self_is_right = 0;
    maybe_self_is_left = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(left)->tp_as_number && Py_TYPE(left)->tp_as_number->nb_add == &__pyx_nb_add_5miolo_Matrix)
#endif
            || __Pyx_TypeCheck(left, __pyx_ptype_5miolo_Matrix);
    if (maybe_self_is_left) {
        PyObject *res;
        res = __pyx_pw_5miolo_6Matrix_37__add__(left, right);
        if (res != Py_NotImplemented) return res;
        Py_DECREF(res);
    }
    maybe_self_is_right = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(right)->tp_as_number && Py_TYPE(right)->tp_as_number->nb_add == &__pyx_nb_add_5miolo_Matrix)
#endif
            || PyType_IsSubtype(Py_TYPE(right), __pyx_ptype_5miolo_Matrix);
    if (maybe_self_is_right) {
        return __pyx_nb_add_5miolo_Matrix_maybe_call_slot(__Pyx_PyType_GetSlot(__pyx_ptype_5miolo_Matrix, tp_base, PyTypeObject*), left, right );
    }
    return __Pyx_NewRef(Py_NotImplemented);
}



static CYTHON_INLINE PyObject *__pyx_nb_subtract_5miolo_Matrix_maybe_call_slot(PyTypeObject* type, PyObject *left, PyObject *right ) {
    binaryfunc slot;
#if CYTHON_USE_TYPE_SLOTS || PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
    slot = type->tp_as_number ? type->tp_as_number->nb_subtract : NULL;
#else
    slot = (binaryfunc) PyType_GetSlot(type, Py_nb_subtract);
#endif
    return slot ? slot(left, right ) : __Pyx_NewRef(Py_NotImplemented);
}
static PyObject *__pyx_nb_subtract_5miolo_Matrix(PyObject *left, PyObject *right ) {
    int maybe_self_is_left, maybe_self_is_right = 0;
    maybe_self_is_left = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(left)->tp_as_number && Py_TYPE(left)->tp_as_number->nb_subtract == &__pyx_nb_subtract_5miolo_Matrix)
#endif
            || __Pyx_TypeCheck(left, __pyx_ptype_5miolo_Matrix);
    if (maybe_self_is_left) {
        PyObject *res;
        res = __pyx_pw_5miolo_6Matrix_39__sub__(left, right);
        if (res != Py_NotImplemented) return res;
        Py_DECREF(res);
    }
    maybe_self_is_right = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(right)->tp_as_number && Py_TYPE(right)->tp_as_number->nb_subtract == &__pyx_nb_subtract_5miolo_Matrix)
#endif
            || PyType_IsSubtype(Py_TYPE(right), __pyx_ptype_5miolo_Matrix);
    if (maybe_self_is_right) {
        return __pyx_nb_subtract_5miolo_Matrix_maybe_call_slot(__Pyx_PyType_GetSlot(__pyx_ptype_5miolo_Matrix, tp_base, PyTypeObject*), left, right );
    }
    return __Pyx_NewRef(Py_NotImplemented);
}



static CYTHON_INLINE PyObject *__pyx_nb_multiply_5miolo_Matrix_maybe_call_slot(PyTypeObject* type, PyObject *left, PyObject *right ) {
    binaryfunc slot;
#if CYTHON_USE_TYPE_SLOTS || PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
    slot = type->tp_as_number ? type->tp_as_number->nb_multiply : NULL;
#else
    slot = (binaryfunc) PyType_GetSlot(type, Py_nb_multiply);
#endif
    return slot ? slot(left, right ) : __Pyx_NewRef(Py_NotImplemented);
}
static PyObject *__pyx_nb_multiply_5miolo_Matrix(PyObject *left, PyObject *right ) {
    int maybe_self_is_left, maybe_self_is_right = 0;
    maybe_self_is_left = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(left)->tp_as_number && Py_TYPE(left)->tp_as_number->nb_multiply == &__pyx_nb_multiply_5miolo_Matrix)
#endif
            || __Pyx_TypeCheck(left, __pyx_ptype_5miolo_Matrix);
    if (maybe_self_is_left) {
        PyObject *res;
        res = __pyx_pw_5miolo_6Matrix_41__mul__(left, right);
        if (res != Py_NotImplemented) return res;
        Py_DECREF(res);
    }
    maybe_self_is_right = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(right)->tp_as_number && Py_TYPE(right)->tp_as_number->nb_multiply == &__pyx_nb_multiply_5miolo_Matrix)
#endif
            || PyType_IsSubtype(Py_TYPE(right), __pyx_ptype_5miolo_Matrix);
    if (maybe_self_is_right) {
        return __pyx_pw_5miolo_6Matrix_43__rmul__(right, left);
    }
    return __Pyx_NewRef(Py_NotImplemented);
}



static CYTHON_INLINE PyObject *__pyx_nb_remainder_5miolo_Matrix_maybe_call_slot(PyTypeObject* type, PyObject *left, PyObject *right ) {
    binaryfunc slot;
#if CYTHON_USE_TYPE_SLOTS || PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
    slot = type->tp_as_number ? type->tp_as_number->nb_remainder : NULL;
#else
    slot = (binaryfunc) PyType_GetSlot(type, Py_nb_remainder);
#endif
    return slot ? slot(left, right ) : __Pyx_NewRef(Py_NotImplemented);
}
static PyObject *__pyx_nb_remainder_5miolo_Matrix(PyObject *left, PyObject *right ) {
    int maybe_self_is_left, maybe_self_is_right = 0;
    maybe_self_is_left = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(left)->tp_as_number && Py_TYPE(left)->tp_as_number->nb_remainder == &__pyx_nb_remainder_5miolo_Matrix)
#endif
            || __Pyx_TypeCheck(left, __pyx_ptype_5miolo_Matrix);
    if (maybe_self_is_left) {
        PyObject *res;
        res = __pyx_pw_5miolo_6Matrix_49__mod__(left, right);
        if (res != Py_NotImplemented) return res;
        Py_DECREF(res);
    }
    maybe_self_is_right = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(right)->tp_as_number && Py_TYPE(right)->tp_as_number->nb_remainder == &__pyx_nb_remainder_5miolo_Matrix)
#endif
            || PyType_IsSubtype(Py_TYPE(right), __pyx_ptype_5miolo_Matrix);
    if (maybe_self_is_right) {
        return __pyx_nb_remainder_5miolo_Matrix_maybe_call_slot(__Pyx_PyType_GetSlot(__pyx_ptype_5miolo_Matrix, tp_base, PyTypeObject*), left, right );
    }
    return __Pyx_NewRef(Py_NotImplemented);
}



static CYTHON_INLINE PyObject *__pyx_nb_and_5miolo_Matrix_maybe_call_slot(PyTypeObject* type, PyObject *left, PyObject *right ) {
    binaryfunc slot;
#if CYTHON_USE_TYPE_SLOTS || PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
    slot = type->tp_as_number ? type->tp_as_number->nb_and : NULL;
#else
    slot = (binaryfunc) PyType_GetSlot(type, Py_nb_and);
#endif
    return slot ? slot(left, right ) : __Pyx_NewRef(Py_NotImplemented);
}
static PyObject *__pyx_nb_and_5miolo_Matrix(PyObject *left, PyObject *right ) {
    int maybe_self_is_left, maybe_self_is_right = 0;
    maybe_self_is_left = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(left)->tp_as_number && Py_TYPE(left)->tp_as_number->nb_and == &__pyx_nb_and_5miolo_Matrix)
#endif
            || __Pyx_TypeCheck(left, __pyx_ptype_5miolo_Matrix);
    if (maybe_self_is_left) {
        PyObject *res;
        res = __pyx_pw_5miolo_6Matrix_47__and__(left, right);
        if (res != Py_NotImplemented) return res;
        Py_DECREF(res);
    }
    maybe_self_is_right = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(right)->tp_as_number && Py_TYPE(right)->tp_as_number->nb_and == &__pyx_nb_and_5miolo_Matrix)
#endif
            || PyType_IsSubtype(Py_TYPE(right), __pyx_ptype_5miolo_Matrix);
    if (maybe_self_is_right) {
        return __pyx_nb_and_5miolo_Matrix_maybe_call_slot(__Pyx_PyType_GetSlot(__pyx_ptype_5miolo_Matrix, tp_base, PyTypeObject*), left, right );
    }
    return __Pyx_NewRef(Py_NotImplemented);
}



static CYTHON_INLINE PyObject *__pyx_nb_true_divide_5miolo_Matrix_maybe_call_slot(PyTypeObject* type, PyObject *left, PyObject *right ) {
    binaryfunc slot;
#if CYTHON_USE_TYPE_SLOTS || PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
    slot = type->tp_as_number ? type->tp_as_number->nb_true_divide : NULL;
#else
    slot = (binaryfunc) PyType_GetSlot(type, Py_nb_true_divide);
#endif
    return slot ? slot(left, right ) : __Pyx_NewRef(Py_NotImplemented);
}
static PyObject *__pyx_nb_true_divide_5miolo_Matrix(PyObject *left, PyObject *right ) {
    int maybe_self_is_left, maybe_self_is_right = 0;
    maybe_self_is_left = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(left)->tp_as_number && Py_TYPE(left)->tp_as_number->nb_true_divide == &__pyx_nb_true_divide_5miolo_Matrix)
#endif
            || __Pyx_TypeCheck(left, __pyx_ptype_5miolo_Matrix);
    if (maybe_self_is_left) {
        PyObject *res;
        res = __pyx_pw_5miolo_6Matrix_45__truediv__(left, right);
        if (res != Py_NotImplemented) return res;
        Py_DECREF(res);
    }
    maybe_self_is_right = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(right)->tp_as_number && Py_TYPE(right)->tp_as_number->nb_true_divide == &__pyx_nb_true_divide_5miolo_Matrix)
#endif
            || PyType_IsSubtype(Py_TYPE(right), __pyx_ptype_5miolo_Matrix);
    if (maybe_self_is_right) {
        return __pyx_nb_true_divide_5miolo_Matrix_maybe_call_slot(__Pyx_PyType_GetSlot(__pyx_ptype_5miolo_Matrix, tp_base, PyTypeObject*), left, right );
    }
    return __Pyx_NewRef(Py_NotImplemented);
}



static PyObject *__pyx_getprop_5miolo_6Matrix_null(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5miolo_6Matrix_4null_1__get__(o);
}

static PyObject *__pyx_getprop_5miolo_6Matrix_ctype(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5miolo_6Matrix_5ctype_1__get__(o);
}

static PyObject *__pyx_getprop_5miolo_6Matrix_rows(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5miolo_6Matrix_4rows_1__get__(o);
}

static PyObject *__pyx_getprop_5miolo_6Matrix_cols(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5miolo_6Matrix_4cols_1__get__(o);
}

static PyObject *__pyx_getprop_5miolo_6Matrix_numpy(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5miolo_6Matrix_5numpy_1__get__(o);
}

static int __pyx_setprop_5miolo_6Matrix_numpy(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5miolo_6Matrix_5numpy_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_5miolo_Matrix[] = {
  {"copy", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_6Matrix_11copy, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_6Matrix_10copy},
  {"print", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_6Matrix_13print, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_6Matrix_12print},
  {"cut", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_6Matrix_15cut, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_6Matrix_14cut},
  {"max", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_6Matrix_17max, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_6Matrix_16max},
  {"min", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_6Matrix_19min, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_6Matrix_18min},
  {"argkmax", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_6Matrix_21argkmax, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_6Matrix_20argkmax},
  {"argkmin", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_6Matrix_23argkmin, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_6Matrix_22argkmin},
  {"normalize", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_6Matrix_25normalize, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_6Matrix_24normalize},
  {"transpose", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_6Matrix_27transpose, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_6Matrix_26transpose},
  {"flatten", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_6Matrix_29flatten, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_6Matrix_28flatten},
  {"reshape", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_6Matrix_31reshape, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_6Matrix_30reshape},
  {"sparsifyThreshold", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_6Matrix_33sparsifyThreshold, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_6Matrix_32sparsifyThreshold},
  {"sparsifyKNN", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_6Matrix_35sparsifyKNN, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_6Matrix_34sparsifyKNN},
  {"__rmul__", (PyCFunction)__pyx_pw_5miolo_6Matrix_43__rmul__, METH_O|METH_COEXIST, 0},
  {"argmax", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_6Matrix_53argmax, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_6Matrix_52argmax},
  {"argmin", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_6Matrix_55argmin, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_6Matrix_54argmin},
  {"rowDistance", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_6Matrix_57rowDistance, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_6Matrix_56rowDistance},
  {"sumAll", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_6Matrix_59sumAll, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_6Matrix_58sumAll},
  {"partition", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_6Matrix_61partition, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_6Matrix_60partition},
  {"trace", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_6Matrix_63trace, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_6Matrix_62trace},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_6Matrix_65__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_6Matrix_64__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_6Matrix_67__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_6Matrix_66__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5miolo_Matrix[] = {
  {(char *)"null", __pyx_getprop_5miolo_6Matrix_null, 0, (char *)0, 0},
  {(char *)"ctype", __pyx_getprop_5miolo_6Matrix_ctype, 0, (char *)0, 0},
  {(char *)"rows", __pyx_getprop_5miolo_6Matrix_rows, 0, (char *)0, 0},
  {(char *)"cols", __pyx_getprop_5miolo_6Matrix_cols, 0, (char *)0, 0},
  {(char *)"numpy", __pyx_getprop_5miolo_6Matrix_numpy, __pyx_setprop_5miolo_6Matrix_numpy, (char *)PyDoc_STR("\n            Interaction with numpy.\n        "), 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_5miolo_Matrix_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_5miolo_Matrix},
  {Py_nb_add, (void *)__pyx_nb_add_5miolo_Matrix},
  {Py_nb_subtract, (void *)__pyx_nb_subtract_5miolo_Matrix},
  {Py_nb_multiply, (void *)__pyx_nb_multiply_5miolo_Matrix},
  {Py_nb_remainder, (void *)__pyx_nb_remainder_5miolo_Matrix},
  {Py_nb_absolute, (void *)__pyx_pw_5miolo_6Matrix_51__abs__},
  {Py_nb_and, (void *)__pyx_nb_and_5miolo_Matrix},
  {Py_nb_true_divide, (void *)__pyx_nb_true_divide_5miolo_Matrix},
  {Py_sq_length, (void *)__pyx_pw_5miolo_6Matrix_5__len__},
  {Py_sq_item, (void *)__pyx_sq_item_5miolo_Matrix},
  {Py_mp_length, (void *)__pyx_pw_5miolo_6Matrix_5__len__},
  {Py_mp_subscript, (void *)__pyx_pw_5miolo_6Matrix_7__getitem__},
  {Py_mp_ass_subscript, (void *)__pyx_mp_ass_subscript_5miolo_Matrix},
  {Py_tp_doc, (void *)PyDoc_STR("\n        A class for dense matrices. \n        Initializes a C++ object that stores a dense matrix.\n        rows: number of rows of Matrix\n        cols: number of cols of Matrix\n        ctype: underlying C type for Matrix data\n\n        Operators +-*/ are defined between matrices and scalars to replicate \n        vector space operations. Matrix multiplication is done via the __and__\n        and __rand__ operators (&). Absolute value operator __abs__ is also\n        overloaded and returns the max absolute value of elements of matrix.\n    ")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_5miolo_Matrix},
  {Py_tp_clear, (void *)__pyx_tp_clear_5miolo_Matrix},
  {Py_tp_methods, (void *)__pyx_methods_5miolo_Matrix},
  {Py_tp_getset, (void *)__pyx_getsets_5miolo_Matrix},
  {Py_tp_new, (void *)__pyx_tp_new_5miolo_Matrix},
  {0, 0},
};
static PyType_Spec __pyx_type_5miolo_Matrix_spec = {
  "miolo.Matrix",
  sizeof(struct __pyx_obj_5miolo_Matrix),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_5miolo_Matrix_slots,
};
#else

static PyNumberMethods __pyx_tp_as_number_Matrix = {
  __pyx_nb_add_5miolo_Matrix, /*nb_add*/
  __pyx_nb_subtract_5miolo_Matrix, /*nb_subtract*/
  __pyx_nb_multiply_5miolo_Matrix, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_divide*/
  #endif
  __pyx_nb_remainder_5miolo_Matrix, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  __pyx_pw_5miolo_6Matrix_51__abs__, /*nb_absolute*/
  0, /*nb_bool*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  __pyx_nb_and_5miolo_Matrix, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  __pyx_nb_true_divide_5miolo_Matrix, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  0, /*nb_index*/
  #if PY_VERSION_HEX >= 0x03050000
  0, /*nb_matrix_multiply*/
  #endif
  #if PY_VERSION_HEX >= 0x03050000
  0, /*nb_inplace_matrix_multiply*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_Matrix = {
  __pyx_pw_5miolo_6Matrix_5__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_5miolo_Matrix, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Matrix = {
  __pyx_pw_5miolo_6Matrix_5__len__, /*mp_length*/
  __pyx_pw_5miolo_6Matrix_7__getitem__, /*mp_subscript*/
  __pyx_mp_ass_subscript_5miolo_Matrix, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_5miolo_Matrix = {
  PyVarObject_HEAD_INIT(0, 0)
  "miolo.""Matrix", /*tp_name*/
  sizeof(struct __pyx_obj_5miolo_Matrix), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5miolo_Matrix, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_Matrix, /*tp_as_number*/
  &__pyx_tp_as_sequence_Matrix, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Matrix, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  PyDoc_STR("\n        A class for dense matrices. \n        Initializes a C++ object that stores a dense matrix.\n        rows: number of rows of Matrix\n        cols: number of cols of Matrix\n        ctype: underlying C type for Matrix data\n\n        Operators +-*/ are defined between matrices and scalars to replicate \n        vector space operations. Matrix multiplication is done via the __and__\n        and __rand__ operators (&). Absolute value operator __abs__ is also\n        overloaded and returns the max absolute value of elements of matrix.\n    "), /*tp_doc*/
  __pyx_tp_traverse_5miolo_Matrix, /*tp_traverse*/
  __pyx_tp_clear_5miolo_Matrix, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5miolo_Matrix, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5miolo_Matrix, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5miolo_Matrix, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_5miolo_Graph(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_5miolo_Graph *p;
  PyObject *o = __pyx_tp_new_5miolo_mioloObject(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5miolo_Graph *)o);
  p->cType = Py_None; Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_5miolo_5Graph_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5miolo_Graph(PyObject *o) {
  struct __pyx_obj_5miolo_Graph *p = (struct __pyx_obj_5miolo_Graph *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_5miolo_Graph) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_5miolo_5Graph_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->cType);
  __pyx_tp_dealloc_5miolo_mioloObject(o);
}

static int __pyx_tp_traverse_5miolo_Graph(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5miolo_Graph *p = (struct __pyx_obj_5miolo_Graph *)o;
  e = ((likely(__pyx_ptype_5miolo_mioloObject)) ? ((__pyx_ptype_5miolo_mioloObject->tp_traverse) ? __pyx_ptype_5miolo_mioloObject->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_5miolo_Graph)); if (e) return e;
  if (p->cType) {
    e = (*v)(p->cType, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5miolo_Graph(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5miolo_Graph *p = (struct __pyx_obj_5miolo_Graph *)o;
  if (likely(__pyx_ptype_5miolo_mioloObject)) { if (__pyx_ptype_5miolo_mioloObject->tp_clear) __pyx_ptype_5miolo_mioloObject->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_5miolo_Graph);
  tmp = ((PyObject*)p->cType);
  p->cType = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_5miolo_Graph(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static CYTHON_INLINE PyObject *__pyx_nb_add_5miolo_Graph_maybe_call_slot(PyTypeObject* type, PyObject *left, PyObject *right ) {
    binaryfunc slot;
#if CYTHON_USE_TYPE_SLOTS || PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
    slot = type->tp_as_number ? type->tp_as_number->nb_add : NULL;
#else
    slot = (binaryfunc) PyType_GetSlot(type, Py_nb_add);
#endif
    return slot ? slot(left, right ) : __Pyx_NewRef(Py_NotImplemented);
}
static PyObject *__pyx_nb_add_5miolo_Graph(PyObject *left, PyObject *right ) {
    int maybe_self_is_left, maybe_self_is_right = 0;
    maybe_self_is_left = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(left)->tp_as_number && Py_TYPE(left)->tp_as_number->nb_add == &__pyx_nb_add_5miolo_Graph)
#endif
            || __Pyx_TypeCheck(left, __pyx_ptype_5miolo_Graph);
    if (maybe_self_is_left) {
        PyObject *res;
        res = __pyx_pw_5miolo_5Graph_15__add__(left, right);
        if (res != Py_NotImplemented) return res;
        Py_DECREF(res);
    }
    maybe_self_is_right = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(right)->tp_as_number && Py_TYPE(right)->tp_as_number->nb_add == &__pyx_nb_add_5miolo_Graph)
#endif
            || PyType_IsSubtype(Py_TYPE(right), __pyx_ptype_5miolo_Graph);
    if (maybe_self_is_right) {
        return __pyx_nb_add_5miolo_Graph_maybe_call_slot(__Pyx_PyType_GetSlot(__pyx_ptype_5miolo_Graph, tp_base, PyTypeObject*), left, right );
    }
    return __Pyx_NewRef(Py_NotImplemented);
}



static CYTHON_INLINE PyObject *__pyx_nb_subtract_5miolo_Graph_maybe_call_slot(PyTypeObject* type, PyObject *left, PyObject *right ) {
    binaryfunc slot;
#if CYTHON_USE_TYPE_SLOTS || PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
    slot = type->tp_as_number ? type->tp_as_number->nb_subtract : NULL;
#else
    slot = (binaryfunc) PyType_GetSlot(type, Py_nb_subtract);
#endif
    return slot ? slot(left, right ) : __Pyx_NewRef(Py_NotImplemented);
}
static PyObject *__pyx_nb_subtract_5miolo_Graph(PyObject *left, PyObject *right ) {
    int maybe_self_is_left, maybe_self_is_right = 0;
    maybe_self_is_left = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(left)->tp_as_number && Py_TYPE(left)->tp_as_number->nb_subtract == &__pyx_nb_subtract_5miolo_Graph)
#endif
            || __Pyx_TypeCheck(left, __pyx_ptype_5miolo_Graph);
    if (maybe_self_is_left) {
        PyObject *res;
        res = __pyx_pw_5miolo_5Graph_17__sub__(left, right);
        if (res != Py_NotImplemented) return res;
        Py_DECREF(res);
    }
    maybe_self_is_right = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(right)->tp_as_number && Py_TYPE(right)->tp_as_number->nb_subtract == &__pyx_nb_subtract_5miolo_Graph)
#endif
            || PyType_IsSubtype(Py_TYPE(right), __pyx_ptype_5miolo_Graph);
    if (maybe_self_is_right) {
        return __pyx_nb_subtract_5miolo_Graph_maybe_call_slot(__Pyx_PyType_GetSlot(__pyx_ptype_5miolo_Graph, tp_base, PyTypeObject*), left, right );
    }
    return __Pyx_NewRef(Py_NotImplemented);
}



static CYTHON_INLINE PyObject *__pyx_nb_multiply_5miolo_Graph_maybe_call_slot(PyTypeObject* type, PyObject *left, PyObject *right ) {
    binaryfunc slot;
#if CYTHON_USE_TYPE_SLOTS || PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
    slot = type->tp_as_number ? type->tp_as_number->nb_multiply : NULL;
#else
    slot = (binaryfunc) PyType_GetSlot(type, Py_nb_multiply);
#endif
    return slot ? slot(left, right ) : __Pyx_NewRef(Py_NotImplemented);
}
static PyObject *__pyx_nb_multiply_5miolo_Graph(PyObject *left, PyObject *right ) {
    int maybe_self_is_left, maybe_self_is_right = 0;
    maybe_self_is_left = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(left)->tp_as_number && Py_TYPE(left)->tp_as_number->nb_multiply == &__pyx_nb_multiply_5miolo_Graph)
#endif
            || __Pyx_TypeCheck(left, __pyx_ptype_5miolo_Graph);
    if (maybe_self_is_left) {
        PyObject *res;
        res = __pyx_pw_5miolo_5Graph_19__mul__(left, right);
        if (res != Py_NotImplemented) return res;
        Py_DECREF(res);
    }
    maybe_self_is_right = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(right)->tp_as_number && Py_TYPE(right)->tp_as_number->nb_multiply == &__pyx_nb_multiply_5miolo_Graph)
#endif
            || PyType_IsSubtype(Py_TYPE(right), __pyx_ptype_5miolo_Graph);
    if (maybe_self_is_right) {
        return __pyx_pw_5miolo_5Graph_21__rmul__(right, left);
    }
    return __Pyx_NewRef(Py_NotImplemented);
}



static CYTHON_INLINE PyObject *__pyx_nb_and_5miolo_Graph_maybe_call_slot(PyTypeObject* type, PyObject *left, PyObject *right ) {
    binaryfunc slot;
#if CYTHON_USE_TYPE_SLOTS || PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
    slot = type->tp_as_number ? type->tp_as_number->nb_and : NULL;
#else
    slot = (binaryfunc) PyType_GetSlot(type, Py_nb_and);
#endif
    return slot ? slot(left, right ) : __Pyx_NewRef(Py_NotImplemented);
}
static PyObject *__pyx_nb_and_5miolo_Graph(PyObject *left, PyObject *right ) {
    int maybe_self_is_left, maybe_self_is_right = 0;
    maybe_self_is_left = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(left)->tp_as_number && Py_TYPE(left)->tp_as_number->nb_and == &__pyx_nb_and_5miolo_Graph)
#endif
            || __Pyx_TypeCheck(left, __pyx_ptype_5miolo_Graph);
    if (maybe_self_is_left) {
        PyObject *res;
        res = __pyx_pw_5miolo_5Graph_25__and__(left, right);
        if (res != Py_NotImplemented) return res;
        Py_DECREF(res);
    }
    maybe_self_is_right = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(right)->tp_as_number && Py_TYPE(right)->tp_as_number->nb_and == &__pyx_nb_and_5miolo_Graph)
#endif
            || PyType_IsSubtype(Py_TYPE(right), __pyx_ptype_5miolo_Graph);
    if (maybe_self_is_right) {
        return __pyx_pw_5miolo_5Graph_27__rand__(right, left);
    }
    return __Pyx_NewRef(Py_NotImplemented);
}



static CYTHON_INLINE PyObject *__pyx_nb_true_divide_5miolo_Graph_maybe_call_slot(PyTypeObject* type, PyObject *left, PyObject *right ) {
    binaryfunc slot;
#if CYTHON_USE_TYPE_SLOTS || PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
    slot = type->tp_as_number ? type->tp_as_number->nb_true_divide : NULL;
#else
    slot = (binaryfunc) PyType_GetSlot(type, Py_nb_true_divide);
#endif
    return slot ? slot(left, right ) : __Pyx_NewRef(Py_NotImplemented);
}
static PyObject *__pyx_nb_true_divide_5miolo_Graph(PyObject *left, PyObject *right ) {
    int maybe_self_is_left, maybe_self_is_right = 0;
    maybe_self_is_left = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(left)->tp_as_number && Py_TYPE(left)->tp_as_number->nb_true_divide == &__pyx_nb_true_divide_5miolo_Graph)
#endif
            || __Pyx_TypeCheck(left, __pyx_ptype_5miolo_Graph);
    if (maybe_self_is_left) {
        PyObject *res;
        res = __pyx_pw_5miolo_5Graph_23__truediv__(left, right);
        if (res != Py_NotImplemented) return res;
        Py_DECREF(res);
    }
    maybe_self_is_right = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(right)->tp_as_number && Py_TYPE(right)->tp_as_number->nb_true_divide == &__pyx_nb_true_divide_5miolo_Graph)
#endif
            || PyType_IsSubtype(Py_TYPE(right), __pyx_ptype_5miolo_Graph);
    if (maybe_self_is_right) {
        return __pyx_nb_true_divide_5miolo_Graph_maybe_call_slot(__Pyx_PyType_GetSlot(__pyx_ptype_5miolo_Graph, tp_base, PyTypeObject*), left, right );
    }
    return __Pyx_NewRef(Py_NotImplemented);
}



static PyObject *__pyx_getprop_5miolo_5Graph_ctype(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5miolo_5Graph_5ctype_1__get__(o);
}

static PyObject *__pyx_getprop_5miolo_5Graph_null(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5miolo_5Graph_4null_1__get__(o);
}

static PyObject *__pyx_getprop_5miolo_5Graph_nodes(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5miolo_5Graph_5nodes_1__get__(o);
}

static PyObject *__pyx_getprop_5miolo_5Graph_edges(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5miolo_5Graph_5edges_1__get__(o);
}

static PyObject *__pyx_getprop_5miolo_5Graph_structure(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5miolo_5Graph_9structure_1__get__(o);
}

static int __pyx_setprop_5miolo_5Graph_structure(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5miolo_5Graph_9structure_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5miolo_5Graph_weights(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5miolo_5Graph_7weights_1__get__(o);
}

static int __pyx_setprop_5miolo_5Graph_weights(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5miolo_5Graph_7weights_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_5miolo_Graph[] = {
  {"isolatedNodes", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_5Graph_9isolatedNodes, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_5Graph_8isolatedNodes},
  {"print", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_5Graph_11print, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_5Graph_10print},
  {"propagate", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_5Graph_13propagate, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_5Graph_12propagate},
  {"__rmul__", (PyCFunction)__pyx_pw_5miolo_5Graph_21__rmul__, METH_O|METH_COEXIST, 0},
  {"__rand__", (PyCFunction)__pyx_pw_5miolo_5Graph_27__rand__, METH_O|METH_COEXIST, 0},
  {"normalize", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_5Graph_29normalize, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_5Graph_28normalize},
  {"degree", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_5Graph_31degree, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_5Graph_30degree},
  {"laplacian", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_5Graph_33laplacian, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_5Graph_32laplacian},
  {"toMatrix", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_5Graph_35toMatrix, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_5Graph_34toMatrix},
  {"toDigraph", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_5Graph_37toDigraph, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_5Graph_36toDigraph},
  {"max", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_5Graph_39max, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_5Graph_38max},
  {"min", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_5Graph_41min, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_5Graph_40min},
  {"gaussianScale", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_5Graph_43gaussianScale, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_5Graph_42gaussianScale},
  {"toDigraph", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_5Graph_45toDigraph, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_5Graph_44toDigraph},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_5Graph_47__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_5Graph_46__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_5Graph_49__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_5Graph_48__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5miolo_Graph[] = {
  {(char *)"ctype", __pyx_getprop_5miolo_5Graph_ctype, 0, (char *)0, 0},
  {(char *)"null", __pyx_getprop_5miolo_5Graph_null, 0, (char *)0, 0},
  {(char *)"nodes", __pyx_getprop_5miolo_5Graph_nodes, 0, (char *)0, 0},
  {(char *)"edges", __pyx_getprop_5miolo_5Graph_edges, 0, (char *)0, 0},
  {(char *)"structure", __pyx_getprop_5miolo_5Graph_structure, __pyx_setprop_5miolo_5Graph_structure, (char *)PyDoc_STR("\n            Returns the pairs of existing edges in graph as a numpy array. This\n            works both as a getter and a setter.\n        "), 0},
  {(char *)"weights", __pyx_getprop_5miolo_5Graph_weights, __pyx_setprop_5miolo_5Graph_weights, (char *)PyDoc_STR("\n            Returns the pairs weights of edges in graph as a numpy array. This\n            works both as a getter and a setter.\n        "), 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_5miolo_Graph_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_5miolo_Graph},
  {Py_nb_add, (void *)__pyx_nb_add_5miolo_Graph},
  {Py_nb_subtract, (void *)__pyx_nb_subtract_5miolo_Graph},
  {Py_nb_multiply, (void *)__pyx_nb_multiply_5miolo_Graph},
  {Py_nb_and, (void *)__pyx_nb_and_5miolo_Graph},
  {Py_nb_true_divide, (void *)__pyx_nb_true_divide_5miolo_Graph},
  {Py_sq_length, (void *)__pyx_pw_5miolo_5Graph_5__len__},
  {Py_sq_item, (void *)__pyx_sq_item_5miolo_Graph},
  {Py_mp_length, (void *)__pyx_pw_5miolo_5Graph_5__len__},
  {Py_mp_subscript, (void *)__pyx_pw_5miolo_5Graph_7__getitem__},
  {Py_tp_doc, (void *)PyDoc_STR("\n        A class for undirected graphs. \n        Initializes a C++ object that stores a sparse weighted adjacency \n        matrix.\n        nodes: number of nodes in Graph\n        edges: number of edges in Graph\n        ctype: underlying C type for Graph weights\n\n        Vector space operators +- are defined for graphs with same number of \n        edges. Multiplication and division by scalar is defined.\n        Matrix multiplication can be done with objects of type Matrix, returning\n        another matrix.\n    ")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_5miolo_Graph},
  {Py_tp_clear, (void *)__pyx_tp_clear_5miolo_Graph},
  {Py_tp_methods, (void *)__pyx_methods_5miolo_Graph},
  {Py_tp_getset, (void *)__pyx_getsets_5miolo_Graph},
  {Py_tp_new, (void *)__pyx_tp_new_5miolo_Graph},
  {0, 0},
};
static PyType_Spec __pyx_type_5miolo_Graph_spec = {
  "miolo.Graph",
  sizeof(struct __pyx_obj_5miolo_Graph),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_5miolo_Graph_slots,
};
#else

static PyNumberMethods __pyx_tp_as_number_Graph = {
  __pyx_nb_add_5miolo_Graph, /*nb_add*/
  __pyx_nb_subtract_5miolo_Graph, /*nb_subtract*/
  __pyx_nb_multiply_5miolo_Graph, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_bool*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  __pyx_nb_and_5miolo_Graph, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  __pyx_nb_true_divide_5miolo_Graph, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  0, /*nb_index*/
  #if PY_VERSION_HEX >= 0x03050000
  0, /*nb_matrix_multiply*/
  #endif
  #if PY_VERSION_HEX >= 0x03050000
  0, /*nb_inplace_matrix_multiply*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_Graph = {
  __pyx_pw_5miolo_5Graph_5__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_5miolo_Graph, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Graph = {
  __pyx_pw_5miolo_5Graph_5__len__, /*mp_length*/
  __pyx_pw_5miolo_5Graph_7__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_5miolo_Graph = {
  PyVarObject_HEAD_INIT(0, 0)
  "miolo.""Graph", /*tp_name*/
  sizeof(struct __pyx_obj_5miolo_Graph), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5miolo_Graph, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_Graph, /*tp_as_number*/
  &__pyx_tp_as_sequence_Graph, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Graph, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  PyDoc_STR("\n        A class for undirected graphs. \n        Initializes a C++ object that stores a sparse weighted adjacency \n        matrix.\n        nodes: number of nodes in Graph\n        edges: number of edges in Graph\n        ctype: underlying C type for Graph weights\n\n        Vector space operators +- are defined for graphs with same number of \n        edges. Multiplication and division by scalar is defined.\n        Matrix multiplication can be done with objects of type Matrix, returning\n        another matrix.\n    "), /*tp_doc*/
  __pyx_tp_traverse_5miolo_Graph, /*tp_traverse*/
  __pyx_tp_clear_5miolo_Graph, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5miolo_Graph, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5miolo_Graph, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5miolo_Graph, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_5miolo_Digraph(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_5miolo_Digraph *p;
  PyObject *o = __pyx_tp_new_5miolo_mioloObject(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5miolo_Digraph *)o);
  p->cType = Py_None; Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_5miolo_7Digraph_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5miolo_Digraph(PyObject *o) {
  struct __pyx_obj_5miolo_Digraph *p = (struct __pyx_obj_5miolo_Digraph *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_5miolo_Digraph) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_5miolo_7Digraph_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->cType);
  __pyx_tp_dealloc_5miolo_mioloObject(o);
}

static int __pyx_tp_traverse_5miolo_Digraph(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5miolo_Digraph *p = (struct __pyx_obj_5miolo_Digraph *)o;
  e = ((likely(__pyx_ptype_5miolo_mioloObject)) ? ((__pyx_ptype_5miolo_mioloObject->tp_traverse) ? __pyx_ptype_5miolo_mioloObject->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_5miolo_Digraph)); if (e) return e;
  if (p->cType) {
    e = (*v)(p->cType, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5miolo_Digraph(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5miolo_Digraph *p = (struct __pyx_obj_5miolo_Digraph *)o;
  if (likely(__pyx_ptype_5miolo_mioloObject)) { if (__pyx_ptype_5miolo_mioloObject->tp_clear) __pyx_ptype_5miolo_mioloObject->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_5miolo_Digraph);
  tmp = ((PyObject*)p->cType);
  p->cType = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static CYTHON_INLINE PyObject *__pyx_nb_add_5miolo_Digraph_maybe_call_slot(PyTypeObject* type, PyObject *left, PyObject *right ) {
    binaryfunc slot;
#if CYTHON_USE_TYPE_SLOTS || PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
    slot = type->tp_as_number ? type->tp_as_number->nb_add : NULL;
#else
    slot = (binaryfunc) PyType_GetSlot(type, Py_nb_add);
#endif
    return slot ? slot(left, right ) : __Pyx_NewRef(Py_NotImplemented);
}
static PyObject *__pyx_nb_add_5miolo_Digraph(PyObject *left, PyObject *right ) {
    int maybe_self_is_left, maybe_self_is_right = 0;
    maybe_self_is_left = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(left)->tp_as_number && Py_TYPE(left)->tp_as_number->nb_add == &__pyx_nb_add_5miolo_Digraph)
#endif
            || __Pyx_TypeCheck(left, __pyx_ptype_5miolo_Digraph);
    if (maybe_self_is_left) {
        PyObject *res;
        res = __pyx_pw_5miolo_7Digraph_23__add__(left, right);
        if (res != Py_NotImplemented) return res;
        Py_DECREF(res);
    }
    maybe_self_is_right = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(right)->tp_as_number && Py_TYPE(right)->tp_as_number->nb_add == &__pyx_nb_add_5miolo_Digraph)
#endif
            || PyType_IsSubtype(Py_TYPE(right), __pyx_ptype_5miolo_Digraph);
    if (maybe_self_is_right) {
        return __pyx_nb_add_5miolo_Digraph_maybe_call_slot(__Pyx_PyType_GetSlot(__pyx_ptype_5miolo_Digraph, tp_base, PyTypeObject*), left, right );
    }
    return __Pyx_NewRef(Py_NotImplemented);
}



static CYTHON_INLINE PyObject *__pyx_nb_subtract_5miolo_Digraph_maybe_call_slot(PyTypeObject* type, PyObject *left, PyObject *right ) {
    binaryfunc slot;
#if CYTHON_USE_TYPE_SLOTS || PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
    slot = type->tp_as_number ? type->tp_as_number->nb_subtract : NULL;
#else
    slot = (binaryfunc) PyType_GetSlot(type, Py_nb_subtract);
#endif
    return slot ? slot(left, right ) : __Pyx_NewRef(Py_NotImplemented);
}
static PyObject *__pyx_nb_subtract_5miolo_Digraph(PyObject *left, PyObject *right ) {
    int maybe_self_is_left, maybe_self_is_right = 0;
    maybe_self_is_left = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(left)->tp_as_number && Py_TYPE(left)->tp_as_number->nb_subtract == &__pyx_nb_subtract_5miolo_Digraph)
#endif
            || __Pyx_TypeCheck(left, __pyx_ptype_5miolo_Digraph);
    if (maybe_self_is_left) {
        PyObject *res;
        res = __pyx_pw_5miolo_7Digraph_25__sub__(left, right);
        if (res != Py_NotImplemented) return res;
        Py_DECREF(res);
    }
    maybe_self_is_right = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(right)->tp_as_number && Py_TYPE(right)->tp_as_number->nb_subtract == &__pyx_nb_subtract_5miolo_Digraph)
#endif
            || PyType_IsSubtype(Py_TYPE(right), __pyx_ptype_5miolo_Digraph);
    if (maybe_self_is_right) {
        return __pyx_nb_subtract_5miolo_Digraph_maybe_call_slot(__Pyx_PyType_GetSlot(__pyx_ptype_5miolo_Digraph, tp_base, PyTypeObject*), left, right );
    }
    return __Pyx_NewRef(Py_NotImplemented);
}



static CYTHON_INLINE PyObject *__pyx_nb_multiply_5miolo_Digraph_maybe_call_slot(PyTypeObject* type, PyObject *left, PyObject *right ) {
    binaryfunc slot;
#if CYTHON_USE_TYPE_SLOTS || PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
    slot = type->tp_as_number ? type->tp_as_number->nb_multiply : NULL;
#else
    slot = (binaryfunc) PyType_GetSlot(type, Py_nb_multiply);
#endif
    return slot ? slot(left, right ) : __Pyx_NewRef(Py_NotImplemented);
}
static PyObject *__pyx_nb_multiply_5miolo_Digraph(PyObject *left, PyObject *right ) {
    int maybe_self_is_left, maybe_self_is_right = 0;
    maybe_self_is_left = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(left)->tp_as_number && Py_TYPE(left)->tp_as_number->nb_multiply == &__pyx_nb_multiply_5miolo_Digraph)
#endif
            || __Pyx_TypeCheck(left, __pyx_ptype_5miolo_Digraph);
    if (maybe_self_is_left) {
        PyObject *res;
        res = __pyx_pw_5miolo_7Digraph_27__mul__(left, right);
        if (res != Py_NotImplemented) return res;
        Py_DECREF(res);
    }
    maybe_self_is_right = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(right)->tp_as_number && Py_TYPE(right)->tp_as_number->nb_multiply == &__pyx_nb_multiply_5miolo_Digraph)
#endif
            || PyType_IsSubtype(Py_TYPE(right), __pyx_ptype_5miolo_Digraph);
    if (maybe_self_is_right) {
        return __pyx_nb_multiply_5miolo_Digraph_maybe_call_slot(__Pyx_PyType_GetSlot(__pyx_ptype_5miolo_Digraph, tp_base, PyTypeObject*), left, right );
    }
    return __Pyx_NewRef(Py_NotImplemented);
}



static CYTHON_INLINE PyObject *__pyx_nb_and_5miolo_Digraph_maybe_call_slot(PyTypeObject* type, PyObject *left, PyObject *right ) {
    binaryfunc slot;
#if CYTHON_USE_TYPE_SLOTS || PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
    slot = type->tp_as_number ? type->tp_as_number->nb_and : NULL;
#else
    slot = (binaryfunc) PyType_GetSlot(type, Py_nb_and);
#endif
    return slot ? slot(left, right ) : __Pyx_NewRef(Py_NotImplemented);
}
static PyObject *__pyx_nb_and_5miolo_Digraph(PyObject *left, PyObject *right ) {
    int maybe_self_is_left, maybe_self_is_right = 0;
    maybe_self_is_left = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(left)->tp_as_number && Py_TYPE(left)->tp_as_number->nb_and == &__pyx_nb_and_5miolo_Digraph)
#endif
            || __Pyx_TypeCheck(left, __pyx_ptype_5miolo_Digraph);
    if (maybe_self_is_left) {
        PyObject *res;
        res = __pyx_pw_5miolo_7Digraph_31__and__(left, right);
        if (res != Py_NotImplemented) return res;
        Py_DECREF(res);
    }
    maybe_self_is_right = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(right)->tp_as_number && Py_TYPE(right)->tp_as_number->nb_and == &__pyx_nb_and_5miolo_Digraph)
#endif
            || PyType_IsSubtype(Py_TYPE(right), __pyx_ptype_5miolo_Digraph);
    if (maybe_self_is_right) {
        return __pyx_pw_5miolo_7Digraph_33__rand__(right, left);
    }
    return __Pyx_NewRef(Py_NotImplemented);
}



static CYTHON_INLINE PyObject *__pyx_nb_true_divide_5miolo_Digraph_maybe_call_slot(PyTypeObject* type, PyObject *left, PyObject *right ) {
    binaryfunc slot;
#if CYTHON_USE_TYPE_SLOTS || PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
    slot = type->tp_as_number ? type->tp_as_number->nb_true_divide : NULL;
#else
    slot = (binaryfunc) PyType_GetSlot(type, Py_nb_true_divide);
#endif
    return slot ? slot(left, right ) : __Pyx_NewRef(Py_NotImplemented);
}
static PyObject *__pyx_nb_true_divide_5miolo_Digraph(PyObject *left, PyObject *right ) {
    int maybe_self_is_left, maybe_self_is_right = 0;
    maybe_self_is_left = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(left)->tp_as_number && Py_TYPE(left)->tp_as_number->nb_true_divide == &__pyx_nb_true_divide_5miolo_Digraph)
#endif
            || __Pyx_TypeCheck(left, __pyx_ptype_5miolo_Digraph);
    if (maybe_self_is_left) {
        PyObject *res;
        res = __pyx_pw_5miolo_7Digraph_29__truediv__(left, right);
        if (res != Py_NotImplemented) return res;
        Py_DECREF(res);
    }
    maybe_self_is_right = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(right)->tp_as_number && Py_TYPE(right)->tp_as_number->nb_true_divide == &__pyx_nb_true_divide_5miolo_Digraph)
#endif
            || PyType_IsSubtype(Py_TYPE(right), __pyx_ptype_5miolo_Digraph);
    if (maybe_self_is_right) {
        return __pyx_nb_true_divide_5miolo_Digraph_maybe_call_slot(__Pyx_PyType_GetSlot(__pyx_ptype_5miolo_Digraph, tp_base, PyTypeObject*), left, right );
    }
    return __Pyx_NewRef(Py_NotImplemented);
}



static PyObject *__pyx_getprop_5miolo_7Digraph_ctype(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5miolo_7Digraph_5ctype_1__get__(o);
}

static PyObject *__pyx_getprop_5miolo_7Digraph_nodes(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5miolo_7Digraph_5nodes_1__get__(o);
}

static PyObject *__pyx_getprop_5miolo_7Digraph_null(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5miolo_7Digraph_4null_1__get__(o);
}

static PyMethodDef __pyx_methods_5miolo_Digraph[] = {
  {"connect", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_7Digraph_5connect, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_7Digraph_4connect},
  {"connectRegular", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_7Digraph_7connectRegular, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_7Digraph_6connectRegular},
  {"normalize", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_7Digraph_9normalize, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_7Digraph_8normalize},
  {"copy", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_7Digraph_11copy, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_7Digraph_10copy},
  {"shape", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_7Digraph_13shape, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_7Digraph_12shape},
  {"transpose", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_7Digraph_15transpose, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_7Digraph_14transpose},
  {"sameShape", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_7Digraph_17sameShape, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_7Digraph_16sameShape},
  {"symmetrize", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_7Digraph_19symmetrize, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_7Digraph_18symmetrize},
  {"gaussianScale", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_7Digraph_21gaussianScale, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_7Digraph_20gaussianScale},
  {"__rand__", (PyCFunction)__pyx_pw_5miolo_7Digraph_33__rand__, METH_O|METH_COEXIST, 0},
  {"toGraph", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_7Digraph_35toGraph, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_7Digraph_34toGraph},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_7Digraph_37__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_7Digraph_36__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_7Digraph_39__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_7Digraph_38__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5miolo_Digraph[] = {
  {(char *)"ctype", __pyx_getprop_5miolo_7Digraph_ctype, 0, (char *)0, 0},
  {(char *)"nodes", __pyx_getprop_5miolo_7Digraph_nodes, 0, (char *)0, 0},
  {(char *)"null", __pyx_getprop_5miolo_7Digraph_null, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_5miolo_Digraph_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_5miolo_Digraph},
  {Py_nb_add, (void *)__pyx_nb_add_5miolo_Digraph},
  {Py_nb_subtract, (void *)__pyx_nb_subtract_5miolo_Digraph},
  {Py_nb_multiply, (void *)__pyx_nb_multiply_5miolo_Digraph},
  {Py_nb_and, (void *)__pyx_nb_and_5miolo_Digraph},
  {Py_nb_true_divide, (void *)__pyx_nb_true_divide_5miolo_Digraph},
  {Py_tp_doc, (void *)PyDoc_STR("\n        A class for directed graphs.\n\n        nodes: number of nodes in graph\n        ctype: underlying ctype. \n\n        Vector space operators +- are defined for graphs with same number of \n        edges. Multiplication and division by scalar is defined.\n        Matrix multiplication can be done with objects of type Matrix, returning\n        another matrix.\n    ")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_5miolo_Digraph},
  {Py_tp_clear, (void *)__pyx_tp_clear_5miolo_Digraph},
  {Py_tp_methods, (void *)__pyx_methods_5miolo_Digraph},
  {Py_tp_getset, (void *)__pyx_getsets_5miolo_Digraph},
  {Py_tp_new, (void *)__pyx_tp_new_5miolo_Digraph},
  {0, 0},
};
static PyType_Spec __pyx_type_5miolo_Digraph_spec = {
  "miolo.Digraph",
  sizeof(struct __pyx_obj_5miolo_Digraph),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_5miolo_Digraph_slots,
};
#else

static PyNumberMethods __pyx_tp_as_number_Digraph = {
  __pyx_nb_add_5miolo_Digraph, /*nb_add*/
  __pyx_nb_subtract_5miolo_Digraph, /*nb_subtract*/
  __pyx_nb_multiply_5miolo_Digraph, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_bool*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  __pyx_nb_and_5miolo_Digraph, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  __pyx_nb_true_divide_5miolo_Digraph, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  0, /*nb_index*/
  #if PY_VERSION_HEX >= 0x03050000
  0, /*nb_matrix_multiply*/
  #endif
  #if PY_VERSION_HEX >= 0x03050000
  0, /*nb_inplace_matrix_multiply*/
  #endif
};

static PyTypeObject __pyx_type_5miolo_Digraph = {
  PyVarObject_HEAD_INIT(0, 0)
  "miolo.""Digraph", /*tp_name*/
  sizeof(struct __pyx_obj_5miolo_Digraph), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5miolo_Digraph, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_Digraph, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  PyDoc_STR("\n        A class for directed graphs.\n\n        nodes: number of nodes in graph\n        ctype: underlying ctype. \n\n        Vector space operators +- are defined for graphs with same number of \n        edges. Multiplication and division by scalar is defined.\n        Matrix multiplication can be done with objects of type Matrix, returning\n        another matrix.\n    "), /*tp_doc*/
  __pyx_tp_traverse_5miolo_Digraph, /*tp_traverse*/
  __pyx_tp_clear_5miolo_Digraph, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5miolo_Digraph, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5miolo_Digraph, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5miolo_Digraph, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_5miolo_Diagonal(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_5miolo_Diagonal *p;
  PyObject *o = __pyx_tp_new_5miolo_mioloObject(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5miolo_Diagonal *)o);
  p->cType = Py_None; Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_5miolo_8Diagonal_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5miolo_Diagonal(PyObject *o) {
  struct __pyx_obj_5miolo_Diagonal *p = (struct __pyx_obj_5miolo_Diagonal *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_5miolo_Diagonal) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_5miolo_8Diagonal_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->cType);
  __pyx_tp_dealloc_5miolo_mioloObject(o);
}

static int __pyx_tp_traverse_5miolo_Diagonal(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5miolo_Diagonal *p = (struct __pyx_obj_5miolo_Diagonal *)o;
  e = ((likely(__pyx_ptype_5miolo_mioloObject)) ? ((__pyx_ptype_5miolo_mioloObject->tp_traverse) ? __pyx_ptype_5miolo_mioloObject->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_5miolo_Diagonal)); if (e) return e;
  if (p->cType) {
    e = (*v)(p->cType, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5miolo_Diagonal(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5miolo_Diagonal *p = (struct __pyx_obj_5miolo_Diagonal *)o;
  if (likely(__pyx_ptype_5miolo_mioloObject)) { if (__pyx_ptype_5miolo_mioloObject->tp_clear) __pyx_ptype_5miolo_mioloObject->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_5miolo_Diagonal);
  tmp = ((PyObject*)p->cType);
  p->cType = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_5miolo_Diagonal(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static int __pyx_mp_ass_subscript_5miolo_Diagonal(PyObject *o, PyObject *i, PyObject *v) {
  if (v) {
    return __pyx_pw_5miolo_8Diagonal_9__setitem__(o, i, v);
  }
  else {
    __Pyx_TypeName o_type_name;
    if (__pyx_ptype_5miolo_mioloObject->tp_as_mapping && __pyx_ptype_5miolo_mioloObject->tp_as_mapping->mp_ass_subscript)
      return __pyx_ptype_5miolo_mioloObject->tp_as_mapping->mp_ass_subscript(o, i, v);
    o_type_name = __Pyx_PyType_GetName(Py_TYPE(o));
    PyErr_Format(PyExc_NotImplementedError,
      "Subscript deletion not supported by " __Pyx_FMT_TYPENAME, o_type_name);
    __Pyx_DECREF_TypeName(o_type_name);
    return -1;
  }
}

static CYTHON_INLINE PyObject *__pyx_nb_add_5miolo_Diagonal_maybe_call_slot(PyTypeObject* type, PyObject *left, PyObject *right ) {
    binaryfunc slot;
#if CYTHON_USE_TYPE_SLOTS || PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
    slot = type->tp_as_number ? type->tp_as_number->nb_add : NULL;
#else
    slot = (binaryfunc) PyType_GetSlot(type, Py_nb_add);
#endif
    return slot ? slot(left, right ) : __Pyx_NewRef(Py_NotImplemented);
}
static PyObject *__pyx_nb_add_5miolo_Diagonal(PyObject *left, PyObject *right ) {
    int maybe_self_is_left, maybe_self_is_right = 0;
    maybe_self_is_left = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(left)->tp_as_number && Py_TYPE(left)->tp_as_number->nb_add == &__pyx_nb_add_5miolo_Diagonal)
#endif
            || __Pyx_TypeCheck(left, __pyx_ptype_5miolo_Diagonal);
    if (maybe_self_is_left) {
        PyObject *res;
        res = __pyx_pw_5miolo_8Diagonal_11__add__(left, right);
        if (res != Py_NotImplemented) return res;
        Py_DECREF(res);
    }
    maybe_self_is_right = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(right)->tp_as_number && Py_TYPE(right)->tp_as_number->nb_add == &__pyx_nb_add_5miolo_Diagonal)
#endif
            || PyType_IsSubtype(Py_TYPE(right), __pyx_ptype_5miolo_Diagonal);
    if (maybe_self_is_right) {
        return __pyx_nb_add_5miolo_Diagonal_maybe_call_slot(__Pyx_PyType_GetSlot(__pyx_ptype_5miolo_Diagonal, tp_base, PyTypeObject*), left, right );
    }
    return __Pyx_NewRef(Py_NotImplemented);
}



static CYTHON_INLINE PyObject *__pyx_nb_subtract_5miolo_Diagonal_maybe_call_slot(PyTypeObject* type, PyObject *left, PyObject *right ) {
    binaryfunc slot;
#if CYTHON_USE_TYPE_SLOTS || PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
    slot = type->tp_as_number ? type->tp_as_number->nb_subtract : NULL;
#else
    slot = (binaryfunc) PyType_GetSlot(type, Py_nb_subtract);
#endif
    return slot ? slot(left, right ) : __Pyx_NewRef(Py_NotImplemented);
}
static PyObject *__pyx_nb_subtract_5miolo_Diagonal(PyObject *left, PyObject *right ) {
    int maybe_self_is_left, maybe_self_is_right = 0;
    maybe_self_is_left = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(left)->tp_as_number && Py_TYPE(left)->tp_as_number->nb_subtract == &__pyx_nb_subtract_5miolo_Diagonal)
#endif
            || __Pyx_TypeCheck(left, __pyx_ptype_5miolo_Diagonal);
    if (maybe_self_is_left) {
        PyObject *res;
        res = __pyx_pw_5miolo_8Diagonal_13__sub__(left, right);
        if (res != Py_NotImplemented) return res;
        Py_DECREF(res);
    }
    maybe_self_is_right = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(right)->tp_as_number && Py_TYPE(right)->tp_as_number->nb_subtract == &__pyx_nb_subtract_5miolo_Diagonal)
#endif
            || PyType_IsSubtype(Py_TYPE(right), __pyx_ptype_5miolo_Diagonal);
    if (maybe_self_is_right) {
        return __pyx_nb_subtract_5miolo_Diagonal_maybe_call_slot(__Pyx_PyType_GetSlot(__pyx_ptype_5miolo_Diagonal, tp_base, PyTypeObject*), left, right );
    }
    return __Pyx_NewRef(Py_NotImplemented);
}



static CYTHON_INLINE PyObject *__pyx_nb_multiply_5miolo_Diagonal_maybe_call_slot(PyTypeObject* type, PyObject *left, PyObject *right ) {
    binaryfunc slot;
#if CYTHON_USE_TYPE_SLOTS || PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
    slot = type->tp_as_number ? type->tp_as_number->nb_multiply : NULL;
#else
    slot = (binaryfunc) PyType_GetSlot(type, Py_nb_multiply);
#endif
    return slot ? slot(left, right ) : __Pyx_NewRef(Py_NotImplemented);
}
static PyObject *__pyx_nb_multiply_5miolo_Diagonal(PyObject *left, PyObject *right ) {
    int maybe_self_is_left, maybe_self_is_right = 0;
    maybe_self_is_left = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(left)->tp_as_number && Py_TYPE(left)->tp_as_number->nb_multiply == &__pyx_nb_multiply_5miolo_Diagonal)
#endif
            || __Pyx_TypeCheck(left, __pyx_ptype_5miolo_Diagonal);
    if (maybe_self_is_left) {
        PyObject *res;
        res = __pyx_pw_5miolo_8Diagonal_19__mul__(left, right);
        if (res != Py_NotImplemented) return res;
        Py_DECREF(res);
    }
    maybe_self_is_right = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(right)->tp_as_number && Py_TYPE(right)->tp_as_number->nb_multiply == &__pyx_nb_multiply_5miolo_Diagonal)
#endif
            || PyType_IsSubtype(Py_TYPE(right), __pyx_ptype_5miolo_Diagonal);
    if (maybe_self_is_right) {
        return __pyx_nb_multiply_5miolo_Diagonal_maybe_call_slot(__Pyx_PyType_GetSlot(__pyx_ptype_5miolo_Diagonal, tp_base, PyTypeObject*), left, right );
    }
    return __Pyx_NewRef(Py_NotImplemented);
}



static CYTHON_INLINE PyObject *__pyx_nb_and_5miolo_Diagonal_maybe_call_slot(PyTypeObject* type, PyObject *left, PyObject *right ) {
    binaryfunc slot;
#if CYTHON_USE_TYPE_SLOTS || PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
    slot = type->tp_as_number ? type->tp_as_number->nb_and : NULL;
#else
    slot = (binaryfunc) PyType_GetSlot(type, Py_nb_and);
#endif
    return slot ? slot(left, right ) : __Pyx_NewRef(Py_NotImplemented);
}
static PyObject *__pyx_nb_and_5miolo_Diagonal(PyObject *left, PyObject *right ) {
    int maybe_self_is_left, maybe_self_is_right = 0;
    maybe_self_is_left = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(left)->tp_as_number && Py_TYPE(left)->tp_as_number->nb_and == &__pyx_nb_and_5miolo_Diagonal)
#endif
            || __Pyx_TypeCheck(left, __pyx_ptype_5miolo_Diagonal);
    if (maybe_self_is_left) {
        PyObject *res;
        res = __pyx_pw_5miolo_8Diagonal_15__and__(left, right);
        if (res != Py_NotImplemented) return res;
        Py_DECREF(res);
    }
    maybe_self_is_right = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(right)->tp_as_number && Py_TYPE(right)->tp_as_number->nb_and == &__pyx_nb_and_5miolo_Diagonal)
#endif
            || PyType_IsSubtype(Py_TYPE(right), __pyx_ptype_5miolo_Diagonal);
    if (maybe_self_is_right) {
        return __pyx_pw_5miolo_8Diagonal_17__rand__(right, left);
    }
    return __Pyx_NewRef(Py_NotImplemented);
}



static CYTHON_INLINE PyObject *__pyx_nb_true_divide_5miolo_Diagonal_maybe_call_slot(PyTypeObject* type, PyObject *left, PyObject *right ) {
    binaryfunc slot;
#if CYTHON_USE_TYPE_SLOTS || PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
    slot = type->tp_as_number ? type->tp_as_number->nb_true_divide : NULL;
#else
    slot = (binaryfunc) PyType_GetSlot(type, Py_nb_true_divide);
#endif
    return slot ? slot(left, right ) : __Pyx_NewRef(Py_NotImplemented);
}
static PyObject *__pyx_nb_true_divide_5miolo_Diagonal(PyObject *left, PyObject *right ) {
    int maybe_self_is_left, maybe_self_is_right = 0;
    maybe_self_is_left = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(left)->tp_as_number && Py_TYPE(left)->tp_as_number->nb_true_divide == &__pyx_nb_true_divide_5miolo_Diagonal)
#endif
            || __Pyx_TypeCheck(left, __pyx_ptype_5miolo_Diagonal);
    if (maybe_self_is_left) {
        PyObject *res;
        res = __pyx_pw_5miolo_8Diagonal_21__truediv__(left, right);
        if (res != Py_NotImplemented) return res;
        Py_DECREF(res);
    }
    maybe_self_is_right = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(right)->tp_as_number && Py_TYPE(right)->tp_as_number->nb_true_divide == &__pyx_nb_true_divide_5miolo_Diagonal)
#endif
            || PyType_IsSubtype(Py_TYPE(right), __pyx_ptype_5miolo_Diagonal);
    if (maybe_self_is_right) {
        return __pyx_nb_true_divide_5miolo_Diagonal_maybe_call_slot(__Pyx_PyType_GetSlot(__pyx_ptype_5miolo_Diagonal, tp_base, PyTypeObject*), left, right );
    }
    return __Pyx_NewRef(Py_NotImplemented);
}



static PyObject *__pyx_getprop_5miolo_8Diagonal_ctype(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5miolo_8Diagonal_5ctype_1__get__(o);
}

static PyObject *__pyx_getprop_5miolo_8Diagonal_rows(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5miolo_8Diagonal_4rows_1__get__(o);
}

static PyObject *__pyx_getprop_5miolo_8Diagonal_cols(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5miolo_8Diagonal_4cols_1__get__(o);
}

static PyMethodDef __pyx_methods_5miolo_Diagonal[] = {
  {"__rand__", (PyCFunction)__pyx_pw_5miolo_8Diagonal_17__rand__, METH_O|METH_COEXIST, 0},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_8Diagonal_23__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_8Diagonal_22__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_8Diagonal_25__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_8Diagonal_24__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5miolo_Diagonal[] = {
  {(char *)"ctype", __pyx_getprop_5miolo_8Diagonal_ctype, 0, (char *)0, 0},
  {(char *)"rows", __pyx_getprop_5miolo_8Diagonal_rows, 0, (char *)0, 0},
  {(char *)"cols", __pyx_getprop_5miolo_8Diagonal_cols, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_5miolo_Diagonal_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_5miolo_Diagonal},
  {Py_nb_add, (void *)__pyx_nb_add_5miolo_Diagonal},
  {Py_nb_subtract, (void *)__pyx_nb_subtract_5miolo_Diagonal},
  {Py_nb_multiply, (void *)__pyx_nb_multiply_5miolo_Diagonal},
  {Py_nb_and, (void *)__pyx_nb_and_5miolo_Diagonal},
  {Py_nb_true_divide, (void *)__pyx_nb_true_divide_5miolo_Diagonal},
  {Py_sq_length, (void *)__pyx_pw_5miolo_8Diagonal_5__len__},
  {Py_sq_item, (void *)__pyx_sq_item_5miolo_Diagonal},
  {Py_mp_length, (void *)__pyx_pw_5miolo_8Diagonal_5__len__},
  {Py_mp_subscript, (void *)__pyx_pw_5miolo_8Diagonal_7__getitem__},
  {Py_mp_ass_subscript, (void *)__pyx_mp_ass_subscript_5miolo_Diagonal},
  {Py_tp_doc, (void *)PyDoc_STR("\n        A class for diagonal matrices. \n        Initializes a C++ object that stores a diagonal matrix.\n        dim: dimension of square matrix (number of rows is equal to cols)\n        Elements can be acessed via the __getitem__ method, ie Diagonal[k]\n\n        Vector space +- are defined. Scalar multiplication and division are also\n        defined via */ operator. Matrix multiplication can be done for Matrix,\n        Graph and Digraph objects via the & operator.\n    ")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_5miolo_Diagonal},
  {Py_tp_clear, (void *)__pyx_tp_clear_5miolo_Diagonal},
  {Py_tp_methods, (void *)__pyx_methods_5miolo_Diagonal},
  {Py_tp_getset, (void *)__pyx_getsets_5miolo_Diagonal},
  {Py_tp_new, (void *)__pyx_tp_new_5miolo_Diagonal},
  {0, 0},
};
static PyType_Spec __pyx_type_5miolo_Diagonal_spec = {
  "miolo.Diagonal",
  sizeof(struct __pyx_obj_5miolo_Diagonal),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_5miolo_Diagonal_slots,
};
#else

static PyNumberMethods __pyx_tp_as_number_Diagonal = {
  __pyx_nb_add_5miolo_Diagonal, /*nb_add*/
  __pyx_nb_subtract_5miolo_Diagonal, /*nb_subtract*/
  __pyx_nb_multiply_5miolo_Diagonal, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_bool*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  __pyx_nb_and_5miolo_Diagonal, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  __pyx_nb_true_divide_5miolo_Diagonal, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  0, /*nb_index*/
  #if PY_VERSION_HEX >= 0x03050000
  0, /*nb_matrix_multiply*/
  #endif
  #if PY_VERSION_HEX >= 0x03050000
  0, /*nb_inplace_matrix_multiply*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_Diagonal = {
  __pyx_pw_5miolo_8Diagonal_5__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_5miolo_Diagonal, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Diagonal = {
  __pyx_pw_5miolo_8Diagonal_5__len__, /*mp_length*/
  __pyx_pw_5miolo_8Diagonal_7__getitem__, /*mp_subscript*/
  __pyx_mp_ass_subscript_5miolo_Diagonal, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_5miolo_Diagonal = {
  PyVarObject_HEAD_INIT(0, 0)
  "miolo.""Diagonal", /*tp_name*/
  sizeof(struct __pyx_obj_5miolo_Diagonal), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5miolo_Diagonal, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_Diagonal, /*tp_as_number*/
  &__pyx_tp_as_sequence_Diagonal, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Diagonal, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  PyDoc_STR("\n        A class for diagonal matrices. \n        Initializes a C++ object that stores a diagonal matrix.\n        dim: dimension of square matrix (number of rows is equal to cols)\n        Elements can be acessed via the __getitem__ method, ie Diagonal[k]\n\n        Vector space +- are defined. Scalar multiplication and division are also\n        defined via */ operator. Matrix multiplication can be done for Matrix,\n        Graph and Digraph objects via the & operator.\n    "), /*tp_doc*/
  __pyx_tp_traverse_5miolo_Diagonal, /*tp_traverse*/
  __pyx_tp_clear_5miolo_Diagonal, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5miolo_Diagonal, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5miolo_Diagonal, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5miolo_Diagonal, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_5miolo_Manifold(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  return o;
}

static void __pyx_tp_dealloc_5miolo_Manifold(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_5miolo_Manifold) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static PyMethodDef __pyx_methods_5miolo_Manifold[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_8Manifold_1__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_8Manifold___reduce_cython__},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_8Manifold_3__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_8Manifold_2__setstate_cython__},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_5miolo_Manifold_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_5miolo_Manifold},
  {Py_tp_methods, (void *)__pyx_methods_5miolo_Manifold},
  {Py_tp_new, (void *)__pyx_tp_new_5miolo_Manifold},
  {0, 0},
};
static PyType_Spec __pyx_type_5miolo_Manifold_spec = {
  "miolo.Manifold",
  sizeof(struct __pyx_obj_5miolo_Manifold),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_5miolo_Manifold_slots,
};
#else

static PyTypeObject __pyx_type_5miolo_Manifold = {
  PyVarObject_HEAD_INIT(0, 0)
  "miolo.""Manifold", /*tp_name*/
  sizeof(struct __pyx_obj_5miolo_Manifold), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5miolo_Manifold, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5miolo_Manifold, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5miolo_Manifold, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_5miolo_Euclidean(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_5miolo_Euclidean *p;
  PyObject *o = __pyx_tp_new_5miolo_Manifold(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5miolo_Euclidean *)o);
  new((void*)&(p->view)) euclidean();
  return o;
}

static void __pyx_tp_dealloc_5miolo_Euclidean(PyObject *o) {
  struct __pyx_obj_5miolo_Euclidean *p = (struct __pyx_obj_5miolo_Euclidean *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_5miolo_Euclidean) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  __Pyx_call_destructor(p->view);
  __pyx_tp_dealloc_5miolo_Manifold(o);
}

static PyMethodDef __pyx_methods_5miolo_Euclidean[] = {
  {"dot", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_9Euclidean_3dot, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_9Euclidean_2dot},
  {"distance", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_9Euclidean_5distance, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_9Euclidean_4distance},
  {"mean", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_9Euclidean_7mean, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_9Euclidean_6mean},
  {"variance", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_9Euclidean_9variance, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_9Euclidean_8variance},
  {"minmaxNormalize", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_9Euclidean_11minmaxNormalize, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_9Euclidean_10minmaxNormalize},
  {"rowNormalize", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_9Euclidean_13rowNormalize, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_9Euclidean_12rowNormalize},
  {"gaussianNormalize", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_9Euclidean_15gaussianNormalize, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_9Euclidean_14gaussianNormalize},
  {"centroidDistance", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_9Euclidean_17centroidDistance, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_9Euclidean_16centroidDistance},
  {"kmpp", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_9Euclidean_19kmpp, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_9Euclidean_18kmpp},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_9Euclidean_21__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_9Euclidean_20__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_9Euclidean_23__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_9Euclidean_22__setstate_cython__},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_5miolo_Euclidean_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_5miolo_Euclidean},
  {Py_tp_doc, (void *)PyDoc_STR("Euclidean()")},
  {Py_tp_methods, (void *)__pyx_methods_5miolo_Euclidean},
  {Py_tp_init, (void *)__pyx_pw_5miolo_9Euclidean_1__init__},
  {Py_tp_new, (void *)__pyx_tp_new_5miolo_Euclidean},
  {0, 0},
};
static PyType_Spec __pyx_type_5miolo_Euclidean_spec = {
  "miolo.Euclidean",
  sizeof(struct __pyx_obj_5miolo_Euclidean),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_5miolo_Euclidean_slots,
};
#else

static PyTypeObject __pyx_type_5miolo_Euclidean = {
  PyVarObject_HEAD_INIT(0, 0)
  "miolo.""Euclidean", /*tp_name*/
  sizeof(struct __pyx_obj_5miolo_Euclidean), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5miolo_Euclidean, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  PyDoc_STR("Euclidean()"), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5miolo_Euclidean, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_5miolo_9Euclidean_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5miolo_Euclidean, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_5miolo_Sphere(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_5miolo_Sphere *p;
  PyObject *o = __pyx_tp_new_5miolo_Manifold(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5miolo_Sphere *)o);
  new((void*)&(p->view)) sphere();
  return o;
}

static void __pyx_tp_dealloc_5miolo_Sphere(PyObject *o) {
  struct __pyx_obj_5miolo_Sphere *p = (struct __pyx_obj_5miolo_Sphere *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_5miolo_Sphere) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  __Pyx_call_destructor(p->view);
  __pyx_tp_dealloc_5miolo_Manifold(o);
}

static PyObject *__pyx_getprop_5miolo_6Sphere_radius(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5miolo_6Sphere_6radius_1__get__(o);
}

static int __pyx_setprop_5miolo_6Sphere_radius(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5miolo_6Sphere_6radius_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_5miolo_Sphere[] = {
  {"stereographicProjection", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_6Sphere_3stereographicProjection, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_6Sphere_2stereographicProjection},
  {"fromEuclidean", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_6Sphere_5fromEuclidean, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_6Sphere_4fromEuclidean},
  {"toEuclidean", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_6Sphere_7toEuclidean, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_6Sphere_6toEuclidean},
  {"coordinateReady", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_6Sphere_9coordinateReady, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_6Sphere_8coordinateReady},
  {"distance", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_6Sphere_11distance, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_6Sphere_10distance},
  {"isIn", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_6Sphere_13isIn, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_6Sphere_12isIn},
  {"isTangent", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_6Sphere_15isTangent, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_6Sphere_14isTangent},
  {"exp", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_6Sphere_17exp, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_6Sphere_16exp},
  {"centroidDistance", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_6Sphere_19centroidDistance, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_6Sphere_18centroidDistance},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_6Sphere_21__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_6Sphere_20__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_6Sphere_23__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_6Sphere_22__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5miolo_Sphere[] = {
  {(char *)"radius", __pyx_getprop_5miolo_6Sphere_radius, __pyx_setprop_5miolo_6Sphere_radius, (char *)0, 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_5miolo_Sphere_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_5miolo_Sphere},
  {Py_tp_doc, (void *)PyDoc_STR("Sphere(radius=1)\n\n        This class treats each row of a Matrix as sphere. Therefore, it\n        views a Matrix as the product manifold of Matrix.rows unit spheres \n        embedded in the euclidean space of dimension Matrix.cols. \n    ")},
  {Py_tp_methods, (void *)__pyx_methods_5miolo_Sphere},
  {Py_tp_getset, (void *)__pyx_getsets_5miolo_Sphere},
  {Py_tp_init, (void *)__pyx_pw_5miolo_6Sphere_1__init__},
  {Py_tp_new, (void *)__pyx_tp_new_5miolo_Sphere},
  {0, 0},
};
static PyType_Spec __pyx_type_5miolo_Sphere_spec = {
  "miolo.Sphere",
  sizeof(struct __pyx_obj_5miolo_Sphere),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_5miolo_Sphere_slots,
};
#else

static PyTypeObject __pyx_type_5miolo_Sphere = {
  PyVarObject_HEAD_INIT(0, 0)
  "miolo.""Sphere", /*tp_name*/
  sizeof(struct __pyx_obj_5miolo_Sphere), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5miolo_Sphere, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  PyDoc_STR("Sphere(radius=1)\n\n        This class treats each row of a Matrix as sphere. Therefore, it\n        views a Matrix as the product manifold of Matrix.rows unit spheres \n        embedded in the euclidean space of dimension Matrix.cols. \n    "), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5miolo_Sphere, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5miolo_Sphere, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_5miolo_6Sphere_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5miolo_Sphere, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_5miolo_Poincare(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_5miolo_Poincare *p;
  PyObject *o = __pyx_tp_new_5miolo_Manifold(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5miolo_Poincare *)o);
  new((void*)&(p->view)) poincare();
  return o;
}

static void __pyx_tp_dealloc_5miolo_Poincare(PyObject *o) {
  struct __pyx_obj_5miolo_Poincare *p = (struct __pyx_obj_5miolo_Poincare *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_5miolo_Poincare) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  __Pyx_call_destructor(p->view);
  __pyx_tp_dealloc_5miolo_Manifold(o);
}

static PyObject *__pyx_getprop_5miolo_8Poincare_curvature(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5miolo_8Poincare_9curvature_1__get__(o);
}

static int __pyx_setprop_5miolo_8Poincare_curvature(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5miolo_8Poincare_9curvature_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_5miolo_Poincare[] = {
  {"distance", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_8Poincare_3distance, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_8Poincare_2distance},
  {"isIn", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_8Poincare_5isIn, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_8Poincare_4isIn},
  {"add", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_8Poincare_7add, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_8Poincare_6add},
  {"exp", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_8Poincare_9exp, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_8Poincare_8exp},
  {"log", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_8Poincare_11log, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_8Poincare_10log},
  {"mean", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_8Poincare_13mean, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_8Poincare_12mean},
  {"centroidDistance", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_8Poincare_15centroidDistance, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_8Poincare_14centroidDistance},
  {"hyperbolicity", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_8Poincare_17hyperbolicity, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_8Poincare_16hyperbolicity},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_8Poincare_19__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_8Poincare_18__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_8Poincare_21__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_8Poincare_20__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5miolo_Poincare[] = {
  {(char *)"curvature", __pyx_getprop_5miolo_8Poincare_curvature, __pyx_setprop_5miolo_8Poincare_curvature, (char *)0, 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_5miolo_Poincare_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_5miolo_Poincare},
  {Py_tp_doc, (void *)PyDoc_STR("Poincare(curvature=1)\n\n        This class treats each row of a Matrix as a point in the Poincare disk.\n        Convertions to and from the Klein model are also available.\n    ")},
  {Py_tp_methods, (void *)__pyx_methods_5miolo_Poincare},
  {Py_tp_getset, (void *)__pyx_getsets_5miolo_Poincare},
  {Py_tp_init, (void *)__pyx_pw_5miolo_8Poincare_1__init__},
  {Py_tp_new, (void *)__pyx_tp_new_5miolo_Poincare},
  {0, 0},
};
static PyType_Spec __pyx_type_5miolo_Poincare_spec = {
  "miolo.Poincare",
  sizeof(struct __pyx_obj_5miolo_Poincare),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_5miolo_Poincare_slots,
};
#else

static PyTypeObject __pyx_type_5miolo_Poincare = {
  PyVarObject_HEAD_INIT(0, 0)
  "miolo.""Poincare", /*tp_name*/
  sizeof(struct __pyx_obj_5miolo_Poincare), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5miolo_Poincare, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  PyDoc_STR("Poincare(curvature=1)\n\n        This class treats each row of a Matrix as a point in the Poincare disk.\n        Convertions to and from the Klein model are also available.\n    "), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5miolo_Poincare, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5miolo_Poincare, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_5miolo_8Poincare_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5miolo_Poincare, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_5miolo_Lorentz(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_5miolo_Lorentz *p;
  PyObject *o = __pyx_tp_new_5miolo_Manifold(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5miolo_Lorentz *)o);
  new((void*)&(p->view)) lorentz();
  return o;
}

static void __pyx_tp_dealloc_5miolo_Lorentz(PyObject *o) {
  struct __pyx_obj_5miolo_Lorentz *p = (struct __pyx_obj_5miolo_Lorentz *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_5miolo_Lorentz) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  __Pyx_call_destructor(p->view);
  __pyx_tp_dealloc_5miolo_Manifold(o);
}

static PyObject *__pyx_getprop_5miolo_7Lorentz_beta(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5miolo_7Lorentz_4beta_1__get__(o);
}

static int __pyx_setprop_5miolo_7Lorentz_beta(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5miolo_7Lorentz_4beta_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_5miolo_Lorentz[] = {
  {"isIn", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_7Lorentz_3isIn, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_7Lorentz_2isIn},
  {"dot", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_7Lorentz_5dot, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_7Lorentz_4dot},
  {"metricDistance", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_7Lorentz_7metricDistance, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_7Lorentz_6metricDistance},
  {"lorentzDistance", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_7Lorentz_9lorentzDistance, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_7Lorentz_8lorentzDistance},
  {"fromEuclidean", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_7Lorentz_11fromEuclidean, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_7Lorentz_10fromEuclidean},
  {"toEuclidean", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_7Lorentz_13toEuclidean, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_7Lorentz_12toEuclidean},
  {"exp", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_7Lorentz_15exp, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_7Lorentz_14exp},
  {"tangentProjection", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_7Lorentz_17tangentProjection, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_7Lorentz_16tangentProjection},
  {"centroidDistance", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_7Lorentz_19centroidDistance, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_7Lorentz_18centroidDistance},
  {"mean", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_7Lorentz_21mean, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_7Lorentz_20mean},
  {"mean", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_7Lorentz_23mean, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_7Lorentz_22mean},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_7Lorentz_25__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_7Lorentz_24__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_7Lorentz_27__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_7Lorentz_26__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5miolo_Lorentz[] = {
  {(char *)"beta", __pyx_getprop_5miolo_7Lorentz_beta, __pyx_setprop_5miolo_7Lorentz_beta, (char *)0, 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_5miolo_Lorentz_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_5miolo_Lorentz},
  {Py_tp_doc, (void *)PyDoc_STR("Lorentz(beta=1)\n\n        This class treats each row of a Matrix as a point in the Lorentz model.\n        Matrices passed as arguments must have dimension greater than 1.\n    ")},
  {Py_tp_methods, (void *)__pyx_methods_5miolo_Lorentz},
  {Py_tp_getset, (void *)__pyx_getsets_5miolo_Lorentz},
  {Py_tp_init, (void *)__pyx_pw_5miolo_7Lorentz_1__init__},
  {Py_tp_new, (void *)__pyx_tp_new_5miolo_Lorentz},
  {0, 0},
};
static PyType_Spec __pyx_type_5miolo_Lorentz_spec = {
  "miolo.Lorentz",
  sizeof(struct __pyx_obj_5miolo_Lorentz),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_5miolo_Lorentz_slots,
};
#else

static PyTypeObject __pyx_type_5miolo_Lorentz = {
  PyVarObject_HEAD_INIT(0, 0)
  "miolo.""Lorentz", /*tp_name*/
  sizeof(struct __pyx_obj_5miolo_Lorentz), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5miolo_Lorentz, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  PyDoc_STR("Lorentz(beta=1)\n\n        This class treats each row of a Matrix as a point in the Lorentz model.\n        Matrices passed as arguments must have dimension greater than 1.\n    "), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5miolo_Lorentz, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5miolo_Lorentz, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_5miolo_7Lorentz_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5miolo_Lorentz, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_5miolo_ufunction(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5miolo_ufunction *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_5miolo_ufunction *)o);
  new((void*)&(p->view)) ufunction();
  return o;
}

static void __pyx_tp_dealloc_5miolo_ufunction(PyObject *o) {
  struct __pyx_obj_5miolo_ufunction *p = (struct __pyx_obj_5miolo_ufunction *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_5miolo_ufunction) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  __Pyx_call_destructor(p->view);
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static PyMethodDef __pyx_methods_5miolo_ufunction[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_9ufunction_5__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_9ufunction_4__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_9ufunction_7__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_9ufunction_6__setstate_cython__},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_5miolo_ufunction_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_5miolo_ufunction},
  {Py_tp_call, (void *)__pyx_pw_5miolo_9ufunction_3__call__},
  {Py_tp_doc, (void *)PyDoc_STR("ufunction()\n\n        Basic mathematical functions. These are implemented as subclasses of \n        ufunction.\n    ")},
  {Py_tp_methods, (void *)__pyx_methods_5miolo_ufunction},
  {Py_tp_init, (void *)__pyx_pw_5miolo_9ufunction_1__init__},
  {Py_tp_new, (void *)__pyx_tp_new_5miolo_ufunction},
  {0, 0},
};
static PyType_Spec __pyx_type_5miolo_ufunction_spec = {
  "miolo.ufunction",
  sizeof(struct __pyx_obj_5miolo_ufunction),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_5miolo_ufunction_slots,
};
#else

static PyTypeObject __pyx_type_5miolo_ufunction = {
  PyVarObject_HEAD_INIT(0, 0)
  "miolo.""ufunction", /*tp_name*/
  sizeof(struct __pyx_obj_5miolo_ufunction), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5miolo_ufunction, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  __pyx_pw_5miolo_9ufunction_3__call__, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  PyDoc_STR("ufunction()\n\n        Basic mathematical functions. These are implemented as subclasses of \n        ufunction.\n    "), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5miolo_ufunction, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_5miolo_9ufunction_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5miolo_ufunction, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyMethodDef __pyx_methods_5miolo_sin[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_3sin_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_3sin_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_3sin_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_3sin_4__setstate_cython__},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_5miolo_sin_slots[] = {
  {Py_tp_doc, (void *)PyDoc_STR("sin()")},
  {Py_tp_methods, (void *)__pyx_methods_5miolo_sin},
  {Py_tp_init, (void *)__pyx_pw_5miolo_3sin_1__init__},
  {Py_tp_new, (void *)__pyx_tp_new_5miolo_ufunction},
  {0, 0},
};
static PyType_Spec __pyx_type_5miolo_sin_spec = {
  "miolo.sin",
  sizeof(struct __pyx_obj_5miolo_sin),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_5miolo_sin_slots,
};
#else

static PyTypeObject __pyx_type_5miolo_sin = {
  PyVarObject_HEAD_INIT(0, 0)
  "miolo.""sin", /*tp_name*/
  sizeof(struct __pyx_obj_5miolo_sin), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5miolo_ufunction, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  #if CYTHON_COMPILING_IN_PYPY || 0
  __pyx_pw_5miolo_9ufunction_3__call__, /*tp_call*/
  #else
  0, /*tp_call*/
  #endif
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  PyDoc_STR("sin()"), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5miolo_sin, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_5miolo_3sin_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5miolo_ufunction, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyMethodDef __pyx_methods_5miolo_cos[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_3cos_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_3cos_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_3cos_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_3cos_4__setstate_cython__},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_5miolo_cos_slots[] = {
  {Py_tp_doc, (void *)PyDoc_STR("cos()")},
  {Py_tp_methods, (void *)__pyx_methods_5miolo_cos},
  {Py_tp_init, (void *)__pyx_pw_5miolo_3cos_1__init__},
  {Py_tp_new, (void *)__pyx_tp_new_5miolo_ufunction},
  {0, 0},
};
static PyType_Spec __pyx_type_5miolo_cos_spec = {
  "miolo.cos",
  sizeof(struct __pyx_obj_5miolo_cos),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_5miolo_cos_slots,
};
#else

static PyTypeObject __pyx_type_5miolo_cos = {
  PyVarObject_HEAD_INIT(0, 0)
  "miolo.""cos", /*tp_name*/
  sizeof(struct __pyx_obj_5miolo_cos), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5miolo_ufunction, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  #if CYTHON_COMPILING_IN_PYPY || 0
  __pyx_pw_5miolo_9ufunction_3__call__, /*tp_call*/
  #else
  0, /*tp_call*/
  #endif
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  PyDoc_STR("cos()"), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5miolo_cos, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_5miolo_3cos_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5miolo_ufunction, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyMethodDef __pyx_methods_5miolo_tan[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_3tan_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_3tan_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_3tan_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_3tan_4__setstate_cython__},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_5miolo_tan_slots[] = {
  {Py_tp_doc, (void *)PyDoc_STR("tan()")},
  {Py_tp_methods, (void *)__pyx_methods_5miolo_tan},
  {Py_tp_init, (void *)__pyx_pw_5miolo_3tan_1__init__},
  {Py_tp_new, (void *)__pyx_tp_new_5miolo_ufunction},
  {0, 0},
};
static PyType_Spec __pyx_type_5miolo_tan_spec = {
  "miolo.tan",
  sizeof(struct __pyx_obj_5miolo_tan),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_5miolo_tan_slots,
};
#else

static PyTypeObject __pyx_type_5miolo_tan = {
  PyVarObject_HEAD_INIT(0, 0)
  "miolo.""tan", /*tp_name*/
  sizeof(struct __pyx_obj_5miolo_tan), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5miolo_ufunction, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  #if CYTHON_COMPILING_IN_PYPY || 0
  __pyx_pw_5miolo_9ufunction_3__call__, /*tp_call*/
  #else
  0, /*tp_call*/
  #endif
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  PyDoc_STR("tan()"), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5miolo_tan, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_5miolo_3tan_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5miolo_ufunction, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyMethodDef __pyx_methods_5miolo_asin[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_4asin_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_4asin_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_4asin_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_4asin_4__setstate_cython__},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_5miolo_asin_slots[] = {
  {Py_tp_doc, (void *)PyDoc_STR("asin()")},
  {Py_tp_methods, (void *)__pyx_methods_5miolo_asin},
  {Py_tp_init, (void *)__pyx_pw_5miolo_4asin_1__init__},
  {Py_tp_new, (void *)__pyx_tp_new_5miolo_ufunction},
  {0, 0},
};
static PyType_Spec __pyx_type_5miolo_asin_spec = {
  "miolo.asin",
  sizeof(struct __pyx_obj_5miolo_asin),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_5miolo_asin_slots,
};
#else

static PyTypeObject __pyx_type_5miolo_asin = {
  PyVarObject_HEAD_INIT(0, 0)
  "miolo.""asin", /*tp_name*/
  sizeof(struct __pyx_obj_5miolo_asin), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5miolo_ufunction, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  #if CYTHON_COMPILING_IN_PYPY || 0
  __pyx_pw_5miolo_9ufunction_3__call__, /*tp_call*/
  #else
  0, /*tp_call*/
  #endif
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  PyDoc_STR("asin()"), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5miolo_asin, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_5miolo_4asin_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5miolo_ufunction, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyMethodDef __pyx_methods_5miolo_acos[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_4acos_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_4acos_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_4acos_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_4acos_4__setstate_cython__},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_5miolo_acos_slots[] = {
  {Py_tp_doc, (void *)PyDoc_STR("acos()")},
  {Py_tp_methods, (void *)__pyx_methods_5miolo_acos},
  {Py_tp_init, (void *)__pyx_pw_5miolo_4acos_1__init__},
  {Py_tp_new, (void *)__pyx_tp_new_5miolo_ufunction},
  {0, 0},
};
static PyType_Spec __pyx_type_5miolo_acos_spec = {
  "miolo.acos",
  sizeof(struct __pyx_obj_5miolo_acos),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_5miolo_acos_slots,
};
#else

static PyTypeObject __pyx_type_5miolo_acos = {
  PyVarObject_HEAD_INIT(0, 0)
  "miolo.""acos", /*tp_name*/
  sizeof(struct __pyx_obj_5miolo_acos), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5miolo_ufunction, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  #if CYTHON_COMPILING_IN_PYPY || 0
  __pyx_pw_5miolo_9ufunction_3__call__, /*tp_call*/
  #else
  0, /*tp_call*/
  #endif
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  PyDoc_STR("acos()"), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5miolo_acos, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_5miolo_4acos_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5miolo_ufunction, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyMethodDef __pyx_methods_5miolo_atan[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_4atan_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_4atan_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_4atan_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_4atan_4__setstate_cython__},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_5miolo_atan_slots[] = {
  {Py_tp_doc, (void *)PyDoc_STR("atan()")},
  {Py_tp_methods, (void *)__pyx_methods_5miolo_atan},
  {Py_tp_init, (void *)__pyx_pw_5miolo_4atan_1__init__},
  {Py_tp_new, (void *)__pyx_tp_new_5miolo_ufunction},
  {0, 0},
};
static PyType_Spec __pyx_type_5miolo_atan_spec = {
  "miolo.atan",
  sizeof(struct __pyx_obj_5miolo_atan),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_5miolo_atan_slots,
};
#else

static PyTypeObject __pyx_type_5miolo_atan = {
  PyVarObject_HEAD_INIT(0, 0)
  "miolo.""atan", /*tp_name*/
  sizeof(struct __pyx_obj_5miolo_atan), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5miolo_ufunction, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  #if CYTHON_COMPILING_IN_PYPY || 0
  __pyx_pw_5miolo_9ufunction_3__call__, /*tp_call*/
  #else
  0, /*tp_call*/
  #endif
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  PyDoc_STR("atan()"), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5miolo_atan, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_5miolo_4atan_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5miolo_ufunction, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyMethodDef __pyx_methods_5miolo_cosh[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_4cosh_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_4cosh_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_4cosh_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_4cosh_4__setstate_cython__},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_5miolo_cosh_slots[] = {
  {Py_tp_doc, (void *)PyDoc_STR("cosh()")},
  {Py_tp_methods, (void *)__pyx_methods_5miolo_cosh},
  {Py_tp_init, (void *)__pyx_pw_5miolo_4cosh_1__init__},
  {Py_tp_new, (void *)__pyx_tp_new_5miolo_ufunction},
  {0, 0},
};
static PyType_Spec __pyx_type_5miolo_cosh_spec = {
  "miolo.cosh",
  sizeof(struct __pyx_obj_5miolo_cosh),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_5miolo_cosh_slots,
};
#else

static PyTypeObject __pyx_type_5miolo_cosh = {
  PyVarObject_HEAD_INIT(0, 0)
  "miolo.""cosh", /*tp_name*/
  sizeof(struct __pyx_obj_5miolo_cosh), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5miolo_ufunction, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  #if CYTHON_COMPILING_IN_PYPY || 0
  __pyx_pw_5miolo_9ufunction_3__call__, /*tp_call*/
  #else
  0, /*tp_call*/
  #endif
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  PyDoc_STR("cosh()"), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5miolo_cosh, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_5miolo_4cosh_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5miolo_ufunction, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyMethodDef __pyx_methods_5miolo_sinh[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_4sinh_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_4sinh_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_4sinh_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_4sinh_4__setstate_cython__},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_5miolo_sinh_slots[] = {
  {Py_tp_doc, (void *)PyDoc_STR("sinh()")},
  {Py_tp_methods, (void *)__pyx_methods_5miolo_sinh},
  {Py_tp_init, (void *)__pyx_pw_5miolo_4sinh_1__init__},
  {Py_tp_new, (void *)__pyx_tp_new_5miolo_ufunction},
  {0, 0},
};
static PyType_Spec __pyx_type_5miolo_sinh_spec = {
  "miolo.sinh",
  sizeof(struct __pyx_obj_5miolo_sinh),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_5miolo_sinh_slots,
};
#else

static PyTypeObject __pyx_type_5miolo_sinh = {
  PyVarObject_HEAD_INIT(0, 0)
  "miolo.""sinh", /*tp_name*/
  sizeof(struct __pyx_obj_5miolo_sinh), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5miolo_ufunction, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  #if CYTHON_COMPILING_IN_PYPY || 0
  __pyx_pw_5miolo_9ufunction_3__call__, /*tp_call*/
  #else
  0, /*tp_call*/
  #endif
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  PyDoc_STR("sinh()"), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5miolo_sinh, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_5miolo_4sinh_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5miolo_ufunction, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyMethodDef __pyx_methods_5miolo_tanh[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_4tanh_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_4tanh_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_4tanh_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_4tanh_4__setstate_cython__},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_5miolo_tanh_slots[] = {
  {Py_tp_doc, (void *)PyDoc_STR("tanh()")},
  {Py_tp_methods, (void *)__pyx_methods_5miolo_tanh},
  {Py_tp_init, (void *)__pyx_pw_5miolo_4tanh_1__init__},
  {Py_tp_new, (void *)__pyx_tp_new_5miolo_ufunction},
  {0, 0},
};
static PyType_Spec __pyx_type_5miolo_tanh_spec = {
  "miolo.tanh",
  sizeof(struct __pyx_obj_5miolo_tanh),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_5miolo_tanh_slots,
};
#else

static PyTypeObject __pyx_type_5miolo_tanh = {
  PyVarObject_HEAD_INIT(0, 0)
  "miolo.""tanh", /*tp_name*/
  sizeof(struct __pyx_obj_5miolo_tanh), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5miolo_ufunction, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  #if CYTHON_COMPILING_IN_PYPY || 0
  __pyx_pw_5miolo_9ufunction_3__call__, /*tp_call*/
  #else
  0, /*tp_call*/
  #endif
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  PyDoc_STR("tanh()"), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5miolo_tanh, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_5miolo_4tanh_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5miolo_ufunction, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyMethodDef __pyx_methods_5miolo_acosh[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_5acosh_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_5acosh_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_5acosh_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_5acosh_4__setstate_cython__},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_5miolo_acosh_slots[] = {
  {Py_tp_doc, (void *)PyDoc_STR("acosh()")},
  {Py_tp_methods, (void *)__pyx_methods_5miolo_acosh},
  {Py_tp_init, (void *)__pyx_pw_5miolo_5acosh_1__init__},
  {Py_tp_new, (void *)__pyx_tp_new_5miolo_ufunction},
  {0, 0},
};
static PyType_Spec __pyx_type_5miolo_acosh_spec = {
  "miolo.acosh",
  sizeof(struct __pyx_obj_5miolo_acosh),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_5miolo_acosh_slots,
};
#else

static PyTypeObject __pyx_type_5miolo_acosh = {
  PyVarObject_HEAD_INIT(0, 0)
  "miolo.""acosh", /*tp_name*/
  sizeof(struct __pyx_obj_5miolo_acosh), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5miolo_ufunction, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  #if CYTHON_COMPILING_IN_PYPY || 0
  __pyx_pw_5miolo_9ufunction_3__call__, /*tp_call*/
  #else
  0, /*tp_call*/
  #endif
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  PyDoc_STR("acosh()"), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5miolo_acosh, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_5miolo_5acosh_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5miolo_ufunction, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyMethodDef __pyx_methods_5miolo_asinh[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_5asinh_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_5asinh_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_5asinh_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_5asinh_4__setstate_cython__},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_5miolo_asinh_slots[] = {
  {Py_tp_doc, (void *)PyDoc_STR("asinh()")},
  {Py_tp_methods, (void *)__pyx_methods_5miolo_asinh},
  {Py_tp_init, (void *)__pyx_pw_5miolo_5asinh_1__init__},
  {Py_tp_new, (void *)__pyx_tp_new_5miolo_ufunction},
  {0, 0},
};
static PyType_Spec __pyx_type_5miolo_asinh_spec = {
  "miolo.asinh",
  sizeof(struct __pyx_obj_5miolo_asinh),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_5miolo_asinh_slots,
};
#else

static PyTypeObject __pyx_type_5miolo_asinh = {
  PyVarObject_HEAD_INIT(0, 0)
  "miolo.""asinh", /*tp_name*/
  sizeof(struct __pyx_obj_5miolo_asinh), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5miolo_ufunction, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  #if CYTHON_COMPILING_IN_PYPY || 0
  __pyx_pw_5miolo_9ufunction_3__call__, /*tp_call*/
  #else
  0, /*tp_call*/
  #endif
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  PyDoc_STR("asinh()"), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5miolo_asinh, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_5miolo_5asinh_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5miolo_ufunction, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyMethodDef __pyx_methods_5miolo_atanh[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_5atanh_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_5atanh_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_5atanh_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_5atanh_4__setstate_cython__},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_5miolo_atanh_slots[] = {
  {Py_tp_doc, (void *)PyDoc_STR("atanh()")},
  {Py_tp_methods, (void *)__pyx_methods_5miolo_atanh},
  {Py_tp_init, (void *)__pyx_pw_5miolo_5atanh_1__init__},
  {Py_tp_new, (void *)__pyx_tp_new_5miolo_ufunction},
  {0, 0},
};
static PyType_Spec __pyx_type_5miolo_atanh_spec = {
  "miolo.atanh",
  sizeof(struct __pyx_obj_5miolo_atanh),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_5miolo_atanh_slots,
};
#else

static PyTypeObject __pyx_type_5miolo_atanh = {
  PyVarObject_HEAD_INIT(0, 0)
  "miolo.""atanh", /*tp_name*/
  sizeof(struct __pyx_obj_5miolo_atanh), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5miolo_ufunction, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  #if CYTHON_COMPILING_IN_PYPY || 0
  __pyx_pw_5miolo_9ufunction_3__call__, /*tp_call*/
  #else
  0, /*tp_call*/
  #endif
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  PyDoc_STR("atanh()"), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5miolo_atanh, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_5miolo_5atanh_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5miolo_ufunction, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyMethodDef __pyx_methods_5miolo_exp[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_3exp_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_3exp_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_3exp_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_3exp_4__setstate_cython__},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_5miolo_exp_slots[] = {
  {Py_tp_doc, (void *)PyDoc_STR("exp()")},
  {Py_tp_methods, (void *)__pyx_methods_5miolo_exp},
  {Py_tp_init, (void *)__pyx_pw_5miolo_3exp_1__init__},
  {Py_tp_new, (void *)__pyx_tp_new_5miolo_ufunction},
  {0, 0},
};
static PyType_Spec __pyx_type_5miolo_exp_spec = {
  "miolo.exp",
  sizeof(struct __pyx_obj_5miolo_exp),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_5miolo_exp_slots,
};
#else

static PyTypeObject __pyx_type_5miolo_exp = {
  PyVarObject_HEAD_INIT(0, 0)
  "miolo.""exp", /*tp_name*/
  sizeof(struct __pyx_obj_5miolo_exp), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5miolo_ufunction, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  #if CYTHON_COMPILING_IN_PYPY || 0
  __pyx_pw_5miolo_9ufunction_3__call__, /*tp_call*/
  #else
  0, /*tp_call*/
  #endif
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  PyDoc_STR("exp()"), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5miolo_exp, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_5miolo_3exp_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5miolo_ufunction, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyMethodDef __pyx_methods_5miolo_log[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_3log_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_3log_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_3log_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_3log_4__setstate_cython__},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_5miolo_log_slots[] = {
  {Py_tp_doc, (void *)PyDoc_STR("log()")},
  {Py_tp_methods, (void *)__pyx_methods_5miolo_log},
  {Py_tp_init, (void *)__pyx_pw_5miolo_3log_1__init__},
  {Py_tp_new, (void *)__pyx_tp_new_5miolo_ufunction},
  {0, 0},
};
static PyType_Spec __pyx_type_5miolo_log_spec = {
  "miolo.log",
  sizeof(struct __pyx_obj_5miolo_log),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_5miolo_log_slots,
};
#else

static PyTypeObject __pyx_type_5miolo_log = {
  PyVarObject_HEAD_INIT(0, 0)
  "miolo.""log", /*tp_name*/
  sizeof(struct __pyx_obj_5miolo_log), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5miolo_ufunction, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  #if CYTHON_COMPILING_IN_PYPY || 0
  __pyx_pw_5miolo_9ufunction_3__call__, /*tp_call*/
  #else
  0, /*tp_call*/
  #endif
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  PyDoc_STR("log()"), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5miolo_log, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_5miolo_3log_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5miolo_ufunction, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyMethodDef __pyx_methods_5miolo_fabs[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_4fabs_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_4fabs_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_4fabs_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_4fabs_4__setstate_cython__},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_5miolo_fabs_slots[] = {
  {Py_tp_doc, (void *)PyDoc_STR("fabs()")},
  {Py_tp_methods, (void *)__pyx_methods_5miolo_fabs},
  {Py_tp_init, (void *)__pyx_pw_5miolo_4fabs_1__init__},
  {Py_tp_new, (void *)__pyx_tp_new_5miolo_ufunction},
  {0, 0},
};
static PyType_Spec __pyx_type_5miolo_fabs_spec = {
  "miolo.fabs",
  sizeof(struct __pyx_obj_5miolo_fabs),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_5miolo_fabs_slots,
};
#else

static PyTypeObject __pyx_type_5miolo_fabs = {
  PyVarObject_HEAD_INIT(0, 0)
  "miolo.""fabs", /*tp_name*/
  sizeof(struct __pyx_obj_5miolo_fabs), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5miolo_ufunction, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  #if CYTHON_COMPILING_IN_PYPY || 0
  __pyx_pw_5miolo_9ufunction_3__call__, /*tp_call*/
  #else
  0, /*tp_call*/
  #endif
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  PyDoc_STR("fabs()"), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5miolo_fabs, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_5miolo_4fabs_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5miolo_ufunction, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyMethodDef __pyx_methods_5miolo_sqrt[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_4sqrt_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_4sqrt_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_4sqrt_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_4sqrt_4__setstate_cython__},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_5miolo_sqrt_slots[] = {
  {Py_tp_doc, (void *)PyDoc_STR("sqrt()")},
  {Py_tp_methods, (void *)__pyx_methods_5miolo_sqrt},
  {Py_tp_init, (void *)__pyx_pw_5miolo_4sqrt_1__init__},
  {Py_tp_new, (void *)__pyx_tp_new_5miolo_ufunction},
  {0, 0},
};
static PyType_Spec __pyx_type_5miolo_sqrt_spec = {
  "miolo.sqrt",
  sizeof(struct __pyx_obj_5miolo_sqrt),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_5miolo_sqrt_slots,
};
#else

static PyTypeObject __pyx_type_5miolo_sqrt = {
  PyVarObject_HEAD_INIT(0, 0)
  "miolo.""sqrt", /*tp_name*/
  sizeof(struct __pyx_obj_5miolo_sqrt), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5miolo_ufunction, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  #if CYTHON_COMPILING_IN_PYPY || 0
  __pyx_pw_5miolo_9ufunction_3__call__, /*tp_call*/
  #else
  0, /*tp_call*/
  #endif
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  PyDoc_STR("sqrt()"), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5miolo_sqrt, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_5miolo_4sqrt_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5miolo_ufunction, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyMethodDef __pyx_methods_5miolo_recp[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_4recp_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_4recp_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_4recp_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_4recp_4__setstate_cython__},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_5miolo_recp_slots[] = {
  {Py_tp_doc, (void *)PyDoc_STR("recp()")},
  {Py_tp_methods, (void *)__pyx_methods_5miolo_recp},
  {Py_tp_init, (void *)__pyx_pw_5miolo_4recp_1__init__},
  {Py_tp_new, (void *)__pyx_tp_new_5miolo_ufunction},
  {0, 0},
};
static PyType_Spec __pyx_type_5miolo_recp_spec = {
  "miolo.recp",
  sizeof(struct __pyx_obj_5miolo_recp),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_5miolo_recp_slots,
};
#else

static PyTypeObject __pyx_type_5miolo_recp = {
  PyVarObject_HEAD_INIT(0, 0)
  "miolo.""recp", /*tp_name*/
  sizeof(struct __pyx_obj_5miolo_recp), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5miolo_ufunction, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  #if CYTHON_COMPILING_IN_PYPY || 0
  __pyx_pw_5miolo_9ufunction_3__call__, /*tp_call*/
  #else
  0, /*tp_call*/
  #endif
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  PyDoc_STR("recp()"), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5miolo_recp, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_5miolo_4recp_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5miolo_ufunction, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_5miolo_classSeparation(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5miolo_classSeparation *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_5miolo_classSeparation *)o);
  new((void*)&(p->view)) classSeparation();
  return o;
}

static void __pyx_tp_dealloc_5miolo_classSeparation(PyObject *o) {
  struct __pyx_obj_5miolo_classSeparation *p = (struct __pyx_obj_5miolo_classSeparation *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_5miolo_classSeparation) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  __Pyx_call_destructor(p->view);
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static PyMethodDef __pyx_methods_5miolo_classSeparation[] = {
  {"intra", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_15classSeparation_1intra, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_15classSeparation_intra},
  {"extra", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_15classSeparation_3extra, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_15classSeparation_2extra},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_15classSeparation_5__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_15classSeparation_4__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_15classSeparation_7__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_15classSeparation_6__setstate_cython__},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_5miolo_classSeparation_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_5miolo_classSeparation},
  {Py_tp_methods, (void *)__pyx_methods_5miolo_classSeparation},
  {Py_tp_new, (void *)__pyx_tp_new_5miolo_classSeparation},
  {0, 0},
};
static PyType_Spec __pyx_type_5miolo_classSeparation_spec = {
  "miolo.classSeparation",
  sizeof(struct __pyx_obj_5miolo_classSeparation),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_5miolo_classSeparation_slots,
};
#else

static PyTypeObject __pyx_type_5miolo_classSeparation = {
  PyVarObject_HEAD_INIT(0, 0)
  "miolo.""classSeparation", /*tp_name*/
  sizeof(struct __pyx_obj_5miolo_classSeparation), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5miolo_classSeparation, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5miolo_classSeparation, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5miolo_classSeparation, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_5miolo_weightedSquareDistance(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5miolo_weightedSquareDistance *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_5miolo_weightedSquareDistance *)o);
  new((void*)&(p->view)) weightedSquareDistance();
  return o;
}

static void __pyx_tp_dealloc_5miolo_weightedSquareDistance(PyObject *o) {
  struct __pyx_obj_5miolo_weightedSquareDistance *p = (struct __pyx_obj_5miolo_weightedSquareDistance *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_5miolo_weightedSquareDistance) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  __Pyx_call_destructor(p->view);
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static PyMethodDef __pyx_methods_5miolo_weightedSquareDistance[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_22weightedSquareDistance_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_22weightedSquareDistance_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_22weightedSquareDistance_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_22weightedSquareDistance_4__setstate_cython__},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_5miolo_weightedSquareDistance_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_5miolo_weightedSquareDistance},
  {Py_tp_call, (void *)__pyx_pw_5miolo_22weightedSquareDistance_1__call__},
  {Py_tp_methods, (void *)__pyx_methods_5miolo_weightedSquareDistance},
  {Py_tp_new, (void *)__pyx_tp_new_5miolo_weightedSquareDistance},
  {0, 0},
};
static PyType_Spec __pyx_type_5miolo_weightedSquareDistance_spec = {
  "miolo.weightedSquareDistance",
  sizeof(struct __pyx_obj_5miolo_weightedSquareDistance),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_5miolo_weightedSquareDistance_slots,
};
#else

static PyTypeObject __pyx_type_5miolo_weightedSquareDistance = {
  PyVarObject_HEAD_INIT(0, 0)
  "miolo.""weightedSquareDistance", /*tp_name*/
  sizeof(struct __pyx_obj_5miolo_weightedSquareDistance), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5miolo_weightedSquareDistance, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  __pyx_pw_5miolo_22weightedSquareDistance_1__call__, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5miolo_weightedSquareDistance, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5miolo_weightedSquareDistance, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_5miolo_weightedDotProduct(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5miolo_weightedDotProduct *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_5miolo_weightedDotProduct *)o);
  new((void*)&(p->view)) weightedDot();
  return o;
}

static void __pyx_tp_dealloc_5miolo_weightedDotProduct(PyObject *o) {
  struct __pyx_obj_5miolo_weightedDotProduct *p = (struct __pyx_obj_5miolo_weightedDotProduct *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_5miolo_weightedDotProduct) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  __Pyx_call_destructor(p->view);
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static PyMethodDef __pyx_methods_5miolo_weightedDotProduct[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_18weightedDotProduct_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_18weightedDotProduct_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_18weightedDotProduct_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_18weightedDotProduct_4__setstate_cython__},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_5miolo_weightedDotProduct_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_5miolo_weightedDotProduct},
  {Py_tp_call, (void *)__pyx_pw_5miolo_18weightedDotProduct_1__call__},
  {Py_tp_methods, (void *)__pyx_methods_5miolo_weightedDotProduct},
  {Py_tp_new, (void *)__pyx_tp_new_5miolo_weightedDotProduct},
  {0, 0},
};
static PyType_Spec __pyx_type_5miolo_weightedDotProduct_spec = {
  "miolo.weightedDotProduct",
  sizeof(struct __pyx_obj_5miolo_weightedDotProduct),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_5miolo_weightedDotProduct_slots,
};
#else

static PyTypeObject __pyx_type_5miolo_weightedDotProduct = {
  PyVarObject_HEAD_INIT(0, 0)
  "miolo.""weightedDotProduct", /*tp_name*/
  sizeof(struct __pyx_obj_5miolo_weightedDotProduct), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5miolo_weightedDotProduct, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  __pyx_pw_5miolo_18weightedDotProduct_1__call__, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5miolo_weightedDotProduct, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5miolo_weightedDotProduct, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_5miolo_pottsEnergy(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5miolo_pottsEnergy *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_5miolo_pottsEnergy *)o);
  new((void*)&(p->view)) pottsEnergy();
  return o;
}

static void __pyx_tp_dealloc_5miolo_pottsEnergy(PyObject *o) {
  struct __pyx_obj_5miolo_pottsEnergy *p = (struct __pyx_obj_5miolo_pottsEnergy *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_5miolo_pottsEnergy) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  __Pyx_call_destructor(p->view);
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static PyMethodDef __pyx_methods_5miolo_pottsEnergy[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_11pottsEnergy_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_11pottsEnergy_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5miolo_11pottsEnergy_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5miolo_11pottsEnergy_4__setstate_cython__},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_5miolo_pottsEnergy_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_5miolo_pottsEnergy},
  {Py_tp_call, (void *)__pyx_pw_5miolo_11pottsEnergy_1__call__},
  {Py_tp_methods, (void *)__pyx_methods_5miolo_pottsEnergy},
  {Py_tp_new, (void *)__pyx_tp_new_5miolo_pottsEnergy},
  {0, 0},
};
static PyType_Spec __pyx_type_5miolo_pottsEnergy_spec = {
  "miolo.pottsEnergy",
  sizeof(struct __pyx_obj_5miolo_pottsEnergy),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_5miolo_pottsEnergy_slots,
};
#else

static PyTypeObject __pyx_type_5miolo_pottsEnergy = {
  PyVarObject_HEAD_INIT(0, 0)
  "miolo.""pottsEnergy", /*tp_name*/
  sizeof(struct __pyx_obj_5miolo_pottsEnergy), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5miolo_pottsEnergy, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  __pyx_pw_5miolo_11pottsEnergy_1__call__, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5miolo_pottsEnergy, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5miolo_pottsEnergy, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_array __pyx_vtable_array;

static PyObject *__pyx_tp_new_array(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_array_obj *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_array_obj *)o);
  p->__pyx_vtab = __pyx_vtabptr_array;
  p->mode = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->_format = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_array___cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_array(PyObject *o) {
  struct __pyx_array_obj *p = (struct __pyx_array_obj *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_array) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_array___dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->mode);
  Py_CLEAR(p->_format);
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}
static PyObject *__pyx_sq_item_array(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static int __pyx_mp_ass_subscript_array(PyObject *o, PyObject *i, PyObject *v) {
  if (v) {
    return __pyx_array___setitem__(o, i, v);
  }
  else {
    __Pyx_TypeName o_type_name;
    o_type_name = __Pyx_PyType_GetName(Py_TYPE(o));
    PyErr_Format(PyExc_NotImplementedError,
      "Subscript deletion not supported by " __Pyx_FMT_TYPENAME, o_type_name);
    __Pyx_DECREF_TypeName(o_type_name);
    return -1;
  }
}

static PyObject *__pyx_tp_getattro_array(PyObject *o, PyObject *n) {
  PyObject *v = __Pyx_PyObject_GenericGetAttr(o, n);
  if (!v && PyErr_ExceptionMatches(PyExc_AttributeError)) {
    PyErr_Clear();
    v = __pyx_array___getattr__(o, n);
  }
  return v;
}

static PyObject *__pyx_getprop___pyx_array_memview(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_5array_7memview_1__get__(o);
}

static PyMethodDef __pyx_methods_array[] = {
  {"__getattr__", (PyCFunction)__pyx_array___getattr__, METH_O|METH_COEXIST, 0},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw___pyx_array_1__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw___pyx_array_3__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_array[] = {
  {(char *)"memview", __pyx_getprop___pyx_array_memview, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
#if !CYTHON_COMPILING_IN_LIMITED_API

static PyBufferProcs __pyx_tp_as_buffer_array = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  __pyx_array_getbuffer, /*bf_getbuffer*/
  0, /*bf_releasebuffer*/
};
#endif
static PyType_Slot __pyx_type___pyx_array_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_array},
  {Py_sq_length, (void *)__pyx_array___len__},
  {Py_sq_item, (void *)__pyx_sq_item_array},
  {Py_mp_length, (void *)__pyx_array___len__},
  {Py_mp_subscript, (void *)__pyx_array___getitem__},
  {Py_mp_ass_subscript, (void *)__pyx_mp_ass_subscript_array},
  {Py_tp_getattro, (void *)__pyx_tp_getattro_array},
  #if defined(Py_bf_getbuffer)
  {Py_bf_getbuffer, (void *)__pyx_array_getbuffer},
  #endif
  {Py_tp_methods, (void *)__pyx_methods_array},
  {Py_tp_getset, (void *)__pyx_getsets_array},
  {Py_tp_new, (void *)__pyx_tp_new_array},
  {0, 0},
};
static PyType_Spec __pyx_type___pyx_array_spec = {
  "miolo.array",
  sizeof(struct __pyx_array_obj),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_SEQUENCE,
  __pyx_type___pyx_array_slots,
};
#else

static PySequenceMethods __pyx_tp_as_sequence_array = {
  __pyx_array___len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_array, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_array = {
  __pyx_array___len__, /*mp_length*/
  __pyx_array___getitem__, /*mp_subscript*/
  __pyx_mp_ass_subscript_array, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_array = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  __pyx_array_getbuffer, /*bf_getbuffer*/
  0, /*bf_releasebuffer*/
};

static PyTypeObject __pyx_type___pyx_array = {
  PyVarObject_HEAD_INIT(0, 0)
  "miolo.""array", /*tp_name*/
  sizeof(struct __pyx_array_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_array, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_array, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_array, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  __pyx_tp_getattro_array, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_array, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_SEQUENCE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_array, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_array, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_array, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_Enum(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_MemviewEnum_obj *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_MemviewEnum_obj *)o);
  p->name = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_Enum(PyObject *o) {
  struct __pyx_MemviewEnum_obj *p = (struct __pyx_MemviewEnum_obj *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_Enum) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->name);
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static int __pyx_tp_traverse_Enum(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_MemviewEnum_obj *p = (struct __pyx_MemviewEnum_obj *)o;
  if (p->name) {
    e = (*v)(p->name, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_Enum(PyObject *o) {
  PyObject* tmp;
  struct __pyx_MemviewEnum_obj *p = (struct __pyx_MemviewEnum_obj *)o;
  tmp = ((PyObject*)p->name);
  p->name = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_specialmethod___pyx_MemviewEnum___repr__(PyObject *self, CYTHON_UNUSED PyObject *arg) {
  return __pyx_MemviewEnum___repr__(self);
}

static PyMethodDef __pyx_methods_Enum[] = {
  {"__repr__", (PyCFunction)__pyx_specialmethod___pyx_MemviewEnum___repr__, METH_NOARGS|METH_COEXIST, 0},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw___pyx_MemviewEnum_1__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw___pyx_MemviewEnum_3__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type___pyx_MemviewEnum_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_Enum},
  {Py_tp_repr, (void *)__pyx_MemviewEnum___repr__},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_Enum},
  {Py_tp_clear, (void *)__pyx_tp_clear_Enum},
  {Py_tp_methods, (void *)__pyx_methods_Enum},
  {Py_tp_init, (void *)__pyx_MemviewEnum___init__},
  {Py_tp_new, (void *)__pyx_tp_new_Enum},
  {0, 0},
};
static PyType_Spec __pyx_type___pyx_MemviewEnum_spec = {
  "miolo.Enum",
  sizeof(struct __pyx_MemviewEnum_obj),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type___pyx_MemviewEnum_slots,
};
#else

static PyTypeObject __pyx_type___pyx_MemviewEnum = {
  PyVarObject_HEAD_INIT(0, 0)
  "miolo.""Enum", /*tp_name*/
  sizeof(struct __pyx_MemviewEnum_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_Enum, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_MemviewEnum___repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_Enum, /*tp_traverse*/
  __pyx_tp_clear_Enum, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_Enum, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_MemviewEnum___init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_Enum, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_memoryview __pyx_vtable_memoryview;

static PyObject *__pyx_tp_new_memoryview(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_memoryview_obj *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_memoryview_obj *)o);
  p->__pyx_vtab = __pyx_vtabptr_memoryview;
  p->obj = Py_None; Py_INCREF(Py_None);
  p->_size = Py_None; Py_INCREF(Py_None);
  p->_array_interface = Py_None; Py_INCREF(Py_None);
  p->view.obj = NULL;
  if (unlikely(__pyx_memoryview___cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_memoryview(PyObject *o) {
  struct __pyx_memoryview_obj *p = (struct __pyx_memoryview_obj *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_memoryview) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_memoryview___dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->obj);
  Py_CLEAR(p->_size);
  Py_CLEAR(p->_array_interface);
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static int __pyx_tp_traverse_memoryview(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_memoryview_obj *p = (struct __pyx_memoryview_obj *)o;
  if (p->obj) {
    e = (*v)(p->obj, a); if (e) return e;
  }
  if (p->_size) {
    e = (*v)(p->_size, a); if (e) return e;
  }
  if (p->_array_interface) {
    e = (*v)(p->_array_interface, a); if (e) return e;
  }
  if (p->view.obj) {
    e = (*v)(p->view.obj, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_memoryview(PyObject *o) {
  PyObject* tmp;
  struct __pyx_memoryview_obj *p = (struct __pyx_memoryview_obj *)o;
  tmp = ((PyObject*)p->obj);
  p->obj = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_size);
  p->_size = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_array_interface);
  p->_array_interface = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  Py_CLEAR(p->view.obj);
  return 0;
}
static PyObject *__pyx_sq_item_memoryview(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static int __pyx_mp_ass_subscript_memoryview(PyObject *o, PyObject *i, PyObject *v) {
  if (v) {
    return __pyx_memoryview___setitem__(o, i, v);
  }
  else {
    __Pyx_TypeName o_type_name;
    o_type_name = __Pyx_PyType_GetName(Py_TYPE(o));
    PyErr_Format(PyExc_NotImplementedError,
      "Subscript deletion not supported by " __Pyx_FMT_TYPENAME, o_type_name);
    __Pyx_DECREF_TypeName(o_type_name);
    return -1;
  }
}

static PyObject *__pyx_getprop___pyx_memoryview_T(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_1T_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_base(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_4base_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_shape(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_5shape_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_strides(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_7strides_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_suboffsets(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_10suboffsets_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_ndim(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_4ndim_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_itemsize(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_8itemsize_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_nbytes(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_6nbytes_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_4size_1__get__(o);
}

static PyObject *__pyx_specialmethod___pyx_memoryview___repr__(PyObject *self, CYTHON_UNUSED PyObject *arg) {
  return __pyx_memoryview___repr__(self);
}

static PyMethodDef __pyx_methods_memoryview[] = {
  {"__repr__", (PyCFunction)__pyx_specialmethod___pyx_memoryview___repr__, METH_NOARGS|METH_COEXIST, 0},
  {"is_c_contig", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_memoryview_is_c_contig, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"is_f_contig", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_memoryview_is_f_contig, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"copy", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_memoryview_copy, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"copy_fortran", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_memoryview_copy_fortran, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw___pyx_memoryview_1__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw___pyx_memoryview_3__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_memoryview[] = {
  {(char *)"T", __pyx_getprop___pyx_memoryview_T, 0, (char *)0, 0},
  {(char *)"base", __pyx_getprop___pyx_memoryview_base, 0, (char *)0, 0},
  {(char *)"shape", __pyx_getprop___pyx_memoryview_shape, 0, (char *)0, 0},
  {(char *)"strides", __pyx_getprop___pyx_memoryview_strides, 0, (char *)0, 0},
  {(char *)"suboffsets", __pyx_getprop___pyx_memoryview_suboffsets, 0, (char *)0, 0},
  {(char *)"ndim", __pyx_getprop___pyx_memoryview_ndim, 0, (char *)0, 0},
  {(char *)"itemsize", __pyx_getprop___pyx_memoryview_itemsize, 0, (char *)0, 0},
  {(char *)"nbytes", __pyx_getprop___pyx_memoryview_nbytes, 0, (char *)0, 0},
  {(char *)"size", __pyx_getprop___pyx_memoryview_size, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
#if !CYTHON_COMPILING_IN_LIMITED_API

static PyBufferProcs __pyx_tp_as_buffer_memoryview = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  __pyx_memoryview_getbuffer, /*bf_getbuffer*/
  0, /*bf_releasebuffer*/
};
#endif
static PyType_Slot __pyx_type___pyx_memoryview_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_memoryview},
  {Py_tp_repr, (void *)__pyx_memoryview___repr__},
  {Py_sq_length, (void *)__pyx_memoryview___len__},
  {Py_sq_item, (void *)__pyx_sq_item_memoryview},
  {Py_mp_length, (void *)__pyx_memoryview___len__},
  {Py_mp_subscript, (void *)__pyx_memoryview___getitem__},
  {Py_mp_ass_subscript, (void *)__pyx_mp_ass_subscript_memoryview},
  {Py_tp_str, (void *)__pyx_memoryview___str__},
  #if defined(Py_bf_getbuffer)
  {Py_bf_getbuffer, (void *)__pyx_memoryview_getbuffer},
  #endif
  {Py_tp_traverse, (void *)__pyx_tp_traverse_memoryview},
  {Py_tp_clear, (void *)__pyx_tp_clear_memoryview},
  {Py_tp_methods, (void *)__pyx_methods_memoryview},
  {Py_tp_getset, (void *)__pyx_getsets_memoryview},
  {Py_tp_new, (void *)__pyx_tp_new_memoryview},
  {0, 0},
};
static PyType_Spec __pyx_type___pyx_memoryview_spec = {
  "miolo.memoryview",
  sizeof(struct __pyx_memoryview_obj),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type___pyx_memoryview_slots,
};
#else

static PySequenceMethods __pyx_tp_as_sequence_memoryview = {
  __pyx_memoryview___len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_memoryview, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_memoryview = {
  __pyx_memoryview___len__, /*mp_length*/
  __pyx_memoryview___getitem__, /*mp_subscript*/
  __pyx_mp_ass_subscript_memoryview, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_memoryview = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  __pyx_memoryview_getbuffer, /*bf_getbuffer*/
  0, /*bf_releasebuffer*/
};

static PyTypeObject __pyx_type___pyx_memoryview = {
  PyVarObject_HEAD_INIT(0, 0)
  "miolo.""memoryview", /*tp_name*/
  sizeof(struct __pyx_memoryview_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_memoryview, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_memoryview___repr__, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_memoryview, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_memoryview, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_memoryview___str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_memoryview, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_memoryview, /*tp_traverse*/
  __pyx_tp_clear_memoryview, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_memoryview, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_memoryview, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_memoryview, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct__memoryviewslice __pyx_vtable__memoryviewslice;

static PyObject *__pyx_tp_new__memoryviewslice(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_memoryviewslice_obj *p;
  PyObject *o = __pyx_tp_new_memoryview(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_memoryviewslice_obj *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_memoryview*)__pyx_vtabptr__memoryviewslice;
  new((void*)&(p->from_slice)) __Pyx_memviewslice();
  p->from_object = Py_None; Py_INCREF(Py_None);
  p->from_slice.memview = NULL;
  return o;
}

static void __pyx_tp_dealloc__memoryviewslice(PyObject *o) {
  struct __pyx_memoryviewslice_obj *p = (struct __pyx_memoryviewslice_obj *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc__memoryviewslice) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_memoryviewslice___dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  __Pyx_call_destructor(p->from_slice);
  Py_CLEAR(p->from_object);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_memoryview(o);
}

static int __pyx_tp_traverse__memoryviewslice(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_memoryviewslice_obj *p = (struct __pyx_memoryviewslice_obj *)o;
  e = __pyx_tp_traverse_memoryview(o, v, a); if (e) return e;
  if (p->from_object) {
    e = (*v)(p->from_object, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear__memoryviewslice(PyObject *o) {
  PyObject* tmp;
  struct __pyx_memoryviewslice_obj *p = (struct __pyx_memoryviewslice_obj *)o;
  __pyx_tp_clear_memoryview(o);
  tmp = ((PyObject*)p->from_object);
  p->from_object = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  __PYX_XCLEAR_MEMVIEW(&p->from_slice, 1);
  return 0;
}

static PyMethodDef __pyx_methods__memoryviewslice[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw___pyx_memoryviewslice_1__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw___pyx_memoryviewslice_3__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type___pyx_memoryviewslice_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc__memoryviewslice},
  {Py_tp_doc, (void *)PyDoc_STR("Internal class for passing memoryview slices to Python")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse__memoryviewslice},
  {Py_tp_clear, (void *)__pyx_tp_clear__memoryviewslice},
  {Py_tp_methods, (void *)__pyx_methods__memoryviewslice},
  {Py_tp_new, (void *)__pyx_tp_new__memoryviewslice},
  {0, 0},
};
static PyType_Spec __pyx_type___pyx_memoryviewslice_spec = {
  "miolo._memoryviewslice",
  sizeof(struct __pyx_memoryviewslice_obj),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_SEQUENCE,
  __pyx_type___pyx_memoryviewslice_slots,
};
#else

static PyTypeObject __pyx_type___pyx_memoryviewslice = {
  PyVarObject_HEAD_INIT(0, 0)
  "miolo.""_memoryviewslice", /*tp_name*/
  sizeof(struct __pyx_memoryviewslice_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc__memoryviewslice, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY || 0
  __pyx_memoryview___repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  #if CYTHON_COMPILING_IN_PYPY || 0
  __pyx_memoryview___str__, /*tp_str*/
  #else
  0, /*tp_str*/
  #endif
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_SEQUENCE, /*tp_flags*/
  PyDoc_STR("Internal class for passing memoryview slices to Python"), /*tp_doc*/
  __pyx_tp_traverse__memoryviewslice, /*tp_traverse*/
  __pyx_tp_clear__memoryviewslice, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods__memoryviewslice, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new__memoryviewslice, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif
/* #### Code section: pystring_table ### */

static int __Pyx_CreateStringTabAndInitStrings(void) {
  __Pyx_StringTabEntry __pyx_string_tab[] = {
    {&__pyx_kp_u_, __pyx_k_, sizeof(__pyx_k_), 0, 1, 0, 0},
    {&__pyx_n_s_A, __pyx_k_A, sizeof(__pyx_k_A), 0, 0, 1, 1},
    {&__pyx_n_s_ASCII, __pyx_k_ASCII, sizeof(__pyx_k_ASCII), 0, 0, 1, 1},
    {&__pyx_kp_s_A_and_B_must_have_same_ctype, __pyx_k_A_and_B_must_have_same_ctype, sizeof(__pyx_k_A_and_B_must_have_same_ctype), 0, 0, 1, 0},
    {&__pyx_kp_s_A_and_B_must_have_same_number_of, __pyx_k_A_and_B_must_have_same_number_of, sizeof(__pyx_k_A_and_B_must_have_same_number_of), 0, 0, 1, 0},
    {&__pyx_kp_s_All_dimensions_preceding_dimensi, __pyx_k_All_dimensions_preceding_dimensi, sizeof(__pyx_k_All_dimensions_preceding_dimensi), 0, 0, 1, 0},
    {&__pyx_n_s_AssertionError, __pyx_k_AssertionError, sizeof(__pyx_k_AssertionError), 0, 0, 1, 1},
    {&__pyx_kp_s_Attempting_division_by_zero, __pyx_k_Attempting_division_by_zero, sizeof(__pyx_k_Attempting_division_by_zero), 0, 0, 1, 0},
    {&__pyx_kp_s_Avoiding_division_by_zero, __pyx_k_Avoiding_division_by_zero, sizeof(__pyx_k_Avoiding_division_by_zero), 0, 0, 1, 0},
    {&__pyx_n_s_B, __pyx_k_B, sizeof(__pyx_k_B), 0, 0, 1, 1},
    {&__pyx_kp_s_Buffer_view_does_not_expose_stri, __pyx_k_Buffer_view_does_not_expose_stri, sizeof(__pyx_k_Buffer_view_does_not_expose_stri), 0, 0, 1, 0},
    {&__pyx_kp_s_Can_only_create_a_buffer_that_is, __pyx_k_Can_only_create_a_buffer_that_is, sizeof(__pyx_k_Can_only_create_a_buffer_that_is), 0, 0, 1, 0},
    {&__pyx_kp_s_Cannot_assign_to_read_only_memor, __pyx_k_Cannot_assign_to_read_only_memor, sizeof(__pyx_k_Cannot_assign_to_read_only_memor), 0, 0, 1, 0},
    {&__pyx_kp_s_Cannot_create_writable_memory_vi, __pyx_k_Cannot_create_writable_memory_vi, sizeof(__pyx_k_Cannot_create_writable_memory_vi), 0, 0, 1, 0},
    {&__pyx_kp_s_Cannot_divide_by_zero, __pyx_k_Cannot_divide_by_zero, sizeof(__pyx_k_Cannot_divide_by_zero), 0, 0, 1, 0},
    {&__pyx_kp_u_Cannot_index_with_type, __pyx_k_Cannot_index_with_type, sizeof(__pyx_k_Cannot_index_with_type), 0, 1, 0, 0},
    {&__pyx_kp_s_Cannot_transpose_memoryview_with, __pyx_k_Cannot_transpose_memoryview_with, sizeof(__pyx_k_Cannot_transpose_memoryview_with), 0, 0, 1, 0},
    {&__pyx_kp_s_Col_range_is_out_of_bounds, __pyx_k_Col_range_is_out_of_bounds, sizeof(__pyx_k_Col_range_is_out_of_bounds), 0, 0, 1, 0},
    {&__pyx_n_s_Diagonal, __pyx_k_Diagonal, sizeof(__pyx_k_Diagonal), 0, 0, 1, 1},
    {&__pyx_n_s_Diagonal___reduce_cython, __pyx_k_Diagonal___reduce_cython, sizeof(__pyx_k_Diagonal___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_Diagonal___setstate_cython, __pyx_k_Diagonal___setstate_cython, sizeof(__pyx_k_Diagonal___setstate_cython), 0, 0, 1, 1},
    {&__pyx_kp_s_Diagonals_must_have_same_ctype, __pyx_k_Diagonals_must_have_same_ctype, sizeof(__pyx_k_Diagonals_must_have_same_ctype), 0, 0, 1, 0},
    {&__pyx_n_s_Digraph, __pyx_k_Digraph, sizeof(__pyx_k_Digraph), 0, 0, 1, 1},
    {&__pyx_n_s_Digraph___reduce_cython, __pyx_k_Digraph___reduce_cython, sizeof(__pyx_k_Digraph___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_Digraph___setstate_cython, __pyx_k_Digraph___setstate_cython, sizeof(__pyx_k_Digraph___setstate_cython), 0, 0, 1, 1},
    {&__pyx_kp_s_Digraph_and_Matrix_must_share_sa, __pyx_k_Digraph_and_Matrix_must_share_sa, sizeof(__pyx_k_Digraph_and_Matrix_must_share_sa), 0, 0, 1, 0},
    {&__pyx_n_s_Digraph_connect, __pyx_k_Digraph_connect, sizeof(__pyx_k_Digraph_connect), 0, 0, 1, 1},
    {&__pyx_n_s_Digraph_connectRegular, __pyx_k_Digraph_connectRegular, sizeof(__pyx_k_Digraph_connectRegular), 0, 0, 1, 1},
    {&__pyx_n_s_Digraph_copy, __pyx_k_Digraph_copy, sizeof(__pyx_k_Digraph_copy), 0, 0, 1, 1},
    {&__pyx_n_s_Digraph_gaussianScale, __pyx_k_Digraph_gaussianScale, sizeof(__pyx_k_Digraph_gaussianScale), 0, 0, 1, 1},
    {&__pyx_n_s_Digraph_normalize, __pyx_k_Digraph_normalize, sizeof(__pyx_k_Digraph_normalize), 0, 0, 1, 1},
    {&__pyx_n_s_Digraph_sameShape, __pyx_k_Digraph_sameShape, sizeof(__pyx_k_Digraph_sameShape), 0, 0, 1, 1},
    {&__pyx_n_s_Digraph_shape, __pyx_k_Digraph_shape, sizeof(__pyx_k_Digraph_shape), 0, 0, 1, 1},
    {&__pyx_n_s_Digraph_symmetrize, __pyx_k_Digraph_symmetrize, sizeof(__pyx_k_Digraph_symmetrize), 0, 0, 1, 1},
    {&__pyx_n_s_Digraph_toGraph, __pyx_k_Digraph_toGraph, sizeof(__pyx_k_Digraph_toGraph), 0, 0, 1, 1},
    {&__pyx_n_s_Digraph_transpose, __pyx_k_Digraph_transpose, sizeof(__pyx_k_Digraph_transpose), 0, 0, 1, 1},
    {&__pyx_kp_s_Digraphs_must_have_same_shapes, __pyx_k_Digraphs_must_have_same_shapes, sizeof(__pyx_k_Digraphs_must_have_same_shapes), 0, 0, 1, 0},
    {&__pyx_kp_s_Digraphs_must_share_same_ctype, __pyx_k_Digraphs_must_share_same_ctype, sizeof(__pyx_k_Digraphs_must_share_same_ctype), 0, 0, 1, 0},
    {&__pyx_kp_s_Dimension_d_is_not_direct, __pyx_k_Dimension_d_is_not_direct, sizeof(__pyx_k_Dimension_d_is_not_direct), 0, 0, 1, 0},
    {&__pyx_kp_s_Dimension_of_diagonals_must_be_e, __pyx_k_Dimension_of_diagonals_must_be_e, sizeof(__pyx_k_Dimension_of_diagonals_must_be_e), 0, 0, 1, 0},
    {&__pyx_kp_s_Dist_rows_must_be_equal_to_label, __pyx_k_Dist_rows_must_be_equal_to_label, sizeof(__pyx_k_Dist_rows_must_be_equal_to_label), 0, 0, 1, 0},
    {&__pyx_n_s_E, __pyx_k_E, sizeof(__pyx_k_E), 0, 0, 1, 1},
    {&__pyx_n_s_Ellipsis, __pyx_k_Ellipsis, sizeof(__pyx_k_Ellipsis), 0, 0, 1, 1},
    {&__pyx_kp_s_Empty_shape_tuple_for_cython_arr, __pyx_k_Empty_shape_tuple_for_cython_arr, sizeof(__pyx_k_Empty_shape_tuple_for_cython_arr), 0, 0, 1, 0},
    {&__pyx_kp_s_Entries_of_only_exceed_self_rows, __pyx_k_Entries_of_only_exceed_self_rows, sizeof(__pyx_k_Entries_of_only_exceed_self_rows), 0, 0, 1, 0},
    {&__pyx_n_s_Euclidean, __pyx_k_Euclidean, sizeof(__pyx_k_Euclidean), 0, 0, 1, 1},
    {&__pyx_n_s_Euclidean___reduce_cython, __pyx_k_Euclidean___reduce_cython, sizeof(__pyx_k_Euclidean___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_Euclidean___setstate_cython, __pyx_k_Euclidean___setstate_cython, sizeof(__pyx_k_Euclidean___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_Euclidean_centroidDistance, __pyx_k_Euclidean_centroidDistance, sizeof(__pyx_k_Euclidean_centroidDistance), 0, 0, 1, 1},
    {&__pyx_n_s_Euclidean_distance, __pyx_k_Euclidean_distance, sizeof(__pyx_k_Euclidean_distance), 0, 0, 1, 1},
    {&__pyx_n_s_Euclidean_dot, __pyx_k_Euclidean_dot, sizeof(__pyx_k_Euclidean_dot), 0, 0, 1, 1},
    {&__pyx_n_s_Euclidean_gaussianNormalize, __pyx_k_Euclidean_gaussianNormalize, sizeof(__pyx_k_Euclidean_gaussianNormalize), 0, 0, 1, 1},
    {&__pyx_n_s_Euclidean_kmpp, __pyx_k_Euclidean_kmpp, sizeof(__pyx_k_Euclidean_kmpp), 0, 0, 1, 1},
    {&__pyx_n_s_Euclidean_mean, __pyx_k_Euclidean_mean, sizeof(__pyx_k_Euclidean_mean), 0, 0, 1, 1},
    {&__pyx_n_s_Euclidean_minmaxNormalize, __pyx_k_Euclidean_minmaxNormalize, sizeof(__pyx_k_Euclidean_minmaxNormalize), 0, 0, 1, 1},
    {&__pyx_n_s_Euclidean_rowNormalize, __pyx_k_Euclidean_rowNormalize, sizeof(__pyx_k_Euclidean_rowNormalize), 0, 0, 1, 1},
    {&__pyx_n_s_Euclidean_variance, __pyx_k_Euclidean_variance, sizeof(__pyx_k_Euclidean_variance), 0, 0, 1, 1},
    {&__pyx_kp_s_Failed_to_allocate_memory, __pyx_k_Failed_to_allocate_memory, sizeof(__pyx_k_Failed_to_allocate_memory), 0, 0, 1, 0},
    {&__pyx_n_s_G, __pyx_k_G, sizeof(__pyx_k_G), 0, 0, 1, 1},
    {&__pyx_n_s_Graph, __pyx_k_Graph, sizeof(__pyx_k_Graph), 0, 0, 1, 1},
    {&__pyx_kp_s_Graph_Matrix_operations_require, __pyx_k_Graph_Matrix_operations_require, sizeof(__pyx_k_Graph_Matrix_operations_require), 0, 0, 1, 0},
    {&__pyx_n_s_Graph___reduce_cython, __pyx_k_Graph___reduce_cython, sizeof(__pyx_k_Graph___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_Graph___setstate_cython, __pyx_k_Graph___setstate_cython, sizeof(__pyx_k_Graph___setstate_cython), 0, 0, 1, 1},
    {&__pyx_kp_s_Graph_and_Matrix_must_have_same, __pyx_k_Graph_and_Matrix_must_have_same, sizeof(__pyx_k_Graph_and_Matrix_must_have_same), 0, 0, 1, 0},
    {&__pyx_n_s_Graph_degree, __pyx_k_Graph_degree, sizeof(__pyx_k_Graph_degree), 0, 0, 1, 1},
    {&__pyx_n_s_Graph_gaussianScale, __pyx_k_Graph_gaussianScale, sizeof(__pyx_k_Graph_gaussianScale), 0, 0, 1, 1},
    {&__pyx_n_s_Graph_isolatedNodes, __pyx_k_Graph_isolatedNodes, sizeof(__pyx_k_Graph_isolatedNodes), 0, 0, 1, 1},
    {&__pyx_n_s_Graph_laplacian, __pyx_k_Graph_laplacian, sizeof(__pyx_k_Graph_laplacian), 0, 0, 1, 1},
    {&__pyx_n_s_Graph_max, __pyx_k_Graph_max, sizeof(__pyx_k_Graph_max), 0, 0, 1, 1},
    {&__pyx_n_s_Graph_min, __pyx_k_Graph_min, sizeof(__pyx_k_Graph_min), 0, 0, 1, 1},
    {&__pyx_n_s_Graph_normalize, __pyx_k_Graph_normalize, sizeof(__pyx_k_Graph_normalize), 0, 0, 1, 1},
    {&__pyx_n_s_Graph_print, __pyx_k_Graph_print, sizeof(__pyx_k_Graph_print), 0, 0, 1, 1},
    {&__pyx_n_s_Graph_propagate, __pyx_k_Graph_propagate, sizeof(__pyx_k_Graph_propagate), 0, 0, 1, 1},
    {&__pyx_n_s_Graph_toDigraph, __pyx_k_Graph_toDigraph, sizeof(__pyx_k_Graph_toDigraph), 0, 0, 1, 1},
    {&__pyx_n_s_Graph_toMatrix, __pyx_k_Graph_toMatrix, sizeof(__pyx_k_Graph_toMatrix), 0, 0, 1, 1},
    {&__pyx_kp_s_Graphs_must_have_same_number_of, __pyx_k_Graphs_must_have_same_number_of, sizeof(__pyx_k_Graphs_must_have_same_number_of), 0, 0, 1, 0},
    {&__pyx_kp_s_Graphs_must_share_same_ctype, __pyx_k_Graphs_must_share_same_ctype, sizeof(__pyx_k_Graphs_must_share_same_ctype), 0, 0, 1, 0},
    {&__pyx_n_s_H, __pyx_k_H, sizeof(__pyx_k_H), 0, 0, 1, 1},
    {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
    {&__pyx_kp_s_Incompatible_checksums_0x_x_vs_0, __pyx_k_Incompatible_checksums_0x_x_vs_0, sizeof(__pyx_k_Incompatible_checksums_0x_x_vs_0), 0, 0, 1, 0},
    {&__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_2, __pyx_k_Incompatible_checksums_0x_x_vs_0_2, sizeof(__pyx_k_Incompatible_checksums_0x_x_vs_0_2), 0, 0, 1, 0},
    {&__pyx_kp_s_Incompatible_shape_for_Graph_dat, __pyx_k_Incompatible_shape_for_Graph_dat, sizeof(__pyx_k_Incompatible_shape_for_Graph_dat), 0, 0, 1, 0},
    {&__pyx_kp_s_Incompatible_shape_for_Hadamard, __pyx_k_Incompatible_shape_for_Hadamard, sizeof(__pyx_k_Incompatible_shape_for_Hadamard), 0, 0, 1, 0},
    {&__pyx_kp_s_Incompatible_shape_for_Matrix_ad, __pyx_k_Incompatible_shape_for_Matrix_ad, sizeof(__pyx_k_Incompatible_shape_for_Matrix_ad), 0, 0, 1, 0},
    {&__pyx_kp_s_Incompatible_shape_for_Matrix_pr, __pyx_k_Incompatible_shape_for_Matrix_pr, sizeof(__pyx_k_Incompatible_shape_for_Matrix_pr), 0, 0, 1, 0},
    {&__pyx_kp_s_Incompatible_shape_for_Matrix_su, __pyx_k_Incompatible_shape_for_Matrix_su, sizeof(__pyx_k_Incompatible_shape_for_Matrix_su), 0, 0, 1, 0},
    {&__pyx_kp_s_Incompatible_shape_for_matrix_mu, __pyx_k_Incompatible_shape_for_matrix_mu, sizeof(__pyx_k_Incompatible_shape_for_matrix_mu), 0, 0, 1, 0},
    {&__pyx_kp_s_Incompatible_shape_for_miolo_Mat, __pyx_k_Incompatible_shape_for_miolo_Mat, sizeof(__pyx_k_Incompatible_shape_for_miolo_Mat), 0, 0, 1, 0},
    {&__pyx_kp_s_Incompatible_shape_for_product, __pyx_k_Incompatible_shape_for_product, sizeof(__pyx_k_Incompatible_shape_for_product), 0, 0, 1, 0},
    {&__pyx_kp_s_Incompatible_shapes_for_addition, __pyx_k_Incompatible_shapes_for_addition, sizeof(__pyx_k_Incompatible_shapes_for_addition), 0, 0, 1, 0},
    {&__pyx_kp_s_Incompatible_shapes_for_subtract, __pyx_k_Incompatible_shapes_for_subtract, sizeof(__pyx_k_Incompatible_shapes_for_subtract), 0, 0, 1, 0},
    {&__pyx_n_s_IndexError, __pyx_k_IndexError, sizeof(__pyx_k_IndexError), 0, 0, 1, 1},
    {&__pyx_kp_s_Index_is_out_of_bounds, __pyx_k_Index_is_out_of_bounds, sizeof(__pyx_k_Index_is_out_of_bounds), 0, 0, 1, 0},
    {&__pyx_kp_s_Index_k_is_out_of_bounds, __pyx_k_Index_k_is_out_of_bounds, sizeof(__pyx_k_Index_k_is_out_of_bounds), 0, 0, 1, 0},
    {&__pyx_kp_s_Index_out_of_bounds_axis_d, __pyx_k_Index_out_of_bounds_axis_d, sizeof(__pyx_k_Index_out_of_bounds_axis_d), 0, 0, 1, 0},
    {&__pyx_kp_s_Indirect_dimensions_not_supporte, __pyx_k_Indirect_dimensions_not_supporte, sizeof(__pyx_k_Indirect_dimensions_not_supporte), 0, 0, 1, 0},
    {&__pyx_kp_u_Invalid_mode_expected_c_or_fortr, __pyx_k_Invalid_mode_expected_c_or_fortr, sizeof(__pyx_k_Invalid_mode_expected_c_or_fortr), 0, 1, 0, 0},
    {&__pyx_kp_s_Invalid_new_shape, __pyx_k_Invalid_new_shape, sizeof(__pyx_k_Invalid_new_shape), 0, 0, 1, 0},
    {&__pyx_kp_s_Invalid_shape_for_at, __pyx_k_Invalid_shape_for_at, sizeof(__pyx_k_Invalid_shape_for_at), 0, 0, 1, 0},
    {&__pyx_kp_u_Invalid_shape_in_axis, __pyx_k_Invalid_shape_in_axis, sizeof(__pyx_k_Invalid_shape_in_axis), 0, 1, 0, 0},
    {&__pyx_n_s_Lorentz, __pyx_k_Lorentz, sizeof(__pyx_k_Lorentz), 0, 0, 1, 1},
    {&__pyx_n_s_Lorentz___reduce_cython, __pyx_k_Lorentz___reduce_cython, sizeof(__pyx_k_Lorentz___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_Lorentz___setstate_cython, __pyx_k_Lorentz___setstate_cython, sizeof(__pyx_k_Lorentz___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_Lorentz_centroidDistance, __pyx_k_Lorentz_centroidDistance, sizeof(__pyx_k_Lorentz_centroidDistance), 0, 0, 1, 1},
    {&__pyx_n_s_Lorentz_dot, __pyx_k_Lorentz_dot, sizeof(__pyx_k_Lorentz_dot), 0, 0, 1, 1},
    {&__pyx_n_s_Lorentz_exp, __pyx_k_Lorentz_exp, sizeof(__pyx_k_Lorentz_exp), 0, 0, 1, 1},
    {&__pyx_n_s_Lorentz_fromEuclidean, __pyx_k_Lorentz_fromEuclidean, sizeof(__pyx_k_Lorentz_fromEuclidean), 0, 0, 1, 1},
    {&__pyx_n_s_Lorentz_isIn, __pyx_k_Lorentz_isIn, sizeof(__pyx_k_Lorentz_isIn), 0, 0, 1, 1},
    {&__pyx_n_s_Lorentz_lorentzDistance, __pyx_k_Lorentz_lorentzDistance, sizeof(__pyx_k_Lorentz_lorentzDistance), 0, 0, 1, 1},
    {&__pyx_n_s_Lorentz_mean, __pyx_k_Lorentz_mean, sizeof(__pyx_k_Lorentz_mean), 0, 0, 1, 1},
    {&__pyx_n_s_Lorentz_metricDistance, __pyx_k_Lorentz_metricDistance, sizeof(__pyx_k_Lorentz_metricDistance), 0, 0, 1, 1},
    {&__pyx_n_s_Lorentz_tangentProjection, __pyx_k_Lorentz_tangentProjection, sizeof(__pyx_k_Lorentz_tangentProjection), 0, 0, 1, 1},
    {&__pyx_n_s_Lorentz_toEuclidean, __pyx_k_Lorentz_toEuclidean, sizeof(__pyx_k_Lorentz_toEuclidean), 0, 0, 1, 1},
    {&__pyx_n_s_M, __pyx_k_M, sizeof(__pyx_k_M), 0, 0, 1, 1},
    {&__pyx_n_s_MST, __pyx_k_MST, sizeof(__pyx_k_MST), 0, 0, 1, 1},
    {&__pyx_kp_s_M_and_Weights_must_have_same_cty, __pyx_k_M_and_Weights_must_have_same_cty, sizeof(__pyx_k_M_and_Weights_must_have_same_cty), 0, 0, 1, 0},
    {&__pyx_kp_s_M_and_Weights_must_have_same_num, __pyx_k_M_and_Weights_must_have_same_num, sizeof(__pyx_k_M_and_Weights_must_have_same_num), 0, 0, 1, 0},
    {&__pyx_kp_s_M_and_center_must_have_same_ctyp, __pyx_k_M_and_center_must_have_same_ctyp, sizeof(__pyx_k_M_and_center_must_have_same_ctyp), 0, 0, 1, 0},
    {&__pyx_kp_s_M_cols_must_be_equal_to_center_c, __pyx_k_M_cols_must_be_equal_to_center_c, sizeof(__pyx_k_M_cols_must_be_equal_to_center_c), 0, 0, 1, 0},
    {&__pyx_n_s_Manifold, __pyx_k_Manifold, sizeof(__pyx_k_Manifold), 0, 0, 1, 1},
    {&__pyx_n_s_Manifold___reduce_cython, __pyx_k_Manifold___reduce_cython, sizeof(__pyx_k_Manifold___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_Manifold___setstate_cython, __pyx_k_Manifold___setstate_cython, sizeof(__pyx_k_Manifold___setstate_cython), 0, 0, 1, 1},
    {&__pyx_kp_s_Matrices_must_have_same_ctype, __pyx_k_Matrices_must_have_same_ctype, sizeof(__pyx_k_Matrices_must_have_same_ctype), 0, 0, 1, 0},
    {&__pyx_kp_s_Matrices_must_have_same_shape, __pyx_k_Matrices_must_have_same_shape, sizeof(__pyx_k_Matrices_must_have_same_shape), 0, 0, 1, 0},
    {&__pyx_kp_s_Matrices_must_have_the_same_ctyp, __pyx_k_Matrices_must_have_the_same_ctyp, sizeof(__pyx_k_Matrices_must_have_the_same_ctyp), 0, 0, 1, 0},
    {&__pyx_kp_s_Matrices_must_share_same_ctype, __pyx_k_Matrices_must_share_same_ctype, sizeof(__pyx_k_Matrices_must_share_same_ctype), 0, 0, 1, 0},
    {&__pyx_n_s_Matrix, __pyx_k_Matrix, sizeof(__pyx_k_Matrix), 0, 0, 1, 1},
    {&__pyx_n_s_Matrix___reduce_cython, __pyx_k_Matrix___reduce_cython, sizeof(__pyx_k_Matrix___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_Matrix___setstate_cython, __pyx_k_Matrix___setstate_cython, sizeof(__pyx_k_Matrix___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_Matrix_argkmax, __pyx_k_Matrix_argkmax, sizeof(__pyx_k_Matrix_argkmax), 0, 0, 1, 1},
    {&__pyx_n_s_Matrix_argkmin, __pyx_k_Matrix_argkmin, sizeof(__pyx_k_Matrix_argkmin), 0, 0, 1, 1},
    {&__pyx_n_s_Matrix_argmax, __pyx_k_Matrix_argmax, sizeof(__pyx_k_Matrix_argmax), 0, 0, 1, 1},
    {&__pyx_n_s_Matrix_argmin, __pyx_k_Matrix_argmin, sizeof(__pyx_k_Matrix_argmin), 0, 0, 1, 1},
    {&__pyx_n_s_Matrix_copy, __pyx_k_Matrix_copy, sizeof(__pyx_k_Matrix_copy), 0, 0, 1, 1},
    {&__pyx_n_s_Matrix_cut, __pyx_k_Matrix_cut, sizeof(__pyx_k_Matrix_cut), 0, 0, 1, 1},
    {&__pyx_n_s_Matrix_flatten, __pyx_k_Matrix_flatten, sizeof(__pyx_k_Matrix_flatten), 0, 0, 1, 1},
    {&__pyx_n_s_Matrix_max, __pyx_k_Matrix_max, sizeof(__pyx_k_Matrix_max), 0, 0, 1, 1},
    {&__pyx_n_s_Matrix_min, __pyx_k_Matrix_min, sizeof(__pyx_k_Matrix_min), 0, 0, 1, 1},
    {&__pyx_kp_s_Matrix_must_be_square, __pyx_k_Matrix_must_be_square, sizeof(__pyx_k_Matrix_must_be_square), 0, 0, 1, 0},
    {&__pyx_n_s_Matrix_normalize, __pyx_k_Matrix_normalize, sizeof(__pyx_k_Matrix_normalize), 0, 0, 1, 1},
    {&__pyx_kp_s_Matrix_operations_require_same_c, __pyx_k_Matrix_operations_require_same_c, sizeof(__pyx_k_Matrix_operations_require_same_c), 0, 0, 1, 0},
    {&__pyx_n_s_Matrix_partition, __pyx_k_Matrix_partition, sizeof(__pyx_k_Matrix_partition), 0, 0, 1, 1},
    {&__pyx_n_s_Matrix_print, __pyx_k_Matrix_print, sizeof(__pyx_k_Matrix_print), 0, 0, 1, 1},
    {&__pyx_n_s_Matrix_reshape, __pyx_k_Matrix_reshape, sizeof(__pyx_k_Matrix_reshape), 0, 0, 1, 1},
    {&__pyx_n_s_Matrix_rowDistance, __pyx_k_Matrix_rowDistance, sizeof(__pyx_k_Matrix_rowDistance), 0, 0, 1, 1},
    {&__pyx_n_s_Matrix_sparsifyKNN, __pyx_k_Matrix_sparsifyKNN, sizeof(__pyx_k_Matrix_sparsifyKNN), 0, 0, 1, 1},
    {&__pyx_n_s_Matrix_sparsifyThreshold, __pyx_k_Matrix_sparsifyThreshold, sizeof(__pyx_k_Matrix_sparsifyThreshold), 0, 0, 1, 1},
    {&__pyx_n_s_Matrix_sumAll, __pyx_k_Matrix_sumAll, sizeof(__pyx_k_Matrix_sumAll), 0, 0, 1, 1},
    {&__pyx_n_s_Matrix_trace, __pyx_k_Matrix_trace, sizeof(__pyx_k_Matrix_trace), 0, 0, 1, 1},
    {&__pyx_n_s_Matrix_transpose, __pyx_k_Matrix_transpose, sizeof(__pyx_k_Matrix_transpose), 0, 0, 1, 1},
    {&__pyx_n_s_MemoryError, __pyx_k_MemoryError, sizeof(__pyx_k_MemoryError), 0, 0, 1, 1},
    {&__pyx_kp_s_MemoryView_of_r_at_0x_x, __pyx_k_MemoryView_of_r_at_0x_x, sizeof(__pyx_k_MemoryView_of_r_at_0x_x), 0, 0, 1, 0},
    {&__pyx_kp_s_MemoryView_of_r_object, __pyx_k_MemoryView_of_r_object, sizeof(__pyx_k_MemoryView_of_r_object), 0, 0, 1, 0},
    {&__pyx_n_s_N, __pyx_k_N, sizeof(__pyx_k_N), 0, 0, 1, 1},
    {&__pyx_n_s_Neighbors, __pyx_k_Neighbors, sizeof(__pyx_k_Neighbors), 0, 0, 1, 1},
    {&__pyx_kp_s_Neighbors_and_Weights_must_have, __pyx_k_Neighbors_and_Weights_must_have, sizeof(__pyx_k_Neighbors_and_Weights_must_have), 0, 0, 1, 0},
    {&__pyx_kp_s_Neighbors_must_have_int_ctype, __pyx_k_Neighbors_must_have_int_ctype, sizeof(__pyx_k_Neighbors_must_have_int_ctype), 0, 0, 1, 0},
    {&__pyx_kp_s_Number_of_Matrix_rows_must_be_eq, __pyx_k_Number_of_Matrix_rows_must_be_eq, sizeof(__pyx_k_Number_of_Matrix_rows_must_be_eq), 0, 0, 1, 0},
    {&__pyx_kp_s_Number_of_cols_must_be_greater_t, __pyx_k_Number_of_cols_must_be_greater_t, sizeof(__pyx_k_Number_of_cols_must_be_greater_t), 0, 0, 1, 0},
    {&__pyx_kp_s_Number_of_nodes_must_be_equal_to, __pyx_k_Number_of_nodes_must_be_equal_to, sizeof(__pyx_k_Number_of_nodes_must_be_equal_to), 0, 0, 1, 0},
    {&__pyx_kp_s_Number_of_rows_must_be_equal_to, __pyx_k_Number_of_rows_must_be_equal_to, sizeof(__pyx_k_Number_of_rows_must_be_equal_to), 0, 0, 1, 0},
    {&__pyx_n_b_O, __pyx_k_O, sizeof(__pyx_k_O), 0, 0, 0, 1},
    {&__pyx_n_s_O, __pyx_k_O, sizeof(__pyx_k_O), 0, 0, 1, 1},
    {&__pyx_kp_s_Objects_must_share_same_ctype, __pyx_k_Objects_must_share_same_ctype, sizeof(__pyx_k_Objects_must_share_same_ctype), 0, 0, 1, 0},
    {&__pyx_kp_s_Only_square_matrices_are_allowed, __pyx_k_Only_square_matrices_are_allowed, sizeof(__pyx_k_Only_square_matrices_are_allowed), 0, 0, 1, 0},
    {&__pyx_kp_s_Only_square_matrices_can_be_spar, __pyx_k_Only_square_matrices_can_be_spar, sizeof(__pyx_k_Only_square_matrices_can_be_spar), 0, 0, 1, 0},
    {&__pyx_kp_s_Only_square_weight_matrices_are, __pyx_k_Only_square_weight_matrices_are, sizeof(__pyx_k_Only_square_weight_matrices_are), 0, 0, 1, 0},
    {&__pyx_kp_u_Out_of_bounds_on_buffer_access_a, __pyx_k_Out_of_bounds_on_buffer_access_a, sizeof(__pyx_k_Out_of_bounds_on_buffer_access_a), 0, 1, 0, 0},
    {&__pyx_n_s_PickleError, __pyx_k_PickleError, sizeof(__pyx_k_PickleError), 0, 0, 1, 1},
    {&__pyx_n_s_Poincare, __pyx_k_Poincare, sizeof(__pyx_k_Poincare), 0, 0, 1, 1},
    {&__pyx_n_s_Poincare___reduce_cython, __pyx_k_Poincare___reduce_cython, sizeof(__pyx_k_Poincare___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_Poincare___setstate_cython, __pyx_k_Poincare___setstate_cython, sizeof(__pyx_k_Poincare___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_Poincare_add, __pyx_k_Poincare_add, sizeof(__pyx_k_Poincare_add), 0, 0, 1, 1},
    {&__pyx_n_s_Poincare_centroidDistance, __pyx_k_Poincare_centroidDistance, sizeof(__pyx_k_Poincare_centroidDistance), 0, 0, 1, 1},
    {&__pyx_n_s_Poincare_distance, __pyx_k_Poincare_distance, sizeof(__pyx_k_Poincare_distance), 0, 0, 1, 1},
    {&__pyx_n_s_Poincare_exp, __pyx_k_Poincare_exp, sizeof(__pyx_k_Poincare_exp), 0, 0, 1, 1},
    {&__pyx_n_s_Poincare_hyperbolicity, __pyx_k_Poincare_hyperbolicity, sizeof(__pyx_k_Poincare_hyperbolicity), 0, 0, 1, 1},
    {&__pyx_n_s_Poincare_isIn, __pyx_k_Poincare_isIn, sizeof(__pyx_k_Poincare_isIn), 0, 0, 1, 1},
    {&__pyx_n_s_Poincare_log, __pyx_k_Poincare_log, sizeof(__pyx_k_Poincare_log), 0, 0, 1, 1},
    {&__pyx_n_s_Poincare_mean, __pyx_k_Poincare_mean, sizeof(__pyx_k_Poincare_mean), 0, 0, 1, 1},
    {&__pyx_kp_s_Row_range_is_out_of_bounds, __pyx_k_Row_range_is_out_of_bounds, sizeof(__pyx_k_Row_range_is_out_of_bounds), 0, 0, 1, 0},
    {&__pyx_n_s_Sequence, __pyx_k_Sequence, sizeof(__pyx_k_Sequence), 0, 0, 1, 1},
    {&__pyx_kp_s_Size_of_labels_must_be_equal_to, __pyx_k_Size_of_labels_must_be_equal_to, sizeof(__pyx_k_Size_of_labels_must_be_equal_to), 0, 0, 1, 0},
    {&__pyx_kp_s_Size_of_labels_must_be_equal_to_2, __pyx_k_Size_of_labels_must_be_equal_to_2, sizeof(__pyx_k_Size_of_labels_must_be_equal_to_2), 0, 0, 1, 0},
    {&__pyx_n_s_Sphere, __pyx_k_Sphere, sizeof(__pyx_k_Sphere), 0, 0, 1, 1},
    {&__pyx_n_s_Sphere___reduce_cython, __pyx_k_Sphere___reduce_cython, sizeof(__pyx_k_Sphere___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_Sphere___setstate_cython, __pyx_k_Sphere___setstate_cython, sizeof(__pyx_k_Sphere___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_Sphere_centroidDistance, __pyx_k_Sphere_centroidDistance, sizeof(__pyx_k_Sphere_centroidDistance), 0, 0, 1, 1},
    {&__pyx_n_s_Sphere_coordinateReady, __pyx_k_Sphere_coordinateReady, sizeof(__pyx_k_Sphere_coordinateReady), 0, 0, 1, 1},
    {&__pyx_n_s_Sphere_distance, __pyx_k_Sphere_distance, sizeof(__pyx_k_Sphere_distance), 0, 0, 1, 1},
    {&__pyx_n_s_Sphere_exp, __pyx_k_Sphere_exp, sizeof(__pyx_k_Sphere_exp), 0, 0, 1, 1},
    {&__pyx_n_s_Sphere_fromEuclidean, __pyx_k_Sphere_fromEuclidean, sizeof(__pyx_k_Sphere_fromEuclidean), 0, 0, 1, 1},
    {&__pyx_n_s_Sphere_isIn, __pyx_k_Sphere_isIn, sizeof(__pyx_k_Sphere_isIn), 0, 0, 1, 1},
    {&__pyx_n_s_Sphere_isTangent, __pyx_k_Sphere_isTangent, sizeof(__pyx_k_Sphere_isTangent), 0, 0, 1, 1},
    {&__pyx_kp_s_Sphere_radius_must_be_greater_th, __pyx_k_Sphere_radius_must_be_greater_th, sizeof(__pyx_k_Sphere_radius_must_be_greater_th), 0, 0, 1, 0},
    {&__pyx_n_s_Sphere_stereographicProjection, __pyx_k_Sphere_stereographicProjection, sizeof(__pyx_k_Sphere_stereographicProjection), 0, 0, 1, 1},
    {&__pyx_n_s_Sphere_toEuclidean, __pyx_k_Sphere_toEuclidean, sizeof(__pyx_k_Sphere_toEuclidean), 0, 0, 1, 1},
    {&__pyx_kp_s_Step_may_not_be_zero_axis_d, __pyx_k_Step_may_not_be_zero_axis_d, sizeof(__pyx_k_Step_may_not_be_zero_axis_d), 0, 0, 1, 0},
    {&__pyx_n_s_Threshold, __pyx_k_Threshold, sizeof(__pyx_k_Threshold), 0, 0, 1, 1},
    {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
    {&__pyx_kp_s_Unable_to_convert_item_to_object, __pyx_k_Unable_to_convert_item_to_object, sizeof(__pyx_k_Unable_to_convert_item_to_object), 0, 0, 1, 0},
    {&__pyx_kp_s_Unknown_ctype, __pyx_k_Unknown_ctype, sizeof(__pyx_k_Unknown_ctype), 0, 0, 1, 0},
    {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
    {&__pyx_n_s_View_MemoryView, __pyx_k_View_MemoryView, sizeof(__pyx_k_View_MemoryView), 0, 0, 1, 1},
    {&__pyx_n_s_Weights, __pyx_k_Weights, sizeof(__pyx_k_Weights), 0, 0, 1, 1},
    {&__pyx_kp_s_Weights_and_self_must_have_same, __pyx_k_Weights_and_self_must_have_same, sizeof(__pyx_k_Weights_and_self_must_have_same), 0, 0, 1, 0},
    {&__pyx_kp_s_Weights_must_be_a_square_Matrix, __pyx_k_Weights_must_be_a_square_Matrix, sizeof(__pyx_k_Weights_must_be_a_square_Matrix), 0, 0, 1, 0},
    {&__pyx_kp_s_Weights_nodes_must_be_equal_to_M, __pyx_k_Weights_nodes_must_be_equal_to_M, sizeof(__pyx_k_Weights_nodes_must_be_equal_to_M), 0, 0, 1, 0},
    {&__pyx_n_s_X, __pyx_k_X, sizeof(__pyx_k_X), 0, 0, 1, 1},
    {&__pyx_kp_u__2, __pyx_k__2, sizeof(__pyx_k__2), 0, 1, 0, 0},
    {&__pyx_n_s__3, __pyx_k__3, sizeof(__pyx_k__3), 0, 0, 1, 1},
    {&__pyx_n_s__300, __pyx_k__300, sizeof(__pyx_k__300), 0, 0, 1, 1},
    {&__pyx_kp_u__6, __pyx_k__6, sizeof(__pyx_k__6), 0, 1, 0, 0},
    {&__pyx_kp_u__7, __pyx_k__7, sizeof(__pyx_k__7), 0, 1, 0, 0},
    {&__pyx_n_s_abc, __pyx_k_abc, sizeof(__pyx_k_abc), 0, 0, 1, 1},
    {&__pyx_n_s_acos, __pyx_k_acos, sizeof(__pyx_k_acos), 0, 0, 1, 1},
    {&__pyx_n_s_acos___reduce_cython, __pyx_k_acos___reduce_cython, sizeof(__pyx_k_acos___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_acos___setstate_cython, __pyx_k_acos___setstate_cython, sizeof(__pyx_k_acos___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_acosh, __pyx_k_acosh, sizeof(__pyx_k_acosh), 0, 0, 1, 1},
    {&__pyx_n_s_acosh___reduce_cython, __pyx_k_acosh___reduce_cython, sizeof(__pyx_k_acosh___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_acosh___setstate_cython, __pyx_k_acosh___setstate_cython, sizeof(__pyx_k_acosh___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_add, __pyx_k_add, sizeof(__pyx_k_add), 0, 0, 1, 1},
    {&__pyx_n_s_allocate_buffer, __pyx_k_allocate_buffer, sizeof(__pyx_k_allocate_buffer), 0, 0, 1, 1},
    {&__pyx_kp_u_and, __pyx_k_and, sizeof(__pyx_k_and), 0, 1, 0, 0},
    {&__pyx_n_s_argkmax, __pyx_k_argkmax, sizeof(__pyx_k_argkmax), 0, 0, 1, 1},
    {&__pyx_n_s_argkmin, __pyx_k_argkmin, sizeof(__pyx_k_argkmin), 0, 0, 1, 1},
    {&__pyx_n_s_argmax, __pyx_k_argmax, sizeof(__pyx_k_argmax), 0, 0, 1, 1},
    {&__pyx_n_s_argmin, __pyx_k_argmin, sizeof(__pyx_k_argmin), 0, 0, 1, 1},
    {&__pyx_n_s_ashape, __pyx_k_ashape, sizeof(__pyx_k_ashape), 0, 0, 1, 1},
    {&__pyx_n_s_asin, __pyx_k_asin, sizeof(__pyx_k_asin), 0, 0, 1, 1},
    {&__pyx_n_s_asin___reduce_cython, __pyx_k_asin___reduce_cython, sizeof(__pyx_k_asin___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_asin___setstate_cython, __pyx_k_asin___setstate_cython, sizeof(__pyx_k_asin___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_asinh, __pyx_k_asinh, sizeof(__pyx_k_asinh), 0, 0, 1, 1},
    {&__pyx_n_s_asinh___reduce_cython, __pyx_k_asinh___reduce_cython, sizeof(__pyx_k_asinh___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_asinh___setstate_cython, __pyx_k_asinh___setstate_cython, sizeof(__pyx_k_asinh___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_asyncio_coroutines, __pyx_k_asyncio_coroutines, sizeof(__pyx_k_asyncio_coroutines), 0, 0, 1, 1},
    {&__pyx_n_s_at, __pyx_k_at, sizeof(__pyx_k_at), 0, 0, 1, 1},
    {&__pyx_kp_s_at_and_M_must_have_same_ctype, __pyx_k_at_and_M_must_have_same_ctype, sizeof(__pyx_k_at_and_M_must_have_same_ctype), 0, 0, 1, 0},
    {&__pyx_kp_s_at_and_M_must_have_same_number_o, __pyx_k_at_and_M_must_have_same_number_o, sizeof(__pyx_k_at_and_M_must_have_same_number_o), 0, 0, 1, 0},
    {&__pyx_kp_s_at_and_M_must_have_same_number_o_2, __pyx_k_at_and_M_must_have_same_number_o_2, sizeof(__pyx_k_at_and_M_must_have_same_number_o_2), 0, 0, 1, 0},
    {&__pyx_kp_s_at_and_M_must_have_same_shape, __pyx_k_at_and_M_must_have_same_shape, sizeof(__pyx_k_at_and_M_must_have_same_shape), 0, 0, 1, 0},
    {&__pyx_kp_s_at_and_tangent_must_have_same_nu, __pyx_k_at_and_tangent_must_have_same_nu, sizeof(__pyx_k_at_and_tangent_must_have_same_nu), 0, 0, 1, 0},
    {&__pyx_kp_s_at_and_tanget_must_have_same_cty, __pyx_k_at_and_tanget_must_have_same_cty, sizeof(__pyx_k_at_and_tanget_must_have_same_cty), 0, 0, 1, 0},
    {&__pyx_n_s_atan, __pyx_k_atan, sizeof(__pyx_k_atan), 0, 0, 1, 1},
    {&__pyx_n_s_atan___reduce_cython, __pyx_k_atan___reduce_cython, sizeof(__pyx_k_atan___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_atan___setstate_cython, __pyx_k_atan___setstate_cython, sizeof(__pyx_k_atan___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_atanh, __pyx_k_atanh, sizeof(__pyx_k_atanh), 0, 0, 1, 1},
    {&__pyx_n_s_atanh___reduce_cython, __pyx_k_atanh___reduce_cython, sizeof(__pyx_k_atanh___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_atanh___setstate_cython, __pyx_k_atanh___setstate_cython, sizeof(__pyx_k_atanh___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_aux, __pyx_k_aux, sizeof(__pyx_k_aux), 0, 0, 1, 1},
    {&__pyx_n_s_azimuth, __pyx_k_azimuth, sizeof(__pyx_k_azimuth), 0, 0, 1, 1},
    {&__pyx_kp_s_azimuth_must_be_smaller_than_M_c, __pyx_k_azimuth_must_be_smaller_than_M_c, sizeof(__pyx_k_azimuth_must_be_smaller_than_M_c), 0, 0, 1, 0},
    {&__pyx_n_s_base, __pyx_k_base, sizeof(__pyx_k_base), 0, 0, 1, 1},
    {&__pyx_n_s_beta, __pyx_k_beta, sizeof(__pyx_k_beta), 0, 0, 1, 1},
    {&__pyx_n_s_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 0, 1, 1},
    {&__pyx_n_u_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 1, 0, 1},
    {&__pyx_n_s_center, __pyx_k_center, sizeof(__pyx_k_center), 0, 0, 1, 1},
    {&__pyx_n_s_centroidDistance, __pyx_k_centroidDistance, sizeof(__pyx_k_centroidDistance), 0, 0, 1, 1},
    {&__pyx_n_s_clamped, __pyx_k_clamped, sizeof(__pyx_k_clamped), 0, 0, 1, 1},
    {&__pyx_kp_s_clamped_must_have_length_equal_t, __pyx_k_clamped_must_have_length_equal_t, sizeof(__pyx_k_clamped_must_have_length_equal_t), 0, 0, 1, 0},
    {&__pyx_n_s_class, __pyx_k_class, sizeof(__pyx_k_class), 0, 0, 1, 1},
    {&__pyx_n_s_classSeparation, __pyx_k_classSeparation, sizeof(__pyx_k_classSeparation), 0, 0, 1, 1},
    {&__pyx_n_s_classSeparation___reduce_cython, __pyx_k_classSeparation___reduce_cython, sizeof(__pyx_k_classSeparation___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_classSeparation___setstate_cytho, __pyx_k_classSeparation___setstate_cytho, sizeof(__pyx_k_classSeparation___setstate_cytho), 0, 0, 1, 1},
    {&__pyx_n_s_classSeparation_extra, __pyx_k_classSeparation_extra, sizeof(__pyx_k_classSeparation_extra), 0, 0, 1, 1},
    {&__pyx_n_s_classSeparation_intra, __pyx_k_classSeparation_intra, sizeof(__pyx_k_classSeparation_intra), 0, 0, 1, 1},
    {&__pyx_n_s_class_getitem, __pyx_k_class_getitem, sizeof(__pyx_k_class_getitem), 0, 0, 1, 1},
    {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
    {&__pyx_n_s_colMax, __pyx_k_colMax, sizeof(__pyx_k_colMax), 0, 0, 1, 1},
    {&__pyx_n_s_colMin, __pyx_k_colMin, sizeof(__pyx_k_colMin), 0, 0, 1, 1},
    {&__pyx_n_s_collections, __pyx_k_collections, sizeof(__pyx_k_collections), 0, 0, 1, 1},
    {&__pyx_kp_s_collections_abc, __pyx_k_collections_abc, sizeof(__pyx_k_collections_abc), 0, 0, 1, 0},
    {&__pyx_n_s_cols, __pyx_k_cols, sizeof(__pyx_k_cols), 0, 0, 1, 1},
    {&__pyx_n_s_concat, __pyx_k_concat, sizeof(__pyx_k_concat), 0, 0, 1, 1},
    {&__pyx_n_s_connect, __pyx_k_connect, sizeof(__pyx_k_connect), 0, 0, 1, 1},
    {&__pyx_n_s_connectRegular, __pyx_k_connectRegular, sizeof(__pyx_k_connectRegular), 0, 0, 1, 1},
    {&__pyx_kp_s_contiguous_and_direct, __pyx_k_contiguous_and_direct, sizeof(__pyx_k_contiguous_and_direct), 0, 0, 1, 0},
    {&__pyx_kp_s_contiguous_and_indirect, __pyx_k_contiguous_and_indirect, sizeof(__pyx_k_contiguous_and_indirect), 0, 0, 1, 0},
    {&__pyx_n_s_coordinateReady, __pyx_k_coordinateReady, sizeof(__pyx_k_coordinateReady), 0, 0, 1, 1},
    {&__pyx_n_s_copy, __pyx_k_copy, sizeof(__pyx_k_copy), 0, 0, 1, 1},
    {&__pyx_n_s_cos, __pyx_k_cos, sizeof(__pyx_k_cos), 0, 0, 1, 1},
    {&__pyx_n_s_cos___reduce_cython, __pyx_k_cos___reduce_cython, sizeof(__pyx_k_cos___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_cos___setstate_cython, __pyx_k_cos___setstate_cython, sizeof(__pyx_k_cos___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_cosh, __pyx_k_cosh, sizeof(__pyx_k_cosh), 0, 0, 1, 1},
    {&__pyx_n_s_cosh___reduce_cython, __pyx_k_cosh___reduce_cython, sizeof(__pyx_k_cosh___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_cosh___setstate_cython, __pyx_k_cosh___setstate_cython, sizeof(__pyx_k_cosh___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_count, __pyx_k_count, sizeof(__pyx_k_count), 0, 0, 1, 1},
    {&__pyx_n_s_ctype, __pyx_k_ctype, sizeof(__pyx_k_ctype), 0, 0, 1, 1},
    {&__pyx_n_s_ctypes, __pyx_k_ctypes, sizeof(__pyx_k_ctypes), 0, 0, 1, 1},
    {&__pyx_n_s_curvature, __pyx_k_curvature, sizeof(__pyx_k_curvature), 0, 0, 1, 1},
    {&__pyx_n_s_cut, __pyx_k_cut, sizeof(__pyx_k_cut), 0, 0, 1, 1},
    {&__pyx_n_s_degree, __pyx_k_degree, sizeof(__pyx_k_degree), 0, 0, 1, 1},
    {&__pyx_n_s_dict, __pyx_k_dict, sizeof(__pyx_k_dict), 0, 0, 1, 1},
    {&__pyx_n_s_dict_2, __pyx_k_dict_2, sizeof(__pyx_k_dict_2), 0, 0, 1, 1},
    {&__pyx_n_s_dim, __pyx_k_dim, sizeof(__pyx_k_dim), 0, 0, 1, 1},
    {&__pyx_kp_u_disable, __pyx_k_disable, sizeof(__pyx_k_disable), 0, 1, 0, 0},
    {&__pyx_n_s_distance, __pyx_k_distance, sizeof(__pyx_k_distance), 0, 0, 1, 1},
    {&__pyx_n_s_dot, __pyx_k_dot, sizeof(__pyx_k_dot), 0, 0, 1, 1},
    {&__pyx_n_s_double, __pyx_k_double, sizeof(__pyx_k_double), 0, 0, 1, 1},
    {&__pyx_n_s_dtype, __pyx_k_dtype, sizeof(__pyx_k_dtype), 0, 0, 1, 1},
    {&__pyx_n_s_dtype_is_object, __pyx_k_dtype_is_object, sizeof(__pyx_k_dtype_is_object), 0, 0, 1, 1},
    {&__pyx_n_s_edges, __pyx_k_edges, sizeof(__pyx_k_edges), 0, 0, 1, 1},
    {&__pyx_n_s_empty, __pyx_k_empty, sizeof(__pyx_k_empty), 0, 0, 1, 1},
    {&__pyx_kp_u_enable, __pyx_k_enable, sizeof(__pyx_k_enable), 0, 1, 0, 0},
    {&__pyx_n_s_encode, __pyx_k_encode, sizeof(__pyx_k_encode), 0, 0, 1, 1},
    {&__pyx_n_s_end, __pyx_k_end, sizeof(__pyx_k_end), 0, 0, 1, 1},
    {&__pyx_n_s_enumerate, __pyx_k_enumerate, sizeof(__pyx_k_enumerate), 0, 0, 1, 1},
    {&__pyx_n_s_error, __pyx_k_error, sizeof(__pyx_k_error), 0, 0, 1, 1},
    {&__pyx_n_s_exp, __pyx_k_exp, sizeof(__pyx_k_exp), 0, 0, 1, 1},
    {&__pyx_n_s_exp___reduce_cython, __pyx_k_exp___reduce_cython, sizeof(__pyx_k_exp___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_exp___setstate_cython, __pyx_k_exp___setstate_cython, sizeof(__pyx_k_exp___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_extra, __pyx_k_extra, sizeof(__pyx_k_extra), 0, 0, 1, 1},
    {&__pyx_n_s_fabs, __pyx_k_fabs, sizeof(__pyx_k_fabs), 0, 0, 1, 1},
    {&__pyx_n_s_fabs___reduce_cython, __pyx_k_fabs___reduce_cython, sizeof(__pyx_k_fabs___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_fabs___setstate_cython, __pyx_k_fabs___setstate_cython, sizeof(__pyx_k_fabs___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_filename, __pyx_k_filename, sizeof(__pyx_k_filename), 0, 0, 1, 1},
    {&__pyx_n_s_flags, __pyx_k_flags, sizeof(__pyx_k_flags), 0, 0, 1, 1},
    {&__pyx_n_s_flatten, __pyx_k_flatten, sizeof(__pyx_k_flatten), 0, 0, 1, 1},
    {&__pyx_n_s_float, __pyx_k_float, sizeof(__pyx_k_float), 0, 0, 1, 1},
    {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
    {&__pyx_n_s_fortran, __pyx_k_fortran, sizeof(__pyx_k_fortran), 0, 0, 1, 1},
    {&__pyx_n_u_fortran, __pyx_k_fortran, sizeof(__pyx_k_fortran), 0, 1, 0, 1},
    {&__pyx_n_s_fromEuclidean, __pyx_k_fromEuclidean, sizeof(__pyx_k_fromEuclidean), 0, 0, 1, 1},
    {&__pyx_n_s_g, __pyx_k_g, sizeof(__pyx_k_g), 0, 0, 1, 1},
    {&__pyx_n_s_gaussianNormalize, __pyx_k_gaussianNormalize, sizeof(__pyx_k_gaussianNormalize), 0, 0, 1, 1},
    {&__pyx_n_s_gaussianScale, __pyx_k_gaussianScale, sizeof(__pyx_k_gaussianScale), 0, 0, 1, 1},
    {&__pyx_kp_u_gc, __pyx_k_gc, sizeof(__pyx_k_gc), 0, 1, 0, 0},
    {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
    {&__pyx_n_s_global_ctype, __pyx_k_global_ctype, sizeof(__pyx_k_global_ctype), 0, 0, 1, 1},
    {&__pyx_kp_u_got, __pyx_k_got, sizeof(__pyx_k_got), 0, 1, 0, 0},
    {&__pyx_kp_u_got_differing_extents_in_dimensi, __pyx_k_got_differing_extents_in_dimensi, sizeof(__pyx_k_got_differing_extents_in_dimensi), 0, 1, 0, 0},
    {&__pyx_n_s_gshape, __pyx_k_gshape, sizeof(__pyx_k_gshape), 0, 0, 1, 1},
    {&__pyx_n_s_hadamard, __pyx_k_hadamard, sizeof(__pyx_k_hadamard), 0, 0, 1, 1},
    {&__pyx_n_s_hyperbolicity, __pyx_k_hyperbolicity, sizeof(__pyx_k_hyperbolicity), 0, 0, 1, 1},
    {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
    {&__pyx_kp_s_i_is_not_a_valid_index_for_Digra, __pyx_k_i_is_not_a_valid_index_for_Digra, sizeof(__pyx_k_i_is_not_a_valid_index_for_Digra), 0, 0, 1, 0},
    {&__pyx_n_s_id, __pyx_k_id, sizeof(__pyx_k_id), 0, 0, 1, 1},
    {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
    {&__pyx_n_s_index, __pyx_k_index, sizeof(__pyx_k_index), 0, 0, 1, 1},
    {&__pyx_n_s_init, __pyx_k_init, sizeof(__pyx_k_init), 0, 0, 1, 1},
    {&__pyx_n_s_init_2, __pyx_k_init_2, sizeof(__pyx_k_init_2), 0, 0, 1, 1},
    {&__pyx_n_s_initializing, __pyx_k_initializing, sizeof(__pyx_k_initializing), 0, 0, 1, 1},
    {&__pyx_n_s_int, __pyx_k_int, sizeof(__pyx_k_int), 0, 0, 1, 1},
    {&__pyx_n_s_intra, __pyx_k_intra, sizeof(__pyx_k_intra), 0, 0, 1, 1},
    {&__pyx_n_s_isDiagonal, __pyx_k_isDiagonal, sizeof(__pyx_k_isDiagonal), 0, 0, 1, 1},
    {&__pyx_n_s_isDigraph, __pyx_k_isDigraph, sizeof(__pyx_k_isDigraph), 0, 0, 1, 1},
    {&__pyx_n_s_isGraph, __pyx_k_isGraph, sizeof(__pyx_k_isGraph), 0, 0, 1, 1},
    {&__pyx_n_s_isIn, __pyx_k_isIn, sizeof(__pyx_k_isIn), 0, 0, 1, 1},
    {&__pyx_n_s_isMatrix, __pyx_k_isMatrix, sizeof(__pyx_k_isMatrix), 0, 0, 1, 1},
    {&__pyx_n_s_isTangent, __pyx_k_isTangent, sizeof(__pyx_k_isTangent), 0, 0, 1, 1},
    {&__pyx_n_s_is_coroutine, __pyx_k_is_coroutine, sizeof(__pyx_k_is_coroutine), 0, 0, 1, 1},
    {&__pyx_kp_u_isenabled, __pyx_k_isenabled, sizeof(__pyx_k_isenabled), 0, 1, 0, 0},
    {&__pyx_n_s_isolatedNodes, __pyx_k_isolatedNodes, sizeof(__pyx_k_isolatedNodes), 0, 0, 1, 1},
    {&__pyx_n_s_itemsize, __pyx_k_itemsize, sizeof(__pyx_k_itemsize), 0, 0, 1, 1},
    {&__pyx_kp_s_itemsize_0_for_cython_array, __pyx_k_itemsize_0_for_cython_array, sizeof(__pyx_k_itemsize_0_for_cython_array), 0, 0, 1, 0},
    {&__pyx_n_s_j, __pyx_k_j, sizeof(__pyx_k_j), 0, 0, 1, 1},
    {&__pyx_kp_s_j_is_not_a_valid_index_for_Digra, __pyx_k_j_is_not_a_valid_index_for_Digra, sizeof(__pyx_k_j_is_not_a_valid_index_for_Digra), 0, 0, 1, 0},
    {&__pyx_n_s_k, __pyx_k_k, sizeof(__pyx_k_k), 0, 0, 1, 1},
    {&__pyx_n_s_kmpp, __pyx_k_kmpp, sizeof(__pyx_k_kmpp), 0, 0, 1, 1},
    {&__pyx_n_s_labels, __pyx_k_labels, sizeof(__pyx_k_labels), 0, 0, 1, 1},
    {&__pyx_kp_s_labels_must_have_size_equal_to_s, __pyx_k_labels_must_have_size_equal_to_s, sizeof(__pyx_k_labels_must_have_size_equal_to_s), 0, 0, 1, 0},
    {&__pyx_n_s_laplacian, __pyx_k_laplacian, sizeof(__pyx_k_laplacian), 0, 0, 1, 1},
    {&__pyx_n_s_loadtxt, __pyx_k_loadtxt, sizeof(__pyx_k_loadtxt), 0, 0, 1, 1},
    {&__pyx_n_s_log, __pyx_k_log, sizeof(__pyx_k_log), 0, 0, 1, 1},
    {&__pyx_n_s_log___reduce_cython, __pyx_k_log___reduce_cython, sizeof(__pyx_k_log___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_log___setstate_cython, __pyx_k_log___setstate_cython, sizeof(__pyx_k_log___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_lorentzDistance, __pyx_k_lorentzDistance, sizeof(__pyx_k_lorentzDistance), 0, 0, 1, 1},
    {&__pyx_n_s_m, __pyx_k_m, sizeof(__pyx_k_m), 0, 0, 1, 1},
    {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
    {&__pyx_n_s_max, __pyx_k_max, sizeof(__pyx_k_max), 0, 0, 1, 1},
    {&__pyx_n_s_max_0, __pyx_k_max_0, sizeof(__pyx_k_max_0), 0, 0, 1, 1},
    {&__pyx_n_s_max_1, __pyx_k_max_1, sizeof(__pyx_k_max_1), 0, 0, 1, 1},
    {&__pyx_n_s_mean, __pyx_k_mean, sizeof(__pyx_k_mean), 0, 0, 1, 1},
    {&__pyx_n_s_memview, __pyx_k_memview, sizeof(__pyx_k_memview), 0, 0, 1, 1},
    {&__pyx_n_s_metricDistance, __pyx_k_metricDistance, sizeof(__pyx_k_metricDistance), 0, 0, 1, 1},
    {&__pyx_n_s_min, __pyx_k_min, sizeof(__pyx_k_min), 0, 0, 1, 1},
    {&__pyx_n_s_minmaxNormalize, __pyx_k_minmaxNormalize, sizeof(__pyx_k_minmaxNormalize), 0, 0, 1, 1},
    {&__pyx_n_s_miolo, __pyx_k_miolo, sizeof(__pyx_k_miolo), 0, 0, 1, 1},
    {&__pyx_n_s_mioloObject, __pyx_k_mioloObject, sizeof(__pyx_k_mioloObject), 0, 0, 1, 1},
    {&__pyx_n_s_mioloObject___reduce_cython, __pyx_k_mioloObject___reduce_cython, sizeof(__pyx_k_mioloObject___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_mioloObject___setstate_cython, __pyx_k_mioloObject___setstate_cython, sizeof(__pyx_k_mioloObject___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_mioloObject_isDiagonal, __pyx_k_mioloObject_isDiagonal, sizeof(__pyx_k_mioloObject_isDiagonal), 0, 0, 1, 1},
    {&__pyx_n_s_mioloObject_isDigraph, __pyx_k_mioloObject_isDigraph, sizeof(__pyx_k_mioloObject_isDigraph), 0, 0, 1, 1},
    {&__pyx_n_s_mioloObject_isGraph, __pyx_k_mioloObject_isGraph, sizeof(__pyx_k_mioloObject_isGraph), 0, 0, 1, 1},
    {&__pyx_n_s_mioloObject_isMatrix, __pyx_k_mioloObject_isMatrix, sizeof(__pyx_k_mioloObject_isMatrix), 0, 0, 1, 1},
    {&__pyx_kp_s_miololib_pyx, __pyx_k_miololib_pyx, sizeof(__pyx_k_miololib_pyx), 0, 0, 1, 0},
    {&__pyx_n_s_mode, __pyx_k_mode, sizeof(__pyx_k_mode), 0, 0, 1, 1},
    {&__pyx_n_s_n, __pyx_k_n, sizeof(__pyx_k_n), 0, 0, 1, 1},
    {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
    {&__pyx_n_s_name_2, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},
    {&__pyx_n_s_ndim, __pyx_k_ndim, sizeof(__pyx_k_ndim), 0, 0, 1, 1},
    {&__pyx_n_s_new, __pyx_k_new, sizeof(__pyx_k_new), 0, 0, 1, 1},
    {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
    {&__pyx_n_s_nodes, __pyx_k_nodes, sizeof(__pyx_k_nodes), 0, 0, 1, 1},
    {&__pyx_n_s_normalize, __pyx_k_normalize, sizeof(__pyx_k_normalize), 0, 0, 1, 1},
    {&__pyx_n_s_np, __pyx_k_np, sizeof(__pyx_k_np), 0, 0, 1, 1},
    {&__pyx_n_s_null, __pyx_k_null, sizeof(__pyx_k_null), 0, 0, 1, 1},
    {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
    {&__pyx_kp_s_numpy__core_multiarray_failed_to, __pyx_k_numpy__core_multiarray_failed_to, sizeof(__pyx_k_numpy__core_multiarray_failed_to), 0, 0, 1, 0},
    {&__pyx_kp_s_numpy__core_umath_failed_to_impo, __pyx_k_numpy__core_umath_failed_to_impo, sizeof(__pyx_k_numpy__core_umath_failed_to_impo), 0, 0, 1, 0},
    {&__pyx_n_s_obj, __pyx_k_obj, sizeof(__pyx_k_obj), 0, 0, 1, 1},
    {&__pyx_n_s_only, __pyx_k_only, sizeof(__pyx_k_only), 0, 0, 1, 1},
    {&__pyx_n_s_out, __pyx_k_out, sizeof(__pyx_k_out), 0, 0, 1, 1},
    {&__pyx_n_s_output, __pyx_k_output, sizeof(__pyx_k_output), 0, 0, 1, 1},
    {&__pyx_n_s_pack, __pyx_k_pack, sizeof(__pyx_k_pack), 0, 0, 1, 1},
    {&__pyx_n_s_partition, __pyx_k_partition, sizeof(__pyx_k_partition), 0, 0, 1, 1},
    {&__pyx_n_s_pickle, __pyx_k_pickle, sizeof(__pyx_k_pickle), 0, 0, 1, 1},
    {&__pyx_n_s_pottsEnergy, __pyx_k_pottsEnergy, sizeof(__pyx_k_pottsEnergy), 0, 0, 1, 1},
    {&__pyx_n_s_pottsEnergy___reduce_cython, __pyx_k_pottsEnergy___reduce_cython, sizeof(__pyx_k_pottsEnergy___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_pottsEnergy___setstate_cython, __pyx_k_pottsEnergy___setstate_cython, sizeof(__pyx_k_pottsEnergy___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
    {&__pyx_n_s_propagate, __pyx_k_propagate, sizeof(__pyx_k_propagate), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_PickleError, __pyx_k_pyx_PickleError, sizeof(__pyx_k_pyx_PickleError), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_checksum, __pyx_k_pyx_checksum, sizeof(__pyx_k_pyx_checksum), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_result, __pyx_k_pyx_result, sizeof(__pyx_k_pyx_result), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_state, __pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_type, __pyx_k_pyx_type, sizeof(__pyx_k_pyx_type), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_unpickle_Enum, __pyx_k_pyx_unpickle_Enum, sizeof(__pyx_k_pyx_unpickle_Enum), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_unpickle_Manifold, __pyx_k_pyx_unpickle_Manifold, sizeof(__pyx_k_pyx_unpickle_Manifold), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
    {&__pyx_n_s_radius, __pyx_k_radius, sizeof(__pyx_k_radius), 0, 0, 1, 1},
    {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
    {&__pyx_n_s_recp, __pyx_k_recp, sizeof(__pyx_k_recp), 0, 0, 1, 1},
    {&__pyx_n_s_recp___reduce_cython, __pyx_k_recp___reduce_cython, sizeof(__pyx_k_recp___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_recp___setstate_cython, __pyx_k_recp___setstate_cython, sizeof(__pyx_k_recp___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
    {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
    {&__pyx_n_s_register, __pyx_k_register, sizeof(__pyx_k_register), 0, 0, 1, 1},
    {&__pyx_n_s_reshape, __pyx_k_reshape, sizeof(__pyx_k_reshape), 0, 0, 1, 1},
    {&__pyx_n_s_rowDistance, __pyx_k_rowDistance, sizeof(__pyx_k_rowDistance), 0, 0, 1, 1},
    {&__pyx_n_s_rowMax, __pyx_k_rowMax, sizeof(__pyx_k_rowMax), 0, 0, 1, 1},
    {&__pyx_n_s_rowMin, __pyx_k_rowMin, sizeof(__pyx_k_rowMin), 0, 0, 1, 1},
    {&__pyx_n_s_rowNormalize, __pyx_k_rowNormalize, sizeof(__pyx_k_rowNormalize), 0, 0, 1, 1},
    {&__pyx_n_s_rows, __pyx_k_rows, sizeof(__pyx_k_rows), 0, 0, 1, 1},
    {&__pyx_n_s_sameShape, __pyx_k_sameShape, sizeof(__pyx_k_sameShape), 0, 0, 1, 1},
    {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
    {&__pyx_kp_s_self_diagonalDouble_self_diagona, __pyx_k_self_diagonalDouble_self_diagona, sizeof(__pyx_k_self_diagonalDouble_self_diagona), 0, 0, 1, 0},
    {&__pyx_kp_s_self_view_cannot_be_converted_to, __pyx_k_self_view_cannot_be_converted_to, sizeof(__pyx_k_self_view_cannot_be_converted_to), 0, 0, 1, 0},
    {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
    {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_shape, __pyx_k_shape, sizeof(__pyx_k_shape), 0, 0, 1, 1},
    {&__pyx_n_s_sin, __pyx_k_sin, sizeof(__pyx_k_sin), 0, 0, 1, 1},
    {&__pyx_n_s_sin___reduce_cython, __pyx_k_sin___reduce_cython, sizeof(__pyx_k_sin___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_sin___setstate_cython, __pyx_k_sin___setstate_cython, sizeof(__pyx_k_sin___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_single, __pyx_k_single, sizeof(__pyx_k_single), 0, 0, 1, 1},
    {&__pyx_n_s_sinh, __pyx_k_sinh, sizeof(__pyx_k_sinh), 0, 0, 1, 1},
    {&__pyx_n_s_sinh___reduce_cython, __pyx_k_sinh___reduce_cython, sizeof(__pyx_k_sinh___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_sinh___setstate_cython, __pyx_k_sinh___setstate_cython, sizeof(__pyx_k_sinh___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_size, __pyx_k_size, sizeof(__pyx_k_size), 0, 0, 1, 1},
    {&__pyx_n_s_sparsifyKNN, __pyx_k_sparsifyKNN, sizeof(__pyx_k_sparsifyKNN), 0, 0, 1, 1},
    {&__pyx_n_s_sparsifyThreshold, __pyx_k_sparsifyThreshold, sizeof(__pyx_k_sparsifyThreshold), 0, 0, 1, 1},
    {&__pyx_n_s_spec, __pyx_k_spec, sizeof(__pyx_k_spec), 0, 0, 1, 1},
    {&__pyx_n_s_sqrt, __pyx_k_sqrt, sizeof(__pyx_k_sqrt), 0, 0, 1, 1},
    {&__pyx_n_s_sqrt___reduce_cython, __pyx_k_sqrt___reduce_cython, sizeof(__pyx_k_sqrt___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_sqrt___setstate_cython, __pyx_k_sqrt___setstate_cython, sizeof(__pyx_k_sqrt___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_start, __pyx_k_start, sizeof(__pyx_k_start), 0, 0, 1, 1},
    {&__pyx_n_s_state, __pyx_k_state, sizeof(__pyx_k_state), 0, 0, 1, 1},
    {&__pyx_n_s_step, __pyx_k_step, sizeof(__pyx_k_step), 0, 0, 1, 1},
    {&__pyx_n_s_stereographicProjection, __pyx_k_stereographicProjection, sizeof(__pyx_k_stereographicProjection), 0, 0, 1, 1},
    {&__pyx_n_s_stop, __pyx_k_stop, sizeof(__pyx_k_stop), 0, 0, 1, 1},
    {&__pyx_n_s_str_memory, __pyx_k_str_memory, sizeof(__pyx_k_str_memory), 0, 0, 1, 1},
    {&__pyx_kp_s_strided_and_direct, __pyx_k_strided_and_direct, sizeof(__pyx_k_strided_and_direct), 0, 0, 1, 0},
    {&__pyx_kp_s_strided_and_direct_or_indirect, __pyx_k_strided_and_direct_or_indirect, sizeof(__pyx_k_strided_and_direct_or_indirect), 0, 0, 1, 0},
    {&__pyx_kp_s_strided_and_indirect, __pyx_k_strided_and_indirect, sizeof(__pyx_k_strided_and_indirect), 0, 0, 1, 0},
    {&__pyx_kp_s_stringsource, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
    {&__pyx_n_s_struct, __pyx_k_struct, sizeof(__pyx_k_struct), 0, 0, 1, 1},
    {&__pyx_n_s_structure, __pyx_k_structure, sizeof(__pyx_k_structure), 0, 0, 1, 1},
    {&__pyx_n_s_sumAll, __pyx_k_sumAll, sizeof(__pyx_k_sumAll), 0, 0, 1, 1},
    {&__pyx_n_s_super, __pyx_k_super, sizeof(__pyx_k_super), 0, 0, 1, 1},
    {&__pyx_n_s_symmetrize, __pyx_k_symmetrize, sizeof(__pyx_k_symmetrize), 0, 0, 1, 1},
    {&__pyx_n_s_sys, __pyx_k_sys, sizeof(__pyx_k_sys), 0, 0, 1, 1},
    {&__pyx_n_s_tan, __pyx_k_tan, sizeof(__pyx_k_tan), 0, 0, 1, 1},
    {&__pyx_n_s_tan___reduce_cython, __pyx_k_tan___reduce_cython, sizeof(__pyx_k_tan___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_tan___setstate_cython, __pyx_k_tan___setstate_cython, sizeof(__pyx_k_tan___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_tangent, __pyx_k_tangent, sizeof(__pyx_k_tangent), 0, 0, 1, 1},
    {&__pyx_n_s_tangentProjection, __pyx_k_tangentProjection, sizeof(__pyx_k_tangentProjection), 0, 0, 1, 1},
    {&__pyx_n_s_tanh, __pyx_k_tanh, sizeof(__pyx_k_tanh), 0, 0, 1, 1},
    {&__pyx_n_s_tanh___reduce_cython, __pyx_k_tanh___reduce_cython, sizeof(__pyx_k_tanh___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_tanh___setstate_cython, __pyx_k_tanh___setstate_cython, sizeof(__pyx_k_tanh___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_targetLabel, __pyx_k_targetLabel, sizeof(__pyx_k_targetLabel), 0, 0, 1, 1},
    {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
    {&__pyx_n_s_toDigraph, __pyx_k_toDigraph, sizeof(__pyx_k_toDigraph), 0, 0, 1, 1},
    {&__pyx_n_s_toEuclidean, __pyx_k_toEuclidean, sizeof(__pyx_k_toEuclidean), 0, 0, 1, 1},
    {&__pyx_n_s_toGraph, __pyx_k_toGraph, sizeof(__pyx_k_toGraph), 0, 0, 1, 1},
    {&__pyx_n_s_toMatrix, __pyx_k_toMatrix, sizeof(__pyx_k_toMatrix), 0, 0, 1, 1},
    {&__pyx_n_s_tolerance, __pyx_k_tolerance, sizeof(__pyx_k_tolerance), 0, 0, 1, 1},
    {&__pyx_n_s_trace, __pyx_k_trace, sizeof(__pyx_k_trace), 0, 0, 1, 1},
    {&__pyx_n_s_transpose, __pyx_k_transpose, sizeof(__pyx_k_transpose), 0, 0, 1, 1},
    {&__pyx_n_s_txtGraph, __pyx_k_txtGraph, sizeof(__pyx_k_txtGraph), 0, 0, 1, 1},
    {&__pyx_n_s_txtMatrix, __pyx_k_txtMatrix, sizeof(__pyx_k_txtMatrix), 0, 0, 1, 1},
    {&__pyx_n_s_ufunction, __pyx_k_ufunction, sizeof(__pyx_k_ufunction), 0, 0, 1, 1},
    {&__pyx_n_s_ufunction___reduce_cython, __pyx_k_ufunction___reduce_cython, sizeof(__pyx_k_ufunction___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_ufunction___setstate_cython, __pyx_k_ufunction___setstate_cython, sizeof(__pyx_k_ufunction___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_ulong, __pyx_k_ulong, sizeof(__pyx_k_ulong), 0, 0, 1, 1},
    {&__pyx_kp_s_unable_to_allocate_array_data, __pyx_k_unable_to_allocate_array_data, sizeof(__pyx_k_unable_to_allocate_array_data), 0, 0, 1, 0},
    {&__pyx_kp_s_unable_to_allocate_shape_and_str, __pyx_k_unable_to_allocate_shape_and_str, sizeof(__pyx_k_unable_to_allocate_shape_and_str), 0, 0, 1, 0},
    {&__pyx_n_s_unpack, __pyx_k_unpack, sizeof(__pyx_k_unpack), 0, 0, 1, 1},
    {&__pyx_n_s_update, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
    {&__pyx_n_s_use_setstate, __pyx_k_use_setstate, sizeof(__pyx_k_use_setstate), 0, 0, 1, 1},
    {&__pyx_n_s_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
    {&__pyx_n_s_variance, __pyx_k_variance, sizeof(__pyx_k_variance), 0, 0, 1, 1},
    {&__pyx_n_s_version_info, __pyx_k_version_info, sizeof(__pyx_k_version_info), 0, 0, 1, 1},
    {&__pyx_n_s_view, __pyx_k_view, sizeof(__pyx_k_view), 0, 0, 1, 1},
    {&__pyx_n_s_weightedDotProduct, __pyx_k_weightedDotProduct, sizeof(__pyx_k_weightedDotProduct), 0, 0, 1, 1},
    {&__pyx_n_s_weightedDotProduct___reduce_cyth, __pyx_k_weightedDotProduct___reduce_cyth, sizeof(__pyx_k_weightedDotProduct___reduce_cyth), 0, 0, 1, 1},
    {&__pyx_n_s_weightedDotProduct___setstate_cy, __pyx_k_weightedDotProduct___setstate_cy, sizeof(__pyx_k_weightedDotProduct___setstate_cy), 0, 0, 1, 1},
    {&__pyx_n_s_weightedSquareDistance, __pyx_k_weightedSquareDistance, sizeof(__pyx_k_weightedSquareDistance), 0, 0, 1, 1},
    {&__pyx_n_s_weightedSquareDistance___reduce, __pyx_k_weightedSquareDistance___reduce, sizeof(__pyx_k_weightedSquareDistance___reduce), 0, 0, 1, 1},
    {&__pyx_n_s_weightedSquareDistance___setstat, __pyx_k_weightedSquareDistance___setstat, sizeof(__pyx_k_weightedSquareDistance___setstat), 0, 0, 1, 1},
    {&__pyx_n_s_weights, __pyx_k_weights, sizeof(__pyx_k_weights), 0, 0, 1, 1},
    {&__pyx_n_s_whole, __pyx_k_whole, sizeof(__pyx_k_whole), 0, 0, 1, 1},
    {0, 0, 0, 0, 0, 0, 0}
  };
  return __Pyx_InitStrings(__pyx_string_tab);
}
/* #### Code section: cached_builtins ### */
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(1, 203, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(1, 525, __pyx_L1_error)
  __pyx_builtin_max = __Pyx_GetBuiltinName(__pyx_n_s_max); if (!__pyx_builtin_max) __PYX_ERR(1, 1734, __pyx_L1_error)
  __pyx_builtin_super = __Pyx_GetBuiltinName(__pyx_n_s_super); if (!__pyx_builtin_super) __PYX_ERR(1, 2478, __pyx_L1_error)
  __pyx_builtin___import__ = __Pyx_GetBuiltinName(__pyx_n_s_import); if (!__pyx_builtin___import__) __PYX_ERR(0, 100, __pyx_L1_error)
  __pyx_builtin_MemoryError = __Pyx_GetBuiltinName(__pyx_n_s_MemoryError); if (!__pyx_builtin_MemoryError) __PYX_ERR(0, 156, __pyx_L1_error)
  __pyx_builtin_enumerate = __Pyx_GetBuiltinName(__pyx_n_s_enumerate); if (!__pyx_builtin_enumerate) __PYX_ERR(0, 159, __pyx_L1_error)
  __pyx_builtin_AssertionError = __Pyx_GetBuiltinName(__pyx_n_s_AssertionError); if (!__pyx_builtin_AssertionError) __PYX_ERR(0, 373, __pyx_L1_error)
  __pyx_builtin_Ellipsis = __Pyx_GetBuiltinName(__pyx_n_s_Ellipsis); if (!__pyx_builtin_Ellipsis) __PYX_ERR(0, 408, __pyx_L1_error)
  __pyx_builtin_id = __Pyx_GetBuiltinName(__pyx_n_s_id); if (!__pyx_builtin_id) __PYX_ERR(0, 618, __pyx_L1_error)
  __pyx_builtin_IndexError = __Pyx_GetBuiltinName(__pyx_n_s_IndexError); if (!__pyx_builtin_IndexError) __PYX_ERR(0, 914, __pyx_L1_error)
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(2, 1026, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: cached_constants ### */

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "View.MemoryView":582
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:
 *             return (-1,) * self.view.ndim             # <<<<<<<<<<<<<<
 * 
 *         return tuple([suboffset for suboffset in self.view.suboffsets[:self.view.ndim]])
 */
  __pyx_tuple__4 = PyTuple_New(1); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 582, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_INCREF(__pyx_int_neg_1);
  __Pyx_GIVEREF(__pyx_int_neg_1);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_tuple__4, 0, __pyx_int_neg_1)) __PYX_ERR(0, 582, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "View.MemoryView":679
 *     tup = <tuple>index if isinstance(index, tuple) else (index,)
 * 
 *     result = [slice(None)] * ndim             # <<<<<<<<<<<<<<
 *     have_slices = False
 *     seen_ellipsis = False
 */
  __pyx_slice__5 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__5)) __PYX_ERR(0, 679, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__5);
  __Pyx_GIVEREF(__pyx_slice__5);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x82a3537, 0x6ae9995, 0xb068931):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x82a3537, 0x6ae9995, 0xb068931) = (name))" % __pyx_checksum
 */
  __pyx_tuple__8 = PyTuple_Pack(3, __pyx_int_136983863, __pyx_int_112105877, __pyx_int_184977713); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":1026
 *         __pyx_import_array()
 *     except Exception:
 *         raise ImportError("numpy._core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_s_numpy__core_multiarray_failed_to); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(2, 1026, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "../../../Library/Python/3.9/lib/python/site-packages/numpy/__init__.cython-30.pxd":1032
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy._core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_s_numpy__core_umath_failed_to_impo); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(2, 1032, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "miololib.pyx":146
 *                     self.mtxDouble = NULL
 *         else:
 *             raise Exception("Unknown ctype.")             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_s_Unknown_ctype); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(1, 146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "miololib.pyx":220
 *         cdef unsigned long i, j
 *         if np.shape(data)!=(self.rows,self.cols):
 *             raise Exception("Incompatible shape for miolo.Matrix data.")             # <<<<<<<<<<<<<<
 *         if self.ctype == "int":
 *             for i in range(self.mtxInt.rows):
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_kp_s_Incompatible_shape_for_miolo_Mat); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(1, 220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "miololib.pyx":239
 *     def __getitem__(self, unsigned long k):
 *         if k >= <unsigned long>self.rows*self.cols:
 *             raise Exception("Index k is out of bounds.")             # <<<<<<<<<<<<<<
 *         if self.ctype=="int":
 *             return self.mtxInt.data[k]
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_s_Index_k_is_out_of_bounds); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(1, 239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "miololib.pyx":264
 *         cdef unsigned long n
 *         if M.rows!=self.rows or M.cols!=self.cols:
 *             raise Exception("Matrices must have same shape.")             # <<<<<<<<<<<<<<
 *         if self.ctype!=M.ctype:
 *             raise TypeError("Matrices must share same ctype.")
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_kp_s_Matrices_must_have_same_shape); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(1, 264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "miololib.pyx":266
 *             raise Exception("Matrices must have same shape.")
 *         if self.ctype!=M.ctype:
 *             raise TypeError("Matrices must share same ctype.")             # <<<<<<<<<<<<<<
 *         if only is None:
 *             if self.ctype=="int":
 */
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_kp_s_Matrices_must_share_same_ctype); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(1, 266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "miololib.pyx":276
 *         else:
 *             if np.max(only)+1>self.rows:
 *                 raise Exception("Entries of only exceed self.rows.")             # <<<<<<<<<<<<<<
 *             n = only.size
 *             if self.ctype=="int":
 */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_kp_s_Entries_of_only_exceed_self_rows); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(1, 276, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "miololib.pyx":299
 *         """
 *         if rowMin<0 or rowMax>self.rows:
 *             raise Exception("Row range is out of bounds.")             # <<<<<<<<<<<<<<
 *         if colMin<0 or colMax>self.cols:
 *             raise Exception("Col range is out of bounds.")
 */
  __pyx_tuple__19 = PyTuple_Pack(1, __pyx_kp_s_Row_range_is_out_of_bounds); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(1, 299, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "miololib.pyx":301
 *             raise Exception("Row range is out of bounds.")
 *         if colMin<0 or colMax>self.cols:
 *             raise Exception("Col range is out of bounds.")             # <<<<<<<<<<<<<<
 *         out = Matrix(ctype=self.ctype)
 *         if self.ctype=="int":
 */
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_kp_s_Col_range_is_out_of_bounds); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(1, 301, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "miololib.pyx":412
 *         """
 *         if self.rows*self.cols!=rows*cols:
 *             raise Exception("Invalid new shape.")             # <<<<<<<<<<<<<<
 *         if self.ctype=="int":
 *             self.mtxInt.reshape(rows,cols)
 */
  __pyx_tuple__21 = PyTuple_Pack(1, __pyx_kp_s_Invalid_new_shape); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(1, 412, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "miololib.pyx":431
 *         """
 *         if self.rows!=self.cols:
 *             raise Exception("Only square matrices can be sparsified.")             # <<<<<<<<<<<<<<
 *         if output=="Graph":
 *             out = Graph(ctype=self.ctype)
 */
  __pyx_tuple__22 = PyTuple_Pack(1, __pyx_kp_s_Only_square_matrices_can_be_spar); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(1, 431, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);

  /* "miololib.pyx":472
 *     def __add__(self, Matrix A):
 *         if self.ctype!=A.ctype:
 *             raise Exception("Matrix operations require same ctype.")             # <<<<<<<<<<<<<<
 *         if self.rows!=A.rows or self.cols!=A.cols:
 *             raise Exception("Incompatible shape for Matrix addition.")
 */
  __pyx_tuple__23 = PyTuple_Pack(1, __pyx_kp_s_Matrix_operations_require_same_c); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(1, 472, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "miololib.pyx":474
 *             raise Exception("Matrix operations require same ctype.")
 *         if self.rows!=A.rows or self.cols!=A.cols:
 *             raise Exception("Incompatible shape for Matrix addition.")             # <<<<<<<<<<<<<<
 *         if self.ctype=="int":
 *             out = Matrix(ctype="int")
 */
  __pyx_tuple__24 = PyTuple_Pack(1, __pyx_kp_s_Incompatible_shape_for_Matrix_ad); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(1, 474, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);

  /* "miololib.pyx":492
 *             raise Exception("Matrix operations require same ctype.")
 *         if self.rows!=A.rows or self.cols!=A.cols:
 *             raise Exception("Incompatible shape for Matrix subtraction.")             # <<<<<<<<<<<<<<
 *         if self.ctype=="int":
 *             out = Matrix(ctype="int")
 */
  __pyx_tuple__25 = PyTuple_Pack(1, __pyx_kp_s_Incompatible_shape_for_Matrix_su); if (unlikely(!__pyx_tuple__25)) __PYX_ERR(1, 492, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);

  /* "miololib.pyx":525
 *     def __truediv__(self, value):
 *         if value==0:
 *             raise ValueError("Attempting division by zero.")             # <<<<<<<<<<<<<<
 *         return self*(1./value)
 * 
 */
  __pyx_tuple__26 = PyTuple_Pack(1, __pyx_kp_s_Attempting_division_by_zero); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(1, 525, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);

  /* "miololib.pyx":532
 *             raise Exception("Matrix operations require same ctype.")
 *         if self.cols!=A.rows:
 *             raise Exception("Incompatible shape for Matrix product.")             # <<<<<<<<<<<<<<
 *         if self.ctype=="int":
 *             out = Matrix(ctype="int")
 */
  __pyx_tuple__27 = PyTuple_Pack(1, __pyx_kp_s_Incompatible_shape_for_Matrix_pr); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(1, 532, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);

  /* "miololib.pyx":553
 *             raise Exception("Matrix operations require same ctype.")
 *         if self.rows!=A.rows or self.cols!=A.cols:
 *             raise Exception("Incompatible shape for Hadamard product.")             # <<<<<<<<<<<<<<
 *         if self.ctype=="int":
 *             out = Matrix(ctype="int")
 */
  __pyx_tuple__28 = PyTuple_Pack(1, __pyx_kp_s_Incompatible_shape_for_Hadamard); if (unlikely(!__pyx_tuple__28)) __PYX_ERR(1, 553, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);

  /* "miololib.pyx":639
 *         """
 *         if labels.size!=self.rows:
 *             raise Exception("labels must have size equal to self.rows.")             # <<<<<<<<<<<<<<
 *         out = Matrix(ctype=self.ctype)
 *         if out.ctype=="int":
 */
  __pyx_tuple__29 = PyTuple_Pack(1, __pyx_kp_s_labels_must_have_size_equal_to_s); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(1, 639, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);

  /* "miololib.pyx":666
 *     """
 *     if A.ctype!=B.ctype:
 *         raise TypeError("Matrices must have the same ctype.")             # <<<<<<<<<<<<<<
 *     if A.ctype=="int":
 *         return A.mtxInt.dot(B.mtxInt)
 */
  __pyx_tuple__30 = PyTuple_Pack(1, __pyx_kp_s_Matrices_must_have_the_same_ctyp); if (unlikely(!__pyx_tuple__30)) __PYX_ERR(1, 666, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);

  /* "miololib.pyx":680
 *     """
 *     if A.ctype!=B.ctype:
 *         raise TypeError("A and B must have same ctype.")             # <<<<<<<<<<<<<<
 *     if A.cols!=B.cols:
 *         raise Exception("A and B must have same number of columns.")
 */
  __pyx_tuple__31 = PyTuple_Pack(1, __pyx_kp_s_A_and_B_must_have_same_ctype); if (unlikely(!__pyx_tuple__31)) __PYX_ERR(1, 680, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);

  /* "miololib.pyx":682
 *         raise TypeError("A and B must have same ctype.")
 *     if A.cols!=B.cols:
 *         raise Exception("A and B must have same number of columns.")             # <<<<<<<<<<<<<<
 *     if A.null:
 *         return B
 */
  __pyx_tuple__32 = PyTuple_Pack(1, __pyx_kp_s_A_and_B_must_have_same_number_of); if (unlikely(!__pyx_tuple__32)) __PYX_ERR(1, 682, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);

  /* "miololib.pyx":806
 *         cdef unsigned long k
 *         if np.shape(data)!=(self.edges,2):
 *             raise Exception("Incompatible shape for Graph data.")             # <<<<<<<<<<<<<<
 *         if self.ctype == "int":
 *             for k in range(self.graphInt.edges):
 */
  __pyx_tuple__34 = PyTuple_Pack(1, __pyx_kp_s_Incompatible_shape_for_Graph_dat); if (unlikely(!__pyx_tuple__34)) __PYX_ERR(1, 806, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__34);
  __Pyx_GIVEREF(__pyx_tuple__34);

  /* "miololib.pyx":861
 *     def __getitem__(self, unsigned long k):
 *         if k >= <unsigned long>self.edges:
 *             raise Exception("Index is out of bounds.")             # <<<<<<<<<<<<<<
 *         if self.ctype=="int":
 *             return (self.graphInt.e[k].i,self.graphInt.e[k].j,self.graphInt.e[k].w)
 */
  __pyx_tuple__35 = PyTuple_Pack(1, __pyx_kp_s_Index_is_out_of_bounds); if (unlikely(!__pyx_tuple__35)) __PYX_ERR(1, 861, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__35);
  __Pyx_GIVEREF(__pyx_tuple__35);

  /* "miololib.pyx":899
 *         if clamped is not None:
 *             if M.rows!=clamped.size:
 *                 raise Exception("clamped must have length equal to Matrix rows.")             # <<<<<<<<<<<<<<
 *             if M.rows!=self.nodes:
 *                 raise Exception("Number of Matrix rows must be equal to number of nodes.")
 */
  __pyx_tuple__37 = PyTuple_Pack(1, __pyx_kp_s_clamped_must_have_length_equal_t); if (unlikely(!__pyx_tuple__37)) __PYX_ERR(1, 899, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__37);
  __Pyx_GIVEREF(__pyx_tuple__37);

  /* "miololib.pyx":901
 *                 raise Exception("clamped must have length equal to Matrix rows.")
 *             if M.rows!=self.nodes:
 *                 raise Exception("Number of Matrix rows must be equal to number of nodes.")             # <<<<<<<<<<<<<<
 *             if M.ctype!=self.ctype:
 *                 raise TypeError("Graph and Matrix must have same ctype.")
 */
  __pyx_tuple__38 = PyTuple_Pack(1, __pyx_kp_s_Number_of_Matrix_rows_must_be_eq); if (unlikely(!__pyx_tuple__38)) __PYX_ERR(1, 901, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__38);
  __Pyx_GIVEREF(__pyx_tuple__38);

  /* "miololib.pyx":903
 *                 raise Exception("Number of Matrix rows must be equal to number of nodes.")
 *             if M.ctype!=self.ctype:
 *                 raise TypeError("Graph and Matrix must have same ctype.")             # <<<<<<<<<<<<<<
 *             out = Matrix()
 *             if self.ctype=="int":
 */
  __pyx_tuple__39 = PyTuple_Pack(1, __pyx_kp_s_Graph_and_Matrix_must_have_same); if (unlikely(!__pyx_tuple__39)) __PYX_ERR(1, 903, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__39);
  __Pyx_GIVEREF(__pyx_tuple__39);

  /* "miololib.pyx":917
 *     def __add__(self, Graph G):
 *         if self.ctype!=G.ctype:
 *             raise TypeError("Graphs must share same ctype.")             # <<<<<<<<<<<<<<
 *         if self.edges!=G.edges:
 *             raise Exception("Graphs must have same number of edges")
 */
  __pyx_tuple__40 = PyTuple_Pack(1, __pyx_kp_s_Graphs_must_share_same_ctype); if (unlikely(!__pyx_tuple__40)) __PYX_ERR(1, 917, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__40);
  __Pyx_GIVEREF(__pyx_tuple__40);

  /* "miololib.pyx":919
 *             raise TypeError("Graphs must share same ctype.")
 *         if self.edges!=G.edges:
 *             raise Exception("Graphs must have same number of edges")             # <<<<<<<<<<<<<<
 *         out = Graph()
 *         if self.ctype=="int":
 */
  __pyx_tuple__41 = PyTuple_Pack(1, __pyx_kp_s_Graphs_must_have_same_number_of); if (unlikely(!__pyx_tuple__41)) __PYX_ERR(1, 919, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__41);
  __Pyx_GIVEREF(__pyx_tuple__41);

  /* "miololib.pyx":967
 *     def __and__(self, Matrix A):
 *         if self.ctype!=A.ctype:
 *             raise Exception("Graph-Matrix operations require same ctype.")             # <<<<<<<<<<<<<<
 *         if self.nodes!=A.rows:
 *             raise Exception("Incompatible shape for product.")
 */
  __pyx_tuple__42 = PyTuple_Pack(1, __pyx_kp_s_Graph_Matrix_operations_require); if (unlikely(!__pyx_tuple__42)) __PYX_ERR(1, 967, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__42);
  __Pyx_GIVEREF(__pyx_tuple__42);

  /* "miololib.pyx":969
 *             raise Exception("Graph-Matrix operations require same ctype.")
 *         if self.nodes!=A.rows:
 *             raise Exception("Incompatible shape for product.")             # <<<<<<<<<<<<<<
 *         if self.ctype=="int":
 *             out = Matrix(ctype="int")
 */
  __pyx_tuple__43 = PyTuple_Pack(1, __pyx_kp_s_Incompatible_shape_for_product); if (unlikely(!__pyx_tuple__43)) __PYX_ERR(1, 969, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__43);
  __Pyx_GIVEREF(__pyx_tuple__43);

  /* "miololib.pyx":1149
 *     if isinstance(O,Matrix):
 *         if O.rows!=O.cols:
 *             raise Exception("Matrix must be square.")             # <<<<<<<<<<<<<<
 *         if symmetrize:
 *             O = (O+O.transpose())/2
 */
  __pyx_tuple__44 = PyTuple_Pack(1, __pyx_kp_s_Matrix_must_be_square); if (unlikely(!__pyx_tuple__44)) __PYX_ERR(1, 1149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__44);
  __Pyx_GIVEREF(__pyx_tuple__44);

  /* "miololib.pyx":1247
 *         """
 *         if i >= self.nodes or i<0:
 *             raise Exception("i is not a valid index for Digraph.")             # <<<<<<<<<<<<<<
 *         if j >= self.nodes or j<0:
 *             raise Exception("j is not a valid index for Digraph.")
 */
  __pyx_tuple__46 = PyTuple_Pack(1, __pyx_kp_s_i_is_not_a_valid_index_for_Digra); if (unlikely(!__pyx_tuple__46)) __PYX_ERR(1, 1247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__46);
  __Pyx_GIVEREF(__pyx_tuple__46);

  /* "miololib.pyx":1249
 *             raise Exception("i is not a valid index for Digraph.")
 *         if j >= self.nodes or j<0:
 *             raise Exception("j is not a valid index for Digraph.")             # <<<<<<<<<<<<<<
 *         if self.ctype=="int":
 *             self.digraphInt.connect(i,j,value)
 */
  __pyx_tuple__47 = PyTuple_Pack(1, __pyx_kp_s_j_is_not_a_valid_index_for_Digra); if (unlikely(!__pyx_tuple__47)) __PYX_ERR(1, 1249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__47);
  __Pyx_GIVEREF(__pyx_tuple__47);

  /* "miololib.pyx":1265
 *         """
 *         if Neighbors.ctype!="int":
 *             raise TypeError("Neighbors must have int ctype.")             # <<<<<<<<<<<<<<
 *         if Neighbors.rows!=self.nodes or Weights.rows!=self.nodes:
 *             raise Exception("Neighbors and Weights must have rows equals to self.nodes.")
 */
  __pyx_tuple__48 = PyTuple_Pack(1, __pyx_kp_s_Neighbors_must_have_int_ctype); if (unlikely(!__pyx_tuple__48)) __PYX_ERR(1, 1265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__48);
  __Pyx_GIVEREF(__pyx_tuple__48);

  /* "miololib.pyx":1267
 *             raise TypeError("Neighbors must have int ctype.")
 *         if Neighbors.rows!=self.nodes or Weights.rows!=self.nodes:
 *             raise Exception("Neighbors and Weights must have rows equals to self.nodes.")             # <<<<<<<<<<<<<<
 *         if Weights.ctype!=self.ctype:
 *             raise TypeError("Weights and self must have same ctype.")
 */
  __pyx_tuple__49 = PyTuple_Pack(1, __pyx_kp_s_Neighbors_and_Weights_must_have); if (unlikely(!__pyx_tuple__49)) __PYX_ERR(1, 1267, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__49);
  __Pyx_GIVEREF(__pyx_tuple__49);

  /* "miololib.pyx":1269
 *             raise Exception("Neighbors and Weights must have rows equals to self.nodes.")
 *         if Weights.ctype!=self.ctype:
 *             raise TypeError("Weights and self must have same ctype.")             # <<<<<<<<<<<<<<
 *         if Weights.rows!=Weights.cols:
 *             raise Exception("Weights must be a square Matrix.")
 */
  __pyx_tuple__50 = PyTuple_Pack(1, __pyx_kp_s_Weights_and_self_must_have_same); if (unlikely(!__pyx_tuple__50)) __PYX_ERR(1, 1269, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__50);
  __Pyx_GIVEREF(__pyx_tuple__50);

  /* "miololib.pyx":1271
 *             raise TypeError("Weights and self must have same ctype.")
 *         if Weights.rows!=Weights.cols:
 *             raise Exception("Weights must be a square Matrix.")             # <<<<<<<<<<<<<<
 *         if self.ctype=="int":
 *             self.digraphInt.connectRegular(drf(Neighbors.mtxInt),drf(Weights.mtxInt))
 */
  __pyx_tuple__51 = PyTuple_Pack(1, __pyx_kp_s_Weights_must_be_a_square_Matrix); if (unlikely(!__pyx_tuple__51)) __PYX_ERR(1, 1271, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__51);
  __Pyx_GIVEREF(__pyx_tuple__51);

  /* "miololib.pyx":1395
 *     def __add__(self, Digraph G):
 *         if self.ctype!=G.ctype:
 *             raise TypeError("Digraphs must share same ctype.")             # <<<<<<<<<<<<<<
 *         if not self.sameShape(G):
 *             raise Exception("Digraphs must have same shapes.")
 */
  __pyx_tuple__52 = PyTuple_Pack(1, __pyx_kp_s_Digraphs_must_share_same_ctype); if (unlikely(!__pyx_tuple__52)) __PYX_ERR(1, 1395, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__52);
  __Pyx_GIVEREF(__pyx_tuple__52);

  /* "miololib.pyx":1397
 *             raise TypeError("Digraphs must share same ctype.")
 *         if not self.sameShape(G):
 *             raise Exception("Digraphs must have same shapes.")             # <<<<<<<<<<<<<<
 *         out = Digraph(ctype=self.ctype)
 *         if self.ctype=="int":
 */
  __pyx_tuple__53 = PyTuple_Pack(1, __pyx_kp_s_Digraphs_must_have_same_shapes); if (unlikely(!__pyx_tuple__53)) __PYX_ERR(1, 1397, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__53);
  __Pyx_GIVEREF(__pyx_tuple__53);

  /* "miololib.pyx":1433
 *     def __truediv__(self, value):
 *         if value==0:
 *             raise Exception("Avoiding division by zero.")             # <<<<<<<<<<<<<<
 *         return self*(1/value)
 * 
 */
  __pyx_tuple__54 = PyTuple_Pack(1, __pyx_kp_s_Avoiding_division_by_zero); if (unlikely(!__pyx_tuple__54)) __PYX_ERR(1, 1433, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__54);
  __Pyx_GIVEREF(__pyx_tuple__54);

  /* "miololib.pyx":1438
 *     def __and__(self, Matrix M):
 *         if self.nodes!=Matrix.rows:
 *             raise Exception("Incompatible shape for matrix multiplication.")             # <<<<<<<<<<<<<<
 *         if self.ctype!=M.ctype:
 *             raise TypeError("Digraph and Matrix must share same ctype.")
 */
  __pyx_tuple__55 = PyTuple_Pack(1, __pyx_kp_s_Incompatible_shape_for_matrix_mu); if (unlikely(!__pyx_tuple__55)) __PYX_ERR(1, 1438, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__55);
  __Pyx_GIVEREF(__pyx_tuple__55);

  /* "miololib.pyx":1440
 *             raise Exception("Incompatible shape for matrix multiplication.")
 *         if self.ctype!=M.ctype:
 *             raise TypeError("Digraph and Matrix must share same ctype.")             # <<<<<<<<<<<<<<
 *         out = Matrix(self.ctype)
 *         if self.ctype=="int":
 */
  __pyx_tuple__56 = PyTuple_Pack(1, __pyx_kp_s_Digraph_and_Matrix_must_share_sa); if (unlikely(!__pyx_tuple__56)) __PYX_ERR(1, 1440, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__56);
  __Pyx_GIVEREF(__pyx_tuple__56);

  /* "miololib.pyx":1575
 *     def __add__(self, Diagonal D):
 *         if len(self)!=len(D):
 *             raise Exception("Incompatible shapes for addition")             # <<<<<<<<<<<<<<
 *         if self.ctype!=D.ctype:
 *             raise TypeError("Diagonals must have same ctype")
 */
  __pyx_tuple__58 = PyTuple_Pack(1, __pyx_kp_s_Incompatible_shapes_for_addition); if (unlikely(!__pyx_tuple__58)) __PYX_ERR(1, 1575, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__58);
  __Pyx_GIVEREF(__pyx_tuple__58);

  /* "miololib.pyx":1577
 *             raise Exception("Incompatible shapes for addition")
 *         if self.ctype!=D.ctype:
 *             raise TypeError("Diagonals must have same ctype")             # <<<<<<<<<<<<<<
 *         out = Diagonal(ctype=D.ctype)
 *         if self.ctype=="int":
 */
  __pyx_tuple__59 = PyTuple_Pack(1, __pyx_kp_s_Diagonals_must_have_same_ctype); if (unlikely(!__pyx_tuple__59)) __PYX_ERR(1, 1577, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__59);
  __Pyx_GIVEREF(__pyx_tuple__59);

  /* "miololib.pyx":1589
 *     def __sub__(self, Diagonal D):
 *         if len(self)!=len(D):
 *             raise Exception("Incompatible shapes for subtraction")             # <<<<<<<<<<<<<<
 *         if self.ctype!=D.ctype:
 *             raise TypeError("Diagonals must have same ctype")
 */
  __pyx_tuple__60 = PyTuple_Pack(1, __pyx_kp_s_Incompatible_shapes_for_subtract); if (unlikely(!__pyx_tuple__60)) __PYX_ERR(1, 1589, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__60);
  __Pyx_GIVEREF(__pyx_tuple__60);

  /* "miololib.pyx":1603
 *     def __and__(self, mioloObject D):
 *         if D.ctype!=self.ctype:
 *             raise TypeError("Objects must share same ctype.")             # <<<<<<<<<<<<<<
 *         if isinstance(D,Matrix):
 *             if (D.rows!=self.dim):
 */
  __pyx_tuple__61 = PyTuple_Pack(1, __pyx_kp_s_Objects_must_share_same_ctype); if (unlikely(!__pyx_tuple__61)) __PYX_ERR(1, 1603, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__61);
  __Pyx_GIVEREF(__pyx_tuple__61);

  /* "miololib.pyx":1606
 *         if isinstance(D,Matrix):
 *             if (D.rows!=self.dim):
 *                 raise Exception("Number of rows must be equal to Diagonal.cols")             # <<<<<<<<<<<<<<
 *             out = Matrix(self.ctype)
 *             if self.ctype=="int":
 */
  __pyx_tuple__62 = PyTuple_Pack(1, __pyx_kp_s_Number_of_rows_must_be_equal_to); if (unlikely(!__pyx_tuple__62)) __PYX_ERR(1, 1606, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__62);
  __Pyx_GIVEREF(__pyx_tuple__62);

  /* "miololib.pyx":1617
 *         if isinstance(D,Graph):
 *             if (D.nodes!=self.dim):
 *                 raise Exception("Number of nodes must be equal to Diagonal.cols")             # <<<<<<<<<<<<<<
 *             out = Digraph(self.ctype)
 *             if self.ctype=="int":
 */
  __pyx_tuple__63 = PyTuple_Pack(1, __pyx_kp_s_Number_of_nodes_must_be_equal_to); if (unlikely(!__pyx_tuple__63)) __PYX_ERR(1, 1617, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__63);
  __Pyx_GIVEREF(__pyx_tuple__63);

  /* "miololib.pyx":1639
 *         if isinstance(D,Diagonal):
 *             if (D.dim!=self.dim):
 *                 raise Exception("Dimension of diagonals must be equal.")             # <<<<<<<<<<<<<<
 *             out = Diagonal(self.ctype)
 *             if self.ctype=="int":
 */
  __pyx_tuple__64 = PyTuple_Pack(1, __pyx_kp_s_Dimension_of_diagonals_must_be_e); if (unlikely(!__pyx_tuple__64)) __PYX_ERR(1, 1639, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__64);
  __Pyx_GIVEREF(__pyx_tuple__64);

  /* "miololib.pyx":1709
 *     def __truediv__(self, value):
 *         if (value==0):
 *             raise ValueError("Cannot divide by zero.")             # <<<<<<<<<<<<<<
 *         return self*(1/value)
 * 
 */
  __pyx_tuple__65 = PyTuple_Pack(1, __pyx_kp_s_Cannot_divide_by_zero); if (unlikely(!__pyx_tuple__65)) __PYX_ERR(1, 1709, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__65);
  __Pyx_GIVEREF(__pyx_tuple__65);

  /* "miololib.pyx":1739
 *     E = len(g[0])
 *     out = Graph(N,E,ctype)
 *     out.structure = np.transpose(g[0:2])             # <<<<<<<<<<<<<<
 *     out.weights = g[2]
 *     return out
 */
  __pyx_slice__66 = PySlice_New(__pyx_int_0, __pyx_int_2, Py_None); if (unlikely(!__pyx_slice__66)) __PYX_ERR(1, 1739, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__66);
  __Pyx_GIVEREF(__pyx_slice__66);

  /* "miololib.pyx":1858
 *         """
 *         if M.ctype!=center.ctype:
 *             raise TypeError("M and center must have same ctype.")             # <<<<<<<<<<<<<<
 *         if M.cols!=center.cols:
 *             raise Exception("M.cols must be equal to center.cols.")
 */
  __pyx_tuple__67 = PyTuple_Pack(1, __pyx_kp_s_M_and_center_must_have_same_ctyp); if (unlikely(!__pyx_tuple__67)) __PYX_ERR(1, 1858, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__67);
  __Pyx_GIVEREF(__pyx_tuple__67);

  /* "miololib.pyx":1860
 *             raise TypeError("M and center must have same ctype.")
 *         if M.cols!=center.cols:
 *             raise Exception("M.cols must be equal to center.cols.")             # <<<<<<<<<<<<<<
 *         out = Matrix(ctype=M.ctype)
 *         if out.ctype=="int":
 */
  __pyx_tuple__68 = PyTuple_Pack(1, __pyx_kp_s_M_cols_must_be_equal_to_center_c); if (unlikely(!__pyx_tuple__68)) __PYX_ERR(1, 1860, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__68);
  __Pyx_GIVEREF(__pyx_tuple__68);

  /* "miololib.pyx":1902
 *     def radius(self, r):
 *         if r<=0:
 *             raise Exception("Sphere radius must be greater than 0.")             # <<<<<<<<<<<<<<
 *         self.view.r = r
 * 
 */
  __pyx_tuple__69 = PyTuple_Pack(1, __pyx_kp_s_Sphere_radius_must_be_greater_th); if (unlikely(!__pyx_tuple__69)) __PYX_ERR(1, 1902, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__69);
  __Pyx_GIVEREF(__pyx_tuple__69);

  /* "miololib.pyx":1956
 *         """
 *         if azimuth>=M.cols:
 *             raise ValueError("azimuth must be smaller than M.cols.")             # <<<<<<<<<<<<<<
 *         out = Matrix(ctype=M.ctype)
 *         if M.ctype=="int":
 */
  __pyx_tuple__70 = PyTuple_Pack(1, __pyx_kp_s_azimuth_must_be_smaller_than_M_c); if (unlikely(!__pyx_tuple__70)) __PYX_ERR(1, 1956, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__70);
  __Pyx_GIVEREF(__pyx_tuple__70);

  /* "miololib.pyx":1999
 *         """
 *         if at.rows!=M.rows or at.cols!=M.cols:
 *             raise Exception("at and M must have same shape.")             # <<<<<<<<<<<<<<
 *         if at.ctype!=M.ctype:
 *             raise TypeError("at and M must have same ctype.")
 */
  __pyx_tuple__71 = PyTuple_Pack(1, __pyx_kp_s_at_and_M_must_have_same_shape); if (unlikely(!__pyx_tuple__71)) __PYX_ERR(1, 1999, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__71);
  __Pyx_GIVEREF(__pyx_tuple__71);

  /* "miololib.pyx":2001
 *             raise Exception("at and M must have same shape.")
 *         if at.ctype!=M.ctype:
 *             raise TypeError("at and M must have same ctype.")             # <<<<<<<<<<<<<<
 *         if M.ctype=="int":
 *             return self.view.isTangent(drf(at.mtxInt),drf(M.mtxInt),<int>tolerance)
 */
  __pyx_tuple__72 = PyTuple_Pack(1, __pyx_kp_s_at_and_M_must_have_same_ctype); if (unlikely(!__pyx_tuple__72)) __PYX_ERR(1, 2001, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__72);
  __Pyx_GIVEREF(__pyx_tuple__72);

  /* "miololib.pyx":2019
 *         """
 *         if at.cols!=tangent.cols:
 *             raise Exception("at and tangent must have same number of cols.")             # <<<<<<<<<<<<<<
 *         if at.rows!=1 and at.rows!=tangent.rows:
 *             raise Exception("Invalid shape for at.")
 */
  __pyx_tuple__73 = PyTuple_Pack(1, __pyx_kp_s_at_and_tangent_must_have_same_nu); if (unlikely(!__pyx_tuple__73)) __PYX_ERR(1, 2019, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__73);
  __Pyx_GIVEREF(__pyx_tuple__73);

  /* "miololib.pyx":2021
 *             raise Exception("at and tangent must have same number of cols.")
 *         if at.rows!=1 and at.rows!=tangent.rows:
 *             raise Exception("Invalid shape for at.")             # <<<<<<<<<<<<<<
 *         if at.ctype!=tangent.ctype:
 *             raise TypeError("at and tanget must have same ctype.")
 */
  __pyx_tuple__74 = PyTuple_Pack(1, __pyx_kp_s_Invalid_shape_for_at); if (unlikely(!__pyx_tuple__74)) __PYX_ERR(1, 2021, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__74);
  __Pyx_GIVEREF(__pyx_tuple__74);

  /* "miololib.pyx":2023
 *             raise Exception("Invalid shape for at.")
 *         if at.ctype!=tangent.ctype:
 *             raise TypeError("at and tanget must have same ctype.")             # <<<<<<<<<<<<<<
 *         out = Matrix(ctype=at.ctype)
 *         if at.rows==tangent.rows:
 */
  __pyx_tuple__75 = PyTuple_Pack(1, __pyx_kp_s_at_and_tanget_must_have_same_cty); if (unlikely(!__pyx_tuple__75)) __PYX_ERR(1, 2023, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__75);
  __Pyx_GIVEREF(__pyx_tuple__75);

  /* "miololib.pyx":2109
 *             raise Exception("Matrices must have same shape.")
 *         if A.ctype!=B.ctype:
 *             raise TypeError("Matrices must have same ctype.")             # <<<<<<<<<<<<<<
 *         out = Matrix(ctype=A.ctype)
 *         if out.ctype=="int":
 */
  __pyx_tuple__76 = PyTuple_Pack(1, __pyx_kp_s_Matrices_must_have_same_ctype); if (unlikely(!__pyx_tuple__76)) __PYX_ERR(1, 2109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__76);
  __Pyx_GIVEREF(__pyx_tuple__76);

  /* "miololib.pyx":2231
 *         """
 *         if M.cols<2:
 *             raise Exception("Number of cols must be greater than 1.")             # <<<<<<<<<<<<<<
 *         out = Matrix(ctype=M.ctype)
 *         if out.ctype=="int":
 */
  __pyx_tuple__77 = PyTuple_Pack(1, __pyx_kp_s_Number_of_cols_must_be_greater_t); if (unlikely(!__pyx_tuple__77)) __PYX_ERR(1, 2231, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__77);
  __Pyx_GIVEREF(__pyx_tuple__77);

  /* "miololib.pyx":2308
 *         """
 *         if at.cols!=M.cols:
 *             raise Exception("at and M must have same number of cols.")             # <<<<<<<<<<<<<<
 *         if at.rows!=M.rows:
 *             raise Exception("at and M must have same number of rows.")
 */
  __pyx_tuple__78 = PyTuple_Pack(1, __pyx_kp_s_at_and_M_must_have_same_number_o); if (unlikely(!__pyx_tuple__78)) __PYX_ERR(1, 2308, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__78);
  __Pyx_GIVEREF(__pyx_tuple__78);

  /* "miololib.pyx":2310
 *             raise Exception("at and M must have same number of cols.")
 *         if at.rows!=M.rows:
 *             raise Exception("at and M must have same number of rows.")             # <<<<<<<<<<<<<<
 *         if at.ctype!=M.ctype:
 *             raise TypeError("at and M must have same ctype.")
 */
  __pyx_tuple__79 = PyTuple_Pack(1, __pyx_kp_s_at_and_M_must_have_same_number_o_2); if (unlikely(!__pyx_tuple__79)) __PYX_ERR(1, 2310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__79);
  __Pyx_GIVEREF(__pyx_tuple__79);

  /* "miololib.pyx":2512
 *         if isinstance(O,Matrix):
 *             if O.rows!=O.cols:
 *                 raise Exception("Only square matrices are allowed.")             # <<<<<<<<<<<<<<
 *             if O.rows!=labels.size:
 *                 raise Exception("Dist.rows must be equal to labels length.")
 */
  __pyx_tuple__80 = PyTuple_Pack(1, __pyx_kp_s_Only_square_matrices_are_allowed); if (unlikely(!__pyx_tuple__80)) __PYX_ERR(1, 2512, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__80);
  __Pyx_GIVEREF(__pyx_tuple__80);

  /* "miololib.pyx":2514
 *                 raise Exception("Only square matrices are allowed.")
 *             if O.rows!=labels.size:
 *                 raise Exception("Dist.rows must be equal to labels length.")             # <<<<<<<<<<<<<<
 *             if O.ctype=="int":
 *                 return self.view(drf(O.mtxInt),&labels[0],True)
 */
  __pyx_tuple__81 = PyTuple_Pack(1, __pyx_kp_s_Dist_rows_must_be_equal_to_label); if (unlikely(!__pyx_tuple__81)) __PYX_ERR(1, 2514, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__81);
  __Pyx_GIVEREF(__pyx_tuple__81);

  /* "miololib.pyx":2570
 *         """
 *         if M.ctype!=Weights.ctype:
 *             raise TypeError("M and Weights must have same ctype.")             # <<<<<<<<<<<<<<
 *         if isinstance(Weights,Matrix):
 *             if Weights.rows!=Weights.cols:
 */
  __pyx_tuple__82 = PyTuple_Pack(1, __pyx_kp_s_M_and_Weights_must_have_same_cty); if (unlikely(!__pyx_tuple__82)) __PYX_ERR(1, 2570, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__82);
  __Pyx_GIVEREF(__pyx_tuple__82);

  /* "miololib.pyx":2573
 *         if isinstance(Weights,Matrix):
 *             if Weights.rows!=Weights.cols:
 *                 raise Exception("Only square weight matrices are allowed.")             # <<<<<<<<<<<<<<
 *             if M.rows!=Weights.rows:
 *                 raise Exception("M and Weights must have same number of rows.")
 */
  __pyx_tuple__83 = PyTuple_Pack(1, __pyx_kp_s_Only_square_weight_matrices_are); if (unlikely(!__pyx_tuple__83)) __PYX_ERR(1, 2573, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__83);
  __Pyx_GIVEREF(__pyx_tuple__83);

  /* "miololib.pyx":2575
 *                 raise Exception("Only square weight matrices are allowed.")
 *             if M.rows!=Weights.rows:
 *                 raise Exception("M and Weights must have same number of rows.")             # <<<<<<<<<<<<<<
 *             if M.ctype=="int":
 *                 return self.view(drf(M.mtxInt),drf(Weights.mtxInt))
 */
  __pyx_tuple__84 = PyTuple_Pack(1, __pyx_kp_s_M_and_Weights_must_have_same_num); if (unlikely(!__pyx_tuple__84)) __PYX_ERR(1, 2575, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__84);
  __Pyx_GIVEREF(__pyx_tuple__84);

  /* "miololib.pyx":2584
 *         if isinstance(Weights,Graph):
 *             if Weights.nodes!=M.rows:
 *                 raise Exception("Weights.nodes must be equal to M.rows.")             # <<<<<<<<<<<<<<
 *             if M.ctype=="int":
 *                 return self.view(drf(M.mtxInt),drf(Weights.graphInt))
 */
  __pyx_tuple__85 = PyTuple_Pack(1, __pyx_kp_s_Weights_nodes_must_be_equal_to_M); if (unlikely(!__pyx_tuple__85)) __PYX_ERR(1, 2584, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__85);
  __Pyx_GIVEREF(__pyx_tuple__85);

  /* "miololib.pyx":2639
 *                 raise Exception("Only square weight matrices are allowed.")
 *             if Weights.rows!=labels.size:
 *                 raise Exception("Size of labels must be equal to Weights.rows.")             # <<<<<<<<<<<<<<
 *             if Weights.ctype=="int":
 *                 return self.view(drf(Weights.mtxInt),&labels[0])
 */
  __pyx_tuple__86 = PyTuple_Pack(1, __pyx_kp_s_Size_of_labels_must_be_equal_to); if (unlikely(!__pyx_tuple__86)) __PYX_ERR(1, 2639, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__86);
  __Pyx_GIVEREF(__pyx_tuple__86);

  /* "miololib.pyx":2648
 *         if isinstance(Weights,Graph):
 *             if Weights.nodes!=labels.size:
 *                 raise Exception("Size of labels must be equal to Weights.nodes")             # <<<<<<<<<<<<<<
 *             if Weights.ctype=="int":
 *                 return self.view(drf(Weights.graphInt),&labels[0])
 */
  __pyx_tuple__87 = PyTuple_Pack(1, __pyx_kp_s_Size_of_labels_must_be_equal_to_2); if (unlikely(!__pyx_tuple__87)) __PYX_ERR(1, 2648, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__87);
  __Pyx_GIVEREF(__pyx_tuple__87);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xe3b0c44, 0xda39a3e, 0xd41d8cd):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe3b0c44, 0xda39a3e, 0xd41d8cd) = ())" % __pyx_checksum
 */
  __pyx_tuple__88 = PyTuple_Pack(3, __pyx_int_238750788, __pyx_int_228825662, __pyx_int_222419149); if (unlikely(!__pyx_tuple__88)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__88);
  __Pyx_GIVEREF(__pyx_tuple__88);

  /* "View.MemoryView":100
 * cdef object __pyx_collections_abc_Sequence "__pyx_collections_abc_Sequence"
 * try:
 *     if __import__("sys").version_info >= (3, 3):             # <<<<<<<<<<<<<<
 *         __pyx_collections_abc_Sequence = __import__("collections.abc").abc.Sequence
 *     else:
 */
  __pyx_tuple__89 = PyTuple_Pack(1, __pyx_n_s_sys); if (unlikely(!__pyx_tuple__89)) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__89);
  __Pyx_GIVEREF(__pyx_tuple__89);
  __pyx_tuple__90 = PyTuple_Pack(2, __pyx_int_3, __pyx_int_3); if (unlikely(!__pyx_tuple__90)) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__90);
  __Pyx_GIVEREF(__pyx_tuple__90);

  /* "View.MemoryView":101
 * try:
 *     if __import__("sys").version_info >= (3, 3):
 *         __pyx_collections_abc_Sequence = __import__("collections.abc").abc.Sequence             # <<<<<<<<<<<<<<
 *     else:
 *         __pyx_collections_abc_Sequence = __import__("collections").Sequence
 */
  __pyx_tuple__91 = PyTuple_Pack(1, __pyx_kp_s_collections_abc); if (unlikely(!__pyx_tuple__91)) __PYX_ERR(0, 101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__91);
  __Pyx_GIVEREF(__pyx_tuple__91);

  /* "View.MemoryView":103
 *         __pyx_collections_abc_Sequence = __import__("collections.abc").abc.Sequence
 *     else:
 *         __pyx_collections_abc_Sequence = __import__("collections").Sequence             # <<<<<<<<<<<<<<
 * except:
 * 
 */
  __pyx_tuple__92 = PyTuple_Pack(1, __pyx_n_s_collections); if (unlikely(!__pyx_tuple__92)) __PYX_ERR(0, 103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__92);
  __Pyx_GIVEREF(__pyx_tuple__92);

  /* "View.MemoryView":309
 *         return self.name
 * 
 * cdef generic = Enum("<strided and direct or indirect>")             # <<<<<<<<<<<<<<
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")
 */
  __pyx_tuple__93 = PyTuple_Pack(1, __pyx_kp_s_strided_and_direct_or_indirect); if (unlikely(!__pyx_tuple__93)) __PYX_ERR(0, 309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__93);
  __Pyx_GIVEREF(__pyx_tuple__93);

  /* "View.MemoryView":310
 * 
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default             # <<<<<<<<<<<<<<
 * cdef indirect = Enum("<strided and indirect>")
 * 
 */
  __pyx_tuple__94 = PyTuple_Pack(1, __pyx_kp_s_strided_and_direct); if (unlikely(!__pyx_tuple__94)) __PYX_ERR(0, 310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__94);
  __Pyx_GIVEREF(__pyx_tuple__94);

  /* "View.MemoryView":311
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__95 = PyTuple_Pack(1, __pyx_kp_s_strided_and_indirect); if (unlikely(!__pyx_tuple__95)) __PYX_ERR(0, 311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__95);
  __Pyx_GIVEREF(__pyx_tuple__95);

  /* "View.MemoryView":314
 * 
 * 
 * cdef contiguous = Enum("<contiguous and direct>")             # <<<<<<<<<<<<<<
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")
 * 
 */
  __pyx_tuple__96 = PyTuple_Pack(1, __pyx_kp_s_contiguous_and_direct); if (unlikely(!__pyx_tuple__96)) __PYX_ERR(0, 314, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__96);
  __Pyx_GIVEREF(__pyx_tuple__96);

  /* "View.MemoryView":315
 * 
 * cdef contiguous = Enum("<contiguous and direct>")
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__97 = PyTuple_Pack(1, __pyx_kp_s_contiguous_and_indirect); if (unlikely(!__pyx_tuple__97)) __PYX_ERR(0, 315, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__97);
  __Pyx_GIVEREF(__pyx_tuple__97);

  /* "(tree fragment)":1
 * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_tuple__98 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__98)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__98);
  __Pyx_GIVEREF(__pyx_tuple__98);
  __pyx_codeobj__99 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__98, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_Enum, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__99)) __PYX_ERR(0, 1, __pyx_L1_error)

  /* "miololib.pyx":38
 *     cdef mld.diagonal[double]* diagonalDouble
 * 
 *     def isMatrix(self):             # <<<<<<<<<<<<<<
 *         """
 *             Returns true if object is a miolo.Matrix.
 */
  __pyx_tuple__100 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__100)) __PYX_ERR(1, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__100);
  __Pyx_GIVEREF(__pyx_tuple__100);
  __pyx_codeobj__101 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__100, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_isMatrix, 38, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__101)) __PYX_ERR(1, 38, __pyx_L1_error)

  /* "miololib.pyx":50
 *         return False
 * 
 *     def isGraph(self):             # <<<<<<<<<<<<<<
 *         """
 *             Returns true if object is miolo.Graph.
 */
  __pyx_codeobj__102 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__100, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_isGraph, 50, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__102)) __PYX_ERR(1, 50, __pyx_L1_error)

  /* "miololib.pyx":62
 *         return False
 * 
 *     def isDigraph(self):             # <<<<<<<<<<<<<<
 *         """
 *             Returns true if object is miolo.Digraph
 */
  __pyx_codeobj__103 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__100, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_isDigraph, 62, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__103)) __PYX_ERR(1, 62, __pyx_L1_error)

  /* "miololib.pyx":74
 *         return False
 * 
 *     def isDiagonal(self):             # <<<<<<<<<<<<<<
 *         """
 *             Returns true if object is miolo.Diagonal
 */
  __pyx_codeobj__104 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__100, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_isDiagonal, 74, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__104)) __PYX_ERR(1, 74, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.diagonalDouble,self.diagonalFloat,self.diagonalInt,self.digraphDouble,self.digraphFloat,self.digraphInt,self.graphDouble,self.graphFloat,self.graphInt,self.mtxDouble,self.mtxFloat,self.mtxInt cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__105 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__100, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__105)) __PYX_ERR(0, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.diagonalDouble,self.diagonalFloat,self.diagonalInt,self.digraphDouble,self.digraphFloat,self.digraphInt,self.graphDouble,self.graphFloat,self.graphInt,self.mtxDouble,self.mtxFloat,self.mtxInt cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.diagonalDouble,self.diagonalFloat,self.diagonalInt,self.digraphDouble,self.digraphFloat,self.digraphInt,self.graphDouble,self.graphFloat,self.graphInt,self.mtxDouble,self.mtxFloat,self.mtxInt cannot be converted to a Python object for pickling"
 */
  __pyx_tuple__106 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_pyx_state); if (unlikely(!__pyx_tuple__106)) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__106);
  __Pyx_GIVEREF(__pyx_tuple__106);
  __pyx_codeobj__107 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__106, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__107)) __PYX_ERR(0, 3, __pyx_L1_error)

  /* "miololib.pyx":257
 *             self.mtxDouble.data[k] = value
 * 
 *     def copy(self, Matrix M, unsigned long[:] only=None):             # <<<<<<<<<<<<<<
 *         """
 *             Copies M into self if both have same shape.
 */
  __pyx_tuple__108 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_M, __pyx_n_s_only, __pyx_n_s_n); if (unlikely(!__pyx_tuple__108)) __PYX_ERR(1, 257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__108);
  __Pyx_GIVEREF(__pyx_tuple__108);
  __pyx_codeobj__109 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__108, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_copy, 257, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__109)) __PYX_ERR(1, 257, __pyx_L1_error)

  /* "miololib.pyx":285
 *                 self.mtxDouble.copy(drf(M.mtxDouble),&only[0],n)
 * 
 *     def print(self):             # <<<<<<<<<<<<<<
 *         if self.ctype=="int":
 *             self.mtxInt.print()
 */
  __pyx_codeobj__110 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__100, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_print, 285, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__110)) __PYX_ERR(1, 285, __pyx_L1_error)

  /* "miololib.pyx":293
 *             self.mtxDouble.print()
 * 
 *     def cut(self, rowMin, rowMax, colMin,colMax):             # <<<<<<<<<<<<<<
 *         """
 *             Cuts the window [rowMin,rowMax) x [colMin,colMax) from self and
 */
  __pyx_tuple__111 = PyTuple_Pack(6, __pyx_n_s_self, __pyx_n_s_rowMin, __pyx_n_s_rowMax, __pyx_n_s_colMin, __pyx_n_s_colMax, __pyx_n_s_out); if (unlikely(!__pyx_tuple__111)) __PYX_ERR(1, 293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__111);
  __Pyx_GIVEREF(__pyx_tuple__111);
  __pyx_codeobj__112 = (PyObject*)__Pyx_PyCode_New(5, 0, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__111, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_cut, 293, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__112)) __PYX_ERR(1, 293, __pyx_L1_error)

  /* "miololib.pyx":315
 *     #---------------------------------------------------------------------------
 * 
 *     def max(self):             # <<<<<<<<<<<<<<
 *         """
 *             Returns max value in matrix.
 */
  __pyx_codeobj__113 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__100, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_max, 315, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__113)) __PYX_ERR(1, 315, __pyx_L1_error)

  /* "miololib.pyx":326
 *             return self.mtxDouble.max()
 * 
 *     def min(self):             # <<<<<<<<<<<<<<
 *         """
 *             Returns min value in matrix.
 */
  __pyx_codeobj__114 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__100, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_min, 326, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__114)) __PYX_ERR(1, 326, __pyx_L1_error)

  /* "miololib.pyx":337
 *             return self.mtxDouble.min()
 * 
 *     def argkmax(self, k=1):             # <<<<<<<<<<<<<<
 *         """
 *             Returns index of k largest values in each row.
 */
  __pyx_tuple__115 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_k, __pyx_n_s_out); if (unlikely(!__pyx_tuple__115)) __PYX_ERR(1, 337, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__115);
  __Pyx_GIVEREF(__pyx_tuple__115);
  __pyx_codeobj__116 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__115, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_argkmax, 337, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__116)) __PYX_ERR(1, 337, __pyx_L1_error)
  __pyx_tuple__117 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__117)) __PYX_ERR(1, 337, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__117);
  __Pyx_GIVEREF(__pyx_tuple__117);

  /* "miololib.pyx":350
 *         return out
 * 
 *     def argkmin(self, k=1):             # <<<<<<<<<<<<<<
 *         """
 *             Returns index of k smallest values in each row.
 */
  __pyx_codeobj__118 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__115, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_argkmin, 350, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__118)) __PYX_ERR(1, 350, __pyx_L1_error)

  /* "miololib.pyx":363
 *         return out
 * 
 *     def normalize(self):             # <<<<<<<<<<<<<<
 *         """
 *             Row normalization in to make elements in the same row sum to 1.
 */
  __pyx_codeobj__119 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__100, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_normalize, 363, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__119)) __PYX_ERR(1, 363, __pyx_L1_error)

  /* "miololib.pyx":375
 *             self.mtxDouble.normalize()
 * 
 *     def transpose(self):             # <<<<<<<<<<<<<<
 *         """
 *             Returns the transpose of a Matrix.
 */
  __pyx_tuple__120 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_out); if (unlikely(!__pyx_tuple__120)) __PYX_ERR(1, 375, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__120);
  __Pyx_GIVEREF(__pyx_tuple__120);
  __pyx_codeobj__121 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__120, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_transpose, 375, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__121)) __PYX_ERR(1, 375, __pyx_L1_error)

  /* "miololib.pyx":389
 * 
 * 
 *     def flatten(self, bool rows=True):             # <<<<<<<<<<<<<<
 *         """
 *             Inplace flattening of a Matrix.
 */
  __pyx_tuple__122 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_rows); if (unlikely(!__pyx_tuple__122)) __PYX_ERR(1, 389, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__122);
  __Pyx_GIVEREF(__pyx_tuple__122);
  __pyx_codeobj__123 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__122, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_flatten, 389, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__123)) __PYX_ERR(1, 389, __pyx_L1_error)
  __pyx_tuple__124 = PyTuple_Pack(1, Py_True); if (unlikely(!__pyx_tuple__124)) __PYX_ERR(1, 389, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__124);
  __Pyx_GIVEREF(__pyx_tuple__124);

  /* "miololib.pyx":404
 *             self.mtxDouble.flatten(rows)
 * 
 *     def reshape(self, unsigned long rows, unsigned long cols):             # <<<<<<<<<<<<<<
 *         """
 *             Inplace reshape of a Matrix. Can be done only if rows*cols is equal
 */
  __pyx_tuple__125 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_rows, __pyx_n_s_cols); if (unlikely(!__pyx_tuple__125)) __PYX_ERR(1, 404, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__125);
  __Pyx_GIVEREF(__pyx_tuple__125);
  __pyx_codeobj__126 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__125, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_reshape, 404, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__126)) __PYX_ERR(1, 404, __pyx_L1_error)

  /* "miololib.pyx":420
 *             self.mtxDouble.reshape(rows,cols)
 * 
 *     def sparsifyThreshold(self, Threshold, output="Graph"):             # <<<<<<<<<<<<<<
 *         """
 *             If self is a square matrix, returns a Graph with only the entries
 */
  __pyx_tuple__127 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_Threshold, __pyx_n_s_output, __pyx_n_s_out); if (unlikely(!__pyx_tuple__127)) __PYX_ERR(1, 420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__127);
  __Pyx_GIVEREF(__pyx_tuple__127);
  __pyx_codeobj__128 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__127, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_sparsifyThreshold, 420, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__128)) __PYX_ERR(1, 420, __pyx_L1_error)
  __pyx_tuple__129 = PyTuple_Pack(1, __pyx_n_s_Graph); if (unlikely(!__pyx_tuple__129)) __PYX_ERR(1, 420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__129);
  __Pyx_GIVEREF(__pyx_tuple__129);

  /* "miololib.pyx":451
 *             return out
 * 
 *     def sparsifyKNN(self, k, output="Digraph"):             # <<<<<<<<<<<<<<
 *         if self.rows!=self.cols:
 *             raise Exception("Only square matrices can be sparsified.")
 */
  __pyx_tuple__130 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_k, __pyx_n_s_output, __pyx_n_s_out); if (unlikely(!__pyx_tuple__130)) __PYX_ERR(1, 451, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__130);
  __Pyx_GIVEREF(__pyx_tuple__130);
  __pyx_codeobj__131 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__130, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_sparsifyKNN, 451, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__131)) __PYX_ERR(1, 451, __pyx_L1_error)
  __pyx_tuple__132 = PyTuple_Pack(1, __pyx_n_s_Digraph); if (unlikely(!__pyx_tuple__132)) __PYX_ERR(1, 451, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__132);
  __Pyx_GIVEREF(__pyx_tuple__132);

  /* "miololib.pyx":579
 *     #---------------------------------------------------------------------------
 * 
 *     def argmax(self):             # <<<<<<<<<<<<<<
 *         """
 *             Returns the argmax of each row.
 */
  __pyx_codeobj__133 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__120, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_argmax, 579, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__133)) __PYX_ERR(1, 579, __pyx_L1_error)

  /* "miololib.pyx":592
 *         return out
 * 
 *     def argmin(self):             # <<<<<<<<<<<<<<
 *         """
 *             Returns the argmin of each row.
 */
  __pyx_codeobj__134 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__120, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_argmin, 592, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__134)) __PYX_ERR(1, 592, __pyx_L1_error)

  /* "miololib.pyx":605
 *         return out
 * 
 *     def rowDistance(self):             # <<<<<<<<<<<<<<
 *         """
 *             Returns the self.rows x self.rows Matrix for which each entry (i,j)
 */
  __pyx_codeobj__135 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__120, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_rowDistance, 605, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__135)) __PYX_ERR(1, 605, __pyx_L1_error)

  /* "miololib.pyx":619
 *         return out
 * 
 *     def sumAll(self):             # <<<<<<<<<<<<<<
 *         """
 *             Returns the sum of all elements in a Matrix.
 */
  __pyx_codeobj__136 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__100, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_sumAll, 619, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__136)) __PYX_ERR(1, 619, __pyx_L1_error)

  /* "miololib.pyx":630
 *             return self.mtxDouble.sumAll()
 * 
 *     def partition(self, int[:] labels, int targetLabel):             # <<<<<<<<<<<<<<
 *         """
 *             Returns the rows of self with label equal to target. Useful for
 */
  __pyx_tuple__137 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_labels, __pyx_n_s_targetLabel, __pyx_n_s_out); if (unlikely(!__pyx_tuple__137)) __PYX_ERR(1, 630, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__137);
  __Pyx_GIVEREF(__pyx_tuple__137);
  __pyx_codeobj__138 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__137, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_partition, 630, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__138)) __PYX_ERR(1, 630, __pyx_L1_error)

  /* "miololib.pyx":649
 *         return out
 * 
 *     def trace(self):             # <<<<<<<<<<<<<<
 *         """
 *             Sum of the elements with row index equal to column index. This is
 */
  __pyx_codeobj__139 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__100, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_trace, 649, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__139)) __PYX_ERR(1, 649, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__140 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__100, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__140)) __PYX_ERR(0, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__141 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__106, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__141)) __PYX_ERR(0, 3, __pyx_L1_error)

  /* "miololib.pyx":661
 *             return self.mtxDouble.trace()
 * 
 * def dot(Matrix A, Matrix B):             # <<<<<<<<<<<<<<
 *     """
 *         Frobenius dot product between two matrices.
 */
  __pyx_tuple__142 = PyTuple_Pack(2, __pyx_n_s_A, __pyx_n_s_B); if (unlikely(!__pyx_tuple__142)) __PYX_ERR(1, 661, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__142);
  __Pyx_GIVEREF(__pyx_tuple__142);
  __pyx_codeobj__143 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__142, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_dot, 661, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__143)) __PYX_ERR(1, 661, __pyx_L1_error)

  /* "miololib.pyx":674
 *         return A.mtxDouble.dot(B.mtxDouble)
 * 
 * def concat(Matrix A, Matrix B):             # <<<<<<<<<<<<<<
 *     """
 *         Concatenates A and B if both have same number of columns and share same
 */
  __pyx_tuple__144 = PyTuple_Pack(3, __pyx_n_s_A, __pyx_n_s_B, __pyx_n_s_out); if (unlikely(!__pyx_tuple__144)) __PYX_ERR(1, 674, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__144);
  __Pyx_GIVEREF(__pyx_tuple__144);
  __pyx_codeobj__145 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__144, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_concat, 674, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__145)) __PYX_ERR(1, 674, __pyx_L1_error)

  /* "miololib.pyx":869
 *             return (self.graphDouble.e[k].i,self.graphDouble.e[k].j,self.graphDouble.e[k].w)
 * 
 *     def isolatedNodes(self):             # <<<<<<<<<<<<<<
 *         if self.ctype=="int":
 *             return self.graphInt.isolatedNodes()
 */
  __pyx_codeobj__146 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__100, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_isolatedNodes, 869, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__146)) __PYX_ERR(1, 869, __pyx_L1_error)

  /* "miololib.pyx":877
 *             return self.graphDouble.isolatedNodes()
 * 
 *     def print(self):             # <<<<<<<<<<<<<<
 *         if self.ctype=="int":
 *             return self.graphInt.print()
 */
  __pyx_codeobj__147 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__100, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_print, 877, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__147)) __PYX_ERR(1, 877, __pyx_L1_error)

  /* "miololib.pyx":889
 *     #---------------------------------------------------------------------------
 * 
 *     def propagate(self, Matrix M, bool[:] clamped=None):             # <<<<<<<<<<<<<<
 *         """
 *             When clamped is None, returns the matrix product of self and M.
 */
  __pyx_tuple__148 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_M, __pyx_n_s_clamped, __pyx_n_s_out); if (unlikely(!__pyx_tuple__148)) __PYX_ERR(1, 889, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__148);
  __Pyx_GIVEREF(__pyx_tuple__148);
  __pyx_codeobj__149 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__148, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_propagate, 889, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__149)) __PYX_ERR(1, 889, __pyx_L1_error)

  /* "miololib.pyx":1005
 *     #---------------------------------------------------------------------------
 * 
 *     def normalize(self):             # <<<<<<<<<<<<<<
 *         """
 *             Symmetric normalization of edge weights.
 */
  __pyx_codeobj__150 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__100, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_normalize, 1005, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__150)) __PYX_ERR(1, 1005, __pyx_L1_error)

  /* "miololib.pyx":1016
 *             self.graphDouble.normalize()
 * 
 *     def degree(self):             # <<<<<<<<<<<<<<
 *         """
 *             Returns a column Matrix where each entry is the degree of the
 */
  __pyx_codeobj__151 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__120, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_degree, 1016, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__151)) __PYX_ERR(1, 1016, __pyx_L1_error)

  /* "miololib.pyx":1030
 *         return out
 * 
 *     def laplacian(self):             # <<<<<<<<<<<<<<
 *         """
 *             Returns the graph corresponding to the normalized laplacian of
 */
  __pyx_codeobj__152 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__120, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_laplacian, 1030, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__152)) __PYX_ERR(1, 1030, __pyx_L1_error)

  /* "miololib.pyx":1044
 *         return out
 * 
 *     def toMatrix(self):             # <<<<<<<<<<<<<<
 *         """
 *             Returns a Matrix corresponding to the dense representation of self.
 */
  __pyx_codeobj__153 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__120, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_toMatrix, 1044, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__153)) __PYX_ERR(1, 1044, __pyx_L1_error)

  /* "miololib.pyx":1057
 *         return out
 * 
 *     def toDigraph(self):             # <<<<<<<<<<<<<<
 *         """
 *             Returns a Digraph representation of self.
 */
  __pyx_codeobj__154 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__120, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_toDigraph, 1057, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__154)) __PYX_ERR(1, 1057, __pyx_L1_error)

  /* "miololib.pyx":1070
 *         return out
 * 
 *     def max(self):             # <<<<<<<<<<<<<<
 *         if self.ctype=="int":
 *             return self.graphInt.max()
 */
  __pyx_codeobj__155 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__100, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_max, 1070, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__155)) __PYX_ERR(1, 1070, __pyx_L1_error)

  /* "miololib.pyx":1078
 *             return self.graphDouble.max()
 * 
 *     def min(self):             # <<<<<<<<<<<<<<
 *         if self.ctype=="int":
 *             return self.graphInt.min()
 */
  __pyx_codeobj__156 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__100, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_min, 1078, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__156)) __PYX_ERR(1, 1078, __pyx_L1_error)

  /* "miololib.pyx":1090
 *     #---------------------------------------------------------------------------
 * 
 *     def gaussianScale(self):             # <<<<<<<<<<<<<<
 *         """
 *             Returns a Graph corresponding to the gaussian similarity of self.
 */
  __pyx_codeobj__157 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__120, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_gaussianScale, 1090, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__157)) __PYX_ERR(1, 1090, __pyx_L1_error)

  /* "miololib.pyx":1109
 *     #---------------------------------------------------------------------------
 * 
 *     def toDigraph(self):             # <<<<<<<<<<<<<<
 *         out = Digraph(ctype=self.ctype)
 *         if out.ctype=="int":
 */
  __pyx_codeobj__158 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__120, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_toDigraph, 1109, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__158)) __PYX_ERR(1, 1109, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__159 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__100, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__159)) __PYX_ERR(0, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__160 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__106, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__160)) __PYX_ERR(0, 3, __pyx_L1_error)

  /* "miololib.pyx":1123
 * #---------------------------------------------------------------------------
 * 
 * def hadamard(Graph G, Graph H):             # <<<<<<<<<<<<<<
 *     """
 *         Hadamard (element-wise) product between weights in Graphs. Both graphs
 */
  __pyx_tuple__161 = PyTuple_Pack(3, __pyx_n_s_G, __pyx_n_s_H, __pyx_n_s_out); if (unlikely(!__pyx_tuple__161)) __PYX_ERR(1, 1123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__161);
  __Pyx_GIVEREF(__pyx_tuple__161);
  __pyx_codeobj__162 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__161, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_hadamard, 1123, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__162)) __PYX_ERR(1, 1123, __pyx_L1_error)

  /* "miololib.pyx":1142
 *     return out
 * 
 * def MST(mioloObject O, symmetrize=True):             # <<<<<<<<<<<<<<
 *     """
 *         Returns a minimum spanning tree using Kruskal's Algorithm.
 */
  __pyx_tuple__163 = PyTuple_Pack(3, __pyx_n_s_O, __pyx_n_s_symmetrize, __pyx_n_s_out); if (unlikely(!__pyx_tuple__163)) __PYX_ERR(1, 1142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__163);
  __Pyx_GIVEREF(__pyx_tuple__163);
  __pyx_codeobj__164 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__163, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_MST, 1142, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__164)) __PYX_ERR(1, 1142, __pyx_L1_error)

  /* "miololib.pyx":1242
 *             return self.digraphDouble.null()
 * 
 *     def connect(self, i, j, value=0):             # <<<<<<<<<<<<<<
 *         """
 *             Create connection from i to j weighted by value.
 */
  __pyx_tuple__165 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_i, __pyx_n_s_j, __pyx_n_s_value); if (unlikely(!__pyx_tuple__165)) __PYX_ERR(1, 1242, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__165);
  __Pyx_GIVEREF(__pyx_tuple__165);
  __pyx_codeobj__166 = (PyObject*)__Pyx_PyCode_New(4, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__165, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_connect, 1242, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__166)) __PYX_ERR(1, 1242, __pyx_L1_error)
  __pyx_tuple__167 = PyTuple_Pack(1, __pyx_int_0); if (unlikely(!__pyx_tuple__167)) __PYX_ERR(1, 1242, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__167);
  __Pyx_GIVEREF(__pyx_tuple__167);

  /* "miololib.pyx":1257
 *             self.digraphDouble.connect(i,j,value)
 * 
 *     def connectRegular(self, Matrix Neighbors, Matrix Weights):             # <<<<<<<<<<<<<<
 *         """
 *             Connects arcs in self using Neighbors as topology and Weights as
 */
  __pyx_tuple__168 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_Neighbors, __pyx_n_s_Weights); if (unlikely(!__pyx_tuple__168)) __PYX_ERR(1, 1257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__168);
  __Pyx_GIVEREF(__pyx_tuple__168);
  __pyx_codeobj__169 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__168, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_connectRegular, 1257, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__169)) __PYX_ERR(1, 1257, __pyx_L1_error)

  /* "miololib.pyx":1279
 *             self.digraphDouble.connectRegular(drf(Neighbors.mtxInt),drf(Weights.mtxDouble))
 * 
 *     def normalize(self):             # <<<<<<<<<<<<<<
 *         """
 *             Normalize weights of each node in order to sum to 1.
 */
  __pyx_codeobj__170 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__100, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_normalize, 1279, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__170)) __PYX_ERR(1, 1279, __pyx_L1_error)

  /* "miololib.pyx":1290
 *             self.digraphDouble.normalize()
 * 
 *     def copy(self, mode="whole"):             # <<<<<<<<<<<<<<
 *         """
 *             Returns a copy of self.
 */
  __pyx_tuple__171 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_mode, __pyx_n_s_out); if (unlikely(!__pyx_tuple__171)) __PYX_ERR(1, 1290, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__171);
  __Pyx_GIVEREF(__pyx_tuple__171);
  __pyx_codeobj__172 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__171, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_copy, 1290, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__172)) __PYX_ERR(1, 1290, __pyx_L1_error)
  __pyx_tuple__173 = PyTuple_Pack(1, __pyx_n_s_whole); if (unlikely(!__pyx_tuple__173)) __PYX_ERR(1, 1290, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__173);
  __Pyx_GIVEREF(__pyx_tuple__173);

  /* "miololib.pyx":1314
 *         return out
 * 
 *     def shape(self):             # <<<<<<<<<<<<<<
 *         """
 *             Returns the number of nonzero elements of each row in the adjacency
 */
  __pyx_tuple__174 = PyTuple_Pack(6, __pyx_n_s_self, __pyx_n_s_view, __pyx_n_s_aux, __pyx_n_s_k, __pyx_n_s_n, __pyx_n_s_out); if (unlikely(!__pyx_tuple__174)) __PYX_ERR(1, 1314, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__174);
  __Pyx_GIVEREF(__pyx_tuple__174);
  __pyx_codeobj__175 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__174, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_shape, 1314, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__175)) __PYX_ERR(1, 1314, __pyx_L1_error)

  /* "miololib.pyx":1337
 *         return out
 * 
 *     def transpose(self):             # <<<<<<<<<<<<<<
 *         """
 *             Matrix transposition of Digraphs.
 */
  __pyx_codeobj__176 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__120, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_transpose, 1337, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__176)) __PYX_ERR(1, 1337, __pyx_L1_error)

  /* "miololib.pyx":1350
 *         return out
 * 
 *     def sameShape(self, Digraph G):             # <<<<<<<<<<<<<<
 *         """
 *             Checks if both Digraphs have the same shapes.
 */
  __pyx_tuple__177 = PyTuple_Pack(6, __pyx_n_s_self, __pyx_n_s_G, __pyx_n_s_k, __pyx_n_s_n, __pyx_n_s_ashape, __pyx_n_s_gshape); if (unlikely(!__pyx_tuple__177)) __PYX_ERR(1, 1350, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__177);
  __Pyx_GIVEREF(__pyx_tuple__177);
  __pyx_codeobj__178 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__177, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_sameShape, 1350, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__178)) __PYX_ERR(1, 1350, __pyx_L1_error)

  /* "miololib.pyx":1365
 *         return True
 * 
 *     def symmetrize(self):             # <<<<<<<<<<<<<<
 *         """
 *             Returns a Digraph with the symmetrization of self.
 */
  __pyx_codeobj__179 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__120, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_symmetrize, 1365, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__179)) __PYX_ERR(1, 1365, __pyx_L1_error)

  /* "miololib.pyx":1378
 *         return out
 * 
 *     def gaussianScale(self):             # <<<<<<<<<<<<<<
 *         """
 *             Returns the scale parameter for gaussian similarity.
 */
  __pyx_codeobj__180 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__100, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_gaussianScale, 1378, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__180)) __PYX_ERR(1, 1378, __pyx_L1_error)

  /* "miololib.pyx":1468
 *     #---------------------------------------------------------------------------
 * 
 *     def toGraph(self, symmetrize=True):             # <<<<<<<<<<<<<<
 *         if symmetrize:
 *             self = self.symmetrize()
 */
  __pyx_tuple__181 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_symmetrize, __pyx_n_s_out); if (unlikely(!__pyx_tuple__181)) __PYX_ERR(1, 1468, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__181);
  __Pyx_GIVEREF(__pyx_tuple__181);
  __pyx_codeobj__182 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__181, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_toGraph, 1468, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__182)) __PYX_ERR(1, 1468, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__183 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__100, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__183)) __PYX_ERR(0, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__184 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__106, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__184)) __PYX_ERR(0, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__185 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__100, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__185)) __PYX_ERR(0, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__186 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__106, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__186)) __PYX_ERR(0, 3, __pyx_L1_error)

  /* "miololib.pyx":1718
 * #-------------------------------------------------------------------------------
 * 
 * def txtMatrix(filename,ctype=global_ctype):             # <<<<<<<<<<<<<<
 *     """
 *         Loads Matrix from txt file. Uses numpy.
 */
  __pyx_tuple__187 = PyTuple_Pack(4, __pyx_n_s_filename, __pyx_n_s_ctype, __pyx_n_s_m, __pyx_n_s_out); if (unlikely(!__pyx_tuple__187)) __PYX_ERR(1, 1718, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__187);
  __Pyx_GIVEREF(__pyx_tuple__187);
  __pyx_codeobj__188 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__187, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_txtMatrix, 1718, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__188)) __PYX_ERR(1, 1718, __pyx_L1_error)

  /* "miololib.pyx":1727
 *     return out
 * 
 * def txtGraph(filename,ctype=global_ctype):             # <<<<<<<<<<<<<<
 *     """
 *         Loads Graph from txt file. Uses numpy.
 */
  __pyx_tuple__189 = PyTuple_Pack(8, __pyx_n_s_filename, __pyx_n_s_ctype, __pyx_n_s_g, __pyx_n_s_max_0, __pyx_n_s_max_1, __pyx_n_s_N, __pyx_n_s_E, __pyx_n_s_out); if (unlikely(!__pyx_tuple__189)) __PYX_ERR(1, 1727, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__189);
  __Pyx_GIVEREF(__pyx_tuple__189);
  __pyx_codeobj__190 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 8, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__189, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_txtGraph, 1727, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__190)) __PYX_ERR(1, 1727, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_tuple__191 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_state, __pyx_n_s_dict_2, __pyx_n_s_use_setstate); if (unlikely(!__pyx_tuple__191)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__191);
  __Pyx_GIVEREF(__pyx_tuple__191);
  __pyx_codeobj__192 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__191, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__192)) __PYX_ERR(0, 1, __pyx_L1_error)

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Manifold, (type(self), 0xe3b0c44, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Manifold__set_state(self, __pyx_state)
 */
  __pyx_codeobj__193 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__106, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 16, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__193)) __PYX_ERR(0, 16, __pyx_L1_error)

  /* "miololib.pyx":1759
 *         pass
 * 
 *     def dot(self, Matrix A):             # <<<<<<<<<<<<<<
 *         """
 *             Dot product between rows of A. This is different from miolo.dot,
 */
  __pyx_tuple__194 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_A, __pyx_n_s_out); if (unlikely(!__pyx_tuple__194)) __PYX_ERR(1, 1759, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__194);
  __Pyx_GIVEREF(__pyx_tuple__194);
  __pyx_codeobj__195 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__194, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_dot, 1759, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__195)) __PYX_ERR(1, 1759, __pyx_L1_error)

  /* "miololib.pyx":1773
 *         return out
 * 
 *     def distance(self, Matrix A):             # <<<<<<<<<<<<<<
 *         """
 *             Euclidean distance between rows of A.
 */
  __pyx_codeobj__196 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__194, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_distance, 1773, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__196)) __PYX_ERR(1, 1773, __pyx_L1_error)

  /* "miololib.pyx":1786
 *         return out
 * 
 *     def mean(self, Matrix A):             # <<<<<<<<<<<<<<
 *         """
 *             Returns a row Matrix which is the mean of the rows of A.
 */
  __pyx_codeobj__197 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__194, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_mean, 1786, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__197)) __PYX_ERR(1, 1786, __pyx_L1_error)

  /* "miololib.pyx":1799
 *         return out
 * 
 *     def variance(self, Matrix A):             # <<<<<<<<<<<<<<
 *         """
 *             Returns a row Matrix which is the variance of the rows of A.
 */
  __pyx_codeobj__198 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__194, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_variance, 1799, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__198)) __PYX_ERR(1, 1799, __pyx_L1_error)

  /* "miololib.pyx":1812
 *         return out
 * 
 *     def minmaxNormalize(self, Matrix A):             # <<<<<<<<<<<<<<
 *         """
 *             For each column, calculates min and max values, and then returns
 */
  __pyx_codeobj__199 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__194, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_minmaxNormalize, 1812, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__199)) __PYX_ERR(1, 1812, __pyx_L1_error)

  /* "miololib.pyx":1826
 *         return out
 * 
 *     def rowNormalize(self, Matrix A):             # <<<<<<<<<<<<<<
 *         """
 *             Returns A with rows normalized to sum 1.
 */
  __pyx_codeobj__200 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__194, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_rowNormalize, 1826, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__200)) __PYX_ERR(1, 1826, __pyx_L1_error)

  /* "miololib.pyx":1839
 *         return out
 * 
 *     def gaussianNormalize(self, Matrix A):             # <<<<<<<<<<<<<<
 *         """
 *             Returns A normalized to have columns with mean 0 and variance 1.
 */
  __pyx_codeobj__201 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__194, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_gaussianNormalize, 1839, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__201)) __PYX_ERR(1, 1839, __pyx_L1_error)

  /* "miololib.pyx":1852
 *         return out
 * 
 *     def centroidDistance(self, Matrix M, Matrix center):             # <<<<<<<<<<<<<<
 *         """
 *             Returns the distance of rows in M to rows in center.
 */
  __pyx_tuple__202 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_M, __pyx_n_s_center, __pyx_n_s_out); if (unlikely(!__pyx_tuple__202)) __PYX_ERR(1, 1852, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__202);
  __Pyx_GIVEREF(__pyx_tuple__202);
  __pyx_codeobj__203 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__202, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_centroidDistance, 1852, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__203)) __PYX_ERR(1, 1852, __pyx_L1_error)

  /* "miololib.pyx":1870
 *         return out
 * 
 *     def kmpp(self, Matrix M, int k):             # <<<<<<<<<<<<<<
 *         """
 *             K-means++ algorithm for seeding.
 */
  __pyx_tuple__204 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_M, __pyx_n_s_k, __pyx_n_s_out); if (unlikely(!__pyx_tuple__204)) __PYX_ERR(1, 1870, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__204);
  __Pyx_GIVEREF(__pyx_tuple__204);
  __pyx_codeobj__205 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__204, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_kmpp, 1870, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__205)) __PYX_ERR(1, 1870, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__206 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__100, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__206)) __PYX_ERR(0, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */
  __pyx_codeobj__207 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__106, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__207)) __PYX_ERR(0, 3, __pyx_L1_error)

  /* "miololib.pyx":1905
 *         self.view.r = r
 * 
 *     def stereographicProjection(self, Matrix M):             # <<<<<<<<<<<<<<
 *         """
 *             Returns the matrix for which each row is the stereographic
 */
  __pyx_tuple__208 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_M, __pyx_n_s_out); if (unlikely(!__pyx_tuple__208)) __PYX_ERR(1, 1905, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__208);
  __Pyx_GIVEREF(__pyx_tuple__208);
  __pyx_codeobj__209 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__208, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_stereographicProjection, 1905, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__209)) __PYX_ERR(1, 1905, __pyx_L1_error)

  /* "miololib.pyx":1919
 *         return out
 * 
 *     def fromEuclidean(self, Matrix M):             # <<<<<<<<<<<<<<
 *         """
 *             Returns the Matrix for which each row r has M.cols+1 columns and is
 */
  __pyx_codeobj__210 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__208, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_fromEuclidean, 1919, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__210)) __PYX_ERR(1, 1919, __pyx_L1_error)

  /* "miololib.pyx":1934
 *         return out
 * 
 *     def toEuclidean(self, Matrix M):             # <<<<<<<<<<<<<<
 *         """
 *             Returns the Matrix for which each row r has M.cols-1 columns and is
 */
  __pyx_codeobj__211 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__208, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_toEuclidean, 1934, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__211)) __PYX_ERR(1, 1934, __pyx_L1_error)

  /* "miololib.pyx":1949
 *         return out
 * 
 *     def coordinateReady(self, Matrix M, unsigned long azimuth=0):             # <<<<<<<<<<<<<<
 *         """
 *             Transforms M in order to make its rows suitable spherical coordinates.
 */
  __pyx_tuple__212 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_M, __pyx_n_s_azimuth, __pyx_n_s_out); if (unlikely(!__pyx_tuple__212)) __PYX_ERR(1, 1949, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__212);
  __Pyx_GIVEREF(__pyx_tuple__212);
  __pyx_codeobj__213 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__212, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_coordinateReady, 1949, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__213)) __PYX_ERR(1, 1949, __pyx_L1_error)

  /* "miololib.pyx":1966
 *         return out
 * 
 *     def distance(self, Matrix M):             # <<<<<<<<<<<<<<
 *         """
 *             Return a square Matrix for which each entry is the geodesic distance
 */
  __pyx_codeobj__214 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__208, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_distance, 1966, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__214)) __PYX_ERR(1, 1966, __pyx_L1_error)

  /* "miololib.pyx":1980
 *         return out
 * 
 *     def isIn(self, Matrix M, double tolerance=0.001):             # <<<<<<<<<<<<<<
 *         """
 *             Checks if each row of M is on the sphere.
 */
  __pyx_tuple__215 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_M, __pyx_n_s_tolerance); if (unlikely(!__pyx_tuple__215)) __PYX_ERR(1, 1980, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__215);
  __Pyx_GIVEREF(__pyx_tuple__215);
  __pyx_codeobj__216 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__215, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_isIn, 1980, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__216)) __PYX_ERR(1, 1980, __pyx_L1_error)
  __pyx_tuple__217 = PyTuple_Pack(1, __pyx_float_0_001); if (unlikely(!__pyx_tuple__217)) __PYX_ERR(1, 1980, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__217);
  __Pyx_GIVEREF(__pyx_tuple__217);

  /* "miololib.pyx":1992
 *             return self.view.isIn(drf(M.mtxDouble),tolerance)
 * 
 *     def isTangent(self, Matrix at, Matrix M, double tolerance=0.001):             # <<<<<<<<<<<<<<
 *         """
 *             Checks if each row of M is on the tangent space of the corresponding
 */
  __pyx_tuple__218 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_at, __pyx_n_s_M, __pyx_n_s_tolerance); if (unlikely(!__pyx_tuple__218)) __PYX_ERR(1, 1992, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__218);
  __Pyx_GIVEREF(__pyx_tuple__218);
  __pyx_codeobj__219 = (PyObject*)__Pyx_PyCode_New(4, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__218, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_isTangent, 1992, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__219)) __PYX_ERR(1, 1992, __pyx_L1_error)

  /* "miololib.pyx":2009
 *             return self.view.isTangent(drf(at.mtxDouble),drf(M.mtxDouble),tolerance)
 * 
 *     def exp(self, Matrix at, Matrix tangent):             # <<<<<<<<<<<<<<
 *         """
 *             Exponential map on the sphere.
 */
  __pyx_tuple__220 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_at, __pyx_n_s_tangent, __pyx_n_s_out); if (unlikely(!__pyx_tuple__220)) __PYX_ERR(1, 2009, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__220);
  __Pyx_GIVEREF(__pyx_tuple__220);
  __pyx_codeobj__221 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__220, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_exp, 2009, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__221)) __PYX_ERR(1, 2009, __pyx_L1_error)

  /* "miololib.pyx":2040
 *         return out
 * 
 *     def centroidDistance(self, Matrix M, Matrix center):             # <<<<<<<<<<<<<<
 *         """
 *             Returns the distance of each row in M to each row of center.
 */
  __pyx_codeobj__222 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__202, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_centroidDistance, 2040, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__222)) __PYX_ERR(1, 2040, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__223 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__100, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__223)) __PYX_ERR(0, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */
  __pyx_codeobj__224 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__106, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__224)) __PYX_ERR(0, 3, __pyx_L1_error)

  /* "miololib.pyx":2077
 *         self.view.c = curv
 * 
 *     def distance(self, Matrix M):             # <<<<<<<<<<<<<<
 *         """
 *             Return a square Matrix for which each entry is the geodesic distance
 */
  __pyx_codeobj__225 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__208, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_distance, 2077, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__225)) __PYX_ERR(1, 2077, __pyx_L1_error)

  /* "miololib.pyx":2091
 *         return out
 * 
 *     def isIn(self, Matrix M):             # <<<<<<<<<<<<<<
 *         """
 *             Check if rows of M belong to the M.cols-dimensional Poincare Disk.
 */
  __pyx_tuple__226 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_M); if (unlikely(!__pyx_tuple__226)) __PYX_ERR(1, 2091, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__226);
  __Pyx_GIVEREF(__pyx_tuple__226);
  __pyx_codeobj__227 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__226, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_isIn, 2091, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__227)) __PYX_ERR(1, 2091, __pyx_L1_error)

  /* "miololib.pyx":2102
 *             return self.view.isIn(drf(M.mtxDouble))
 * 
 *     def add(self, Matrix A, Matrix B):             # <<<<<<<<<<<<<<
 *         """
 *             Mobius addition.
 */
  __pyx_tuple__228 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_A, __pyx_n_s_B, __pyx_n_s_out); if (unlikely(!__pyx_tuple__228)) __PYX_ERR(1, 2102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__228);
  __Pyx_GIVEREF(__pyx_tuple__228);
  __pyx_codeobj__229 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__228, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_add, 2102, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__229)) __PYX_ERR(1, 2102, __pyx_L1_error)

  /* "miololib.pyx":2119
 *         return out
 * 
 *     def exp(self, Matrix at, Matrix M):             # <<<<<<<<<<<<<<
 *         """
 *             Mobius addition.
 */
  __pyx_tuple__230 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_at, __pyx_n_s_M, __pyx_n_s_out); if (unlikely(!__pyx_tuple__230)) __PYX_ERR(1, 2119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__230);
  __Pyx_GIVEREF(__pyx_tuple__230);
  __pyx_codeobj__231 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__230, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_exp, 2119, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__231)) __PYX_ERR(1, 2119, __pyx_L1_error)

  /* "miololib.pyx":2136
 *         return out
 * 
 *     def log(self, Matrix start, Matrix end):             # <<<<<<<<<<<<<<
 *         """
 *             Mobius addition.
 */
  __pyx_tuple__232 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_start, __pyx_n_s_end, __pyx_n_s_out); if (unlikely(!__pyx_tuple__232)) __PYX_ERR(1, 2136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__232);
  __Pyx_GIVEREF(__pyx_tuple__232);
  __pyx_codeobj__233 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__232, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_log, 2136, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__233)) __PYX_ERR(1, 2136, __pyx_L1_error)

  /* "miololib.pyx":2153
 *         return out
 * 
 *     def mean(self, Matrix M):             # <<<<<<<<<<<<<<
 *         """
 *             Returns the Einstein Midpoint of rows of M.
 */
  __pyx_codeobj__234 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__208, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_mean, 2153, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__234)) __PYX_ERR(1, 2153, __pyx_L1_error)

  /* "miololib.pyx":2166
 *         return out
 * 
 *     def centroidDistance(self, Matrix M, Matrix center):             # <<<<<<<<<<<<<<
 *         """
 *             Returns the distance of each row in M to each row of center.
 */
  __pyx_codeobj__235 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__202, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_centroidDistance, 2166, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__235)) __PYX_ERR(1, 2166, __pyx_L1_error)

  /* "miololib.pyx":2184
 *         return out
 * 
 *     def hyperbolicity(self, Matrix M):             # <<<<<<<<<<<<<<
 *         """
 *             Returns the Gromov hiperbolicity of the rows of M.
 */
  __pyx_codeobj__236 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__226, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_hyperbolicity, 2184, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__236)) __PYX_ERR(1, 2184, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__237 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__100, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__237)) __PYX_ERR(0, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */
  __pyx_codeobj__238 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__106, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__238)) __PYX_ERR(0, 3, __pyx_L1_error)

  /* "miololib.pyx":2214
 *         self.view.beta = b
 * 
 *     def isIn(self, Matrix M, tolerance):             # <<<<<<<<<<<<<<
 *         """
 *             Checks if rows of M belong to the manifold according to specified
 */
  __pyx_codeobj__239 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__215, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_isIn, 2214, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__239)) __PYX_ERR(1, 2214, __pyx_L1_error)

  /* "miololib.pyx":2226
 *             return self.view.isIn(drf(M.mtxDouble),tolerance)
 * 
 *     def dot(self, Matrix M):             # <<<<<<<<<<<<<<
 *         """
 *             Lorentz dot product between rows of M. Returns a square matrix.
 */
  __pyx_codeobj__240 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__208, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_dot, 2226, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__240)) __PYX_ERR(1, 2226, __pyx_L1_error)

  /* "miololib.pyx":2241
 *         return out
 * 
 *     def metricDistance(self, Matrix M):             # <<<<<<<<<<<<<<
 *         """
 *             Distance in the lorentz model. Returns a square matrix.
 */
  __pyx_codeobj__241 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__208, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_metricDistance, 2241, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__241)) __PYX_ERR(1, 2241, __pyx_L1_error)

  /* "miololib.pyx":2256
 *         return out
 * 
 *     def lorentzDistance(self, Matrix M):             # <<<<<<<<<<<<<<
 *         """
 *             Lorentz norm with respect to the lorentzian inner product.
 */
  __pyx_codeobj__242 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__208, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_lorentzDistance, 2256, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__242)) __PYX_ERR(1, 2256, __pyx_L1_error)

  /* "miololib.pyx":2272
 *         return out
 * 
 *     def fromEuclidean(self, Matrix M):             # <<<<<<<<<<<<<<
 *         """
 *             Maps from euclidean n-dimensional space to the space of timelike
 */
  __pyx_codeobj__243 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__208, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_fromEuclidean, 2272, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__243)) __PYX_ERR(1, 2272, __pyx_L1_error)

  /* "miololib.pyx":2287
 *         return out
 * 
 *     def toEuclidean(self, Matrix M):             # <<<<<<<<<<<<<<
 *         """
 *             Maps from lorentz n-dimensional manifold embedded in (n+1)-dimensional
 */
  __pyx_codeobj__244 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__208, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_toEuclidean, 2287, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__244)) __PYX_ERR(1, 2287, __pyx_L1_error)

  /* "miololib.pyx":2303
 *         return out
 * 
 *     def exp(self, Matrix at, Matrix M):             # <<<<<<<<<<<<<<
 *         """
 *             Exponential map in the Lorentz model.
 */
  __pyx_codeobj__245 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__230, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_exp, 2303, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__245)) __PYX_ERR(1, 2303, __pyx_L1_error)

  /* "miololib.pyx":2324
 *         return out
 * 
 *     def tangentProjection(self, Matrix at, Matrix M):             # <<<<<<<<<<<<<<
 *         """
 *             Projection of M on the the tangent space.
 */
  __pyx_codeobj__246 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__230, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_tangentProjection, 2324, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__246)) __PYX_ERR(1, 2324, __pyx_L1_error)

  /* "miololib.pyx":2345
 *         return out
 * 
 *     def centroidDistance(self, Matrix M, Matrix center):             # <<<<<<<<<<<<<<
 *         """
 *             Returns the distance of each row in M to each row of center.
 */
  __pyx_codeobj__247 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__202, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_centroidDistance, 2345, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__247)) __PYX_ERR(1, 2345, __pyx_L1_error)

  /* "miololib.pyx":2363
 *         return out
 * 
 *     def mean(self, Matrix M):             # <<<<<<<<<<<<<<
 *         """
 *             Returns the mean of rows in M in lorentzian space.
 */
  __pyx_codeobj__248 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__208, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_mean, 2363, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__248)) __PYX_ERR(1, 2363, __pyx_L1_error)

  /* "miololib.pyx":2376
 *         return out
 * 
 *     def mean(self, Matrix M):             # <<<<<<<<<<<<<<
 *         """
 *             Returns the variance of rows in M in lorentzian space.
 */
  __pyx_codeobj__249 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__208, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_mean, 2376, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__249)) __PYX_ERR(1, 2376, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__250 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__100, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__250)) __PYX_ERR(0, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */
  __pyx_codeobj__251 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__106, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__251)) __PYX_ERR(0, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__252 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__100, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__252)) __PYX_ERR(0, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */
  __pyx_codeobj__253 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__106, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__253)) __PYX_ERR(0, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__254 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__100, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__254)) __PYX_ERR(0, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */
  __pyx_codeobj__255 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__106, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__255)) __PYX_ERR(0, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__256 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__100, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__256)) __PYX_ERR(0, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */
  __pyx_codeobj__257 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__106, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__257)) __PYX_ERR(0, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__258 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__100, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__258)) __PYX_ERR(0, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */
  __pyx_codeobj__259 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__106, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__259)) __PYX_ERR(0, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__260 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__100, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__260)) __PYX_ERR(0, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */
  __pyx_codeobj__261 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__106, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__261)) __PYX_ERR(0, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__262 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__100, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__262)) __PYX_ERR(0, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */
  __pyx_codeobj__263 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__106, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__263)) __PYX_ERR(0, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__264 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__100, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__264)) __PYX_ERR(0, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */
  __pyx_codeobj__265 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__106, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__265)) __PYX_ERR(0, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__266 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__100, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__266)) __PYX_ERR(0, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */
  __pyx_codeobj__267 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__106, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__267)) __PYX_ERR(0, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__268 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__100, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__268)) __PYX_ERR(0, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */
  __pyx_codeobj__269 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__106, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__269)) __PYX_ERR(0, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__270 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__100, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__270)) __PYX_ERR(0, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */
  __pyx_codeobj__271 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__106, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__271)) __PYX_ERR(0, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__272 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__100, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__272)) __PYX_ERR(0, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */
  __pyx_codeobj__273 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__106, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__273)) __PYX_ERR(0, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__274 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__100, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__274)) __PYX_ERR(0, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */
  __pyx_codeobj__275 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__106, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__275)) __PYX_ERR(0, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__276 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__100, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__276)) __PYX_ERR(0, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */
  __pyx_codeobj__277 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__106, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__277)) __PYX_ERR(0, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__278 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__100, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__278)) __PYX_ERR(0, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */
  __pyx_codeobj__279 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__106, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__279)) __PYX_ERR(0, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__280 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__100, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__280)) __PYX_ERR(0, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */
  __pyx_codeobj__281 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__106, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__281)) __PYX_ERR(0, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__282 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__100, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__282)) __PYX_ERR(0, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */
  __pyx_codeobj__283 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__106, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__283)) __PYX_ERR(0, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__284 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__100, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__284)) __PYX_ERR(0, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */
  __pyx_codeobj__285 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__106, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__285)) __PYX_ERR(0, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__286 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__100, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__286)) __PYX_ERR(0, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */
  __pyx_codeobj__287 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__106, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__287)) __PYX_ERR(0, 3, __pyx_L1_error)

  /* "miololib.pyx":2504
 *     cdef mld.classSeparation view
 * 
 *     def intra(self, mioloObject O, int[:] labels):             # <<<<<<<<<<<<<<
 *         """
 *             Computes intraclass distance.
 */
  __pyx_tuple__288 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_O, __pyx_n_s_labels); if (unlikely(!__pyx_tuple__288)) __PYX_ERR(1, 2504, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__288);
  __Pyx_GIVEREF(__pyx_tuple__288);
  __pyx_codeobj__289 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__288, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_intra, 2504, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__289)) __PYX_ERR(1, 2504, __pyx_L1_error)

  /* "miololib.pyx":2531
 *                 return self.view(drf(O.graphDouble),&labels[0],True)
 * 
 *     def extra(self, mioloObject O, int[:] labels):             # <<<<<<<<<<<<<<
 *         """
 *             Computes intraclass distance.
 */
  __pyx_codeobj__290 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__288, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_miololib_pyx, __pyx_n_s_extra, 2531, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__290)) __PYX_ERR(1, 2531, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__291 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__100, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__291)) __PYX_ERR(0, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */
  __pyx_codeobj__292 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__106, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__292)) __PYX_ERR(0, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__293 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__100, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__293)) __PYX_ERR(0, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */
  __pyx_codeobj__294 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__106, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__294)) __PYX_ERR(0, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__295 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__100, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__295)) __PYX_ERR(0, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */
  __pyx_codeobj__296 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__106, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__296)) __PYX_ERR(0, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__297 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__100, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__297)) __PYX_ERR(0, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */
  __pyx_codeobj__298 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__106, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__298)) __PYX_ERR(0, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __pyx_unpickle_Manifold(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_codeobj__299 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__98, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_Manifold, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__299)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}
/* #### Code section: init_constants ### */

static CYTHON_SMALL_CODE int __Pyx_InitConstants(void) {
  if (__Pyx_CreateStringTabAndInitStrings() < 0) __PYX_ERR(1, 1, __pyx_L1_error);
  __pyx_float_1_ = PyFloat_FromDouble(1.); if (unlikely(!__pyx_float_1_)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_001 = PyFloat_FromDouble(0.001); if (unlikely(!__pyx_float_0_001)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_int_112105877 = PyInt_FromLong(112105877L); if (unlikely(!__pyx_int_112105877)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_int_136983863 = PyInt_FromLong(136983863L); if (unlikely(!__pyx_int_136983863)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_int_184977713 = PyInt_FromLong(184977713L); if (unlikely(!__pyx_int_184977713)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_int_222419149 = PyInt_FromLong(222419149L); if (unlikely(!__pyx_int_222419149)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_int_228825662 = PyInt_FromLong(228825662L); if (unlikely(!__pyx_int_228825662)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_int_238750788 = PyInt_FromLong(238750788L); if (unlikely(!__pyx_int_238750788)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: init_globals ### */

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  /* AssertionsEnabled.init */
  if (likely(__Pyx_init_assertions_enabled() == 0)); else

if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L1_error)

  /* NumpyImportArray.init */
  /*
 * Cython has automatically inserted a call to _import_array since
 * you didn't include one when you cimported numpy. To disable this
 * add the line
 *   <void>numpy._import_array
 */
#ifdef NPY_FEATURE_VERSION
#ifndef NO_IMPORT_ARRAY
if (unlikely(_import_array() == -1)) {
    PyErr_SetString(PyExc_ImportError, "numpy.core.multiarray failed to import "
    "(auto-generated because you didn't call 'numpy.import_array()' after cimporting numpy; "
    "use '<void>numpy._import_array' to disable if you are certain you don't need it).");
}
#endif
#endif

if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L1_error)

  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: init_module ### */

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __pyx_collections_abc_Sequence = Py_None; Py_INCREF(Py_None);
  generic = Py_None; Py_INCREF(Py_None);
  strided = Py_None; Py_INCREF(Py_None);
  indirect = Py_None; Py_INCREF(Py_None);
  contiguous = Py_None; Py_INCREF(Py_None);
  indirect_contiguous = Py_None; Py_INCREF(Py_None);
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_5miolo_mioloObject = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_5miolo_mioloObject_spec, NULL); if (unlikely(!__pyx_ptype_5miolo_mioloObject)) __PYX_ERR(1, 16, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_5miolo_mioloObject_spec, __pyx_ptype_5miolo_mioloObject) < 0) __PYX_ERR(1, 16, __pyx_L1_error)
  #else
  __pyx_ptype_5miolo_mioloObject = &__pyx_type_5miolo_mioloObject;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_5miolo_mioloObject) < 0) __PYX_ERR(1, 16, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_5miolo_mioloObject->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_5miolo_mioloObject->tp_dictoffset && __pyx_ptype_5miolo_mioloObject->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_5miolo_mioloObject->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_mioloObject, (PyObject *) __pyx_ptype_5miolo_mioloObject) < 0) __PYX_ERR(1, 16, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_5miolo_mioloObject) < 0) __PYX_ERR(1, 16, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_5miolo_mioloObject); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5miolo_Matrix = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_5miolo_Matrix_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_ptype_5miolo_Matrix)) __PYX_ERR(1, 110, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_5miolo_Matrix_spec, __pyx_ptype_5miolo_Matrix) < 0) __PYX_ERR(1, 110, __pyx_L1_error)
  #else
  __pyx_ptype_5miolo_Matrix = &__pyx_type_5miolo_Matrix;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_5miolo_Matrix->tp_base = __pyx_ptype_5miolo_mioloObject;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_5miolo_Matrix) < 0) __PYX_ERR(1, 110, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_5miolo_Matrix->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_5miolo_Matrix->tp_dictoffset && __pyx_ptype_5miolo_Matrix->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_5miolo_Matrix->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  #if CYTHON_UPDATE_DESCRIPTOR_DOC
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)__pyx_ptype_5miolo_Matrix, "__mod__"); if (unlikely(!wrapper)) __PYX_ERR(1, 110, __pyx_L1_error)
    if (__Pyx_IS_TYPE(wrapper, &PyWrapperDescr_Type)) {
      __pyx_wrapperbase_5miolo_6Matrix_48__mod__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_5miolo_6Matrix_48__mod__.doc = __pyx_doc_5miolo_6Matrix_48__mod__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_5miolo_6Matrix_48__mod__;
    }
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Matrix, (PyObject *) __pyx_ptype_5miolo_Matrix) < 0) __PYX_ERR(1, 110, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_5miolo_Matrix) < 0) __PYX_ERR(1, 110, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_5miolo_mioloObject); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 702, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5miolo_Graph = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_5miolo_Graph_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_ptype_5miolo_Graph)) __PYX_ERR(1, 702, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_5miolo_Graph_spec, __pyx_ptype_5miolo_Graph) < 0) __PYX_ERR(1, 702, __pyx_L1_error)
  #else
  __pyx_ptype_5miolo_Graph = &__pyx_type_5miolo_Graph;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_5miolo_Graph->tp_base = __pyx_ptype_5miolo_mioloObject;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_5miolo_Graph) < 0) __PYX_ERR(1, 702, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_5miolo_Graph->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_5miolo_Graph->tp_dictoffset && __pyx_ptype_5miolo_Graph->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_5miolo_Graph->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Graph, (PyObject *) __pyx_ptype_5miolo_Graph) < 0) __PYX_ERR(1, 702, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_5miolo_Graph) < 0) __PYX_ERR(1, 702, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_5miolo_mioloObject); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5miolo_Digraph = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_5miolo_Digraph_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_ptype_5miolo_Digraph)) __PYX_ERR(1, 1176, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_5miolo_Digraph_spec, __pyx_ptype_5miolo_Digraph) < 0) __PYX_ERR(1, 1176, __pyx_L1_error)
  #else
  __pyx_ptype_5miolo_Digraph = &__pyx_type_5miolo_Digraph;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_5miolo_Digraph->tp_base = __pyx_ptype_5miolo_mioloObject;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_5miolo_Digraph) < 0) __PYX_ERR(1, 1176, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_5miolo_Digraph->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_5miolo_Digraph->tp_dictoffset && __pyx_ptype_5miolo_Digraph->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_5miolo_Digraph->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Digraph, (PyObject *) __pyx_ptype_5miolo_Digraph) < 0) __PYX_ERR(1, 1176, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_5miolo_Digraph) < 0) __PYX_ERR(1, 1176, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_5miolo_mioloObject); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1486, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5miolo_Diagonal = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_5miolo_Diagonal_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_ptype_5miolo_Diagonal)) __PYX_ERR(1, 1486, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_5miolo_Diagonal_spec, __pyx_ptype_5miolo_Diagonal) < 0) __PYX_ERR(1, 1486, __pyx_L1_error)
  #else
  __pyx_ptype_5miolo_Diagonal = &__pyx_type_5miolo_Diagonal;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_5miolo_Diagonal->tp_base = __pyx_ptype_5miolo_mioloObject;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_5miolo_Diagonal) < 0) __PYX_ERR(1, 1486, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_5miolo_Diagonal->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_5miolo_Diagonal->tp_dictoffset && __pyx_ptype_5miolo_Diagonal->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_5miolo_Diagonal->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Diagonal, (PyObject *) __pyx_ptype_5miolo_Diagonal) < 0) __PYX_ERR(1, 1486, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_5miolo_Diagonal) < 0) __PYX_ERR(1, 1486, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_5miolo_Manifold = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_5miolo_Manifold_spec, NULL); if (unlikely(!__pyx_ptype_5miolo_Manifold)) __PYX_ERR(1, 1749, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_5miolo_Manifold_spec, __pyx_ptype_5miolo_Manifold) < 0) __PYX_ERR(1, 1749, __pyx_L1_error)
  #else
  __pyx_ptype_5miolo_Manifold = &__pyx_type_5miolo_Manifold;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_5miolo_Manifold) < 0) __PYX_ERR(1, 1749, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_5miolo_Manifold->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_5miolo_Manifold->tp_dictoffset && __pyx_ptype_5miolo_Manifold->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_5miolo_Manifold->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Manifold, (PyObject *) __pyx_ptype_5miolo_Manifold) < 0) __PYX_ERR(1, 1749, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_5miolo_Manifold) < 0) __PYX_ERR(1, 1749, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_5miolo_Manifold); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1752, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5miolo_Euclidean = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_5miolo_Euclidean_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_ptype_5miolo_Euclidean)) __PYX_ERR(1, 1752, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_5miolo_Euclidean_spec, __pyx_ptype_5miolo_Euclidean) < 0) __PYX_ERR(1, 1752, __pyx_L1_error)
  #else
  __pyx_ptype_5miolo_Euclidean = &__pyx_type_5miolo_Euclidean;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_5miolo_Euclidean->tp_base = __pyx_ptype_5miolo_Manifold;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_5miolo_Euclidean) < 0) __PYX_ERR(1, 1752, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_5miolo_Euclidean->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_5miolo_Euclidean->tp_dictoffset && __pyx_ptype_5miolo_Euclidean->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_5miolo_Euclidean->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Euclidean, (PyObject *) __pyx_ptype_5miolo_Euclidean) < 0) __PYX_ERR(1, 1752, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_5miolo_Euclidean) < 0) __PYX_ERR(1, 1752, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_5miolo_Manifold); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1883, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5miolo_Sphere = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_5miolo_Sphere_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_ptype_5miolo_Sphere)) __PYX_ERR(1, 1883, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_5miolo_Sphere_spec, __pyx_ptype_5miolo_Sphere) < 0) __PYX_ERR(1, 1883, __pyx_L1_error)
  #else
  __pyx_ptype_5miolo_Sphere = &__pyx_type_5miolo_Sphere;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_5miolo_Sphere->tp_base = __pyx_ptype_5miolo_Manifold;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_5miolo_Sphere) < 0) __PYX_ERR(1, 1883, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_5miolo_Sphere->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_5miolo_Sphere->tp_dictoffset && __pyx_ptype_5miolo_Sphere->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_5miolo_Sphere->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Sphere, (PyObject *) __pyx_ptype_5miolo_Sphere) < 0) __PYX_ERR(1, 1883, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_5miolo_Sphere) < 0) __PYX_ERR(1, 1883, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_5miolo_Manifold); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2058, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5miolo_Poincare = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_5miolo_Poincare_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_ptype_5miolo_Poincare)) __PYX_ERR(1, 2058, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_5miolo_Poincare_spec, __pyx_ptype_5miolo_Poincare) < 0) __PYX_ERR(1, 2058, __pyx_L1_error)
  #else
  __pyx_ptype_5miolo_Poincare = &__pyx_type_5miolo_Poincare;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_5miolo_Poincare->tp_base = __pyx_ptype_5miolo_Manifold;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_5miolo_Poincare) < 0) __PYX_ERR(1, 2058, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_5miolo_Poincare->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_5miolo_Poincare->tp_dictoffset && __pyx_ptype_5miolo_Poincare->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_5miolo_Poincare->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Poincare, (PyObject *) __pyx_ptype_5miolo_Poincare) < 0) __PYX_ERR(1, 2058, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_5miolo_Poincare) < 0) __PYX_ERR(1, 2058, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_5miolo_Manifold); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5miolo_Lorentz = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_5miolo_Lorentz_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_ptype_5miolo_Lorentz)) __PYX_ERR(1, 2195, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_5miolo_Lorentz_spec, __pyx_ptype_5miolo_Lorentz) < 0) __PYX_ERR(1, 2195, __pyx_L1_error)
  #else
  __pyx_ptype_5miolo_Lorentz = &__pyx_type_5miolo_Lorentz;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_5miolo_Lorentz->tp_base = __pyx_ptype_5miolo_Manifold;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_5miolo_Lorentz) < 0) __PYX_ERR(1, 2195, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_5miolo_Lorentz->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_5miolo_Lorentz->tp_dictoffset && __pyx_ptype_5miolo_Lorentz->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_5miolo_Lorentz->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Lorentz, (PyObject *) __pyx_ptype_5miolo_Lorentz) < 0) __PYX_ERR(1, 2195, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_5miolo_Lorentz) < 0) __PYX_ERR(1, 2195, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_5miolo_ufunction = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_5miolo_ufunction_spec, NULL); if (unlikely(!__pyx_ptype_5miolo_ufunction)) __PYX_ERR(1, 2395, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_5miolo_ufunction_spec, __pyx_ptype_5miolo_ufunction) < 0) __PYX_ERR(1, 2395, __pyx_L1_error)
  #else
  __pyx_ptype_5miolo_ufunction = &__pyx_type_5miolo_ufunction;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_5miolo_ufunction) < 0) __PYX_ERR(1, 2395, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_5miolo_ufunction->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_5miolo_ufunction->tp_dictoffset && __pyx_ptype_5miolo_ufunction->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_5miolo_ufunction->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ufunction, (PyObject *) __pyx_ptype_5miolo_ufunction) < 0) __PYX_ERR(1, 2395, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_5miolo_ufunction) < 0) __PYX_ERR(1, 2395, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_5miolo_ufunction); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2436, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5miolo_sin = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_5miolo_sin_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_ptype_5miolo_sin)) __PYX_ERR(1, 2436, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_5miolo_sin_spec, __pyx_ptype_5miolo_sin) < 0) __PYX_ERR(1, 2436, __pyx_L1_error)
  #else
  __pyx_ptype_5miolo_sin = &__pyx_type_5miolo_sin;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_5miolo_sin->tp_base = __pyx_ptype_5miolo_ufunction;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_5miolo_sin) < 0) __PYX_ERR(1, 2436, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_5miolo_sin->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_5miolo_sin->tp_dictoffset && __pyx_ptype_5miolo_sin->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_5miolo_sin->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_sin, (PyObject *) __pyx_ptype_5miolo_sin) < 0) __PYX_ERR(1, 2436, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_5miolo_sin) < 0) __PYX_ERR(1, 2436, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_5miolo_ufunction); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2439, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5miolo_cos = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_5miolo_cos_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_ptype_5miolo_cos)) __PYX_ERR(1, 2439, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_5miolo_cos_spec, __pyx_ptype_5miolo_cos) < 0) __PYX_ERR(1, 2439, __pyx_L1_error)
  #else
  __pyx_ptype_5miolo_cos = &__pyx_type_5miolo_cos;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_5miolo_cos->tp_base = __pyx_ptype_5miolo_ufunction;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_5miolo_cos) < 0) __PYX_ERR(1, 2439, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_5miolo_cos->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_5miolo_cos->tp_dictoffset && __pyx_ptype_5miolo_cos->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_5miolo_cos->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_cos, (PyObject *) __pyx_ptype_5miolo_cos) < 0) __PYX_ERR(1, 2439, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_5miolo_cos) < 0) __PYX_ERR(1, 2439, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_5miolo_ufunction); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2442, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5miolo_tan = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_5miolo_tan_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_ptype_5miolo_tan)) __PYX_ERR(1, 2442, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_5miolo_tan_spec, __pyx_ptype_5miolo_tan) < 0) __PYX_ERR(1, 2442, __pyx_L1_error)
  #else
  __pyx_ptype_5miolo_tan = &__pyx_type_5miolo_tan;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_5miolo_tan->tp_base = __pyx_ptype_5miolo_ufunction;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_5miolo_tan) < 0) __PYX_ERR(1, 2442, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_5miolo_tan->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_5miolo_tan->tp_dictoffset && __pyx_ptype_5miolo_tan->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_5miolo_tan->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_tan, (PyObject *) __pyx_ptype_5miolo_tan) < 0) __PYX_ERR(1, 2442, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_5miolo_tan) < 0) __PYX_ERR(1, 2442, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_5miolo_ufunction); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2446, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5miolo_asin = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_5miolo_asin_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_ptype_5miolo_asin)) __PYX_ERR(1, 2446, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_5miolo_asin_spec, __pyx_ptype_5miolo_asin) < 0) __PYX_ERR(1, 2446, __pyx_L1_error)
  #else
  __pyx_ptype_5miolo_asin = &__pyx_type_5miolo_asin;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_5miolo_asin->tp_base = __pyx_ptype_5miolo_ufunction;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_5miolo_asin) < 0) __PYX_ERR(1, 2446, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_5miolo_asin->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_5miolo_asin->tp_dictoffset && __pyx_ptype_5miolo_asin->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_5miolo_asin->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_asin, (PyObject *) __pyx_ptype_5miolo_asin) < 0) __PYX_ERR(1, 2446, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_5miolo_asin) < 0) __PYX_ERR(1, 2446, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_5miolo_ufunction); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2449, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5miolo_acos = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_5miolo_acos_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_ptype_5miolo_acos)) __PYX_ERR(1, 2449, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_5miolo_acos_spec, __pyx_ptype_5miolo_acos) < 0) __PYX_ERR(1, 2449, __pyx_L1_error)
  #else
  __pyx_ptype_5miolo_acos = &__pyx_type_5miolo_acos;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_5miolo_acos->tp_base = __pyx_ptype_5miolo_ufunction;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_5miolo_acos) < 0) __PYX_ERR(1, 2449, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_5miolo_acos->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_5miolo_acos->tp_dictoffset && __pyx_ptype_5miolo_acos->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_5miolo_acos->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_acos, (PyObject *) __pyx_ptype_5miolo_acos) < 0) __PYX_ERR(1, 2449, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_5miolo_acos) < 0) __PYX_ERR(1, 2449, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_5miolo_ufunction); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2452, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5miolo_atan = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_5miolo_atan_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_ptype_5miolo_atan)) __PYX_ERR(1, 2452, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_5miolo_atan_spec, __pyx_ptype_5miolo_atan) < 0) __PYX_ERR(1, 2452, __pyx_L1_error)
  #else
  __pyx_ptype_5miolo_atan = &__pyx_type_5miolo_atan;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_5miolo_atan->tp_base = __pyx_ptype_5miolo_ufunction;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_5miolo_atan) < 0) __PYX_ERR(1, 2452, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_5miolo_atan->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_5miolo_atan->tp_dictoffset && __pyx_ptype_5miolo_atan->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_5miolo_atan->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_atan, (PyObject *) __pyx_ptype_5miolo_atan) < 0) __PYX_ERR(1, 2452, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_5miolo_atan) < 0) __PYX_ERR(1, 2452, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_5miolo_ufunction); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2456, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5miolo_cosh = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_5miolo_cosh_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_ptype_5miolo_cosh)) __PYX_ERR(1, 2456, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_5miolo_cosh_spec, __pyx_ptype_5miolo_cosh) < 0) __PYX_ERR(1, 2456, __pyx_L1_error)
  #else
  __pyx_ptype_5miolo_cosh = &__pyx_type_5miolo_cosh;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_5miolo_cosh->tp_base = __pyx_ptype_5miolo_ufunction;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_5miolo_cosh) < 0) __PYX_ERR(1, 2456, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_5miolo_cosh->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_5miolo_cosh->tp_dictoffset && __pyx_ptype_5miolo_cosh->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_5miolo_cosh->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_cosh, (PyObject *) __pyx_ptype_5miolo_cosh) < 0) __PYX_ERR(1, 2456, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_5miolo_cosh) < 0) __PYX_ERR(1, 2456, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_5miolo_ufunction); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2459, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5miolo_sinh = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_5miolo_sinh_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_ptype_5miolo_sinh)) __PYX_ERR(1, 2459, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_5miolo_sinh_spec, __pyx_ptype_5miolo_sinh) < 0) __PYX_ERR(1, 2459, __pyx_L1_error)
  #else
  __pyx_ptype_5miolo_sinh = &__pyx_type_5miolo_sinh;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_5miolo_sinh->tp_base = __pyx_ptype_5miolo_ufunction;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_5miolo_sinh) < 0) __PYX_ERR(1, 2459, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_5miolo_sinh->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_5miolo_sinh->tp_dictoffset && __pyx_ptype_5miolo_sinh->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_5miolo_sinh->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_sinh, (PyObject *) __pyx_ptype_5miolo_sinh) < 0) __PYX_ERR(1, 2459, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_5miolo_sinh) < 0) __PYX_ERR(1, 2459, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_5miolo_ufunction); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2462, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5miolo_tanh = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_5miolo_tanh_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_ptype_5miolo_tanh)) __PYX_ERR(1, 2462, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_5miolo_tanh_spec, __pyx_ptype_5miolo_tanh) < 0) __PYX_ERR(1, 2462, __pyx_L1_error)
  #else
  __pyx_ptype_5miolo_tanh = &__pyx_type_5miolo_tanh;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_5miolo_tanh->tp_base = __pyx_ptype_5miolo_ufunction;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_5miolo_tanh) < 0) __PYX_ERR(1, 2462, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_5miolo_tanh->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_5miolo_tanh->tp_dictoffset && __pyx_ptype_5miolo_tanh->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_5miolo_tanh->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_tanh, (PyObject *) __pyx_ptype_5miolo_tanh) < 0) __PYX_ERR(1, 2462, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_5miolo_tanh) < 0) __PYX_ERR(1, 2462, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_5miolo_ufunction); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2466, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5miolo_acosh = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_5miolo_acosh_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_ptype_5miolo_acosh)) __PYX_ERR(1, 2466, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_5miolo_acosh_spec, __pyx_ptype_5miolo_acosh) < 0) __PYX_ERR(1, 2466, __pyx_L1_error)
  #else
  __pyx_ptype_5miolo_acosh = &__pyx_type_5miolo_acosh;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_5miolo_acosh->tp_base = __pyx_ptype_5miolo_ufunction;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_5miolo_acosh) < 0) __PYX_ERR(1, 2466, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_5miolo_acosh->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_5miolo_acosh->tp_dictoffset && __pyx_ptype_5miolo_acosh->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_5miolo_acosh->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_acosh, (PyObject *) __pyx_ptype_5miolo_acosh) < 0) __PYX_ERR(1, 2466, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_5miolo_acosh) < 0) __PYX_ERR(1, 2466, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_5miolo_ufunction); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2469, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5miolo_asinh = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_5miolo_asinh_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_ptype_5miolo_asinh)) __PYX_ERR(1, 2469, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_5miolo_asinh_spec, __pyx_ptype_5miolo_asinh) < 0) __PYX_ERR(1, 2469, __pyx_L1_error)
  #else
  __pyx_ptype_5miolo_asinh = &__pyx_type_5miolo_asinh;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_5miolo_asinh->tp_base = __pyx_ptype_5miolo_ufunction;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_5miolo_asinh) < 0) __PYX_ERR(1, 2469, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_5miolo_asinh->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_5miolo_asinh->tp_dictoffset && __pyx_ptype_5miolo_asinh->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_5miolo_asinh->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_asinh, (PyObject *) __pyx_ptype_5miolo_asinh) < 0) __PYX_ERR(1, 2469, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_5miolo_asinh) < 0) __PYX_ERR(1, 2469, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_5miolo_ufunction); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2472, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5miolo_atanh = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_5miolo_atanh_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_ptype_5miolo_atanh)) __PYX_ERR(1, 2472, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_5miolo_atanh_spec, __pyx_ptype_5miolo_atanh) < 0) __PYX_ERR(1, 2472, __pyx_L1_error)
  #else
  __pyx_ptype_5miolo_atanh = &__pyx_type_5miolo_atanh;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_5miolo_atanh->tp_base = __pyx_ptype_5miolo_ufunction;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_5miolo_atanh) < 0) __PYX_ERR(1, 2472, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_5miolo_atanh->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_5miolo_atanh->tp_dictoffset && __pyx_ptype_5miolo_atanh->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_5miolo_atanh->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_atanh, (PyObject *) __pyx_ptype_5miolo_atanh) < 0) __PYX_ERR(1, 2472, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_5miolo_atanh) < 0) __PYX_ERR(1, 2472, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_5miolo_ufunction); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2476, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5miolo_exp = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_5miolo_exp_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_ptype_5miolo_exp)) __PYX_ERR(1, 2476, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_5miolo_exp_spec, __pyx_ptype_5miolo_exp) < 0) __PYX_ERR(1, 2476, __pyx_L1_error)
  #else
  __pyx_ptype_5miolo_exp = &__pyx_type_5miolo_exp;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_5miolo_exp->tp_base = __pyx_ptype_5miolo_ufunction;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_5miolo_exp) < 0) __PYX_ERR(1, 2476, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_5miolo_exp->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_5miolo_exp->tp_dictoffset && __pyx_ptype_5miolo_exp->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_5miolo_exp->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_exp, (PyObject *) __pyx_ptype_5miolo_exp) < 0) __PYX_ERR(1, 2476, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_5miolo_exp) < 0) __PYX_ERR(1, 2476, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_5miolo_ufunction); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2480, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5miolo_log = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_5miolo_log_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_ptype_5miolo_log)) __PYX_ERR(1, 2480, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_5miolo_log_spec, __pyx_ptype_5miolo_log) < 0) __PYX_ERR(1, 2480, __pyx_L1_error)
  #else
  __pyx_ptype_5miolo_log = &__pyx_type_5miolo_log;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_5miolo_log->tp_base = __pyx_ptype_5miolo_ufunction;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_5miolo_log) < 0) __PYX_ERR(1, 2480, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_5miolo_log->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_5miolo_log->tp_dictoffset && __pyx_ptype_5miolo_log->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_5miolo_log->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_log, (PyObject *) __pyx_ptype_5miolo_log) < 0) __PYX_ERR(1, 2480, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_5miolo_log) < 0) __PYX_ERR(1, 2480, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_5miolo_ufunction); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2484, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5miolo_fabs = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_5miolo_fabs_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_ptype_5miolo_fabs)) __PYX_ERR(1, 2484, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_5miolo_fabs_spec, __pyx_ptype_5miolo_fabs) < 0) __PYX_ERR(1, 2484, __pyx_L1_error)
  #else
  __pyx_ptype_5miolo_fabs = &__pyx_type_5miolo_fabs;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_5miolo_fabs->tp_base = __pyx_ptype_5miolo_ufunction;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_5miolo_fabs) < 0) __PYX_ERR(1, 2484, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_5miolo_fabs->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_5miolo_fabs->tp_dictoffset && __pyx_ptype_5miolo_fabs->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_5miolo_fabs->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_fabs, (PyObject *) __pyx_ptype_5miolo_fabs) < 0) __PYX_ERR(1, 2484, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_5miolo_fabs) < 0) __PYX_ERR(1, 2484, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_5miolo_ufunction); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2487, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5miolo_sqrt = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_5miolo_sqrt_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_ptype_5miolo_sqrt)) __PYX_ERR(1, 2487, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_5miolo_sqrt_spec, __pyx_ptype_5miolo_sqrt) < 0) __PYX_ERR(1, 2487, __pyx_L1_error)
  #else
  __pyx_ptype_5miolo_sqrt = &__pyx_type_5miolo_sqrt;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_5miolo_sqrt->tp_base = __pyx_ptype_5miolo_ufunction;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_5miolo_sqrt) < 0) __PYX_ERR(1, 2487, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_5miolo_sqrt->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_5miolo_sqrt->tp_dictoffset && __pyx_ptype_5miolo_sqrt->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_5miolo_sqrt->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_sqrt, (PyObject *) __pyx_ptype_5miolo_sqrt) < 0) __PYX_ERR(1, 2487, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_5miolo_sqrt) < 0) __PYX_ERR(1, 2487, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_5miolo_ufunction); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2490, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5miolo_recp = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_5miolo_recp_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_ptype_5miolo_recp)) __PYX_ERR(1, 2490, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_5miolo_recp_spec, __pyx_ptype_5miolo_recp) < 0) __PYX_ERR(1, 2490, __pyx_L1_error)
  #else
  __pyx_ptype_5miolo_recp = &__pyx_type_5miolo_recp;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_5miolo_recp->tp_base = __pyx_ptype_5miolo_ufunction;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_5miolo_recp) < 0) __PYX_ERR(1, 2490, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_5miolo_recp->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_5miolo_recp->tp_dictoffset && __pyx_ptype_5miolo_recp->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_5miolo_recp->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_recp, (PyObject *) __pyx_ptype_5miolo_recp) < 0) __PYX_ERR(1, 2490, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_5miolo_recp) < 0) __PYX_ERR(1, 2490, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_5miolo_classSeparation = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_5miolo_classSeparation_spec, NULL); if (unlikely(!__pyx_ptype_5miolo_classSeparation)) __PYX_ERR(1, 2500, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_5miolo_classSeparation_spec, __pyx_ptype_5miolo_classSeparation) < 0) __PYX_ERR(1, 2500, __pyx_L1_error)
  #else
  __pyx_ptype_5miolo_classSeparation = &__pyx_type_5miolo_classSeparation;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_5miolo_classSeparation) < 0) __PYX_ERR(1, 2500, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_5miolo_classSeparation->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_5miolo_classSeparation->tp_dictoffset && __pyx_ptype_5miolo_classSeparation->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_5miolo_classSeparation->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_classSeparation, (PyObject *) __pyx_ptype_5miolo_classSeparation) < 0) __PYX_ERR(1, 2500, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_5miolo_classSeparation) < 0) __PYX_ERR(1, 2500, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_5miolo_weightedSquareDistance = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_5miolo_weightedSquareDistance_spec, NULL); if (unlikely(!__pyx_ptype_5miolo_weightedSquareDistance)) __PYX_ERR(1, 2558, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_5miolo_weightedSquareDistance_spec, __pyx_ptype_5miolo_weightedSquareDistance) < 0) __PYX_ERR(1, 2558, __pyx_L1_error)
  #else
  __pyx_ptype_5miolo_weightedSquareDistance = &__pyx_type_5miolo_weightedSquareDistance;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_5miolo_weightedSquareDistance) < 0) __PYX_ERR(1, 2558, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_5miolo_weightedSquareDistance->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_5miolo_weightedSquareDistance->tp_dictoffset && __pyx_ptype_5miolo_weightedSquareDistance->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_5miolo_weightedSquareDistance->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  #if CYTHON_UPDATE_DESCRIPTOR_DOC
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)__pyx_ptype_5miolo_weightedSquareDistance, "__call__"); if (unlikely(!wrapper)) __PYX_ERR(1, 2558, __pyx_L1_error)
    if (__Pyx_IS_TYPE(wrapper, &PyWrapperDescr_Type)) {
      __pyx_wrapperbase_5miolo_22weightedSquareDistance___call__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_5miolo_22weightedSquareDistance___call__.doc = __pyx_doc_5miolo_22weightedSquareDistance___call__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_5miolo_22weightedSquareDistance___call__;
    }
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_weightedSquareDistance, (PyObject *) __pyx_ptype_5miolo_weightedSquareDistance) < 0) __PYX_ERR(1, 2558, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_5miolo_weightedSquareDistance) < 0) __PYX_ERR(1, 2558, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_5miolo_weightedDotProduct = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_5miolo_weightedDotProduct_spec, NULL); if (unlikely(!__pyx_ptype_5miolo_weightedDotProduct)) __PYX_ERR(1, 2592, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_5miolo_weightedDotProduct_spec, __pyx_ptype_5miolo_weightedDotProduct) < 0) __PYX_ERR(1, 2592, __pyx_L1_error)
  #else
  __pyx_ptype_5miolo_weightedDotProduct = &__pyx_type_5miolo_weightedDotProduct;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_5miolo_weightedDotProduct) < 0) __PYX_ERR(1, 2592, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_5miolo_weightedDotProduct->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_5miolo_weightedDotProduct->tp_dictoffset && __pyx_ptype_5miolo_weightedDotProduct->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_5miolo_weightedDotProduct->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  #if CYTHON_UPDATE_DESCRIPTOR_DOC
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)__pyx_ptype_5miolo_weightedDotProduct, "__call__"); if (unlikely(!wrapper)) __PYX_ERR(1, 2592, __pyx_L1_error)
    if (__Pyx_IS_TYPE(wrapper, &PyWrapperDescr_Type)) {
      __pyx_wrapperbase_5miolo_18weightedDotProduct___call__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_5miolo_18weightedDotProduct___call__.doc = __pyx_doc_5miolo_18weightedDotProduct___call__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_5miolo_18weightedDotProduct___call__;
    }
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_weightedDotProduct, (PyObject *) __pyx_ptype_5miolo_weightedDotProduct) < 0) __PYX_ERR(1, 2592, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_5miolo_weightedDotProduct) < 0) __PYX_ERR(1, 2592, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_5miolo_pottsEnergy = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_5miolo_pottsEnergy_spec, NULL); if (unlikely(!__pyx_ptype_5miolo_pottsEnergy)) __PYX_ERR(1, 2626, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_5miolo_pottsEnergy_spec, __pyx_ptype_5miolo_pottsEnergy) < 0) __PYX_ERR(1, 2626, __pyx_L1_error)
  #else
  __pyx_ptype_5miolo_pottsEnergy = &__pyx_type_5miolo_pottsEnergy;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_5miolo_pottsEnergy) < 0) __PYX_ERR(1, 2626, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_5miolo_pottsEnergy->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_5miolo_pottsEnergy->tp_dictoffset && __pyx_ptype_5miolo_pottsEnergy->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_5miolo_pottsEnergy->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  #if CYTHON_UPDATE_DESCRIPTOR_DOC
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)__pyx_ptype_5miolo_pottsEnergy, "__call__"); if (unlikely(!wrapper)) __PYX_ERR(1, 2626, __pyx_L1_error)
    if (__Pyx_IS_TYPE(wrapper, &PyWrapperDescr_Type)) {
      __pyx_wrapperbase_5miolo_11pottsEnergy___call__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_5miolo_11pottsEnergy___call__.doc = __pyx_doc_5miolo_11pottsEnergy___call__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_5miolo_11pottsEnergy___call__;
    }
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_pottsEnergy, (PyObject *) __pyx_ptype_5miolo_pottsEnergy) < 0) __PYX_ERR(1, 2626, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_5miolo_pottsEnergy) < 0) __PYX_ERR(1, 2626, __pyx_L1_error)
  #endif
  __pyx_vtabptr_array = &__pyx_vtable_array;
  __pyx_vtable_array.get_memview = (PyObject *(*)(struct __pyx_array_obj *))__pyx_array_get_memview;
  #if CYTHON_USE_TYPE_SPECS
  __pyx_array_type = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type___pyx_array_spec, NULL); if (unlikely(!__pyx_array_type)) __PYX_ERR(0, 114, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_array_type->tp_as_buffer = &__pyx_tp_as_buffer_array;
  if (!__pyx_array_type->tp_as_buffer->bf_releasebuffer && __pyx_array_type->tp_base->tp_as_buffer && __pyx_array_type->tp_base->tp_as_buffer->bf_releasebuffer) {
    __pyx_array_type->tp_as_buffer->bf_releasebuffer = __pyx_array_type->tp_base->tp_as_buffer->bf_releasebuffer;
  }
  #elif defined(Py_bf_getbuffer) && defined(Py_bf_releasebuffer)
  /* PY_VERSION_HEX >= 0x03090000 || Py_LIMITED_API >= 0x030B0000 */
  #elif defined(_MSC_VER)
  #pragma message ("The buffer protocol is not supported in the Limited C-API < 3.11.")
  #else
  #warning "The buffer protocol is not supported in the Limited C-API < 3.11."
  #endif
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type___pyx_array_spec, __pyx_array_type) < 0) __PYX_ERR(0, 114, __pyx_L1_error)
  #else
  __pyx_array_type = &__pyx_type___pyx_array;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_array_type) < 0) __PYX_ERR(0, 114, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_array_type->tp_print = 0;
  #endif
  if (__Pyx_SetVtable(__pyx_array_type, __pyx_vtabptr_array) < 0) __PYX_ERR(0, 114, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_MergeVtables(__pyx_array_type) < 0) __PYX_ERR(0, 114, __pyx_L1_error)
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_array_type) < 0) __PYX_ERR(0, 114, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_MemviewEnum_type = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type___pyx_MemviewEnum_spec, NULL); if (unlikely(!__pyx_MemviewEnum_type)) __PYX_ERR(0, 302, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type___pyx_MemviewEnum_spec, __pyx_MemviewEnum_type) < 0) __PYX_ERR(0, 302, __pyx_L1_error)
  #else
  __pyx_MemviewEnum_type = &__pyx_type___pyx_MemviewEnum;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_MemviewEnum_type) < 0) __PYX_ERR(0, 302, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_MemviewEnum_type->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_MemviewEnum_type->tp_dictoffset && __pyx_MemviewEnum_type->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_MemviewEnum_type->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_MemviewEnum_type) < 0) __PYX_ERR(0, 302, __pyx_L1_error)
  #endif
  __pyx_vtabptr_memoryview = &__pyx_vtable_memoryview;
  __pyx_vtable_memoryview.get_item_pointer = (char *(*)(struct __pyx_memoryview_obj *, PyObject *))__pyx_memoryview_get_item_pointer;
  __pyx_vtable_memoryview.is_slice = (PyObject *(*)(struct __pyx_memoryview_obj *, PyObject *))__pyx_memoryview_is_slice;
  __pyx_vtable_memoryview.setitem_slice_assignment = (PyObject *(*)(struct __pyx_memoryview_obj *, PyObject *, PyObject *))__pyx_memoryview_setitem_slice_assignment;
  __pyx_vtable_memoryview.setitem_slice_assign_scalar = (PyObject *(*)(struct __pyx_memoryview_obj *, struct __pyx_memoryview_obj *, PyObject *))__pyx_memoryview_setitem_slice_assign_scalar;
  __pyx_vtable_memoryview.setitem_indexed = (PyObject *(*)(struct __pyx_memoryview_obj *, PyObject *, PyObject *))__pyx_memoryview_setitem_indexed;
  __pyx_vtable_memoryview.convert_item_to_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *))__pyx_memoryview_convert_item_to_object;
  __pyx_vtable_memoryview.assign_item_from_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *, PyObject *))__pyx_memoryview_assign_item_from_object;
  __pyx_vtable_memoryview._get_base = (PyObject *(*)(struct __pyx_memoryview_obj *))__pyx_memoryview__get_base;
  #if CYTHON_USE_TYPE_SPECS
  __pyx_memoryview_type = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type___pyx_memoryview_spec, NULL); if (unlikely(!__pyx_memoryview_type)) __PYX_ERR(0, 337, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_memoryview_type->tp_as_buffer = &__pyx_tp_as_buffer_memoryview;
  if (!__pyx_memoryview_type->tp_as_buffer->bf_releasebuffer && __pyx_memoryview_type->tp_base->tp_as_buffer && __pyx_memoryview_type->tp_base->tp_as_buffer->bf_releasebuffer) {
    __pyx_memoryview_type->tp_as_buffer->bf_releasebuffer = __pyx_memoryview_type->tp_base->tp_as_buffer->bf_releasebuffer;
  }
  #elif defined(Py_bf_getbuffer) && defined(Py_bf_releasebuffer)
  /* PY_VERSION_HEX >= 0x03090000 || Py_LIMITED_API >= 0x030B0000 */
  #elif defined(_MSC_VER)
  #pragma message ("The buffer protocol is not supported in the Limited C-API < 3.11.")
  #else
  #warning "The buffer protocol is not supported in the Limited C-API < 3.11."
  #endif
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type___pyx_memoryview_spec, __pyx_memoryview_type) < 0) __PYX_ERR(0, 337, __pyx_L1_error)
  #else
  __pyx_memoryview_type = &__pyx_type___pyx_memoryview;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_memoryview_type) < 0) __PYX_ERR(0, 337, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_memoryview_type->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_memoryview_type->tp_dictoffset && __pyx_memoryview_type->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_memoryview_type->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (__Pyx_SetVtable(__pyx_memoryview_type, __pyx_vtabptr_memoryview) < 0) __PYX_ERR(0, 337, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_MergeVtables(__pyx_memoryview_type) < 0) __PYX_ERR(0, 337, __pyx_L1_error)
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_memoryview_type) < 0) __PYX_ERR(0, 337, __pyx_L1_error)
  #endif
  __pyx_vtabptr__memoryviewslice = &__pyx_vtable__memoryviewslice;
  __pyx_vtable__memoryviewslice.__pyx_base = *__pyx_vtabptr_memoryview;
  __pyx_vtable__memoryviewslice.__pyx_base.convert_item_to_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *))__pyx_memoryviewslice_convert_item_to_object;
  __pyx_vtable__memoryviewslice.__pyx_base.assign_item_from_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *, PyObject *))__pyx_memoryviewslice_assign_item_from_object;
  __pyx_vtable__memoryviewslice.__pyx_base._get_base = (PyObject *(*)(struct __pyx_memoryview_obj *))__pyx_memoryviewslice__get_base;
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_memoryview_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 952, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_memoryviewslice_type = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type___pyx_memoryviewslice_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_memoryviewslice_type)) __PYX_ERR(0, 952, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type___pyx_memoryviewslice_spec, __pyx_memoryviewslice_type) < 0) __PYX_ERR(0, 952, __pyx_L1_error)
  #else
  __pyx_memoryviewslice_type = &__pyx_type___pyx_memoryviewslice;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_memoryviewslice_type->tp_base = __pyx_memoryview_type;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_memoryviewslice_type) < 0) __PYX_ERR(0, 952, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_memoryviewslice_type->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_memoryviewslice_type->tp_dictoffset && __pyx_memoryviewslice_type->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_memoryviewslice_type->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (__Pyx_SetVtable(__pyx_memoryviewslice_type, __pyx_vtabptr__memoryviewslice) < 0) __PYX_ERR(0, 952, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_MergeVtables(__pyx_memoryviewslice_type) < 0) __PYX_ERR(0, 952, __pyx_L1_error)
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_memoryviewslice_type) < 0) __PYX_ERR(0, 952, __pyx_L1_error)
  #endif
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType_3_0_10(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_10(PyTypeObject),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(PyTypeObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_10(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_10(PyHeapTypeObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_0_10); if (!__pyx_ptype_7cpython_4type_type) __PYX_ERR(3, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("numpy"); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 271, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType_3_0_10(__pyx_t_1, "numpy", "dtype", sizeof(PyArray_Descr), __PYX_GET_STRUCT_ALIGNMENT_3_0_10(PyArray_Descr),__Pyx_ImportType_CheckSize_Ignore_3_0_10); if (!__pyx_ptype_5numpy_dtype) __PYX_ERR(2, 271, __pyx_L1_error)
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType_3_0_10(__pyx_t_1, "numpy", "flatiter", sizeof(PyArrayIterObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_10(PyArrayIterObject),__Pyx_ImportType_CheckSize_Ignore_3_0_10); if (!__pyx_ptype_5numpy_flatiter) __PYX_ERR(2, 316, __pyx_L1_error)
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType_3_0_10(__pyx_t_1, "numpy", "broadcast", sizeof(PyArrayMultiIterObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_10(PyArrayMultiIterObject),__Pyx_ImportType_CheckSize_Ignore_3_0_10); if (!__pyx_ptype_5numpy_broadcast) __PYX_ERR(2, 320, __pyx_L1_error)
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType_3_0_10(__pyx_t_1, "numpy", "ndarray", sizeof(PyArrayObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_10(PyArrayObject),__Pyx_ImportType_CheckSize_Ignore_3_0_10); if (!__pyx_ptype_5numpy_ndarray) __PYX_ERR(2, 359, __pyx_L1_error)
  __pyx_ptype_5numpy_generic = __Pyx_ImportType_3_0_10(__pyx_t_1, "numpy", "generic", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_10(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_10); if (!__pyx_ptype_5numpy_generic) __PYX_ERR(2, 848, __pyx_L1_error)
  __pyx_ptype_5numpy_number = __Pyx_ImportType_3_0_10(__pyx_t_1, "numpy", "number", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_10(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_10); if (!__pyx_ptype_5numpy_number) __PYX_ERR(2, 850, __pyx_L1_error)
  __pyx_ptype_5numpy_integer = __Pyx_ImportType_3_0_10(__pyx_t_1, "numpy", "integer", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_10(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_10); if (!__pyx_ptype_5numpy_integer) __PYX_ERR(2, 852, __pyx_L1_error)
  __pyx_ptype_5numpy_signedinteger = __Pyx_ImportType_3_0_10(__pyx_t_1, "numpy", "signedinteger", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_10(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_10); if (!__pyx_ptype_5numpy_signedinteger) __PYX_ERR(2, 854, __pyx_L1_error)
  __pyx_ptype_5numpy_unsignedinteger = __Pyx_ImportType_3_0_10(__pyx_t_1, "numpy", "unsignedinteger", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_10(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_10); if (!__pyx_ptype_5numpy_unsignedinteger) __PYX_ERR(2, 856, __pyx_L1_error)
  __pyx_ptype_5numpy_inexact = __Pyx_ImportType_3_0_10(__pyx_t_1, "numpy", "inexact", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_10(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_10); if (!__pyx_ptype_5numpy_inexact) __PYX_ERR(2, 858, __pyx_L1_error)
  __pyx_ptype_5numpy_floating = __Pyx_ImportType_3_0_10(__pyx_t_1, "numpy", "floating", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_10(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_10); if (!__pyx_ptype_5numpy_floating) __PYX_ERR(2, 860, __pyx_L1_error)
  __pyx_ptype_5numpy_complexfloating = __Pyx_ImportType_3_0_10(__pyx_t_1, "numpy", "complexfloating", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_10(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_10); if (!__pyx_ptype_5numpy_complexfloating) __PYX_ERR(2, 862, __pyx_L1_error)
  __pyx_ptype_5numpy_flexible = __Pyx_ImportType_3_0_10(__pyx_t_1, "numpy", "flexible", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_10(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_10); if (!__pyx_ptype_5numpy_flexible) __PYX_ERR(2, 864, __pyx_L1_error)
  __pyx_ptype_5numpy_character = __Pyx_ImportType_3_0_10(__pyx_t_1, "numpy", "character", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_10(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_10); if (!__pyx_ptype_5numpy_character) __PYX_ERR(2, 866, __pyx_L1_error)
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType_3_0_10(__pyx_t_1, "numpy", "ufunc", sizeof(PyUFuncObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_10(PyUFuncObject),__Pyx_ImportType_CheckSize_Ignore_3_0_10); if (!__pyx_ptype_5numpy_ufunc) __PYX_ERR(2, 930, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_miolo(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_miolo},
  {0, NULL}
};
#endif

#ifdef __cplusplus
namespace {
  struct PyModuleDef __pyx_moduledef =
  #else
  static struct PyModuleDef __pyx_moduledef =
  #endif
  {
      PyModuleDef_HEAD_INIT,
      "miolo",
      0, /* m_doc */
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      0, /* m_size */
    #elif CYTHON_USE_MODULE_STATE
      sizeof(__pyx_mstate), /* m_size */
    #else
      -1, /* m_size */
    #endif
      __pyx_methods /* m_methods */,
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      __pyx_moduledef_slots, /* m_slots */
    #else
      NULL, /* m_reload */
    #endif
    #if CYTHON_USE_MODULE_STATE
      __pyx_m_traverse, /* m_traverse */
      __pyx_m_clear, /* m_clear */
      NULL /* m_free */
    #else
      NULL, /* m_traverse */
      NULL, /* m_clear */
      NULL /* m_free */
    #endif
  };
  #ifdef __cplusplus
} /* anonymous namespace */
#endif
#endif

#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initmiolo(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initmiolo(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_miolo(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_miolo(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *module, const char* from_name, const char* to_name, int allow_none)
#else
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none)
#endif
{
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
#if CYTHON_COMPILING_IN_LIMITED_API
            result = PyModule_AddObject(module, to_name, value);
#else
            result = PyDict_SetItemString(moddict, to_name, value);
#endif
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    CYTHON_UNUSED_VAR(def);
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
#if CYTHON_COMPILING_IN_LIMITED_API
    moddict = module;
#else
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
#endif
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_miolo(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  int stringtab_initialized = 0;
  #if CYTHON_USE_MODULE_STATE
  int pystate_addmodule_run = 0;
  #endif
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  static PyThread_type_lock __pyx_t_8[8];
  __Pyx_memviewslice __pyx_t_9 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_t_10 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'miolo' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("miolo", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  if (unlikely(!__pyx_m)) __PYX_ERR(1, 1, __pyx_L1_error)
  #elif CYTHON_USE_MODULE_STATE
  __pyx_t_1 = PyModule_Create(&__pyx_moduledef); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  {
    int add_module_result = PyState_AddModule(__pyx_t_1, &__pyx_moduledef);
    __pyx_t_1 = 0; /* transfer ownership from __pyx_t_1 to "miolo" pseudovariable */
    if (unlikely((add_module_result < 0))) __PYX_ERR(1, 1, __pyx_L1_error)
    pystate_addmodule_run = 1;
  }
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  if (unlikely(!__pyx_m)) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #endif
  CYTHON_UNUSED_VAR(__pyx_t_1);
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(1, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = __Pyx_PyImport_AddModuleRef(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_cython_runtime = __Pyx_PyImport_AddModuleRef((const char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(1, 1, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_miolo(void)", 0);
  if (__Pyx_check_binary_version(__PYX_LIMITED_VERSION_HEX, __Pyx_get_runtime_version(), CYTHON_COMPILING_IN_LIMITED_API) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(1, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init(__pyx_m) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init(__pyx_m) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init(__pyx_m) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init(__pyx_m) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init(__pyx_m) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init(__pyx_m) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitConstants() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  stringtab_initialized = 1;
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_miolo) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name_2, __pyx_n_s_main) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(1, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "miolo")) {
      if (unlikely((PyDict_SetItemString(modules, "miolo", __pyx_m) < 0))) __PYX_ERR(1, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely((__Pyx_modinit_type_init_code() < 0))) __PYX_ERR(1, 1, __pyx_L1_error)
  if (unlikely((__Pyx_modinit_type_import_code() < 0))) __PYX_ERR(1, 1, __pyx_L1_error)
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif

  /* "View.MemoryView":99
 * 
 * cdef object __pyx_collections_abc_Sequence "__pyx_collections_abc_Sequence"
 * try:             # <<<<<<<<<<<<<<
 *     if __import__("sys").version_info >= (3, 3):
 *         __pyx_collections_abc_Sequence = __import__("collections.abc").abc.Sequence
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "View.MemoryView":100
 * cdef object __pyx_collections_abc_Sequence "__pyx_collections_abc_Sequence"
 * try:
 *     if __import__("sys").version_info >= (3, 3):             # <<<<<<<<<<<<<<
 *         __pyx_collections_abc_Sequence = __import__("collections.abc").abc.Sequence
 *     else:
 */
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin___import__, __pyx_tuple__89, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 100, __pyx_L2_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_version_info); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 100, __pyx_L2_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = PyObject_RichCompare(__pyx_t_5, __pyx_tuple__90, Py_GE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 100, __pyx_L2_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 100, __pyx_L2_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {

        /* "View.MemoryView":101
 * try:
 *     if __import__("sys").version_info >= (3, 3):
 *         __pyx_collections_abc_Sequence = __import__("collections.abc").abc.Sequence             # <<<<<<<<<<<<<<
 *     else:
 *         __pyx_collections_abc_Sequence = __import__("collections").Sequence
 */
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin___import__, __pyx_tuple__91, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 101, __pyx_L2_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_abc); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 101, __pyx_L2_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_Sequence); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 101, __pyx_L2_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_XGOTREF(__pyx_collections_abc_Sequence);
        __Pyx_DECREF_SET(__pyx_collections_abc_Sequence, __pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_4);
        __pyx_t_4 = 0;

        /* "View.MemoryView":100
 * cdef object __pyx_collections_abc_Sequence "__pyx_collections_abc_Sequence"
 * try:
 *     if __import__("sys").version_info >= (3, 3):             # <<<<<<<<<<<<<<
 *         __pyx_collections_abc_Sequence = __import__("collections.abc").abc.Sequence
 *     else:
 */
        goto __pyx_L8;
      }

      /* "View.MemoryView":103
 *         __pyx_collections_abc_Sequence = __import__("collections.abc").abc.Sequence
 *     else:
 *         __pyx_collections_abc_Sequence = __import__("collections").Sequence             # <<<<<<<<<<<<<<
 * except:
 * 
 */
      /*else*/ {
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin___import__, __pyx_tuple__92, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 103, __pyx_L2_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_Sequence); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 103, __pyx_L2_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XGOTREF(__pyx_collections_abc_Sequence);
        __Pyx_DECREF_SET(__pyx_collections_abc_Sequence, __pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_5);
        __pyx_t_5 = 0;
      }
      __pyx_L8:;

      /* "View.MemoryView":99
 * 
 * cdef object __pyx_collections_abc_Sequence "__pyx_collections_abc_Sequence"
 * try:             # <<<<<<<<<<<<<<
 *     if __import__("sys").version_info >= (3, 3):
 *         __pyx_collections_abc_Sequence = __import__("collections.abc").abc.Sequence
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L7_try_end;
    __pyx_L2_error:;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "View.MemoryView":104
 *     else:
 *         __pyx_collections_abc_Sequence = __import__("collections").Sequence
 * except:             # <<<<<<<<<<<<<<
 * 
 *     __pyx_collections_abc_Sequence = None
 */
    /*except:*/ {
      __Pyx_AddTraceback("View.MemoryView", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_4, &__pyx_t_7) < 0) __PYX_ERR(0, 104, __pyx_L4_except_error)
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_7);

      /* "View.MemoryView":106
 * except:
 * 
 *     __pyx_collections_abc_Sequence = None             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __Pyx_INCREF(Py_None);
      __Pyx_XGOTREF(__pyx_collections_abc_Sequence);
      __Pyx_DECREF_SET(__pyx_collections_abc_Sequence, Py_None);
      __Pyx_GIVEREF(Py_None);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L3_exception_handled;
    }

    /* "View.MemoryView":99
 * 
 * cdef object __pyx_collections_abc_Sequence "__pyx_collections_abc_Sequence"
 * try:             # <<<<<<<<<<<<<<
 *     if __import__("sys").version_info >= (3, 3):
 *         __pyx_collections_abc_Sequence = __import__("collections.abc").abc.Sequence
 */
    __pyx_L4_except_error:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L3_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    __pyx_L7_try_end:;
  }

  /* "View.MemoryView":241
 * 
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         count = __pyx_collections_abc_Sequence.count
 *         index = __pyx_collections_abc_Sequence.index
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_2, &__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_1);
    /*try:*/ {

      /* "View.MemoryView":242
 * 
 *     try:
 *         count = __pyx_collections_abc_Sequence.count             # <<<<<<<<<<<<<<
 *         index = __pyx_collections_abc_Sequence.index
 *     except:
 */
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_collections_abc_Sequence, __pyx_n_s_count); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 242, __pyx_L11_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (__Pyx_SetItemOnTypeDict(__pyx_array_type, __pyx_n_s_count, __pyx_t_7) < 0) __PYX_ERR(0, 242, __pyx_L11_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      PyType_Modified(__pyx_array_type);

      /* "View.MemoryView":243
 *     try:
 *         count = __pyx_collections_abc_Sequence.count
 *         index = __pyx_collections_abc_Sequence.index             # <<<<<<<<<<<<<<
 *     except:
 *         pass
 */
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_collections_abc_Sequence, __pyx_n_s_index); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 243, __pyx_L11_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (__Pyx_SetItemOnTypeDict(__pyx_array_type, __pyx_n_s_index, __pyx_t_7) < 0) __PYX_ERR(0, 243, __pyx_L11_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      PyType_Modified(__pyx_array_type);

      /* "View.MemoryView":241
 * 
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         count = __pyx_collections_abc_Sequence.count
 *         index = __pyx_collections_abc_Sequence.index
 */
    }
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L16_try_end;
    __pyx_L11_error:;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "View.MemoryView":244
 *         count = __pyx_collections_abc_Sequence.count
 *         index = __pyx_collections_abc_Sequence.index
 *     except:             # <<<<<<<<<<<<<<
 *         pass
 * 
 */
    /*except:*/ {
      __Pyx_ErrRestore(0,0,0);
      goto __pyx_L12_exception_handled;
    }
    __pyx_L12_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_2, __pyx_t_1);
    __pyx_L16_try_end:;
  }

  /* "View.MemoryView":309
 *         return self.name
 * 
 * cdef generic = Enum("<strided and direct or indirect>")             # <<<<<<<<<<<<<<
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")
 */
  __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__93, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_XGOTREF(generic);
  __Pyx_DECREF_SET(generic, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  __pyx_t_7 = 0;

  /* "View.MemoryView":310
 * 
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default             # <<<<<<<<<<<<<<
 * cdef indirect = Enum("<strided and indirect>")
 * 
 */
  __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__94, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_XGOTREF(strided);
  __Pyx_DECREF_SET(strided, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  __pyx_t_7 = 0;

  /* "View.MemoryView":311
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__95, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_XGOTREF(indirect);
  __Pyx_DECREF_SET(indirect, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  __pyx_t_7 = 0;

  /* "View.MemoryView":314
 * 
 * 
 * cdef contiguous = Enum("<contiguous and direct>")             # <<<<<<<<<<<<<<
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")
 * 
 */
  __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__96, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 314, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_XGOTREF(contiguous);
  __Pyx_DECREF_SET(contiguous, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  __pyx_t_7 = 0;

  /* "View.MemoryView":315
 * 
 * cdef contiguous = Enum("<contiguous and direct>")
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__97, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 315, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_XGOTREF(indirect_contiguous);
  __Pyx_DECREF_SET(indirect_contiguous, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  __pyx_t_7 = 0;

  /* "View.MemoryView":323
 * 
 * 
 * cdef int __pyx_memoryview_thread_locks_used = 0             # <<<<<<<<<<<<<<
 * cdef PyThread_type_lock[8] __pyx_memoryview_thread_locks = [
 *     PyThread_allocate_lock(),
 */
  __pyx_memoryview_thread_locks_used = 0;

  /* "View.MemoryView":324
 * 
 * cdef int __pyx_memoryview_thread_locks_used = 0
 * cdef PyThread_type_lock[8] __pyx_memoryview_thread_locks = [             # <<<<<<<<<<<<<<
 *     PyThread_allocate_lock(),
 *     PyThread_allocate_lock(),
 */
  __pyx_t_8[0] = PyThread_allocate_lock();
  __pyx_t_8[1] = PyThread_allocate_lock();
  __pyx_t_8[2] = PyThread_allocate_lock();
  __pyx_t_8[3] = PyThread_allocate_lock();
  __pyx_t_8[4] = PyThread_allocate_lock();
  __pyx_t_8[5] = PyThread_allocate_lock();
  __pyx_t_8[6] = PyThread_allocate_lock();
  __pyx_t_8[7] = PyThread_allocate_lock();
  memcpy(&(__pyx_memoryview_thread_locks[0]), __pyx_t_8, sizeof(__pyx_memoryview_thread_locks[0]) * (8));

  /* "View.MemoryView":982
 * 
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         count = __pyx_collections_abc_Sequence.count
 *         index = __pyx_collections_abc_Sequence.index
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "View.MemoryView":983
 * 
 *     try:
 *         count = __pyx_collections_abc_Sequence.count             # <<<<<<<<<<<<<<
 *         index = __pyx_collections_abc_Sequence.index
 *     except:
 */
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_collections_abc_Sequence, __pyx_n_s_count); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 983, __pyx_L17_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (__Pyx_SetItemOnTypeDict(__pyx_memoryviewslice_type, __pyx_n_s_count, __pyx_t_7) < 0) __PYX_ERR(0, 983, __pyx_L17_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      PyType_Modified(__pyx_memoryviewslice_type);

      /* "View.MemoryView":984
 *     try:
 *         count = __pyx_collections_abc_Sequence.count
 *         index = __pyx_collections_abc_Sequence.index             # <<<<<<<<<<<<<<
 *     except:
 *         pass
 */
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_collections_abc_Sequence, __pyx_n_s_index); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 984, __pyx_L17_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (__Pyx_SetItemOnTypeDict(__pyx_memoryviewslice_type, __pyx_n_s_index, __pyx_t_7) < 0) __PYX_ERR(0, 984, __pyx_L17_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      PyType_Modified(__pyx_memoryviewslice_type);

      /* "View.MemoryView":982
 * 
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         count = __pyx_collections_abc_Sequence.count
 *         index = __pyx_collections_abc_Sequence.index
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L22_try_end;
    __pyx_L17_error:;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "View.MemoryView":985
 *         count = __pyx_collections_abc_Sequence.count
 *         index = __pyx_collections_abc_Sequence.index
 *     except:             # <<<<<<<<<<<<<<
 *         pass
 * 
 */
    /*except:*/ {
      __Pyx_ErrRestore(0,0,0);
      goto __pyx_L18_exception_handled;
    }
    __pyx_L18_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    __pyx_L22_try_end:;
  }

  /* "View.MemoryView":988
 *         pass
 * 
 * try:             # <<<<<<<<<<<<<<
 *     if __pyx_collections_abc_Sequence:
 * 
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_2, &__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_1);
    /*try:*/ {

      /* "View.MemoryView":989
 * 
 * try:
 *     if __pyx_collections_abc_Sequence:             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_collections_abc_Sequence); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 989, __pyx_L23_error)
      if (__pyx_t_6) {

        /* "View.MemoryView":993
 * 
 * 
 *         __pyx_collections_abc_Sequence.register(_memoryviewslice)             # <<<<<<<<<<<<<<
 *         __pyx_collections_abc_Sequence.register(array)
 * except:
 */
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_collections_abc_Sequence, __pyx_n_s_register); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 993, __pyx_L23_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_7, ((PyObject *)__pyx_memoryviewslice_type)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 993, __pyx_L23_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

        /* "View.MemoryView":994
 * 
 *         __pyx_collections_abc_Sequence.register(_memoryviewslice)
 *         __pyx_collections_abc_Sequence.register(array)             # <<<<<<<<<<<<<<
 * except:
 *     pass  # ignore failure, it's a minor issue
 */
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_collections_abc_Sequence, __pyx_n_s_register); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 994, __pyx_L23_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_t_4, ((PyObject *)__pyx_array_type)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 994, __pyx_L23_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "View.MemoryView":989
 * 
 * try:
 *     if __pyx_collections_abc_Sequence:             # <<<<<<<<<<<<<<
 * 
 * 
 */
      }

      /* "View.MemoryView":988
 *         pass
 * 
 * try:             # <<<<<<<<<<<<<<
 *     if __pyx_collections_abc_Sequence:
 * 
 */
    }
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L28_try_end;
    __pyx_L23_error:;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "View.MemoryView":995
 *         __pyx_collections_abc_Sequence.register(_memoryviewslice)
 *         __pyx_collections_abc_Sequence.register(array)
 * except:             # <<<<<<<<<<<<<<
 *     pass  # ignore failure, it's a minor issue
 * 
 */
    /*except:*/ {
      __Pyx_ErrRestore(0,0,0);
      goto __pyx_L24_exception_handled;
    }
    __pyx_L24_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_2, __pyx_t_1);
    __pyx_L28_try_end:;
  }

  /* "(tree fragment)":1
 * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_15View_dot_MemoryView_1__pyx_unpickle_Enum, NULL, __pyx_n_s_View_MemoryView); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_Enum, __pyx_t_7) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "miololib.pyx":2
 * cimport miolodecl as mld
 * import numpy as np             # <<<<<<<<<<<<<<
 * cimport numpy as cnp
 * from libcpp cimport bool
 */
  __pyx_t_7 = __Pyx_ImportDottedModule(__pyx_n_s_numpy, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_7) < 0) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "miololib.pyx":7
 * from cython.operator cimport dereference as drf
 * 
 * str_memory = "Failed to allocate memory."             # <<<<<<<<<<<<<<
 * global_ctype = "float"
 * 
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_str_memory, __pyx_kp_s_Failed_to_allocate_memory) < 0) __PYX_ERR(1, 7, __pyx_L1_error)

  /* "miololib.pyx":8
 * 
 * str_memory = "Failed to allocate memory."
 * global_ctype = "float"             # <<<<<<<<<<<<<<
 * 
 * #-------------------------------------------------------------------------------
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_global_ctype, __pyx_n_s_float) < 0) __PYX_ERR(1, 8, __pyx_L1_error)

  /* "miololib.pyx":38
 *     cdef mld.diagonal[double]* diagonalDouble
 * 
 *     def isMatrix(self):             # <<<<<<<<<<<<<<
 *         """
 *             Returns true if object is a miolo.Matrix.
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_11mioloObject_1isMatrix, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_mioloObject_isMatrix, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__101)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5miolo_mioloObject, __pyx_n_s_isMatrix, __pyx_t_7) < 0) __PYX_ERR(1, 38, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5miolo_mioloObject);

  /* "miololib.pyx":50
 *         return False
 * 
 *     def isGraph(self):             # <<<<<<<<<<<<<<
 *         """
 *             Returns true if object is miolo.Graph.
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_11mioloObject_3isGraph, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_mioloObject_isGraph, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__102)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5miolo_mioloObject, __pyx_n_s_isGraph, __pyx_t_7) < 0) __PYX_ERR(1, 50, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5miolo_mioloObject);

  /* "miololib.pyx":62
 *         return False
 * 
 *     def isDigraph(self):             # <<<<<<<<<<<<<<
 *         """
 *             Returns true if object is miolo.Digraph
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_11mioloObject_5isDigraph, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_mioloObject_isDigraph, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__103)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5miolo_mioloObject, __pyx_n_s_isDigraph, __pyx_t_7) < 0) __PYX_ERR(1, 62, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5miolo_mioloObject);

  /* "miololib.pyx":74
 *         return False
 * 
 *     def isDiagonal(self):             # <<<<<<<<<<<<<<
 *         """
 *             Returns true if object is miolo.Diagonal
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_11mioloObject_7isDiagonal, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_mioloObject_isDiagonal, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__104)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5miolo_mioloObject, __pyx_n_s_isDiagonal, __pyx_t_7) < 0) __PYX_ERR(1, 74, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5miolo_mioloObject);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.diagonalDouble,self.diagonalFloat,self.diagonalInt,self.digraphDouble,self.digraphFloat,self.digraphInt,self.graphDouble,self.graphFloat,self.graphInt,self.mtxDouble,self.mtxFloat,self.mtxInt cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_11mioloObject_9__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_mioloObject___reduce_cython, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__105)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_7) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.diagonalDouble,self.diagonalFloat,self.diagonalInt,self.digraphDouble,self.digraphFloat,self.digraphInt,self.graphDouble,self.graphFloat,self.graphInt,self.mtxDouble,self.mtxFloat,self.mtxInt cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.diagonalDouble,self.diagonalFloat,self.diagonalInt,self.digraphDouble,self.digraphFloat,self.digraphInt,self.graphDouble,self.graphFloat,self.graphInt,self.mtxDouble,self.mtxFloat,self.mtxInt cannot be converted to a Python object for pickling"
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_11mioloObject_11__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_mioloObject___setstate_cython, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__107)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_7) < 0) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "miololib.pyx":102
 *         pass
 * 
 * ctypes = ["int","float","double"]             # <<<<<<<<<<<<<<
 * 
 * #-------------------------------------------------------------------------------
 */
  __pyx_t_7 = PyList_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_INCREF(__pyx_n_s_int);
  __Pyx_GIVEREF(__pyx_n_s_int);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_7, 0, __pyx_n_s_int)) __PYX_ERR(1, 102, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_s_float);
  __Pyx_GIVEREF(__pyx_n_s_float);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_7, 1, __pyx_n_s_float)) __PYX_ERR(1, 102, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_s_double);
  __Pyx_GIVEREF(__pyx_n_s_double);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_7, 2, __pyx_n_s_double)) __PYX_ERR(1, 102, __pyx_L1_error);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ctypes, __pyx_t_7) < 0) __PYX_ERR(1, 102, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "miololib.pyx":128
 * 
 *     def __cinit__(self, unsigned long rows=0, unsigned long cols=0, init=0,
 *         ctype=global_ctype):             # <<<<<<<<<<<<<<
 *         if ctype in ctypes:
 *             self.cType = ctype
 */
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_global_ctype); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 128, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_k__11 = __pyx_t_7;
  __Pyx_GIVEREF(__pyx_t_7);
  __pyx_t_7 = 0;

  /* "miololib.pyx":257
 *             self.mtxDouble.data[k] = value
 * 
 *     def copy(self, Matrix M, unsigned long[:] only=None):             # <<<<<<<<<<<<<<
 *         """
 *             Copies M into self if both have same shape.
 */
  __pyx_t_9 = __Pyx_PyObject_to_MemoryviewSlice_ds_unsigned_long(Py_None, PyBUF_WRITABLE); if (unlikely(!__pyx_t_9.memview)) __PYX_ERR(1, 257, __pyx_L1_error)
  __pyx_k__15 = __pyx_t_9;
  __pyx_t_9.memview = NULL;
  __pyx_t_9.data = NULL;
  __pyx_t_9 = __Pyx_PyObject_to_MemoryviewSlice_ds_unsigned_long(Py_None, PyBUF_WRITABLE); if (unlikely(!__pyx_t_9.memview)) __PYX_ERR(1, 257, __pyx_L1_error)
  __pyx_t_7 = __pyx_memoryview_fromslice(__pyx_t_9, 1, (PyObject *(*)(char *)) __pyx_memview_get_unsigned_long, (int (*)(char *, PyObject *)) __pyx_memview_set_unsigned_long, 0);; if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __PYX_XCLEAR_MEMVIEW(&__pyx_t_9, 1);
  __pyx_t_9.memview = NULL; __pyx_t_9.data = NULL;
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_7);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_7)) __PYX_ERR(1, 257, __pyx_L1_error);
  __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_6Matrix_11copy, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Matrix_copy, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__109)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_7, __pyx_t_4);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5miolo_Matrix, __pyx_n_s_copy, __pyx_t_7) < 0) __PYX_ERR(1, 257, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5miolo_Matrix);

  /* "miololib.pyx":285
 *                 self.mtxDouble.copy(drf(M.mtxDouble),&only[0],n)
 * 
 *     def print(self):             # <<<<<<<<<<<<<<
 *         if self.ctype=="int":
 *             self.mtxInt.print()
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_6Matrix_13print, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Matrix_print, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__110)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5miolo_Matrix, __pyx_n_s_print, __pyx_t_7) < 0) __PYX_ERR(1, 285, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5miolo_Matrix);

  /* "miololib.pyx":293
 *             self.mtxDouble.print()
 * 
 *     def cut(self, rowMin, rowMax, colMin,colMax):             # <<<<<<<<<<<<<<
 *         """
 *             Cuts the window [rowMin,rowMax) x [colMin,colMax) from self and
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_6Matrix_15cut, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Matrix_cut, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__112)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5miolo_Matrix, __pyx_n_s_cut, __pyx_t_7) < 0) __PYX_ERR(1, 293, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5miolo_Matrix);

  /* "miololib.pyx":315
 *     #---------------------------------------------------------------------------
 * 
 *     def max(self):             # <<<<<<<<<<<<<<
 *         """
 *             Returns max value in matrix.
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_6Matrix_17max, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Matrix_max, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__113)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 315, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5miolo_Matrix, __pyx_n_s_max, __pyx_t_7) < 0) __PYX_ERR(1, 315, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5miolo_Matrix);

  /* "miololib.pyx":326
 *             return self.mtxDouble.max()
 * 
 *     def min(self):             # <<<<<<<<<<<<<<
 *         """
 *             Returns min value in matrix.
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_6Matrix_19min, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Matrix_min, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__114)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 326, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5miolo_Matrix, __pyx_n_s_min, __pyx_t_7) < 0) __PYX_ERR(1, 326, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5miolo_Matrix);

  /* "miololib.pyx":337
 *             return self.mtxDouble.min()
 * 
 *     def argkmax(self, k=1):             # <<<<<<<<<<<<<<
 *         """
 *             Returns index of k largest values in each row.
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_6Matrix_21argkmax, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Matrix_argkmax, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__116)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 337, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_7, __pyx_tuple__117);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5miolo_Matrix, __pyx_n_s_argkmax, __pyx_t_7) < 0) __PYX_ERR(1, 337, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5miolo_Matrix);

  /* "miololib.pyx":350
 *         return out
 * 
 *     def argkmin(self, k=1):             # <<<<<<<<<<<<<<
 *         """
 *             Returns index of k smallest values in each row.
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_6Matrix_23argkmin, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Matrix_argkmin, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__118)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 350, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_7, __pyx_tuple__117);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5miolo_Matrix, __pyx_n_s_argkmin, __pyx_t_7) < 0) __PYX_ERR(1, 350, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5miolo_Matrix);

  /* "miololib.pyx":363
 *         return out
 * 
 *     def normalize(self):             # <<<<<<<<<<<<<<
 *         """
 *             Row normalization in to make elements in the same row sum to 1.
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_6Matrix_25normalize, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Matrix_normalize, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__119)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 363, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5miolo_Matrix, __pyx_n_s_normalize, __pyx_t_7) < 0) __PYX_ERR(1, 363, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5miolo_Matrix);

  /* "miololib.pyx":375
 *             self.mtxDouble.normalize()
 * 
 *     def transpose(self):             # <<<<<<<<<<<<<<
 *         """
 *             Returns the transpose of a Matrix.
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_6Matrix_27transpose, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Matrix_transpose, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__121)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 375, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5miolo_Matrix, __pyx_n_s_transpose, __pyx_t_7) < 0) __PYX_ERR(1, 375, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5miolo_Matrix);

  /* "miololib.pyx":389
 * 
 * 
 *     def flatten(self, bool rows=True):             # <<<<<<<<<<<<<<
 *         """
 *             Inplace flattening of a Matrix.
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_6Matrix_29flatten, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Matrix_flatten, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__123)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 389, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_7, __pyx_tuple__124);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5miolo_Matrix, __pyx_n_s_flatten, __pyx_t_7) < 0) __PYX_ERR(1, 389, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5miolo_Matrix);

  /* "miololib.pyx":404
 *             self.mtxDouble.flatten(rows)
 * 
 *     def reshape(self, unsigned long rows, unsigned long cols):             # <<<<<<<<<<<<<<
 *         """
 *             Inplace reshape of a Matrix. Can be done only if rows*cols is equal
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_6Matrix_31reshape, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Matrix_reshape, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__126)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 404, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5miolo_Matrix, __pyx_n_s_reshape, __pyx_t_7) < 0) __PYX_ERR(1, 404, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5miolo_Matrix);

  /* "miololib.pyx":420
 *             self.mtxDouble.reshape(rows,cols)
 * 
 *     def sparsifyThreshold(self, Threshold, output="Graph"):             # <<<<<<<<<<<<<<
 *         """
 *             If self is a square matrix, returns a Graph with only the entries
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_6Matrix_33sparsifyThreshold, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Matrix_sparsifyThreshold, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__128)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_7, __pyx_tuple__129);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5miolo_Matrix, __pyx_n_s_sparsifyThreshold, __pyx_t_7) < 0) __PYX_ERR(1, 420, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5miolo_Matrix);

  /* "miololib.pyx":451
 *             return out
 * 
 *     def sparsifyKNN(self, k, output="Digraph"):             # <<<<<<<<<<<<<<
 *         if self.rows!=self.cols:
 *             raise Exception("Only square matrices can be sparsified.")
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_6Matrix_35sparsifyKNN, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Matrix_sparsifyKNN, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__131)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 451, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_7, __pyx_tuple__132);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5miolo_Matrix, __pyx_n_s_sparsifyKNN, __pyx_t_7) < 0) __PYX_ERR(1, 451, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5miolo_Matrix);

  /* "miololib.pyx":579
 *     #---------------------------------------------------------------------------
 * 
 *     def argmax(self):             # <<<<<<<<<<<<<<
 *         """
 *             Returns the argmax of each row.
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_6Matrix_53argmax, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Matrix_argmax, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__133)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 579, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5miolo_Matrix, __pyx_n_s_argmax, __pyx_t_7) < 0) __PYX_ERR(1, 579, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5miolo_Matrix);

  /* "miololib.pyx":592
 *         return out
 * 
 *     def argmin(self):             # <<<<<<<<<<<<<<
 *         """
 *             Returns the argmin of each row.
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_6Matrix_55argmin, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Matrix_argmin, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__134)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 592, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5miolo_Matrix, __pyx_n_s_argmin, __pyx_t_7) < 0) __PYX_ERR(1, 592, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5miolo_Matrix);

  /* "miololib.pyx":605
 *         return out
 * 
 *     def rowDistance(self):             # <<<<<<<<<<<<<<
 *         """
 *             Returns the self.rows x self.rows Matrix for which each entry (i,j)
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_6Matrix_57rowDistance, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Matrix_rowDistance, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__135)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 605, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5miolo_Matrix, __pyx_n_s_rowDistance, __pyx_t_7) < 0) __PYX_ERR(1, 605, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5miolo_Matrix);

  /* "miololib.pyx":619
 *         return out
 * 
 *     def sumAll(self):             # <<<<<<<<<<<<<<
 *         """
 *             Returns the sum of all elements in a Matrix.
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_6Matrix_59sumAll, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Matrix_sumAll, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__136)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 619, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5miolo_Matrix, __pyx_n_s_sumAll, __pyx_t_7) < 0) __PYX_ERR(1, 619, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5miolo_Matrix);

  /* "miololib.pyx":630
 *             return self.mtxDouble.sumAll()
 * 
 *     def partition(self, int[:] labels, int targetLabel):             # <<<<<<<<<<<<<<
 *         """
 *             Returns the rows of self with label equal to target. Useful for
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_6Matrix_61partition, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Matrix_partition, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__138)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 630, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5miolo_Matrix, __pyx_n_s_partition, __pyx_t_7) < 0) __PYX_ERR(1, 630, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5miolo_Matrix);

  /* "miololib.pyx":649
 *         return out
 * 
 *     def trace(self):             # <<<<<<<<<<<<<<
 *         """
 *             Sum of the elements with row index equal to column index. This is
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_6Matrix_63trace, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Matrix_trace, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__139)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 649, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5miolo_Matrix, __pyx_n_s_trace, __pyx_t_7) < 0) __PYX_ERR(1, 649, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5miolo_Matrix);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_6Matrix_65__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Matrix___reduce_cython, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__140)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_7) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_6Matrix_67__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Matrix___setstate_cython, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__141)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_7) < 0) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "miololib.pyx":661
 *             return self.mtxDouble.trace()
 * 
 * def dot(Matrix A, Matrix B):             # <<<<<<<<<<<<<<
 *     """
 *         Frobenius dot product between two matrices.
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_1dot, 0, __pyx_n_s_dot, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__143)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 661, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_dot, __pyx_t_7) < 0) __PYX_ERR(1, 661, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "miololib.pyx":674
 *         return A.mtxDouble.dot(B.mtxDouble)
 * 
 * def concat(Matrix A, Matrix B):             # <<<<<<<<<<<<<<
 *     """
 *         Concatenates A and B if both have same number of columns and share same
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_3concat, 0, __pyx_n_s_concat, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__145)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 674, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_concat, __pyx_t_7) < 0) __PYX_ERR(1, 674, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "miololib.pyx":721
 * 
 *     def __cinit__(self, unsigned long nodes=0, unsigned long edges=0,
 *         ctype=global_ctype):             # <<<<<<<<<<<<<<
 *         if ctype in ctypes:
 *             self.cType = ctype
 */
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_global_ctype); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 721, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_k__33 = __pyx_t_7;
  __Pyx_GIVEREF(__pyx_t_7);
  __pyx_t_7 = 0;

  /* "miololib.pyx":869
 *             return (self.graphDouble.e[k].i,self.graphDouble.e[k].j,self.graphDouble.e[k].w)
 * 
 *     def isolatedNodes(self):             # <<<<<<<<<<<<<<
 *         if self.ctype=="int":
 *             return self.graphInt.isolatedNodes()
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_5Graph_9isolatedNodes, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Graph_isolatedNodes, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__146)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 869, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5miolo_Graph, __pyx_n_s_isolatedNodes, __pyx_t_7) < 0) __PYX_ERR(1, 869, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5miolo_Graph);

  /* "miololib.pyx":877
 *             return self.graphDouble.isolatedNodes()
 * 
 *     def print(self):             # <<<<<<<<<<<<<<
 *         if self.ctype=="int":
 *             return self.graphInt.print()
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_5Graph_11print, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Graph_print, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__147)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 877, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5miolo_Graph, __pyx_n_s_print, __pyx_t_7) < 0) __PYX_ERR(1, 877, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5miolo_Graph);

  /* "miololib.pyx":889
 *     #---------------------------------------------------------------------------
 * 
 *     def propagate(self, Matrix M, bool[:] clamped=None):             # <<<<<<<<<<<<<<
 *         """
 *             When clamped is None, returns the matrix product of self and M.
 */
  __pyx_t_10 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn_bool(Py_None, PyBUF_WRITABLE); if (unlikely(!__pyx_t_10.memview)) __PYX_ERR(1, 889, __pyx_L1_error)
  __pyx_k__36 = __pyx_t_10;
  __pyx_t_10.memview = NULL;
  __pyx_t_10.data = NULL;
  __pyx_t_10 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn_bool(Py_None, PyBUF_WRITABLE); if (unlikely(!__pyx_t_10.memview)) __PYX_ERR(1, 889, __pyx_L1_error)
  __pyx_t_7 = __pyx_memoryview_fromslice(__pyx_t_10, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn_bool, (int (*)(char *, PyObject *)) __pyx_memview_set_nn_bool, 0);; if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 889, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __PYX_XCLEAR_MEMVIEW(&__pyx_t_10, 1);
  __pyx_t_10.memview = NULL; __pyx_t_10.data = NULL;
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 889, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_7);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_7)) __PYX_ERR(1, 889, __pyx_L1_error);
  __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_5Graph_13propagate, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Graph_propagate, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__149)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 889, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_7, __pyx_t_4);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5miolo_Graph, __pyx_n_s_propagate, __pyx_t_7) < 0) __PYX_ERR(1, 889, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5miolo_Graph);

  /* "miololib.pyx":1005
 *     #---------------------------------------------------------------------------
 * 
 *     def normalize(self):             # <<<<<<<<<<<<<<
 *         """
 *             Symmetric normalization of edge weights.
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_5Graph_29normalize, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Graph_normalize, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__150)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1005, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5miolo_Graph, __pyx_n_s_normalize, __pyx_t_7) < 0) __PYX_ERR(1, 1005, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5miolo_Graph);

  /* "miololib.pyx":1016
 *             self.graphDouble.normalize()
 * 
 *     def degree(self):             # <<<<<<<<<<<<<<
 *         """
 *             Returns a column Matrix where each entry is the degree of the
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_5Graph_31degree, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Graph_degree, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__151)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1016, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5miolo_Graph, __pyx_n_s_degree, __pyx_t_7) < 0) __PYX_ERR(1, 1016, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5miolo_Graph);

  /* "miololib.pyx":1030
 *         return out
 * 
 *     def laplacian(self):             # <<<<<<<<<<<<<<
 *         """
 *             Returns the graph corresponding to the normalized laplacian of
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_5Graph_33laplacian, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Graph_laplacian, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__152)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1030, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5miolo_Graph, __pyx_n_s_laplacian, __pyx_t_7) < 0) __PYX_ERR(1, 1030, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5miolo_Graph);

  /* "miololib.pyx":1044
 *         return out
 * 
 *     def toMatrix(self):             # <<<<<<<<<<<<<<
 *         """
 *             Returns a Matrix corresponding to the dense representation of self.
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_5Graph_35toMatrix, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Graph_toMatrix, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__153)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1044, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5miolo_Graph, __pyx_n_s_toMatrix, __pyx_t_7) < 0) __PYX_ERR(1, 1044, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5miolo_Graph);

  /* "miololib.pyx":1057
 *         return out
 * 
 *     def toDigraph(self):             # <<<<<<<<<<<<<<
 *         """
 *             Returns a Digraph representation of self.
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_5Graph_37toDigraph, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Graph_toDigraph, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__154)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1057, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5miolo_Graph, __pyx_n_s_toDigraph, __pyx_t_7) < 0) __PYX_ERR(1, 1057, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5miolo_Graph);

  /* "miololib.pyx":1070
 *         return out
 * 
 *     def max(self):             # <<<<<<<<<<<<<<
 *         if self.ctype=="int":
 *             return self.graphInt.max()
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_5Graph_39max, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Graph_max, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__155)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1070, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5miolo_Graph, __pyx_n_s_max, __pyx_t_7) < 0) __PYX_ERR(1, 1070, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5miolo_Graph);

  /* "miololib.pyx":1078
 *             return self.graphDouble.max()
 * 
 *     def min(self):             # <<<<<<<<<<<<<<
 *         if self.ctype=="int":
 *             return self.graphInt.min()
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_5Graph_41min, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Graph_min, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__156)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1078, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5miolo_Graph, __pyx_n_s_min, __pyx_t_7) < 0) __PYX_ERR(1, 1078, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5miolo_Graph);

  /* "miololib.pyx":1090
 *     #---------------------------------------------------------------------------
 * 
 *     def gaussianScale(self):             # <<<<<<<<<<<<<<
 *         """
 *             Returns a Graph corresponding to the gaussian similarity of self.
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_5Graph_43gaussianScale, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Graph_gaussianScale, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__157)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1090, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5miolo_Graph, __pyx_n_s_gaussianScale, __pyx_t_7) < 0) __PYX_ERR(1, 1090, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5miolo_Graph);

  /* "miololib.pyx":1109
 *     #---------------------------------------------------------------------------
 * 
 *     def toDigraph(self):             # <<<<<<<<<<<<<<
 *         out = Digraph(ctype=self.ctype)
 *         if out.ctype=="int":
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_5Graph_45toDigraph, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Graph_toDigraph, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__158)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5miolo_Graph, __pyx_n_s_toDigraph, __pyx_t_7) < 0) __PYX_ERR(1, 1109, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5miolo_Graph);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_5Graph_47__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Graph___reduce_cython, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__159)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_7) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_5Graph_49__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Graph___setstate_cython, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__160)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_7) < 0) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "miololib.pyx":1123
 * #---------------------------------------------------------------------------
 * 
 * def hadamard(Graph G, Graph H):             # <<<<<<<<<<<<<<
 *     """
 *         Hadamard (element-wise) product between weights in Graphs. Both graphs
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_5hadamard, 0, __pyx_n_s_hadamard, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__162)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_hadamard, __pyx_t_7) < 0) __PYX_ERR(1, 1123, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "miololib.pyx":1142
 *     return out
 * 
 * def MST(mioloObject O, symmetrize=True):             # <<<<<<<<<<<<<<
 *     """
 *         Returns a minimum spanning tree using Kruskal's Algorithm.
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_7MST, 0, __pyx_n_s_MST, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__164)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_7, __pyx_tuple__124);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MST, __pyx_t_7) < 0) __PYX_ERR(1, 1142, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "miololib.pyx":1192
 *     cdef object cType
 * 
 *     def __cinit__(self, unsigned long nodes=0, ctype=global_ctype):             # <<<<<<<<<<<<<<
 *         if ctype in ctypes:
 *             self.cType = ctype
 */
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_global_ctype); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_k__45 = __pyx_t_7;
  __Pyx_GIVEREF(__pyx_t_7);
  __pyx_t_7 = 0;

  /* "miololib.pyx":1242
 *             return self.digraphDouble.null()
 * 
 *     def connect(self, i, j, value=0):             # <<<<<<<<<<<<<<
 *         """
 *             Create connection from i to j weighted by value.
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_7Digraph_5connect, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Digraph_connect, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__166)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1242, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_7, __pyx_tuple__167);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5miolo_Digraph, __pyx_n_s_connect, __pyx_t_7) < 0) __PYX_ERR(1, 1242, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5miolo_Digraph);

  /* "miololib.pyx":1257
 *             self.digraphDouble.connect(i,j,value)
 * 
 *     def connectRegular(self, Matrix Neighbors, Matrix Weights):             # <<<<<<<<<<<<<<
 *         """
 *             Connects arcs in self using Neighbors as topology and Weights as
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_7Digraph_7connectRegular, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Digraph_connectRegular, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__169)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5miolo_Digraph, __pyx_n_s_connectRegular, __pyx_t_7) < 0) __PYX_ERR(1, 1257, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5miolo_Digraph);

  /* "miololib.pyx":1279
 *             self.digraphDouble.connectRegular(drf(Neighbors.mtxInt),drf(Weights.mtxDouble))
 * 
 *     def normalize(self):             # <<<<<<<<<<<<<<
 *         """
 *             Normalize weights of each node in order to sum to 1.
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_7Digraph_9normalize, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Digraph_normalize, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__170)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1279, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5miolo_Digraph, __pyx_n_s_normalize, __pyx_t_7) < 0) __PYX_ERR(1, 1279, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5miolo_Digraph);

  /* "miololib.pyx":1290
 *             self.digraphDouble.normalize()
 * 
 *     def copy(self, mode="whole"):             # <<<<<<<<<<<<<<
 *         """
 *             Returns a copy of self.
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_7Digraph_11copy, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Digraph_copy, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__172)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1290, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_7, __pyx_tuple__173);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5miolo_Digraph, __pyx_n_s_copy, __pyx_t_7) < 0) __PYX_ERR(1, 1290, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5miolo_Digraph);

  /* "miololib.pyx":1314
 *         return out
 * 
 *     def shape(self):             # <<<<<<<<<<<<<<
 *         """
 *             Returns the number of nonzero elements of each row in the adjacency
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_7Digraph_13shape, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Digraph_shape, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__175)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1314, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5miolo_Digraph, __pyx_n_s_shape, __pyx_t_7) < 0) __PYX_ERR(1, 1314, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5miolo_Digraph);

  /* "miololib.pyx":1337
 *         return out
 * 
 *     def transpose(self):             # <<<<<<<<<<<<<<
 *         """
 *             Matrix transposition of Digraphs.
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_7Digraph_15transpose, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Digraph_transpose, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__176)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1337, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5miolo_Digraph, __pyx_n_s_transpose, __pyx_t_7) < 0) __PYX_ERR(1, 1337, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5miolo_Digraph);

  /* "miololib.pyx":1350
 *         return out
 * 
 *     def sameShape(self, Digraph G):             # <<<<<<<<<<<<<<
 *         """
 *             Checks if both Digraphs have the same shapes.
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_7Digraph_17sameShape, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Digraph_sameShape, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__178)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1350, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5miolo_Digraph, __pyx_n_s_sameShape, __pyx_t_7) < 0) __PYX_ERR(1, 1350, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5miolo_Digraph);

  /* "miololib.pyx":1365
 *         return True
 * 
 *     def symmetrize(self):             # <<<<<<<<<<<<<<
 *         """
 *             Returns a Digraph with the symmetrization of self.
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_7Digraph_19symmetrize, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Digraph_symmetrize, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__179)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1365, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5miolo_Digraph, __pyx_n_s_symmetrize, __pyx_t_7) < 0) __PYX_ERR(1, 1365, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5miolo_Digraph);

  /* "miololib.pyx":1378
 *         return out
 * 
 *     def gaussianScale(self):             # <<<<<<<<<<<<<<
 *         """
 *             Returns the scale parameter for gaussian similarity.
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_7Digraph_21gaussianScale, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Digraph_gaussianScale, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__180)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1378, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5miolo_Digraph, __pyx_n_s_gaussianScale, __pyx_t_7) < 0) __PYX_ERR(1, 1378, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5miolo_Digraph);

  /* "miololib.pyx":1468
 *     #---------------------------------------------------------------------------
 * 
 *     def toGraph(self, symmetrize=True):             # <<<<<<<<<<<<<<
 *         if symmetrize:
 *             self = self.symmetrize()
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_7Digraph_35toGraph, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Digraph_toGraph, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__182)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1468, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_7, __pyx_tuple__124);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5miolo_Digraph, __pyx_n_s_toGraph, __pyx_t_7) < 0) __PYX_ERR(1, 1468, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5miolo_Digraph);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_7Digraph_37__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Digraph___reduce_cython, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__183)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_7) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_7Digraph_39__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Digraph___setstate_cython, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__184)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_7) < 0) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "miololib.pyx":1501
 *     cdef object cType
 * 
 *     def __cinit__(self, unsigned long dim=0, init=0, ctype=global_ctype):             # <<<<<<<<<<<<<<
 *         if ctype in ctypes:
 *             self.cType = ctype
 */
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_global_ctype); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_k__57 = __pyx_t_7;
  __Pyx_GIVEREF(__pyx_t_7);
  __pyx_t_7 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_8Diagonal_23__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Diagonal___reduce_cython, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__185)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_7) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_8Diagonal_25__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Diagonal___setstate_cython, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__186)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_7) < 0) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "miololib.pyx":1718
 * #-------------------------------------------------------------------------------
 * 
 * def txtMatrix(filename,ctype=global_ctype):             # <<<<<<<<<<<<<<
 *     """
 *         Loads Matrix from txt file. Uses numpy.
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_9txtMatrix, 0, __pyx_n_s_txtMatrix, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__188)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1718, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (!__Pyx_CyFunction_InitDefaults(__pyx_t_7, sizeof(__pyx_defaults), 1)) __PYX_ERR(1, 1718, __pyx_L1_error)
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_global_ctype); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1718, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_Defaults(__pyx_defaults, __pyx_t_7)->__pyx_arg_ctype = __pyx_t_4;
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_CyFunction_SetDefaultsGetter(__pyx_t_7, __pyx_pf_5miolo_14__defaults__);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_txtMatrix, __pyx_t_7) < 0) __PYX_ERR(1, 1718, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "miololib.pyx":1727
 *     return out
 * 
 * def txtGraph(filename,ctype=global_ctype):             # <<<<<<<<<<<<<<
 *     """
 *         Loads Graph from txt file. Uses numpy.
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_11txtGraph, 0, __pyx_n_s_txtGraph, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__190)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1727, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (!__Pyx_CyFunction_InitDefaults(__pyx_t_7, sizeof(__pyx_defaults1), 1)) __PYX_ERR(1, 1727, __pyx_L1_error)
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_global_ctype); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1727, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_Defaults(__pyx_defaults1, __pyx_t_7)->__pyx_arg_ctype = __pyx_t_4;
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_CyFunction_SetDefaultsGetter(__pyx_t_7, __pyx_pf_5miolo_16__defaults__);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_txtGraph, __pyx_t_7) < 0) __PYX_ERR(1, 1727, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_8Manifold_1__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Manifold___reduce_cython, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__192)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5miolo_Manifold, __pyx_n_s_reduce_cython, __pyx_t_7) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5miolo_Manifold);

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Manifold, (type(self), 0xe3b0c44, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Manifold__set_state(self, __pyx_state)
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_8Manifold_3__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Manifold___setstate_cython, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__193)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5miolo_Manifold, __pyx_n_s_setstate_cython, __pyx_t_7) < 0) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5miolo_Manifold);

  /* "miololib.pyx":1759
 *         pass
 * 
 *     def dot(self, Matrix A):             # <<<<<<<<<<<<<<
 *         """
 *             Dot product between rows of A. This is different from miolo.dot,
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_9Euclidean_3dot, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Euclidean_dot, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__195)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1759, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5miolo_Euclidean, __pyx_n_s_dot, __pyx_t_7) < 0) __PYX_ERR(1, 1759, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5miolo_Euclidean);

  /* "miololib.pyx":1773
 *         return out
 * 
 *     def distance(self, Matrix A):             # <<<<<<<<<<<<<<
 *         """
 *             Euclidean distance between rows of A.
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_9Euclidean_5distance, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Euclidean_distance, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__196)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1773, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5miolo_Euclidean, __pyx_n_s_distance, __pyx_t_7) < 0) __PYX_ERR(1, 1773, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5miolo_Euclidean);

  /* "miololib.pyx":1786
 *         return out
 * 
 *     def mean(self, Matrix A):             # <<<<<<<<<<<<<<
 *         """
 *             Returns a row Matrix which is the mean of the rows of A.
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_9Euclidean_7mean, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Euclidean_mean, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__197)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1786, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5miolo_Euclidean, __pyx_n_s_mean, __pyx_t_7) < 0) __PYX_ERR(1, 1786, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5miolo_Euclidean);

  /* "miololib.pyx":1799
 *         return out
 * 
 *     def variance(self, Matrix A):             # <<<<<<<<<<<<<<
 *         """
 *             Returns a row Matrix which is the variance of the rows of A.
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_9Euclidean_9variance, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Euclidean_variance, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__198)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1799, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5miolo_Euclidean, __pyx_n_s_variance, __pyx_t_7) < 0) __PYX_ERR(1, 1799, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5miolo_Euclidean);

  /* "miololib.pyx":1812
 *         return out
 * 
 *     def minmaxNormalize(self, Matrix A):             # <<<<<<<<<<<<<<
 *         """
 *             For each column, calculates min and max values, and then returns
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_9Euclidean_11minmaxNormalize, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Euclidean_minmaxNormalize, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__199)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1812, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5miolo_Euclidean, __pyx_n_s_minmaxNormalize, __pyx_t_7) < 0) __PYX_ERR(1, 1812, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5miolo_Euclidean);

  /* "miololib.pyx":1826
 *         return out
 * 
 *     def rowNormalize(self, Matrix A):             # <<<<<<<<<<<<<<
 *         """
 *             Returns A with rows normalized to sum 1.
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_9Euclidean_13rowNormalize, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Euclidean_rowNormalize, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__200)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1826, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5miolo_Euclidean, __pyx_n_s_rowNormalize, __pyx_t_7) < 0) __PYX_ERR(1, 1826, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5miolo_Euclidean);

  /* "miololib.pyx":1839
 *         return out
 * 
 *     def gaussianNormalize(self, Matrix A):             # <<<<<<<<<<<<<<
 *         """
 *             Returns A normalized to have columns with mean 0 and variance 1.
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_9Euclidean_15gaussianNormalize, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Euclidean_gaussianNormalize, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__201)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1839, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5miolo_Euclidean, __pyx_n_s_gaussianNormalize, __pyx_t_7) < 0) __PYX_ERR(1, 1839, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5miolo_Euclidean);

  /* "miololib.pyx":1852
 *         return out
 * 
 *     def centroidDistance(self, Matrix M, Matrix center):             # <<<<<<<<<<<<<<
 *         """
 *             Returns the distance of rows in M to rows in center.
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_9Euclidean_17centroidDistance, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Euclidean_centroidDistance, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__203)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1852, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5miolo_Euclidean, __pyx_n_s_centroidDistance, __pyx_t_7) < 0) __PYX_ERR(1, 1852, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5miolo_Euclidean);

  /* "miololib.pyx":1870
 *         return out
 * 
 *     def kmpp(self, Matrix M, int k):             # <<<<<<<<<<<<<<
 *         """
 *             K-means++ algorithm for seeding.
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_9Euclidean_19kmpp, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Euclidean_kmpp, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__205)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1870, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5miolo_Euclidean, __pyx_n_s_kmpp, __pyx_t_7) < 0) __PYX_ERR(1, 1870, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5miolo_Euclidean);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_9Euclidean_21__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Euclidean___reduce_cython, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__206)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_7) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_9Euclidean_23__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Euclidean___setstate_cython, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__207)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_7) < 0) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "miololib.pyx":1905
 *         self.view.r = r
 * 
 *     def stereographicProjection(self, Matrix M):             # <<<<<<<<<<<<<<
 *         """
 *             Returns the matrix for which each row is the stereographic
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_6Sphere_3stereographicProjection, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Sphere_stereographicProjection, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__209)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1905, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5miolo_Sphere, __pyx_n_s_stereographicProjection, __pyx_t_7) < 0) __PYX_ERR(1, 1905, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5miolo_Sphere);

  /* "miololib.pyx":1919
 *         return out
 * 
 *     def fromEuclidean(self, Matrix M):             # <<<<<<<<<<<<<<
 *         """
 *             Returns the Matrix for which each row r has M.cols+1 columns and is
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_6Sphere_5fromEuclidean, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Sphere_fromEuclidean, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__210)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1919, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5miolo_Sphere, __pyx_n_s_fromEuclidean, __pyx_t_7) < 0) __PYX_ERR(1, 1919, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5miolo_Sphere);

  /* "miololib.pyx":1934
 *         return out
 * 
 *     def toEuclidean(self, Matrix M):             # <<<<<<<<<<<<<<
 *         """
 *             Returns the Matrix for which each row r has M.cols-1 columns and is
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_6Sphere_7toEuclidean, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Sphere_toEuclidean, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__211)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1934, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5miolo_Sphere, __pyx_n_s_toEuclidean, __pyx_t_7) < 0) __PYX_ERR(1, 1934, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5miolo_Sphere);

  /* "miololib.pyx":1949
 *         return out
 * 
 *     def coordinateReady(self, Matrix M, unsigned long azimuth=0):             # <<<<<<<<<<<<<<
 *         """
 *             Transforms M in order to make its rows suitable spherical coordinates.
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_6Sphere_9coordinateReady, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Sphere_coordinateReady, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__213)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1949, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_7, __pyx_tuple__167);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5miolo_Sphere, __pyx_n_s_coordinateReady, __pyx_t_7) < 0) __PYX_ERR(1, 1949, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5miolo_Sphere);

  /* "miololib.pyx":1966
 *         return out
 * 
 *     def distance(self, Matrix M):             # <<<<<<<<<<<<<<
 *         """
 *             Return a square Matrix for which each entry is the geodesic distance
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_6Sphere_11distance, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Sphere_distance, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__214)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1966, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5miolo_Sphere, __pyx_n_s_distance, __pyx_t_7) < 0) __PYX_ERR(1, 1966, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5miolo_Sphere);

  /* "miololib.pyx":1980
 *         return out
 * 
 *     def isIn(self, Matrix M, double tolerance=0.001):             # <<<<<<<<<<<<<<
 *         """
 *             Checks if each row of M is on the sphere.
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_6Sphere_13isIn, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Sphere_isIn, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__216)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1980, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_7, __pyx_tuple__217);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5miolo_Sphere, __pyx_n_s_isIn, __pyx_t_7) < 0) __PYX_ERR(1, 1980, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5miolo_Sphere);

  /* "miololib.pyx":1992
 *             return self.view.isIn(drf(M.mtxDouble),tolerance)
 * 
 *     def isTangent(self, Matrix at, Matrix M, double tolerance=0.001):             # <<<<<<<<<<<<<<
 *         """
 *             Checks if each row of M is on the tangent space of the corresponding
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_6Sphere_15isTangent, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Sphere_isTangent, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__219)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1992, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_7, __pyx_tuple__217);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5miolo_Sphere, __pyx_n_s_isTangent, __pyx_t_7) < 0) __PYX_ERR(1, 1992, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5miolo_Sphere);

  /* "miololib.pyx":2009
 *             return self.view.isTangent(drf(at.mtxDouble),drf(M.mtxDouble),tolerance)
 * 
 *     def exp(self, Matrix at, Matrix tangent):             # <<<<<<<<<<<<<<
 *         """
 *             Exponential map on the sphere.
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_6Sphere_17exp, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Sphere_exp, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__221)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 2009, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5miolo_Sphere, __pyx_n_s_exp, __pyx_t_7) < 0) __PYX_ERR(1, 2009, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5miolo_Sphere);

  /* "miololib.pyx":2040
 *         return out
 * 
 *     def centroidDistance(self, Matrix M, Matrix center):             # <<<<<<<<<<<<<<
 *         """
 *             Returns the distance of each row in M to each row of center.
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_6Sphere_19centroidDistance, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Sphere_centroidDistance, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__222)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 2040, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5miolo_Sphere, __pyx_n_s_centroidDistance, __pyx_t_7) < 0) __PYX_ERR(1, 2040, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5miolo_Sphere);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_6Sphere_21__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Sphere___reduce_cython, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__223)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_7) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_6Sphere_23__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Sphere___setstate_cython, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__224)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_7) < 0) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "miololib.pyx":2077
 *         self.view.c = curv
 * 
 *     def distance(self, Matrix M):             # <<<<<<<<<<<<<<
 *         """
 *             Return a square Matrix for which each entry is the geodesic distance
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_8Poincare_3distance, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Poincare_distance, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__225)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 2077, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5miolo_Poincare, __pyx_n_s_distance, __pyx_t_7) < 0) __PYX_ERR(1, 2077, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5miolo_Poincare);

  /* "miololib.pyx":2091
 *         return out
 * 
 *     def isIn(self, Matrix M):             # <<<<<<<<<<<<<<
 *         """
 *             Check if rows of M belong to the M.cols-dimensional Poincare Disk.
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_8Poincare_5isIn, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Poincare_isIn, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__227)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 2091, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5miolo_Poincare, __pyx_n_s_isIn, __pyx_t_7) < 0) __PYX_ERR(1, 2091, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5miolo_Poincare);

  /* "miololib.pyx":2102
 *             return self.view.isIn(drf(M.mtxDouble))
 * 
 *     def add(self, Matrix A, Matrix B):             # <<<<<<<<<<<<<<
 *         """
 *             Mobius addition.
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_8Poincare_7add, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Poincare_add, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__229)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 2102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5miolo_Poincare, __pyx_n_s_add, __pyx_t_7) < 0) __PYX_ERR(1, 2102, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5miolo_Poincare);

  /* "miololib.pyx":2119
 *         return out
 * 
 *     def exp(self, Matrix at, Matrix M):             # <<<<<<<<<<<<<<
 *         """
 *             Mobius addition.
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_8Poincare_9exp, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Poincare_exp, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__231)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 2119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5miolo_Poincare, __pyx_n_s_exp, __pyx_t_7) < 0) __PYX_ERR(1, 2119, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5miolo_Poincare);

  /* "miololib.pyx":2136
 *         return out
 * 
 *     def log(self, Matrix start, Matrix end):             # <<<<<<<<<<<<<<
 *         """
 *             Mobius addition.
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_8Poincare_11log, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Poincare_log, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__233)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 2136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5miolo_Poincare, __pyx_n_s_log, __pyx_t_7) < 0) __PYX_ERR(1, 2136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5miolo_Poincare);

  /* "miololib.pyx":2153
 *         return out
 * 
 *     def mean(self, Matrix M):             # <<<<<<<<<<<<<<
 *         """
 *             Returns the Einstein Midpoint of rows of M.
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_8Poincare_13mean, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Poincare_mean, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__234)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 2153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5miolo_Poincare, __pyx_n_s_mean, __pyx_t_7) < 0) __PYX_ERR(1, 2153, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5miolo_Poincare);

  /* "miololib.pyx":2166
 *         return out
 * 
 *     def centroidDistance(self, Matrix M, Matrix center):             # <<<<<<<<<<<<<<
 *         """
 *             Returns the distance of each row in M to each row of center.
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_8Poincare_15centroidDistance, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Poincare_centroidDistance, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__235)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 2166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5miolo_Poincare, __pyx_n_s_centroidDistance, __pyx_t_7) < 0) __PYX_ERR(1, 2166, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5miolo_Poincare);

  /* "miololib.pyx":2184
 *         return out
 * 
 *     def hyperbolicity(self, Matrix M):             # <<<<<<<<<<<<<<
 *         """
 *             Returns the Gromov hiperbolicity of the rows of M.
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_8Poincare_17hyperbolicity, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Poincare_hyperbolicity, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__236)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 2184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5miolo_Poincare, __pyx_n_s_hyperbolicity, __pyx_t_7) < 0) __PYX_ERR(1, 2184, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5miolo_Poincare);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_8Poincare_19__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Poincare___reduce_cython, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__237)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_7) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_8Poincare_21__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Poincare___setstate_cython, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__238)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_7) < 0) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "miololib.pyx":2214
 *         self.view.beta = b
 * 
 *     def isIn(self, Matrix M, tolerance):             # <<<<<<<<<<<<<<
 *         """
 *             Checks if rows of M belong to the manifold according to specified
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_7Lorentz_3isIn, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Lorentz_isIn, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__239)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 2214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5miolo_Lorentz, __pyx_n_s_isIn, __pyx_t_7) < 0) __PYX_ERR(1, 2214, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5miolo_Lorentz);

  /* "miololib.pyx":2226
 *             return self.view.isIn(drf(M.mtxDouble),tolerance)
 * 
 *     def dot(self, Matrix M):             # <<<<<<<<<<<<<<
 *         """
 *             Lorentz dot product between rows of M. Returns a square matrix.
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_7Lorentz_5dot, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Lorentz_dot, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__240)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 2226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5miolo_Lorentz, __pyx_n_s_dot, __pyx_t_7) < 0) __PYX_ERR(1, 2226, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5miolo_Lorentz);

  /* "miololib.pyx":2241
 *         return out
 * 
 *     def metricDistance(self, Matrix M):             # <<<<<<<<<<<<<<
 *         """
 *             Distance in the lorentz model. Returns a square matrix.
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_7Lorentz_7metricDistance, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Lorentz_metricDistance, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__241)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 2241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5miolo_Lorentz, __pyx_n_s_metricDistance, __pyx_t_7) < 0) __PYX_ERR(1, 2241, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5miolo_Lorentz);

  /* "miololib.pyx":2256
 *         return out
 * 
 *     def lorentzDistance(self, Matrix M):             # <<<<<<<<<<<<<<
 *         """
 *             Lorentz norm with respect to the lorentzian inner product.
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_7Lorentz_9lorentzDistance, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Lorentz_lorentzDistance, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__242)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 2256, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5miolo_Lorentz, __pyx_n_s_lorentzDistance, __pyx_t_7) < 0) __PYX_ERR(1, 2256, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5miolo_Lorentz);

  /* "miololib.pyx":2272
 *         return out
 * 
 *     def fromEuclidean(self, Matrix M):             # <<<<<<<<<<<<<<
 *         """
 *             Maps from euclidean n-dimensional space to the space of timelike
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_7Lorentz_11fromEuclidean, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Lorentz_fromEuclidean, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__243)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 2272, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5miolo_Lorentz, __pyx_n_s_fromEuclidean, __pyx_t_7) < 0) __PYX_ERR(1, 2272, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5miolo_Lorentz);

  /* "miololib.pyx":2287
 *         return out
 * 
 *     def toEuclidean(self, Matrix M):             # <<<<<<<<<<<<<<
 *         """
 *             Maps from lorentz n-dimensional manifold embedded in (n+1)-dimensional
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_7Lorentz_13toEuclidean, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Lorentz_toEuclidean, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__244)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 2287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5miolo_Lorentz, __pyx_n_s_toEuclidean, __pyx_t_7) < 0) __PYX_ERR(1, 2287, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5miolo_Lorentz);

  /* "miololib.pyx":2303
 *         return out
 * 
 *     def exp(self, Matrix at, Matrix M):             # <<<<<<<<<<<<<<
 *         """
 *             Exponential map in the Lorentz model.
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_7Lorentz_15exp, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Lorentz_exp, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__245)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 2303, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5miolo_Lorentz, __pyx_n_s_exp, __pyx_t_7) < 0) __PYX_ERR(1, 2303, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5miolo_Lorentz);

  /* "miololib.pyx":2324
 *         return out
 * 
 *     def tangentProjection(self, Matrix at, Matrix M):             # <<<<<<<<<<<<<<
 *         """
 *             Projection of M on the the tangent space.
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_7Lorentz_17tangentProjection, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Lorentz_tangentProjection, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__246)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 2324, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5miolo_Lorentz, __pyx_n_s_tangentProjection, __pyx_t_7) < 0) __PYX_ERR(1, 2324, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5miolo_Lorentz);

  /* "miololib.pyx":2345
 *         return out
 * 
 *     def centroidDistance(self, Matrix M, Matrix center):             # <<<<<<<<<<<<<<
 *         """
 *             Returns the distance of each row in M to each row of center.
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_7Lorentz_19centroidDistance, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Lorentz_centroidDistance, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__247)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 2345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5miolo_Lorentz, __pyx_n_s_centroidDistance, __pyx_t_7) < 0) __PYX_ERR(1, 2345, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5miolo_Lorentz);

  /* "miololib.pyx":2363
 *         return out
 * 
 *     def mean(self, Matrix M):             # <<<<<<<<<<<<<<
 *         """
 *             Returns the mean of rows in M in lorentzian space.
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_7Lorentz_21mean, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Lorentz_mean, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__248)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 2363, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5miolo_Lorentz, __pyx_n_s_mean, __pyx_t_7) < 0) __PYX_ERR(1, 2363, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5miolo_Lorentz);

  /* "miololib.pyx":2376
 *         return out
 * 
 *     def mean(self, Matrix M):             # <<<<<<<<<<<<<<
 *         """
 *             Returns the variance of rows in M in lorentzian space.
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_7Lorentz_23mean, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Lorentz_mean, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__249)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 2376, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5miolo_Lorentz, __pyx_n_s_mean, __pyx_t_7) < 0) __PYX_ERR(1, 2376, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5miolo_Lorentz);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_7Lorentz_25__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Lorentz___reduce_cython, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__250)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_7) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_7Lorentz_27__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Lorentz___setstate_cython, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__251)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_7) < 0) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_9ufunction_5__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ufunction___reduce_cython, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__252)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_7) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_9ufunction_7__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ufunction___setstate_cython, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__253)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_7) < 0) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_3sin_3__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_sin___reduce_cython, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__254)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_7) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_3sin_5__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_sin___setstate_cython, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__255)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_7) < 0) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_3cos_3__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_cos___reduce_cython, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__256)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_7) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_3cos_5__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_cos___setstate_cython, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__257)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_7) < 0) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_3tan_3__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_tan___reduce_cython, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__258)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_7) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_3tan_5__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_tan___setstate_cython, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__259)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_7) < 0) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_4asin_3__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_asin___reduce_cython, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__260)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_7) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_4asin_5__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_asin___setstate_cython, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__261)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_7) < 0) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_4acos_3__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_acos___reduce_cython, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__262)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_7) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_4acos_5__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_acos___setstate_cython, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__263)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_7) < 0) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_4atan_3__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_atan___reduce_cython, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__264)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_7) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_4atan_5__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_atan___setstate_cython, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__265)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_7) < 0) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_4cosh_3__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_cosh___reduce_cython, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__266)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_7) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_4cosh_5__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_cosh___setstate_cython, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__267)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_7) < 0) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_4sinh_3__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_sinh___reduce_cython, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__268)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_7) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_4sinh_5__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_sinh___setstate_cython, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__269)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_7) < 0) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_4tanh_3__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_tanh___reduce_cython, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__270)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_7) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_4tanh_5__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_tanh___setstate_cython, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__271)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_7) < 0) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_5acosh_3__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_acosh___reduce_cython, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__272)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_7) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_5acosh_5__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_acosh___setstate_cython, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__273)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_7) < 0) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_5asinh_3__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_asinh___reduce_cython, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__274)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_7) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_5asinh_5__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_asinh___setstate_cython, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__275)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_7) < 0) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_5atanh_3__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_atanh___reduce_cython, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__276)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_7) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_5atanh_5__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_atanh___setstate_cython, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__277)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_7) < 0) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_3exp_3__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_exp___reduce_cython, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__278)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_7) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_3exp_5__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_exp___setstate_cython, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__279)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_7) < 0) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_3log_3__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_log___reduce_cython, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__280)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_7) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_3log_5__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_log___setstate_cython, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__281)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_7) < 0) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_4fabs_3__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_fabs___reduce_cython, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__282)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_7) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_4fabs_5__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_fabs___setstate_cython, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__283)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_7) < 0) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_4sqrt_3__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_sqrt___reduce_cython, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__284)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_7) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_4sqrt_5__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_sqrt___setstate_cython, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__285)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_7) < 0) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_4recp_3__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_recp___reduce_cython, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__286)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_7) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_4recp_5__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_recp___setstate_cython, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__287)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_7) < 0) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "miololib.pyx":2504
 *     cdef mld.classSeparation view
 * 
 *     def intra(self, mioloObject O, int[:] labels):             # <<<<<<<<<<<<<<
 *         """
 *             Computes intraclass distance.
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_15classSeparation_1intra, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_classSeparation_intra, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__289)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 2504, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5miolo_classSeparation, __pyx_n_s_intra, __pyx_t_7) < 0) __PYX_ERR(1, 2504, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5miolo_classSeparation);

  /* "miololib.pyx":2531
 *                 return self.view(drf(O.graphDouble),&labels[0],True)
 * 
 *     def extra(self, mioloObject O, int[:] labels):             # <<<<<<<<<<<<<<
 *         """
 *             Computes intraclass distance.
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_15classSeparation_3extra, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_classSeparation_extra, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__290)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 2531, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5miolo_classSeparation, __pyx_n_s_extra, __pyx_t_7) < 0) __PYX_ERR(1, 2531, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5miolo_classSeparation);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_15classSeparation_5__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_classSeparation___reduce_cython, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__291)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_7) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_15classSeparation_7__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_classSeparation___setstate_cytho, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__292)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_7) < 0) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_22weightedSquareDistance_3__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_weightedSquareDistance___reduce, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__293)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_7) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_22weightedSquareDistance_5__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_weightedSquareDistance___setstat, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__294)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_7) < 0) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_18weightedDotProduct_3__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_weightedDotProduct___reduce_cyth, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__295)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_7) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_18weightedDotProduct_5__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_weightedDotProduct___setstate_cy, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__296)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_7) < 0) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_11pottsEnergy_3__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_pottsEnergy___reduce_cython, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__297)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_7) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.view cannot be converted to a Python object for pickling"
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_11pottsEnergy_5__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_pottsEnergy___setstate_cython, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__298)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_7) < 0) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_Manifold(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_5miolo_13__pyx_unpickle_Manifold, 0, __pyx_n_s_pyx_unpickle_Manifold, NULL, __pyx_n_s_miolo, __pyx_d, ((PyObject *)__pyx_codeobj__299)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_Manifold, __pyx_t_7) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "miololib.pyx":1
 * cimport miolodecl as mld             # <<<<<<<<<<<<<<
 * import numpy as np
 * cimport numpy as cnp
 */
  __pyx_t_7 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_7) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __PYX_XCLEAR_MEMVIEW(&__pyx_t_9, 1);
  __PYX_XCLEAR_MEMVIEW(&__pyx_t_10, 1);
  if (__pyx_m) {
    if (__pyx_d && stringtab_initialized) {
      __Pyx_AddTraceback("init miolo", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    #if !CYTHON_USE_MODULE_STATE
    Py_CLEAR(__pyx_m);
    #else
    Py_DECREF(__pyx_m);
    if (pystate_addmodule_run) {
      PyObject *tp, *value, *tb;
      PyErr_Fetch(&tp, &value, &tb);
      PyState_RemoveModule(&__pyx_moduledef);
      PyErr_Restore(tp, value, tb);
    }
    #endif
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init miolo");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}
/* #### Code section: cleanup_globals ### */
/* #### Code section: cleanup_module ### */
/* #### Code section: main_method ### */
/* #### Code section: utility_code_pragmas ### */
#ifdef _MSC_VER
#pragma warning( push )
/* Warning 4127: conditional expression is constant
 * Cython uses constant conditional expressions to allow in inline functions to be optimized at
 * compile-time, so this warning is not useful
 */
#pragma warning( disable : 4127 )
#endif



/* #### Code section: utility_code_def ### */

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    int result;
    PyObject *exc_type;
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject *current_exception = tstate->current_exception;
    if (unlikely(!current_exception)) return 0;
    exc_type = (PyObject*) Py_TYPE(current_exception);
    if (exc_type == err) return 1;
#else
    exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
#endif
    #if CYTHON_AVOID_BORROWED_REFS
    Py_INCREF(exc_type);
    #endif
    if (unlikely(PyTuple_Check(err))) {
        result = __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    } else {
        result = __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
    }
    #if CYTHON_AVOID_BORROWED_REFS
    Py_DECREF(exc_type);
    #endif
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject *tmp_value;
    assert(type == NULL || (value != NULL && type == (PyObject*) Py_TYPE(value)));
    if (value) {
        #if CYTHON_COMPILING_IN_CPYTHON
        if (unlikely(((PyBaseExceptionObject*) value)->traceback != tb))
        #endif
            PyException_SetTraceback(value, tb);
    }
    tmp_value = tstate->current_exception;
    tstate->current_exception = value;
    Py_XDECREF(tmp_value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
#else
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject* exc_value;
    exc_value = tstate->current_exception;
    tstate->current_exception = 0;
    *value = exc_value;
    *type = NULL;
    *tb = NULL;
    if (exc_value) {
        *type = (PyObject*) Py_TYPE(exc_value);
        Py_INCREF(*type);
        #if CYTHON_COMPILING_IN_CPYTHON
        *tb = ((PyBaseExceptionObject*) exc_value)->traceback;
        Py_XINCREF(*tb);
        #else
        *tb = PyException_GetTraceback(exc_value);
        #endif
    }
#else
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#endif
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* PyObjectGetAttrStrNoError */
#if __PYX_LIMITED_VERSION_HEX < 0x030d00A1
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
#endif
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if __PYX_LIMITED_VERSION_HEX >= 0x030d00A1
    (void) PyObject_GetOptionalAttr(obj, attr_name, &result);
    return result;
#else
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
#endif
}

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStrNoError(__pyx_b, name);
    if (unlikely(!result) && !PyErr_Occurred()) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* TupleAndListFromArray */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx_copy_object_array(PyObject *const *CYTHON_RESTRICT src, PyObject** CYTHON_RESTRICT dest, Py_ssize_t length) {
    PyObject *v;
    Py_ssize_t i;
    for (i = 0; i < length; i++) {
        v = dest[i] = src[i];
        Py_INCREF(v);
    }
}
static CYTHON_INLINE PyObject *
__Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        Py_INCREF(__pyx_empty_tuple);
        return __pyx_empty_tuple;
    }
    res = PyTuple_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyTupleObject*)res)->ob_item, n);
    return res;
}
static CYTHON_INLINE PyObject *
__Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        return PyList_New(0);
    }
    res = PyList_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyListObject*)res)->ob_item, n);
    return res;
}
#endif

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS && (PY_VERSION_HEX < 0x030B0000)
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* fastcall */
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s)
{
    Py_ssize_t i, n = PyTuple_GET_SIZE(kwnames);
    for (i = 0; i < n; i++)
    {
        if (s == PyTuple_GET_ITEM(kwnames, i)) return kwvalues[i];
    }
    for (i = 0; i < n; i++)
    {
        int eq = __Pyx_PyUnicode_Equals(s, PyTuple_GET_ITEM(kwnames, i), Py_EQ);
        if (unlikely(eq != 0)) {
            if (unlikely(eq < 0)) return NULL;
            return kwvalues[i];
        }
    }
    return NULL;
}
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000
CYTHON_UNUSED static PyObject *__Pyx_KwargsAsDict_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues) {
    Py_ssize_t i, nkwargs = PyTuple_GET_SIZE(kwnames);
    PyObject *dict;
    dict = PyDict_New();
    if (unlikely(!dict))
        return NULL;
    for (i=0; i<nkwargs; i++) {
        PyObject *key = PyTuple_GET_ITEM(kwnames, i);
        if (unlikely(PyDict_SetItem(dict, key, kwvalues[i]) < 0))
            goto bad;
    }
    return dict;
bad:
    Py_DECREF(dict);
    return NULL;
}
#endif
#endif

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject *const *kwvalues,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    int kwds_is_tuple = CYTHON_METH_FASTCALL && likely(PyTuple_Check(kwds));
    while (1) {
        Py_XDECREF(key); key = NULL;
        Py_XDECREF(value); value = NULL;
        if (kwds_is_tuple) {
            Py_ssize_t size;
#if CYTHON_ASSUME_SAFE_MACROS
            size = PyTuple_GET_SIZE(kwds);
#else
            size = PyTuple_Size(kwds);
            if (size < 0) goto bad;
#endif
            if (pos >= size) break;
#if CYTHON_AVOID_BORROWED_REFS
            key = __Pyx_PySequence_ITEM(kwds, pos);
            if (!key) goto bad;
#elif CYTHON_ASSUME_SAFE_MACROS
            key = PyTuple_GET_ITEM(kwds, pos);
#else
            key = PyTuple_GetItem(kwds, pos);
            if (!key) goto bad;
#endif
            value = kwvalues[pos];
            pos++;
        }
        else
        {
            if (!PyDict_Next(kwds, &pos, &key, &value)) break;
#if CYTHON_AVOID_BORROWED_REFS
            Py_INCREF(key);
#endif
        }
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
#if CYTHON_AVOID_BORROWED_REFS
            Py_INCREF(value);
            Py_DECREF(key);
#endif
            key = NULL;
            value = NULL;
            continue;
        }
#if !CYTHON_AVOID_BORROWED_REFS
        Py_INCREF(key);
#endif
        Py_INCREF(value);
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
#if CYTHON_AVOID_BORROWED_REFS
                    value = NULL;
#endif
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key)
                );
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
#if CYTHON_AVOID_BORROWED_REFS
                    value = NULL;
#endif
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    Py_XDECREF(key);
    Py_XDECREF(value);
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    #if PY_MAJOR_VERSION < 3
    PyErr_Format(PyExc_TypeError,
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
    PyErr_Format(PyExc_TypeError,
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    Py_XDECREF(key);
    Py_XDECREF(value);
    return -1;
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    __Pyx_TypeName type_name;
    __Pyx_TypeName obj_type_name;
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    type_name = __Pyx_PyType_GetName(type);
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected " __Pyx_FMT_TYPENAME
        ", got " __Pyx_FMT_TYPENAME ")", name, type_name, obj_type_name);
    __Pyx_DECREF_TypeName(type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return 0;
}

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    __Pyx_PyThreadState_declare
    CYTHON_UNUSED_VAR(cause);
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
      #if PY_VERSION_HEX >= 0x030C00A6
        PyException_SetTraceback(value, tb);
      #elif CYTHON_FAST_THREAD_STATE
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#else
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL && !CYTHON_VECTORCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    #if PY_MAJOR_VERSION < 3
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object"))) {
        return NULL;
    }
    #else
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object"))) {
        return NULL;
    }
    #endif
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    #if PY_MAJOR_VERSION < 3
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    #else
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object")))
        return NULL;
    #endif
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = __Pyx_CyOrPyCFunction_GET_FUNCTION(func);
    self = __Pyx_CyOrPyCFunction_GET_SELF(func);
    #if PY_MAJOR_VERSION < 3
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    #else
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object")))
        return NULL;
    #endif
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectFastCall */
#if PY_VERSION_HEX < 0x03090000 || CYTHON_COMPILING_IN_LIMITED_API
static PyObject* __Pyx_PyObject_FastCall_fallback(PyObject *func, PyObject **args, size_t nargs, PyObject *kwargs) {
    PyObject *argstuple;
    PyObject *result = 0;
    size_t i;
    argstuple = PyTuple_New((Py_ssize_t)nargs);
    if (unlikely(!argstuple)) return NULL;
    for (i = 0; i < nargs; i++) {
        Py_INCREF(args[i]);
        if (__Pyx_PyTuple_SET_ITEM(argstuple, (Py_ssize_t)i, args[i]) < 0) goto bad;
    }
    result = __Pyx_PyObject_Call(func, argstuple, kwargs);
  bad:
    Py_DECREF(argstuple);
    return result;
}
#endif
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject **args, size_t _nargs, PyObject *kwargs) {
    Py_ssize_t nargs = __Pyx_PyVectorcall_NARGS(_nargs);
#if CYTHON_COMPILING_IN_CPYTHON
    if (nargs == 0 && kwargs == NULL) {
        if (__Pyx_CyOrPyCFunction_Check(func) && likely( __Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_NOARGS))
            return __Pyx_PyObject_CallMethO(func, NULL);
    }
    else if (nargs == 1 && kwargs == NULL) {
        if (__Pyx_CyOrPyCFunction_Check(func) && likely( __Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_O))
            return __Pyx_PyObject_CallMethO(func, args[0]);
    }
#endif
    #if PY_VERSION_HEX < 0x030800B1
    #if CYTHON_FAST_PYCCALL
    if (PyCFunction_Check(func)) {
        if (kwargs) {
            return _PyCFunction_FastCallDict(func, args, nargs, kwargs);
        } else {
            return _PyCFunction_FastCallKeywords(func, args, nargs, NULL);
        }
    }
    #if PY_VERSION_HEX >= 0x030700A1
    if (!kwargs && __Pyx_IS_TYPE(func, &PyMethodDescr_Type)) {
        return _PyMethodDescr_FastCallKeywords(func, args, nargs, NULL);
    }
    #endif
    #endif
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs);
    }
    #endif
    #endif
    if (kwargs == NULL) {
        #if CYTHON_VECTORCALL
        #if PY_VERSION_HEX < 0x03090000
        vectorcallfunc f = _PyVectorcall_Function(func);
        #else
        vectorcallfunc f = PyVectorcall_Function(func);
        #endif
        if (f) {
            return f(func, args, (size_t)nargs, NULL);
        }
        #elif defined(__Pyx_CyFunction_USED) && CYTHON_BACKPORT_VECTORCALL
        if (__Pyx_CyFunction_CheckExact(func)) {
            __pyx_vectorcallfunc f = __Pyx_CyFunction_func_vectorcall(func);
            if (f) return f(func, args, (size_t)nargs, NULL);
        }
        #endif
    }
    if (nargs == 0) {
        return __Pyx_PyObject_Call(func, __pyx_empty_tuple, kwargs);
    }
    #if PY_VERSION_HEX >= 0x03090000 && !CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_VectorcallDict(func, args, (size_t)nargs, kwargs);
    #else
    return __Pyx_PyObject_FastCall_fallback(func, args, (size_t)nargs, kwargs);
    #endif
}

/* RaiseUnexpectedTypeError */
static int
__Pyx_RaiseUnexpectedTypeError(const char *expected, PyObject *obj)
{
    __Pyx_TypeName obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError, "Expected %s, got " __Pyx_FMT_TYPENAME,
                 expected, obj_type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return 0;
}

/* CIntToDigits */
static const char DIGIT_PAIRS_10[2*10*10+1] = {
    "00010203040506070809"
    "10111213141516171819"
    "20212223242526272829"
    "30313233343536373839"
    "40414243444546474849"
    "50515253545556575859"
    "60616263646566676869"
    "70717273747576777879"
    "80818283848586878889"
    "90919293949596979899"
};
static const char DIGIT_PAIRS_8[2*8*8+1] = {
    "0001020304050607"
    "1011121314151617"
    "2021222324252627"
    "3031323334353637"
    "4041424344454647"
    "5051525354555657"
    "6061626364656667"
    "7071727374757677"
};
static const char DIGITS_HEX[2*16+1] = {
    "0123456789abcdef"
    "0123456789ABCDEF"
};

/* BuildPyUnicode */
static PyObject* __Pyx_PyUnicode_BuildFromAscii(Py_ssize_t ulength, char* chars, int clength,
                                                int prepend_sign, char padding_char) {
    PyObject *uval;
    Py_ssize_t uoffset = ulength - clength;
#if CYTHON_USE_UNICODE_INTERNALS
    Py_ssize_t i;
#if CYTHON_PEP393_ENABLED
    void *udata;
    uval = PyUnicode_New(ulength, 127);
    if (unlikely(!uval)) return NULL;
    udata = PyUnicode_DATA(uval);
#else
    Py_UNICODE *udata;
    uval = PyUnicode_FromUnicode(NULL, ulength);
    if (unlikely(!uval)) return NULL;
    udata = PyUnicode_AS_UNICODE(uval);
#endif
    if (uoffset > 0) {
        i = 0;
        if (prepend_sign) {
            __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, 0, '-');
            i++;
        }
        for (; i < uoffset; i++) {
            __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, i, padding_char);
        }
    }
    for (i=0; i < clength; i++) {
        __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, uoffset+i, chars[i]);
    }
#else
    {
        PyObject *sign = NULL, *padding = NULL;
        uval = NULL;
        if (uoffset > 0) {
            prepend_sign = !!prepend_sign;
            if (uoffset > prepend_sign) {
                padding = PyUnicode_FromOrdinal(padding_char);
                if (likely(padding) && uoffset > prepend_sign + 1) {
                    PyObject *tmp;
                    PyObject *repeat = PyInt_FromSsize_t(uoffset - prepend_sign);
                    if (unlikely(!repeat)) goto done_or_error;
                    tmp = PyNumber_Multiply(padding, repeat);
                    Py_DECREF(repeat);
                    Py_DECREF(padding);
                    padding = tmp;
                }
                if (unlikely(!padding)) goto done_or_error;
            }
            if (prepend_sign) {
                sign = PyUnicode_FromOrdinal('-');
                if (unlikely(!sign)) goto done_or_error;
            }
        }
        uval = PyUnicode_DecodeASCII(chars, clength, NULL);
        if (likely(uval) && padding) {
            PyObject *tmp = PyNumber_Add(padding, uval);
            Py_DECREF(uval);
            uval = tmp;
        }
        if (likely(uval) && sign) {
            PyObject *tmp = PyNumber_Add(sign, uval);
            Py_DECREF(uval);
            uval = tmp;
        }
done_or_error:
        Py_XDECREF(padding);
        Py_XDECREF(sign);
    }
#endif
    return uval;
}

/* CIntToPyUnicode */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_int(int value, Py_ssize_t width, char padding_char, char format_char) {
    char digits[sizeof(int)*3+2];
    char *dpos, *end = digits + sizeof(int)*3+2;
    const char *hex_digits = DIGITS_HEX;
    Py_ssize_t length, ulength;
    int prepend_sign, last_one_off;
    int remaining;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (format_char == 'X') {
        hex_digits += 16;
        format_char = 'x';
    }
    remaining = value;
    last_one_off = 0;
    dpos = end;
    do {
        int digit_pos;
        switch (format_char) {
        case 'o':
            digit_pos = abs((int)(remaining % (8*8)));
            remaining = (int) (remaining / (8*8));
            dpos -= 2;
            memcpy(dpos, DIGIT_PAIRS_8 + digit_pos * 2, 2);
            last_one_off = (digit_pos < 8);
            break;
        case 'd':
            digit_pos = abs((int)(remaining % (10*10)));
            remaining = (int) (remaining / (10*10));
            dpos -= 2;
            memcpy(dpos, DIGIT_PAIRS_10 + digit_pos * 2, 2);
            last_one_off = (digit_pos < 10);
            break;
        case 'x':
            *(--dpos) = hex_digits[abs((int)(remaining % 16))];
            remaining = (int) (remaining / 16);
            break;
        default:
            assert(0);
            break;
        }
    } while (unlikely(remaining != 0));
    assert(!last_one_off || *dpos == '0');
    dpos += last_one_off;
    length = end - dpos;
    ulength = length;
    prepend_sign = 0;
    if (!is_unsigned && value <= neg_one) {
        if (padding_char == ' ' || width <= length + 1) {
            *(--dpos) = '-';
            ++length;
        } else {
            prepend_sign = 1;
        }
        ++ulength;
    }
    if (width > ulength) {
        ulength = width;
    }
    if (ulength == 1) {
        return PyUnicode_FromOrdinal(*dpos);
    }
    return __Pyx_PyUnicode_BuildFromAscii(ulength, dpos, (int) length, prepend_sign, padding_char);
}

/* CIntToPyUnicode */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_Py_ssize_t(Py_ssize_t value, Py_ssize_t width, char padding_char, char format_char) {
    char digits[sizeof(Py_ssize_t)*3+2];
    char *dpos, *end = digits + sizeof(Py_ssize_t)*3+2;
    const char *hex_digits = DIGITS_HEX;
    Py_ssize_t length, ulength;
    int prepend_sign, last_one_off;
    Py_ssize_t remaining;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const Py_ssize_t neg_one = (Py_ssize_t) -1, const_zero = (Py_ssize_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (format_char == 'X') {
        hex_digits += 16;
        format_char = 'x';
    }
    remaining = value;
    last_one_off = 0;
    dpos = end;
    do {
        int digit_pos;
        switch (format_char) {
        case 'o':
            digit_pos = abs((int)(remaining % (8*8)));
            remaining = (Py_ssize_t) (remaining / (8*8));
            dpos -= 2;
            memcpy(dpos, DIGIT_PAIRS_8 + digit_pos * 2, 2);
            last_one_off = (digit_pos < 8);
            break;
        case 'd':
            digit_pos = abs((int)(remaining % (10*10)));
            remaining = (Py_ssize_t) (remaining / (10*10));
            dpos -= 2;
            memcpy(dpos, DIGIT_PAIRS_10 + digit_pos * 2, 2);
            last_one_off = (digit_pos < 10);
            break;
        case 'x':
            *(--dpos) = hex_digits[abs((int)(remaining % 16))];
            remaining = (Py_ssize_t) (remaining / 16);
            break;
        default:
            assert(0);
            break;
        }
    } while (unlikely(remaining != 0));
    assert(!last_one_off || *dpos == '0');
    dpos += last_one_off;
    length = end - dpos;
    ulength = length;
    prepend_sign = 0;
    if (!is_unsigned && value <= neg_one) {
        if (padding_char == ' ' || width <= length + 1) {
            *(--dpos) = '-';
            ++length;
        } else {
            prepend_sign = 1;
        }
        ++ulength;
    }
    if (width > ulength) {
        ulength = width;
    }
    if (ulength == 1) {
        return PyUnicode_FromOrdinal(*dpos);
    }
    return __Pyx_PyUnicode_BuildFromAscii(ulength, dpos, (int) length, prepend_sign, padding_char);
}

/* JoinPyUnicode */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      Py_UCS4 max_char) {
#if CYTHON_USE_UNICODE_INTERNALS && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    PyObject *result_uval;
    int result_ukind, kind_shift;
    Py_ssize_t i, char_pos;
    void *result_udata;
    CYTHON_MAYBE_UNUSED_VAR(max_char);
#if CYTHON_PEP393_ENABLED
    result_uval = PyUnicode_New(result_ulength, max_char);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = (max_char <= 255) ? PyUnicode_1BYTE_KIND : (max_char <= 65535) ? PyUnicode_2BYTE_KIND : PyUnicode_4BYTE_KIND;
    kind_shift = (result_ukind == PyUnicode_4BYTE_KIND) ? 2 : result_ukind - 1;
    result_udata = PyUnicode_DATA(result_uval);
#else
    result_uval = PyUnicode_FromUnicode(NULL, result_ulength);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = sizeof(Py_UNICODE);
    kind_shift = (result_ukind == 4) ? 2 : result_ukind - 1;
    result_udata = PyUnicode_AS_UNICODE(result_uval);
#endif
    assert(kind_shift == 2 || kind_shift == 1 || kind_shift == 0);
    char_pos = 0;
    for (i=0; i < value_count; i++) {
        int ukind;
        Py_ssize_t ulength;
        void *udata;
        PyObject *uval = PyTuple_GET_ITEM(value_tuple, i);
        if (unlikely(__Pyx_PyUnicode_READY(uval)))
            goto bad;
        ulength = __Pyx_PyUnicode_GET_LENGTH(uval);
        if (unlikely(!ulength))
            continue;
        if (unlikely((PY_SSIZE_T_MAX >> kind_shift) - ulength < char_pos))
            goto overflow;
        ukind = __Pyx_PyUnicode_KIND(uval);
        udata = __Pyx_PyUnicode_DATA(uval);
        if (!CYTHON_PEP393_ENABLED || ukind == result_ukind) {
            memcpy((char *)result_udata + (char_pos << kind_shift), udata, (size_t) (ulength << kind_shift));
        } else {
            #if PY_VERSION_HEX >= 0x030d0000
            if (unlikely(PyUnicode_CopyCharacters(result_uval, char_pos, uval, 0, ulength) < 0)) goto bad;
            #elif CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030300F0 || defined(_PyUnicode_FastCopyCharacters)
            _PyUnicode_FastCopyCharacters(result_uval, char_pos, uval, 0, ulength);
            #else
            Py_ssize_t j;
            for (j=0; j < ulength; j++) {
                Py_UCS4 uchar = __Pyx_PyUnicode_READ(ukind, udata, j);
                __Pyx_PyUnicode_WRITE(result_ukind, result_udata, char_pos+j, uchar);
            }
            #endif
        }
        char_pos += ulength;
    }
    return result_uval;
overflow:
    PyErr_SetString(PyExc_OverflowError, "join() result is too long for a Python string");
bad:
    Py_DECREF(result_uval);
    return NULL;
#else
    CYTHON_UNUSED_VAR(max_char);
    CYTHON_UNUSED_VAR(result_ulength);
    CYTHON_UNUSED_VAR(value_count);
    return PyUnicode_Join(__pyx_empty_unicode, value_tuple);
#endif
}

/* GetAttr */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {
#if CYTHON_USE_TYPE_SLOTS
#if PY_MAJOR_VERSION >= 3
    if (likely(PyUnicode_Check(n)))
#else
    if (likely(PyString_Check(n)))
#endif
        return __Pyx_PyObject_GetAttrStr(o, n);
#endif
    return PyObject_GetAttr(o, n);
}

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (unlikely(!j)) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PyMappingMethods *mm = Py_TYPE(o)->tp_as_mapping;
        PySequenceMethods *sm = Py_TYPE(o)->tp_as_sequence;
        if (mm && mm->mp_subscript) {
            PyObject *r, *key = PyInt_FromSsize_t(i);
            if (unlikely(!key)) return NULL;
            r = mm->mp_subscript(o, key);
            Py_DECREF(key);
            return r;
        }
        if (likely(sm && sm->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(sm->sq_length)) {
                Py_ssize_t l = sm->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return sm->sq_item(o, i);
        }
    }
#else
    if (is_list || !PyMapping_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* PyObjectCallOneArg */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *args[2] = {NULL, arg};
    return __Pyx_PyObject_FastCall(func, args+1, 1 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* ObjectGetItem */
#if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject *index) {
    PyObject *runerr = NULL;
    Py_ssize_t key_value;
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        __Pyx_TypeName index_type_name = __Pyx_PyType_GetName(Py_TYPE(index));
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError,
            "cannot fit '" __Pyx_FMT_TYPENAME "' into an index-sized integer", index_type_name);
        __Pyx_DECREF_TypeName(index_type_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem_Slow(PyObject *obj, PyObject *key) {
    __Pyx_TypeName obj_type_name;
    if (likely(PyType_Check(obj))) {
        PyObject *meth = __Pyx_PyObject_GetAttrStrNoError(obj, __pyx_n_s_class_getitem);
        if (!meth) {
            PyErr_Clear();
        } else {
            PyObject *result = __Pyx_PyObject_CallOneArg(meth, key);
            Py_DECREF(meth);
            return result;
        }
    }
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError,
        "'" __Pyx_FMT_TYPENAME "' object is not subscriptable", obj_type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject *key) {
    PyTypeObject *tp = Py_TYPE(obj);
    PyMappingMethods *mm = tp->tp_as_mapping;
    PySequenceMethods *sm = tp->tp_as_sequence;
    if (likely(mm && mm->mp_subscript)) {
        return mm->mp_subscript(obj, key);
    }
    if (likely(sm && sm->sq_item)) {
        return __Pyx_PyObject_GetIndex(obj, key);
    }
    return __Pyx_PyObject_GetItem_Slow(obj, key);
}
#endif

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kw,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kw, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    if (CYTHON_METH_FASTCALL && likely(PyTuple_Check(kw))) {
        Py_ssize_t kwsize;
#if CYTHON_ASSUME_SAFE_MACROS
        kwsize = PyTuple_GET_SIZE(kw);
#else
        kwsize = PyTuple_Size(kw);
        if (kwsize < 0) return 0;
#endif
        if (unlikely(kwsize == 0))
            return 1;
        if (!kw_allowed) {
#if CYTHON_ASSUME_SAFE_MACROS
            key = PyTuple_GET_ITEM(kw, 0);
#else
            key = PyTuple_GetItem(kw, pos);
            if (!key) return 0;
#endif
            goto invalid_keyword;
        }
#if PY_VERSION_HEX < 0x03090000
        for (pos = 0; pos < kwsize; pos++) {
#if CYTHON_ASSUME_SAFE_MACROS
            key = PyTuple_GET_ITEM(kw, pos);
#else
            key = PyTuple_GetItem(kw, pos);
            if (!key) return 0;
#endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
        }
#endif
        return 1;
    }
    while (PyDict_Next(kw, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if (!kw_allowed && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    #if PY_MAJOR_VERSION < 3
    PyErr_Format(PyExc_TypeError,
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
    PyErr_Format(PyExc_TypeError,
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* DivInt[Py_ssize_t] */
static CYTHON_INLINE Py_ssize_t __Pyx_div_Py_ssize_t(Py_ssize_t a, Py_ssize_t b) {
    Py_ssize_t q = a / b;
    Py_ssize_t r = a - q*b;
    q -= ((r != 0) & ((r ^ b) < 0));
    return q;
}

/* GetAttr3 */
#if __PYX_LIMITED_VERSION_HEX < 0x030d00A1
static PyObject *__Pyx_GetAttr3Default(PyObject *d) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    Py_INCREF(d);
    return d;
}
#endif
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *o, PyObject *n, PyObject *d) {
    PyObject *r;
#if __PYX_LIMITED_VERSION_HEX >= 0x030d00A1
    int res = PyObject_GetOptionalAttr(o, n, &r);
    return (res != 0) ? r : __Pyx_NewRef(d);
#else
  #if CYTHON_USE_TYPE_SLOTS
    if (likely(PyString_Check(n))) {
        r = __Pyx_PyObject_GetAttrStrNoError(o, n);
        if (unlikely(!r) && likely(!PyErr_Occurred())) {
            r = __Pyx_NewRef(d);
        }
        return r;
    }
  #endif
    r = PyObject_GetAttr(o, n);
    return (likely(r)) ? r : __Pyx_GetAttr3Default(d);
#endif
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && PY_VERSION_HEX < 0x030d0000
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#elif CYTHON_COMPILING_IN_LIMITED_API
    if (unlikely(!__pyx_m)) {
        return NULL;
    }
    result = PyObject_GetAttr(__pyx_m, name);
    if (likely(result)) {
        return result;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* RaiseNoneIterError */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    __Pyx_TypeName obj_type_name;
    __Pyx_TypeName type_name;
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    type_name = __Pyx_PyType_GetName(type);
    PyErr_Format(PyExc_TypeError,
                 "Cannot convert " __Pyx_FMT_TYPENAME " to " __Pyx_FMT_TYPENAME,
                 obj_type_name, type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    __Pyx_DECREF_TypeName(type_name);
    return 0;
}

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK && CYTHON_FAST_THREAD_STATE
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_value == NULL || exc_info->exc_value == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
  #if CYTHON_USE_EXC_INFO_STACK && PY_VERSION_HEX >= 0x030B00a4
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    PyObject *exc_value = exc_info->exc_value;
    if (exc_value == NULL || exc_value == Py_None) {
        *value = NULL;
        *type = NULL;
        *tb = NULL;
    } else {
        *value = exc_value;
        Py_INCREF(*value);
        *type = (PyObject*) Py_TYPE(exc_value);
        Py_INCREF(*type);
        *tb = PyException_GetTraceback(exc_value);
    }
  #elif CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
  #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
  #endif
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
  #if CYTHON_USE_EXC_INFO_STACK && PY_VERSION_HEX >= 0x030B00a4
    _PyErr_StackItem *exc_info = tstate->exc_info;
    PyObject *tmp_value = exc_info->exc_value;
    exc_info->exc_value = value;
    Py_XDECREF(tmp_value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
  #else
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
  #endif
}
#endif

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type = NULL, *local_value, *local_tb = NULL;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
  #if PY_VERSION_HEX >= 0x030C00A6
    local_value = tstate->current_exception;
    tstate->current_exception = 0;
    if (likely(local_value)) {
        local_type = (PyObject*) Py_TYPE(local_value);
        Py_INCREF(local_type);
        local_tb = PyException_GetTraceback(local_value);
    }
  #else
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
  #endif
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE && PY_VERSION_HEX >= 0x030C00A6
    if (unlikely(tstate->current_exception))
#elif CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
      #if PY_VERSION_HEX >= 0x030B00a4
        tmp_value = exc_info->exc_value;
        exc_info->exc_value = local_value;
        tmp_type = NULL;
        tmp_tb = NULL;
        Py_XDECREF(local_type);
        Py_XDECREF(local_tb);
      #else
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
      #endif
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* SwapException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
  #if CYTHON_USE_EXC_INFO_STACK && PY_VERSION_HEX >= 0x030B00a4
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_value = exc_info->exc_value;
    exc_info->exc_value = *value;
    if (tmp_value == NULL || tmp_value == Py_None) {
        Py_XDECREF(tmp_value);
        tmp_value = NULL;
        tmp_type = NULL;
        tmp_tb = NULL;
    } else {
        tmp_type = (PyObject*) Py_TYPE(tmp_value);
        Py_INCREF(tmp_type);
        #if CYTHON_COMPILING_IN_CPYTHON
        tmp_tb = ((PyBaseExceptionObject*) tmp_value)->traceback;
        Py_XINCREF(tmp_tb);
        #else
        tmp_tb = PyException_GetTraceback(tmp_value);
        #endif
    }
  #elif CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = *type;
    exc_info->exc_value = *value;
    exc_info->exc_traceback = *tb;
  #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
  #endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *module = 0;
    PyObject *empty_dict = 0;
    PyObject *empty_list = 0;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (unlikely(!py_import))
        goto bad;
    if (!from_list) {
        empty_list = PyList_New(0);
        if (unlikely(!empty_list))
            goto bad;
        from_list = empty_list;
    }
    #endif
    empty_dict = PyDict_New();
    if (unlikely(!empty_dict))
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.') != NULL) {
                module = PyImport_ImportModuleLevelObject(
                    name, __pyx_d, empty_dict, from_list, 1);
                if (unlikely(!module)) {
                    if (unlikely(!PyErr_ExceptionMatches(PyExc_ImportError)))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (unlikely(!py_level))
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, __pyx_d, empty_dict, from_list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, __pyx_d, empty_dict, from_list, level);
            #endif
        }
    }
bad:
    Py_XDECREF(empty_dict);
    Py_XDECREF(empty_list);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    return module;
}

/* ImportDottedModule */
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx__ImportDottedModule_Error(PyObject *name, PyObject *parts_tuple, Py_ssize_t count) {
    PyObject *partial_name = NULL, *slice = NULL, *sep = NULL;
    if (unlikely(PyErr_Occurred())) {
        PyErr_Clear();
    }
    if (likely(PyTuple_GET_SIZE(parts_tuple) == count)) {
        partial_name = name;
    } else {
        slice = PySequence_GetSlice(parts_tuple, 0, count);
        if (unlikely(!slice))
            goto bad;
        sep = PyUnicode_FromStringAndSize(".", 1);
        if (unlikely(!sep))
            goto bad;
        partial_name = PyUnicode_Join(sep, slice);
    }
    PyErr_Format(
#if PY_MAJOR_VERSION < 3
        PyExc_ImportError,
        "No module named '%s'", PyString_AS_STRING(partial_name));
#else
#if PY_VERSION_HEX >= 0x030600B1
        PyExc_ModuleNotFoundError,
#else
        PyExc_ImportError,
#endif
        "No module named '%U'", partial_name);
#endif
bad:
    Py_XDECREF(sep);
    Py_XDECREF(slice);
    Py_XDECREF(partial_name);
    return NULL;
}
#endif
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx__ImportDottedModule_Lookup(PyObject *name) {
    PyObject *imported_module;
#if PY_VERSION_HEX < 0x030700A1 || (CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM  < 0x07030400)
    PyObject *modules = PyImport_GetModuleDict();
    if (unlikely(!modules))
        return NULL;
    imported_module = __Pyx_PyDict_GetItemStr(modules, name);
    Py_XINCREF(imported_module);
#else
    imported_module = PyImport_GetModule(name);
#endif
    return imported_module;
}
#endif
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_ImportDottedModule_WalkParts(PyObject *module, PyObject *name, PyObject *parts_tuple) {
    Py_ssize_t i, nparts;
    nparts = PyTuple_GET_SIZE(parts_tuple);
    for (i=1; i < nparts && module; i++) {
        PyObject *part, *submodule;
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        part = PyTuple_GET_ITEM(parts_tuple, i);
#else
        part = PySequence_ITEM(parts_tuple, i);
#endif
        submodule = __Pyx_PyObject_GetAttrStrNoError(module, part);
#if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
        Py_DECREF(part);
#endif
        Py_DECREF(module);
        module = submodule;
    }
    if (unlikely(!module)) {
        return __Pyx__ImportDottedModule_Error(name, parts_tuple, i);
    }
    return module;
}
#endif
static PyObject *__Pyx__ImportDottedModule(PyObject *name, PyObject *parts_tuple) {
#if PY_MAJOR_VERSION < 3
    PyObject *module, *from_list, *star = __pyx_n_s__3;
    CYTHON_UNUSED_VAR(parts_tuple);
    from_list = PyList_New(1);
    if (unlikely(!from_list))
        return NULL;
    Py_INCREF(star);
    PyList_SET_ITEM(from_list, 0, star);
    module = __Pyx_Import(name, from_list, 0);
    Py_DECREF(from_list);
    return module;
#else
    PyObject *imported_module;
    PyObject *module = __Pyx_Import(name, NULL, 0);
    if (!parts_tuple || unlikely(!module))
        return module;
    imported_module = __Pyx__ImportDottedModule_Lookup(name);
    if (likely(imported_module)) {
        Py_DECREF(module);
        return imported_module;
    }
    PyErr_Clear();
    return __Pyx_ImportDottedModule_WalkParts(module, name, parts_tuple);
#endif
}
static PyObject *__Pyx_ImportDottedModule(PyObject *name, PyObject *parts_tuple) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030400B1
    PyObject *module = __Pyx__ImportDottedModule_Lookup(name);
    if (likely(module)) {
        PyObject *spec = __Pyx_PyObject_GetAttrStrNoError(module, __pyx_n_s_spec);
        if (likely(spec)) {
            PyObject *unsafe = __Pyx_PyObject_GetAttrStrNoError(spec, __pyx_n_s_initializing);
            if (likely(!unsafe || !__Pyx_PyObject_IsTrue(unsafe))) {
                Py_DECREF(spec);
                spec = NULL;
            }
            Py_XDECREF(unsafe);
        }
        if (likely(!spec)) {
            PyErr_Clear();
            return module;
        }
        Py_DECREF(spec);
        Py_DECREF(module);
    } else if (PyErr_Occurred()) {
        PyErr_Clear();
    }
#endif
    return __Pyx__ImportDottedModule(name, parts_tuple);
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = __Pyx_PyType_GetSlot(a, tp_base, PyTypeObject*);
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (cls == a || cls == b) return 1;
    mro = cls->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            PyObject *base = PyTuple_GET_ITEM(mro, i);
            if (base == (PyObject *)a || base == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(cls, a) || __Pyx_InBases(cls, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    if (exc_type1) {
        return __Pyx_IsAnySubtype2((PyTypeObject*)err, (PyTypeObject*)exc_type1, (PyTypeObject*)exc_type2);
    } else {
        return __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* PySequenceMultiply */
static PyObject* __Pyx_PySequence_Multiply_Generic(PyObject *seq, Py_ssize_t mul) {
    PyObject *result, *pymul = PyInt_FromSsize_t(mul);
    if (unlikely(!pymul))
        return NULL;
    result = PyNumber_Multiply(seq, pymul);
    Py_DECREF(pymul);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PySequence_Multiply(PyObject *seq, Py_ssize_t mul) {
#if CYTHON_USE_TYPE_SLOTS
    PyTypeObject *type = Py_TYPE(seq);
    if (likely(type->tp_as_sequence && type->tp_as_sequence->sq_repeat)) {
        return type->tp_as_sequence->sq_repeat(seq, mul);
    } else
#endif
    {
        return __Pyx_PySequence_Multiply_Generic(seq, mul);
    }
}

/* SetItemInt */
static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v) {
    int r;
    if (unlikely(!j)) return -1;
    r = PyObject_SetItem(o, j, v);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v, int is_list,
                                               CYTHON_NCP_UNUSED int wraparound, CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = (!wraparound) ? i : ((likely(i >= 0)) ? i : i + PyList_GET_SIZE(o));
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o)))) {
            PyObject* old = PyList_GET_ITEM(o, n);
            Py_INCREF(v);
            PyList_SET_ITEM(o, n, v);
            Py_DECREF(old);
            return 1;
        }
    } else {
        PyMappingMethods *mm = Py_TYPE(o)->tp_as_mapping;
        PySequenceMethods *sm = Py_TYPE(o)->tp_as_sequence;
        if (mm && mm->mp_ass_subscript) {
            int r;
            PyObject *key = PyInt_FromSsize_t(i);
            if (unlikely(!key)) return -1;
            r = mm->mp_ass_subscript(o, key, v);
            Py_DECREF(key);
            return r;
        }
        if (likely(sm && sm->sq_ass_item)) {
            if (wraparound && unlikely(i < 0) && likely(sm->sq_length)) {
                Py_ssize_t l = sm->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return -1;
                    PyErr_Clear();
                }
            }
            return sm->sq_ass_item(o, i, v);
        }
    }
#else
    if (is_list || !PyMapping_Check(o))
    {
        return PySequence_SetItem(o, i, v);
    }
#endif
    return __Pyx_SetItemInt_Generic(o, PyInt_FromSsize_t(i), v);
}

/* RaiseUnboundLocalError */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

/* DivInt[long] */
static CYTHON_INLINE long __Pyx_div_long(long a, long b) {
    long q = a / b;
    long r = a - q*b;
    q -= ((r != 0) & ((r ^ b) < 0));
    return q;
}

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        const char* module_name_str = 0;
        PyObject* module_name = 0;
        PyObject* module_dot = 0;
        PyObject* full_name = 0;
        PyErr_Clear();
        module_name_str = PyModule_GetName(module);
        if (unlikely(!module_name_str)) { goto modbad; }
        module_name = PyUnicode_FromString(module_name_str);
        if (unlikely(!module_name)) { goto modbad; }
        module_dot = PyUnicode_Concat(module_name, __pyx_kp_u__2);
        if (unlikely(!module_dot)) { goto modbad; }
        full_name = PyUnicode_Concat(module_dot, name);
        if (unlikely(!full_name)) { goto modbad; }
        #if PY_VERSION_HEX < 0x030700A1 || (CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM  < 0x07030400)
        {
            PyObject *modules = PyImport_GetModuleDict();
            if (unlikely(!modules))
                goto modbad;
            value = PyObject_GetItem(modules, full_name);
        }
        #else
        value = PyImport_GetModule(full_name);
        #endif
      modbad:
        Py_XDECREF(full_name);
        Py_XDECREF(module_dot);
        Py_XDECREF(module_name);
    }
    if (unlikely(!value)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* HasAttr */
#if __PYX_LIMITED_VERSION_HEX < 0x030d00A1
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *o, PyObject *n) {
    PyObject *r;
    if (unlikely(!__Pyx_PyBaseString_Check(n))) {
        PyErr_SetString(PyExc_TypeError,
                        "hasattr(): attribute name must be string");
        return -1;
    }
    r = __Pyx_GetAttr(o, n);
    if (!r) {
        PyErr_Clear();
        return 0;
    } else {
        Py_DECREF(r);
        return 1;
    }
}
#endif

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
    else state = (PyGILState_STATE)0;
#endif
    CYTHON_UNUSED_VAR(clineno);
    CYTHON_UNUSED_VAR(lineno);
    CYTHON_UNUSED_VAR(filename);
    CYTHON_MAYBE_UNUSED_VAR(nogil);
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check) {
    CYTHON_MAYBE_UNUSED_VAR(intval);
    CYTHON_MAYBE_UNUSED_VAR(inplace);
    CYTHON_UNUSED_VAR(zerodivision_check);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
        
            x = (long)((unsigned long)a + (unsigned long)b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        if (unlikely(__Pyx_PyLong_IsZero(op1))) {
            return __Pyx_NewRef(op2);
        }
        if (likely(__Pyx_PyLong_IsCompact(op1))) {
            a = __Pyx_PyLong_CompactValue(op1);
        } else {
            const digit* digits = __Pyx_PyLong_Digits(op1);
            const Py_ssize_t size = __Pyx_PyLong_SignedDigitCount(op1);
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
#if CYTHON_COMPILING_IN_LIMITED_API
        double a = __pyx_PyFloat_AsDouble(op1);
#else
        double a = PyFloat_AS_DOUBLE(op1);
#endif
            double result;
            
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* PyIntCompare */
static CYTHON_INLINE int __Pyx_PyInt_BoolEqObjC(PyObject *op1, PyObject *op2, long intval, long inplace) {
    CYTHON_MAYBE_UNUSED_VAR(intval);
    CYTHON_UNUSED_VAR(inplace);
    if (op1 == op2) {
        return 1;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        return (a == b);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        int unequal;
        unsigned long uintval;
        Py_ssize_t size = __Pyx_PyLong_DigitCount(op1);
        const digit* digits = __Pyx_PyLong_Digits(op1);
        if (intval == 0) {
            return (__Pyx_PyLong_IsZero(op1) == 1);
        } else if (intval < 0) {
            if (__Pyx_PyLong_IsNonNeg(op1))
                return 0;
            intval = -intval;
        } else {
            if (__Pyx_PyLong_IsNeg(op1))
                return 0;
        }
        uintval = (unsigned long) intval;
#if PyLong_SHIFT * 4 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 4)) {
            unequal = (size != 5) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[4] != ((uintval >> (4 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 3 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 3)) {
            unequal = (size != 4) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 2 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 2)) {
            unequal = (size != 3) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 1 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 1)) {
            unequal = (size != 2) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
            unequal = (size != 1) || (((unsigned long) digits[0]) != (uintval & (unsigned long) PyLong_MASK));
        return (unequal == 0);
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
#if CYTHON_COMPILING_IN_LIMITED_API
        double a = __pyx_PyFloat_AsDouble(op1);
#else
        double a = PyFloat_AS_DOUBLE(op1);
#endif
        return ((double)a == (double)b);
    }
    return __Pyx_PyObject_IsTrueAndDecref(
        PyObject_RichCompare(op1, op2, Py_EQ));
}

/* PyFloatBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyFloat_TrueDivideCObj(PyObject *op1, PyObject *op2, double floatval, int inplace, int zerodivision_check) {
    const double a = floatval;
    double b, result;
    CYTHON_UNUSED_VAR(inplace);
    CYTHON_UNUSED_VAR(zerodivision_check);
    if (likely(PyFloat_CheckExact(op2))) {
#if CYTHON_COMPILING_IN_LIMITED_API
        b = __pyx_PyFloat_AsDouble(op2);
#else
        b = PyFloat_AS_DOUBLE(op2);
#endif
        if (unlikely(zerodivision_check && ((b) == 0.0))) { PyErr_SetString(PyExc_ZeroDivisionError, "float division by zero"); return NULL;}
    } else
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op2))) {
        b = (double) PyInt_AS_LONG(op2);
        if (unlikely(zerodivision_check && ((b) == 0.0))) { PyErr_SetString(PyExc_ZeroDivisionError, "float division by zero"); return NULL;}
    } else
    #endif
    if (likely(PyLong_CheckExact(op2))) {
        #if CYTHON_USE_PYLONG_INTERNALS
        if (__Pyx_PyLong_IsZero(op2)) {
            b = 0.0;
            if (unlikely(zerodivision_check && ((b) == 0.0))) { PyErr_SetString(PyExc_ZeroDivisionError, "float division by zero"); return NULL;}
        } else if (__Pyx_PyLong_IsCompact(op2)) {
            b = (double) __Pyx_PyLong_CompactValue(op2);
        } else {
            const digit* digits = __Pyx_PyLong_Digits(op2);
            const Py_ssize_t size = __Pyx_PyLong_SignedDigitCount(op2);
            switch (size) {
                case -2:
                case 2:
                    if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (1 * PyLong_SHIFT < 53))) {
                        b = (double) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        if ((8 * sizeof(unsigned long) < 53) || (2 * PyLong_SHIFT < 53) || (b < (double) ((PY_LONG_LONG)1 << 53))) {
                            if (size == -2)
                                b = -b;
                            break;
                        }
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                case 3:
                    if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (2 * PyLong_SHIFT < 53))) {
                        b = (double) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        if ((8 * sizeof(unsigned long) < 53) || (3 * PyLong_SHIFT < 53) || (b < (double) ((PY_LONG_LONG)1 << 53))) {
                            if (size == -3)
                                b = -b;
                            break;
                        }
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                case 4:
                    if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (3 * PyLong_SHIFT < 53))) {
                        b = (double) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        if ((8 * sizeof(unsigned long) < 53) || (4 * PyLong_SHIFT < 53) || (b < (double) ((PY_LONG_LONG)1 << 53))) {
                            if (size == -4)
                                b = -b;
                            break;
                        }
                    }
                    CYTHON_FALLTHROUGH;
                default:
        #endif
                    b = PyLong_AsDouble(op2);
                    if (unlikely(b == -1.0 && PyErr_Occurred())) return NULL;
                    #if !CYTHON_USE_PYLONG_INTERNALS
                    if (unlikely(zerodivision_check && ((b) == 0.0))) { PyErr_SetString(PyExc_ZeroDivisionError, "float division by zero"); return NULL;}
                    #endif
        #if CYTHON_USE_PYLONG_INTERNALS
            }
        }
        #endif
    } else {
        return (inplace ? PyNumber_InPlaceTrueDivide : PyNumber_TrueDivide)(op1, op2);
    }
        PyFPE_START_PROTECT("divide", return NULL)
        result = a / b;
        PyFPE_END_PROTECT(result)
        return PyFloat_FromDouble(result);
}
#endif

/* PyObjectCallNoArg */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
    PyObject *arg[2] = {NULL, NULL};
    return __Pyx_PyObject_FastCall(func, arg + 1, 0 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_TrueDivideObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check) {
    CYTHON_MAYBE_UNUSED_VAR(intval);
    CYTHON_MAYBE_UNUSED_VAR(inplace);
    CYTHON_UNUSED_VAR(zerodivision_check);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        
            if (8 * sizeof(long) <= 53 || likely(labs(a) <= ((PY_LONG_LONG)1 << 53))) {
                return PyFloat_FromDouble((double)a / (double)b);
            }
            return PyInt_Type.tp_as_number->nb_true_divide(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
        if (unlikely(__Pyx_PyLong_IsZero(op1))) {
        }
        if (likely(__Pyx_PyLong_IsCompact(op1))) {
            a = __Pyx_PyLong_CompactValue(op1);
        } else {
            const digit* digits = __Pyx_PyLong_Digits(op1);
            const Py_ssize_t size = __Pyx_PyLong_SignedDigitCount(op1);
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT && 1 * PyLong_SHIFT < 53) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT && 1 * PyLong_SHIFT < 53) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT && 2 * PyLong_SHIFT < 53) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT && 2 * PyLong_SHIFT < 53) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT && 3 * PyLong_SHIFT < 53) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT && 3 * PyLong_SHIFT < 53) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_true_divide(op1, op2);
            }
        }
                if ((8 * sizeof(long) <= 53 || likely(labs(a) <= ((PY_LONG_LONG)1 << 53)))
                        || __Pyx_PyLong_DigitCount(op1) <= 52 / PyLong_SHIFT) {
                    return PyFloat_FromDouble((double)a / (double)b);
                }
                return PyLong_Type.tp_as_number->nb_true_divide(op1, op2);
            return PyLong_FromLong(x);
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
#if CYTHON_COMPILING_IN_LIMITED_API
        double a = __pyx_PyFloat_AsDouble(op1);
#else
        double a = PyFloat_AS_DOUBLE(op1);
#endif
            double result;
            
            PyFPE_START_PROTECT("divide", return NULL)
            result = ((double)a) / (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceTrueDivide : PyNumber_TrueDivide)(op1, op2);
}
#endif

/* PyObjectSetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#endif

/* SliceObject */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(PyObject* obj,
        Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** _py_start, PyObject** _py_stop, PyObject** _py_slice,
        int has_cstart, int has_cstop, int wraparound) {
    __Pyx_TypeName obj_type_name;
#if CYTHON_USE_TYPE_SLOTS
    PyMappingMethods* mp;
#if PY_MAJOR_VERSION < 3
    PySequenceMethods* ms = Py_TYPE(obj)->tp_as_sequence;
    if (likely(ms && ms->sq_slice)) {
        if (!has_cstart) {
            if (_py_start && (*_py_start != Py_None)) {
                cstart = __Pyx_PyIndex_AsSsize_t(*_py_start);
                if ((cstart == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstart = 0;
        }
        if (!has_cstop) {
            if (_py_stop && (*_py_stop != Py_None)) {
                cstop = __Pyx_PyIndex_AsSsize_t(*_py_stop);
                if ((cstop == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstop = PY_SSIZE_T_MAX;
        }
        if (wraparound && unlikely((cstart < 0) | (cstop < 0)) && likely(ms->sq_length)) {
            Py_ssize_t l = ms->sq_length(obj);
            if (likely(l >= 0)) {
                if (cstop < 0) {
                    cstop += l;
                    if (cstop < 0) cstop = 0;
                }
                if (cstart < 0) {
                    cstart += l;
                    if (cstart < 0) cstart = 0;
                }
            } else {
                if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                    goto bad;
                PyErr_Clear();
            }
        }
        return ms->sq_slice(obj, cstart, cstop);
    }
#else
    CYTHON_UNUSED_VAR(wraparound);
#endif
    mp = Py_TYPE(obj)->tp_as_mapping;
    if (likely(mp && mp->mp_subscript))
#else
    CYTHON_UNUSED_VAR(wraparound);
#endif
    {
        PyObject* result;
        PyObject *py_slice, *py_start, *py_stop;
        if (_py_slice) {
            py_slice = *_py_slice;
        } else {
            PyObject* owned_start = NULL;
            PyObject* owned_stop = NULL;
            if (_py_start) {
                py_start = *_py_start;
            } else {
                if (has_cstart) {
                    owned_start = py_start = PyInt_FromSsize_t(cstart);
                    if (unlikely(!py_start)) goto bad;
                } else
                    py_start = Py_None;
            }
            if (_py_stop) {
                py_stop = *_py_stop;
            } else {
                if (has_cstop) {
                    owned_stop = py_stop = PyInt_FromSsize_t(cstop);
                    if (unlikely(!py_stop)) {
                        Py_XDECREF(owned_start);
                        goto bad;
                    }
                } else
                    py_stop = Py_None;
            }
            py_slice = PySlice_New(py_start, py_stop, Py_None);
            Py_XDECREF(owned_start);
            Py_XDECREF(owned_stop);
            if (unlikely(!py_slice)) goto bad;
        }
#if CYTHON_USE_TYPE_SLOTS
        result = mp->mp_subscript(obj, py_slice);
#else
        result = PyObject_GetItem(obj, py_slice);
#endif
        if (!_py_slice) {
            Py_DECREF(py_slice);
        }
        return result;
    }
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError,
        "'" __Pyx_FMT_TYPENAME "' object is unsliceable", obj_type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
bad:
    return NULL;
}

/* PyIntCompare */
static CYTHON_INLINE int __Pyx_PyInt_BoolNeObjC(PyObject *op1, PyObject *op2, long intval, long inplace) {
    CYTHON_MAYBE_UNUSED_VAR(intval);
    CYTHON_UNUSED_VAR(inplace);
    if (op1 == op2) {
        return 0;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        return (a != b);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        int unequal;
        unsigned long uintval;
        Py_ssize_t size = __Pyx_PyLong_DigitCount(op1);
        const digit* digits = __Pyx_PyLong_Digits(op1);
        if (intval == 0) {
            return (__Pyx_PyLong_IsZero(op1) != 1);
        } else if (intval < 0) {
            if (__Pyx_PyLong_IsNonNeg(op1))
                return 1;
            intval = -intval;
        } else {
            if (__Pyx_PyLong_IsNeg(op1))
                return 1;
        }
        uintval = (unsigned long) intval;
#if PyLong_SHIFT * 4 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 4)) {
            unequal = (size != 5) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[4] != ((uintval >> (4 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 3 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 3)) {
            unequal = (size != 4) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 2 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 2)) {
            unequal = (size != 3) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 1 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 1)) {
            unequal = (size != 2) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
            unequal = (size != 1) || (((unsigned long) digits[0]) != (uintval & (unsigned long) PyLong_MASK));
        return (unequal != 0);
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
#if CYTHON_COMPILING_IN_LIMITED_API
        double a = __pyx_PyFloat_AsDouble(op1);
#else
        double a = PyFloat_AS_DOUBLE(op1);
#endif
        return ((double)a != (double)b);
    }
    return __Pyx_PyObject_IsTrueAndDecref(
        PyObject_RichCompare(op1, op2, Py_NE));
}

/* CallNextTpTraverse */
static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse) {
    PyTypeObject* type = Py_TYPE(obj);
    traverseproc tp_traverse = NULL;
    while (type && __Pyx_PyType_GetSlot(type, tp_traverse, traverseproc) != current_tp_traverse)
        type = __Pyx_PyType_GetSlot(type, tp_base, PyTypeObject*);
    while (type && (tp_traverse = __Pyx_PyType_GetSlot(type, tp_traverse, traverseproc)) == current_tp_traverse)
        type = __Pyx_PyType_GetSlot(type, tp_base, PyTypeObject*);
    if (type && tp_traverse)
        return tp_traverse(obj, v, a);
    return 0;
}

/* CallNextTpClear */
static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_clear) {
    PyTypeObject* type = Py_TYPE(obj);
    inquiry tp_clear = NULL;
    while (type && __Pyx_PyType_GetSlot(type, tp_clear, inquiry) != current_tp_clear)
        type = __Pyx_PyType_GetSlot(type, tp_base, PyTypeObject*);
    while (type && (tp_clear = __Pyx_PyType_GetSlot(type, tp_clear, inquiry)) == current_tp_clear)
        type = __Pyx_PyType_GetSlot(type, tp_base, PyTypeObject*);
    if (type && tp_clear)
        tp_clear(obj);
}

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    __Pyx_TypeName type_name = __Pyx_PyType_GetName(tp);
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%U'",
                 type_name, attr_name);
#else
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%.400s'",
                 type_name, PyString_AS_STRING(attr_name));
#endif
    __Pyx_DECREF_TypeName(type_name);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* FixUpExtensionType */
#if CYTHON_USE_TYPE_SPECS
static int __Pyx_fix_up_extension_type_from_spec(PyType_Spec *spec, PyTypeObject *type) {
#if PY_VERSION_HEX > 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    CYTHON_UNUSED_VAR(spec);
    CYTHON_UNUSED_VAR(type);
#else
    const PyType_Slot *slot = spec->slots;
    while (slot && slot->slot && slot->slot != Py_tp_members)
        slot++;
    if (slot && slot->slot == Py_tp_members) {
        int changed = 0;
#if !(PY_VERSION_HEX <= 0x030900b1 && CYTHON_COMPILING_IN_CPYTHON)
        const
#endif
            PyMemberDef *memb = (PyMemberDef*) slot->pfunc;
        while (memb && memb->name) {
            if (memb->name[0] == '_' && memb->name[1] == '_') {
#if PY_VERSION_HEX < 0x030900b1
                if (strcmp(memb->name, "__weaklistoffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
                    type->tp_weaklistoffset = memb->offset;
                    changed = 1;
                }
                else if (strcmp(memb->name, "__dictoffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
                    type->tp_dictoffset = memb->offset;
                    changed = 1;
                }
#if CYTHON_METH_FASTCALL
                else if (strcmp(memb->name, "__vectorcalloffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
#if PY_VERSION_HEX >= 0x030800b4
                    type->tp_vectorcall_offset = memb->offset;
#else
                    type->tp_print = (printfunc) memb->offset;
#endif
                    changed = 1;
                }
#endif
#else
                if ((0));
#endif
#if PY_VERSION_HEX <= 0x030900b1 && CYTHON_COMPILING_IN_CPYTHON
                else if (strcmp(memb->name, "__module__") == 0) {
                    PyObject *descr;
                    assert(memb->type == T_OBJECT);
                    assert(memb->flags == 0 || memb->flags == READONLY);
                    descr = PyDescr_NewMember(type, memb);
                    if (unlikely(!descr))
                        return -1;
                    if (unlikely(PyDict_SetItem(type->tp_dict, PyDescr_NAME(descr), descr) < 0)) {
                        Py_DECREF(descr);
                        return -1;
                    }
                    Py_DECREF(descr);
                    changed = 1;
                }
#endif
            }
            memb++;
        }
        if (changed)
            PyType_Modified(type);
    }
#endif
    return 0;
}
#endif

/* PyObjectGetMethod */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    __Pyx_TypeName type_name;
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if defined(Py_TPFLAGS_METHOD_DESCRIPTOR) && Py_TPFLAGS_METHOD_DESCRIPTOR
        if (__Pyx_PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_METHOD_DESCRIPTOR))
#elif PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_IS_TYPE(descr, &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || __Pyx_IS_TYPE(descr, &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (likely(descr != NULL)) {
        *method = descr;
        return 0;
    }
    type_name = __Pyx_PyType_GetName(tp);
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%U'",
                 type_name, name);
#else
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%.400s'",
                 type_name, PyString_AS_STRING(name));
#endif
    __Pyx_DECREF_TypeName(type_name);
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod0 */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {
    PyObject *method = NULL, *result = NULL;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_CallOneArg(method, obj);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) goto bad;
    result = __Pyx_PyObject_CallNoArg(method);
    Py_DECREF(method);
bad:
    return result;
}

/* ValidateBasesTuple */
#if CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API || CYTHON_USE_TYPE_SPECS
static int __Pyx_validate_bases_tuple(const char *type_name, Py_ssize_t dictoffset, PyObject *bases) {
    Py_ssize_t i, n;
#if CYTHON_ASSUME_SAFE_MACROS
    n = PyTuple_GET_SIZE(bases);
#else
    n = PyTuple_Size(bases);
    if (n < 0) return -1;
#endif
    for (i = 1; i < n; i++)
    {
#if CYTHON_AVOID_BORROWED_REFS
        PyObject *b0 = PySequence_GetItem(bases, i);
        if (!b0) return -1;
#elif CYTHON_ASSUME_SAFE_MACROS
        PyObject *b0 = PyTuple_GET_ITEM(bases, i);
#else
        PyObject *b0 = PyTuple_GetItem(bases, i);
        if (!b0) return -1;
#endif
        PyTypeObject *b;
#if PY_MAJOR_VERSION < 3
        if (PyClass_Check(b0))
        {
            PyErr_Format(PyExc_TypeError, "base class '%.200s' is an old-style class",
                         PyString_AS_STRING(((PyClassObject*)b0)->cl_name));
#if CYTHON_AVOID_BORROWED_REFS
            Py_DECREF(b0);
#endif
            return -1;
        }
#endif
        b = (PyTypeObject*) b0;
        if (!__Pyx_PyType_HasFeature(b, Py_TPFLAGS_HEAPTYPE))
        {
            __Pyx_TypeName b_name = __Pyx_PyType_GetName(b);
            PyErr_Format(PyExc_TypeError,
                "base class '" __Pyx_FMT_TYPENAME "' is not a heap type", b_name);
            __Pyx_DECREF_TypeName(b_name);
#if CYTHON_AVOID_BORROWED_REFS
            Py_DECREF(b0);
#endif
            return -1;
        }
        if (dictoffset == 0)
        {
            Py_ssize_t b_dictoffset = 0;
#if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
            b_dictoffset = b->tp_dictoffset;
#else
            PyObject *py_b_dictoffset = PyObject_GetAttrString((PyObject*)b, "__dictoffset__");
            if (!py_b_dictoffset) goto dictoffset_return;
            b_dictoffset = PyLong_AsSsize_t(py_b_dictoffset);
            Py_DECREF(py_b_dictoffset);
            if (b_dictoffset == -1 && PyErr_Occurred()) goto dictoffset_return;
#endif
            if (b_dictoffset) {
                {
                    __Pyx_TypeName b_name = __Pyx_PyType_GetName(b);
                    PyErr_Format(PyExc_TypeError,
                        "extension type '%.200s' has no __dict__ slot, "
                        "but base type '" __Pyx_FMT_TYPENAME "' has: "
                        "either add 'cdef dict __dict__' to the extension type "
                        "or add '__slots__ = [...]' to the base type",
                        type_name, b_name);
                    __Pyx_DECREF_TypeName(b_name);
                }
#if !(CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY)
              dictoffset_return:
#endif
#if CYTHON_AVOID_BORROWED_REFS
                Py_DECREF(b0);
#endif
                return -1;
            }
        }
#if CYTHON_AVOID_BORROWED_REFS
        Py_DECREF(b0);
#endif
    }
    return 0;
}
#endif

/* PyType_Ready */
static int __Pyx_PyType_Ready(PyTypeObject *t) {
#if CYTHON_USE_TYPE_SPECS || !(CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API) || defined(PYSTON_MAJOR_VERSION)
    (void)__Pyx_PyObject_CallMethod0;
#if CYTHON_USE_TYPE_SPECS
    (void)__Pyx_validate_bases_tuple;
#endif
    return PyType_Ready(t);
#else
    int r;
    PyObject *bases = __Pyx_PyType_GetSlot(t, tp_bases, PyObject*);
    if (bases && unlikely(__Pyx_validate_bases_tuple(t->tp_name, t->tp_dictoffset, bases) == -1))
        return -1;
#if PY_VERSION_HEX >= 0x03050000 && !defined(PYSTON_MAJOR_VERSION)
    {
        int gc_was_enabled;
    #if PY_VERSION_HEX >= 0x030A00b1
        gc_was_enabled = PyGC_Disable();
        (void)__Pyx_PyObject_CallMethod0;
    #else
        PyObject *ret, *py_status;
        PyObject *gc = NULL;
        #if PY_VERSION_HEX >= 0x030700a1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM+0 >= 0x07030400)
        gc = PyImport_GetModule(__pyx_kp_u_gc);
        #endif
        if (unlikely(!gc)) gc = PyImport_Import(__pyx_kp_u_gc);
        if (unlikely(!gc)) return -1;
        py_status = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_isenabled);
        if (unlikely(!py_status)) {
            Py_DECREF(gc);
            return -1;
        }
        gc_was_enabled = __Pyx_PyObject_IsTrue(py_status);
        Py_DECREF(py_status);
        if (gc_was_enabled > 0) {
            ret = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_disable);
            if (unlikely(!ret)) {
                Py_DECREF(gc);
                return -1;
            }
            Py_DECREF(ret);
        } else if (unlikely(gc_was_enabled == -1)) {
            Py_DECREF(gc);
            return -1;
        }
    #endif
        t->tp_flags |= Py_TPFLAGS_HEAPTYPE;
#if PY_VERSION_HEX >= 0x030A0000
        t->tp_flags |= Py_TPFLAGS_IMMUTABLETYPE;
#endif
#else
        (void)__Pyx_PyObject_CallMethod0;
#endif
    r = PyType_Ready(t);
#if PY_VERSION_HEX >= 0x03050000 && !defined(PYSTON_MAJOR_VERSION)
        t->tp_flags &= ~Py_TPFLAGS_HEAPTYPE;
    #if PY_VERSION_HEX >= 0x030A00b1
        if (gc_was_enabled)
            PyGC_Enable();
    #else
        if (gc_was_enabled) {
            PyObject *tp, *v, *tb;
            PyErr_Fetch(&tp, &v, &tb);
            ret = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_enable);
            if (likely(ret || r == -1)) {
                Py_XDECREF(ret);
                PyErr_Restore(tp, v, tb);
            } else {
                Py_XDECREF(tp);
                Py_XDECREF(v);
                Py_XDECREF(tb);
                r = -1;
            }
        }
        Py_DECREF(gc);
    #endif
    }
#endif
    return r;
#endif
}

/* SetupReduce */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStrNoError(meth, __pyx_n_s_name_2);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_getstate = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
    PyObject *getstate = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    getstate = _PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate);
#else
    getstate = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_getstate);
    if (!getstate && PyErr_Occurred()) {
        goto __PYX_BAD;
    }
#endif
    if (getstate) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_getstate = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_getstate);
#else
        object_getstate = __Pyx_PyObject_GetAttrStrNoError((PyObject*)&PyBaseObject_Type, __pyx_n_s_getstate);
        if (!object_getstate && PyErr_Occurred()) {
            goto __PYX_BAD;
        }
#endif
        if (object_getstate != getstate) {
            goto __PYX_GOOD;
        }
    }
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred()) {
        __Pyx_TypeName type_obj_name =
            __Pyx_PyType_GetName((PyTypeObject*)type_obj);
        PyErr_Format(PyExc_RuntimeError,
            "Unable to initialize pickling for " __Pyx_FMT_TYPENAME, type_obj_name);
        __Pyx_DECREF_TypeName(type_obj_name);
    }
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
    Py_XDECREF(object_getstate);
    Py_XDECREF(getstate);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}
#endif

/* SetVTable */
static int __Pyx_SetVtable(PyTypeObject *type, void *vtable) {
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
    if (unlikely(!ob))
        goto bad;
#if CYTHON_COMPILING_IN_LIMITED_API
    if (unlikely(PyObject_SetAttr((PyObject *) type, __pyx_n_s_pyx_vtable, ob) < 0))
#else
    if (unlikely(PyDict_SetItem(type->tp_dict, __pyx_n_s_pyx_vtable, ob) < 0))
#endif
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* GetVTable */
static void* __Pyx_GetVtable(PyTypeObject *type) {
    void* ptr;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *ob = PyObject_GetAttr((PyObject *)type, __pyx_n_s_pyx_vtable);
#else
    PyObject *ob = PyObject_GetItem(type->tp_dict, __pyx_n_s_pyx_vtable);
#endif
    if (!ob)
        goto bad;
    ptr = PyCapsule_GetPointer(ob, 0);
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* MergeVTables */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_MergeVtables(PyTypeObject *type) {
    int i;
    void** base_vtables;
    __Pyx_TypeName tp_base_name;
    __Pyx_TypeName base_name;
    void* unknown = (void*)-1;
    PyObject* bases = type->tp_bases;
    int base_depth = 0;
    {
        PyTypeObject* base = type->tp_base;
        while (base) {
            base_depth += 1;
            base = base->tp_base;
        }
    }
    base_vtables = (void**) malloc(sizeof(void*) * (size_t)(base_depth + 1));
    base_vtables[0] = unknown;
    for (i = 1; i < PyTuple_GET_SIZE(bases); i++) {
        void* base_vtable = __Pyx_GetVtable(((PyTypeObject*)PyTuple_GET_ITEM(bases, i)));
        if (base_vtable != NULL) {
            int j;
            PyTypeObject* base = type->tp_base;
            for (j = 0; j < base_depth; j++) {
                if (base_vtables[j] == unknown) {
                    base_vtables[j] = __Pyx_GetVtable(base);
                    base_vtables[j + 1] = unknown;
                }
                if (base_vtables[j] == base_vtable) {
                    break;
                } else if (base_vtables[j] == NULL) {
                    goto bad;
                }
                base = base->tp_base;
            }
        }
    }
    PyErr_Clear();
    free(base_vtables);
    return 0;
bad:
    tp_base_name = __Pyx_PyType_GetName(type->tp_base);
    base_name = __Pyx_PyType_GetName((PyTypeObject*)PyTuple_GET_ITEM(bases, i));
    PyErr_Format(PyExc_TypeError,
        "multiple bases have vtable conflict: '" __Pyx_FMT_TYPENAME "' and '" __Pyx_FMT_TYPENAME "'", tp_base_name, base_name);
    __Pyx_DECREF_TypeName(tp_base_name);
    __Pyx_DECREF_TypeName(base_name);
    free(base_vtables);
    return -1;
}
#endif

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType_3_0_10
#define __PYX_HAVE_RT_ImportType_3_0_10
static PyTypeObject *__Pyx_ImportType_3_0_10(PyObject *module, const char *module_name, const char *class_name,
    size_t size, size_t alignment, enum __Pyx_ImportType_CheckSize_3_0_10 check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
    Py_ssize_t itemsize;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *py_basicsize;
    PyObject *py_itemsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#if !CYTHON_COMPILING_IN_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
    itemsize = ((PyTypeObject *)result)->tp_itemsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
    py_itemsize = PyObject_GetAttrString(result, "__itemsize__");
    if (!py_itemsize)
        goto bad;
    itemsize = PyLong_AsSsize_t(py_itemsize);
    Py_DECREF(py_itemsize);
    py_itemsize = 0;
    if (itemsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (itemsize) {
        if (size % alignment) {
            alignment = size % alignment;
        }
        if (itemsize < (Py_ssize_t)alignment)
            itemsize = (Py_ssize_t)alignment;
    }
    if ((size_t)(basicsize + itemsize) < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize+itemsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error_3_0_10 &&
            ((size_t)basicsize > size || (size_t)(basicsize + itemsize) < size)) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd-%zd from PyObject",
            module_name, class_name, size, basicsize, basicsize+itemsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn_3_0_10 && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* FetchSharedCythonModule */
static PyObject *__Pyx_FetchSharedCythonABIModule(void) {
    return __Pyx_PyImport_AddModuleRef((char*) __PYX_ABI_MODULE_NAME);
}

/* FetchCommonType */
static int __Pyx_VerifyCachedType(PyObject *cached_type,
                               const char *name,
                               Py_ssize_t basicsize,
                               Py_ssize_t expected_basicsize) {
    if (!PyType_Check(cached_type)) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s is not a type object", name);
        return -1;
    }
    if (basicsize != expected_basicsize) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s has the wrong size, try recompiling",
            name);
        return -1;
    }
    return 0;
}
#if !CYTHON_USE_TYPE_SPECS
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* abi_module;
    const char* object_name;
    PyTypeObject *cached_type = NULL;
    abi_module = __Pyx_FetchSharedCythonABIModule();
    if (!abi_module) return NULL;
    object_name = strrchr(type->tp_name, '.');
    object_name = object_name ? object_name+1 : type->tp_name;
    cached_type = (PyTypeObject*) PyObject_GetAttrString(abi_module, object_name);
    if (cached_type) {
        if (__Pyx_VerifyCachedType(
              (PyObject *)cached_type,
              object_name,
              cached_type->tp_basicsize,
              type->tp_basicsize) < 0) {
            goto bad;
        }
        goto done;
    }
    if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
    PyErr_Clear();
    if (PyType_Ready(type) < 0) goto bad;
    if (PyObject_SetAttrString(abi_module, object_name, (PyObject *)type) < 0)
        goto bad;
    Py_INCREF(type);
    cached_type = type;
done:
    Py_DECREF(abi_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}
#else
static PyTypeObject *__Pyx_FetchCommonTypeFromSpec(PyObject *module, PyType_Spec *spec, PyObject *bases) {
    PyObject *abi_module, *cached_type = NULL;
    const char* object_name = strrchr(spec->name, '.');
    object_name = object_name ? object_name+1 : spec->name;
    abi_module = __Pyx_FetchSharedCythonABIModule();
    if (!abi_module) return NULL;
    cached_type = PyObject_GetAttrString(abi_module, object_name);
    if (cached_type) {
        Py_ssize_t basicsize;
#if CYTHON_COMPILING_IN_LIMITED_API
        PyObject *py_basicsize;
        py_basicsize = PyObject_GetAttrString(cached_type, "__basicsize__");
        if (unlikely(!py_basicsize)) goto bad;
        basicsize = PyLong_AsSsize_t(py_basicsize);
        Py_DECREF(py_basicsize);
        py_basicsize = 0;
        if (unlikely(basicsize == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
#else
        basicsize = likely(PyType_Check(cached_type)) ? ((PyTypeObject*) cached_type)->tp_basicsize : -1;
#endif
        if (__Pyx_VerifyCachedType(
              cached_type,
              object_name,
              basicsize,
              spec->basicsize) < 0) {
            goto bad;
        }
        goto done;
    }
    if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
    PyErr_Clear();
    CYTHON_UNUSED_VAR(module);
    cached_type = __Pyx_PyType_FromModuleAndSpec(abi_module, spec, bases);
    if (unlikely(!cached_type)) goto bad;
    if (unlikely(__Pyx_fix_up_extension_type_from_spec(spec, (PyTypeObject *) cached_type) < 0)) goto bad;
    if (PyObject_SetAttrString(abi_module, object_name, cached_type) < 0) goto bad;
done:
    Py_DECREF(abi_module);
    assert(cached_type == NULL || PyType_Check(cached_type));
    return (PyTypeObject *) cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}
#endif

/* PyVectorcallFastCallDict */
#if CYTHON_METH_FASTCALL
static PyObject *__Pyx_PyVectorcall_FastCallDict_kw(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)
{
    PyObject *res = NULL;
    PyObject *kwnames;
    PyObject **newargs;
    PyObject **kwvalues;
    Py_ssize_t i, pos;
    size_t j;
    PyObject *key, *value;
    unsigned long keys_are_strings;
    Py_ssize_t nkw = PyDict_GET_SIZE(kw);
    newargs = (PyObject **)PyMem_Malloc((nargs + (size_t)nkw) * sizeof(args[0]));
    if (unlikely(newargs == NULL)) {
        PyErr_NoMemory();
        return NULL;
    }
    for (j = 0; j < nargs; j++) newargs[j] = args[j];
    kwnames = PyTuple_New(nkw);
    if (unlikely(kwnames == NULL)) {
        PyMem_Free(newargs);
        return NULL;
    }
    kwvalues = newargs + nargs;
    pos = i = 0;
    keys_are_strings = Py_TPFLAGS_UNICODE_SUBCLASS;
    while (PyDict_Next(kw, &pos, &key, &value)) {
        keys_are_strings &= Py_TYPE(key)->tp_flags;
        Py_INCREF(key);
        Py_INCREF(value);
        PyTuple_SET_ITEM(kwnames, i, key);
        kwvalues[i] = value;
        i++;
    }
    if (unlikely(!keys_are_strings)) {
        PyErr_SetString(PyExc_TypeError, "keywords must be strings");
        goto cleanup;
    }
    res = vc(func, newargs, nargs, kwnames);
cleanup:
    Py_DECREF(kwnames);
    for (i = 0; i < nkw; i++)
        Py_DECREF(kwvalues[i]);
    PyMem_Free(newargs);
    return res;
}
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)
{
    if (likely(kw == NULL) || PyDict_GET_SIZE(kw) == 0) {
        return vc(func, args, nargs, NULL);
    }
    return __Pyx_PyVectorcall_FastCallDict_kw(func, vc, args, nargs, kw);
}
#endif

/* CythonFunctionShared */
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void *cfunc) {
    if (__Pyx_CyFunction_Check(func)) {
        return PyCFunction_GetFunction(((__pyx_CyFunctionObject*)func)->func) == (PyCFunction) cfunc;
    } else if (PyCFunction_Check(func)) {
        return PyCFunction_GetFunction(func) == (PyCFunction) cfunc;
    }
    return 0;
}
#else
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void *cfunc) {
    return __Pyx_CyOrPyCFunction_Check(func) && __Pyx_CyOrPyCFunction_GET_FUNCTION(func) == (PyCFunction) cfunc;
}
#endif
static CYTHON_INLINE void __Pyx__CyFunction_SetClassObj(__pyx_CyFunctionObject* f, PyObject* classobj) {
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    __Pyx_Py_XDECREF_SET(
        __Pyx_CyFunction_GetClassObj(f),
            ((classobj) ? __Pyx_NewRef(classobj) : NULL));
#else
    __Pyx_Py_XDECREF_SET(
        ((PyCMethodObject *) (f))->mm_class,
        (PyTypeObject*)((classobj) ? __Pyx_NewRef(classobj) : NULL));
#endif
}
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, void *closure)
{
    CYTHON_UNUSED_VAR(closure);
    if (unlikely(op->func_doc == NULL)) {
#if CYTHON_COMPILING_IN_LIMITED_API
        op->func_doc = PyObject_GetAttrString(op->func, "__doc__");
        if (unlikely(!op->func_doc)) return NULL;
#else
        if (((PyCFunctionObject*)op)->m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(((PyCFunctionObject*)op)->m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(((PyCFunctionObject*)op)->m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
#endif
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_doc, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(op->func_name == NULL)) {
#if CYTHON_COMPILING_IN_LIMITED_API
        op->func_name = PyObject_GetAttrString(op->func, "__name__");
#elif PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(((PyCFunctionObject*)op)->m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(((PyCFunctionObject*)op)->m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_name, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_qualname, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_dict, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(op);
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, void *context)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = __Pyx_PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = __Pyx_PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyTuple_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    PyErr_WarnEx(PyExc_RuntimeWarning, "changes to cyfunction.__defaults__ will not "
                 "currently affect the values used in function calls", 1);
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->defaults_tuple, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->defaults_tuple;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    PyErr_WarnEx(PyExc_RuntimeWarning, "changes to cyfunction.__kwdefaults__ will not "
                 "currently affect the values used in function calls", 1);
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->defaults_kwdict, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->defaults_kwdict;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value || value == Py_None) {
        value = NULL;
    } else if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_annotations, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->func_annotations;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyObject *
__Pyx_CyFunction_get_is_coroutine(__pyx_CyFunctionObject *op, void *context) {
    int is_coroutine;
    CYTHON_UNUSED_VAR(context);
    if (op->func_is_coroutine) {
        return __Pyx_NewRef(op->func_is_coroutine);
    }
    is_coroutine = op->flags & __Pyx_CYFUNCTION_COROUTINE;
#if PY_VERSION_HEX >= 0x03050000
    if (is_coroutine) {
        PyObject *module, *fromlist, *marker = __pyx_n_s_is_coroutine;
        fromlist = PyList_New(1);
        if (unlikely(!fromlist)) return NULL;
        Py_INCREF(marker);
#if CYTHON_ASSUME_SAFE_MACROS
        PyList_SET_ITEM(fromlist, 0, marker);
#else
        if (unlikely(PyList_SetItem(fromlist, 0, marker) < 0)) {
            Py_DECREF(marker);
            Py_DECREF(fromlist);
            return NULL;
        }
#endif
        module = PyImport_ImportModuleLevelObject(__pyx_n_s_asyncio_coroutines, NULL, NULL, fromlist, 0);
        Py_DECREF(fromlist);
        if (unlikely(!module)) goto ignore;
        op->func_is_coroutine = __Pyx_PyObject_GetAttrStr(module, marker);
        Py_DECREF(module);
        if (likely(op->func_is_coroutine)) {
            return __Pyx_NewRef(op->func_is_coroutine);
        }
ignore:
        PyErr_Clear();
    }
#endif
    op->func_is_coroutine = __Pyx_PyBool_FromLong(is_coroutine);
    return __Pyx_NewRef(op->func_is_coroutine);
}
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *
__Pyx_CyFunction_get_module(__pyx_CyFunctionObject *op, void *context) {
    CYTHON_UNUSED_VAR(context);
    return PyObject_GetAttrString(op->func, "__module__");
}
static int
__Pyx_CyFunction_set_module(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    return PyObject_SetAttrString(op->func, "__module__", value);
}
#endif
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {(char *) "_is_coroutine", (getter)__Pyx_CyFunction_get_is_coroutine, 0, 0, 0},
#if CYTHON_COMPILING_IN_LIMITED_API
    {"__module__", (getter)__Pyx_CyFunction_get_module, (setter)__Pyx_CyFunction_set_module, 0, 0},
#endif
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
#if !CYTHON_COMPILING_IN_LIMITED_API
    {(char *) "__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), 0, 0},
#endif
#if CYTHON_USE_TYPE_SPECS
    {(char *) "__dictoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_dict), READONLY, 0},
#if CYTHON_METH_FASTCALL
#if CYTHON_BACKPORT_VECTORCALL
    {(char *) "__vectorcalloffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_vectorcall), READONLY, 0},
#else
#if !CYTHON_COMPILING_IN_LIMITED_API
    {(char *) "__vectorcalloffset__", T_PYSSIZET, offsetof(PyCFunctionObject, vectorcall), READONLY, 0},
#endif
#endif
#endif
#if PY_VERSION_HEX < 0x030500A0 || CYTHON_COMPILING_IN_LIMITED_API
    {(char *) "__weaklistoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_weakreflist), READONLY, 0},
#else
    {(char *) "__weaklistoffset__", T_PYSSIZET, offsetof(PyCFunctionObject, m_weakreflist), READONLY, 0},
#endif
#endif
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, PyObject *args)
{
    CYTHON_UNUSED_VAR(args);
#if PY_MAJOR_VERSION >= 3
    Py_INCREF(m->func_qualname);
    return m->func_qualname;
#else
    return PyString_FromString(((PyCFunctionObject*)m)->m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0 || CYTHON_COMPILING_IN_LIMITED_API
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) (((PyCFunctionObject*)cyfunc)->m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject *op, PyMethodDef *ml, int flags, PyObject* qualname,
                                       PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
#if !CYTHON_COMPILING_IN_LIMITED_API
    PyCFunctionObject *cf = (PyCFunctionObject*) op;
#endif
    if (unlikely(op == NULL))
        return NULL;
#if CYTHON_COMPILING_IN_LIMITED_API
    op->func = PyCFunction_NewEx(ml, (PyObject*)op, module);
    if (unlikely(!op->func)) return NULL;
#endif
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
#if !CYTHON_COMPILING_IN_LIMITED_API
    cf->m_ml = ml;
    cf->m_self = (PyObject *) op;
#endif
    Py_XINCREF(closure);
    op->func_closure = closure;
#if !CYTHON_COMPILING_IN_LIMITED_API
    Py_XINCREF(module);
    cf->m_module = module;
#endif
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    op->func_classobj = NULL;
#else
    ((PyCMethodObject*)op)->mm_class = NULL;
#endif
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults_size = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    op->func_is_coroutine = NULL;
#if CYTHON_METH_FASTCALL
    switch (ml->ml_flags & (METH_VARARGS | METH_FASTCALL | METH_NOARGS | METH_O | METH_KEYWORDS | METH_METHOD)) {
    case METH_NOARGS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_NOARGS;
        break;
    case METH_O:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_O;
        break;
    case METH_METHOD | METH_FASTCALL | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD;
        break;
    case METH_FASTCALL | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS;
        break;
    case METH_VARARGS | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = NULL;
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        Py_DECREF(op);
        return NULL;
    }
#endif
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
#if CYTHON_COMPILING_IN_LIMITED_API
    Py_CLEAR(m->func);
#else
    Py_CLEAR(((PyCFunctionObject*)m)->m_module);
#endif
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
#if !CYTHON_COMPILING_IN_LIMITED_API
#if PY_VERSION_HEX < 0x030900B1
    Py_CLEAR(__Pyx_CyFunction_GetClassObj(m));
#else
    {
        PyObject *cls = (PyObject*) ((PyCMethodObject *) (m))->mm_class;
        ((PyCMethodObject *) (m))->mm_class = NULL;
        Py_XDECREF(cls);
    }
#endif
#endif
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    Py_CLEAR(m->func_is_coroutine);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    __Pyx_PyHeapTypeObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
#if CYTHON_COMPILING_IN_LIMITED_API
    Py_VISIT(m->func);
#else
    Py_VISIT(((PyCFunctionObject*)m)->m_module);
#endif
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
#if !CYTHON_COMPILING_IN_LIMITED_API
    Py_VISIT(__Pyx_CyFunction_GetClassObj(m));
#endif
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    Py_VISIT(m->func_is_coroutine);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *f = ((__pyx_CyFunctionObject*)func)->func;
    PyObject *py_name = NULL;
    PyCFunction meth;
    int flags;
    meth = PyCFunction_GetFunction(f);
    if (unlikely(!meth)) return NULL;
    flags = PyCFunction_GetFlags(f);
    if (unlikely(flags < 0)) return NULL;
#else
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    int flags = f->m_ml->ml_flags;
#endif
    Py_ssize_t size;
    switch (flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)(void*)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
#if CYTHON_ASSUME_SAFE_MACROS
            size = PyTuple_GET_SIZE(arg);
#else
            size = PyTuple_Size(arg);
            if (unlikely(size < 0)) return NULL;
#endif
            if (likely(size == 0))
                return (*meth)(self, NULL);
#if CYTHON_COMPILING_IN_LIMITED_API
            py_name = __Pyx_CyFunction_get_name((__pyx_CyFunctionObject*)func, NULL);
            if (!py_name) return NULL;
            PyErr_Format(PyExc_TypeError,
                "%.200S() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                py_name, size);
            Py_DECREF(py_name);
#else
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
#endif
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
#if CYTHON_ASSUME_SAFE_MACROS
            size = PyTuple_GET_SIZE(arg);
#else
            size = PyTuple_Size(arg);
            if (unlikely(size < 0)) return NULL;
#endif
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = __Pyx_PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
#if CYTHON_COMPILING_IN_LIMITED_API
            py_name = __Pyx_CyFunction_get_name((__pyx_CyFunctionObject*)func, NULL);
            if (!py_name) return NULL;
            PyErr_Format(PyExc_TypeError,
                "%.200S() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                py_name, size);
            Py_DECREF(py_name);
#else
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
#endif
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        return NULL;
    }
#if CYTHON_COMPILING_IN_LIMITED_API
    py_name = __Pyx_CyFunction_get_name((__pyx_CyFunctionObject*)func, NULL);
    if (!py_name) return NULL;
    PyErr_Format(PyExc_TypeError, "%.200S() takes no keyword arguments",
                 py_name);
    Py_DECREF(py_name);
#else
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
#endif
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *self, *result;
#if CYTHON_COMPILING_IN_LIMITED_API
    self = PyCFunction_GetSelf(((__pyx_CyFunctionObject*)func)->func);
    if (unlikely(!self) && PyErr_Occurred()) return NULL;
#else
    self = ((PyCFunctionObject*)func)->m_self;
#endif
    result = __Pyx_CyFunction_CallMethod(func, self, arg, kw);
    return result;
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
#if CYTHON_METH_FASTCALL
     __pyx_vectorcallfunc vc = __Pyx_CyFunction_func_vectorcall(cyfunc);
    if (vc) {
#if CYTHON_ASSUME_SAFE_MACROS
        return __Pyx_PyVectorcall_FastCallDict(func, vc, &PyTuple_GET_ITEM(args, 0), (size_t)PyTuple_GET_SIZE(args), kw);
#else
        (void) &__Pyx_PyVectorcall_FastCallDict;
        return PyVectorcall_Call(func, args, kw);
#endif
    }
#endif
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
#if CYTHON_ASSUME_SAFE_MACROS
        argc = PyTuple_GET_SIZE(args);
#else
        argc = PyTuple_Size(args);
        if (unlikely(!argc) < 0) return NULL;
#endif
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
#if PY_MAJOR_VERSION > 2
            PyErr_Format(PyExc_TypeError,
                         "unbound method %.200S() needs an argument",
                         cyfunc->func_qualname);
#else
            PyErr_SetString(PyExc_TypeError,
                            "unbound method needs an argument");
#endif
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE int __Pyx_CyFunction_Vectorcall_CheckArgs(__pyx_CyFunctionObject *cyfunc, Py_ssize_t nargs, PyObject *kwnames)
{
    int ret = 0;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        if (unlikely(nargs < 1)) {
            PyErr_Format(PyExc_TypeError, "%.200s() needs an argument",
                         ((PyCFunctionObject*)cyfunc)->m_ml->ml_name);
            return -1;
        }
        ret = 1;
    }
    if (unlikely(kwnames) && unlikely(PyTuple_GET_SIZE(kwnames))) {
        PyErr_Format(PyExc_TypeError,
                     "%.200s() takes no keyword arguments", ((PyCFunctionObject*)cyfunc)->m_ml->ml_name);
        return -1;
    }
    return ret;
}
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 0)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
            def->ml_name, nargs);
        return NULL;
    }
    return def->ml_meth(self, NULL);
}
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 1)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
            def->ml_name, nargs);
        return NULL;
    }
    return def->ml_meth(self, args[0]);
}
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, NULL)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    return ((__Pyx_PyCFunctionFastWithKeywords)(void(*)(void))def->ml_meth)(self, args, nargs, kwnames);
}
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
    PyTypeObject *cls = (PyTypeObject *) __Pyx_CyFunction_GetClassObj(cyfunc);
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, NULL)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    return ((__Pyx_PyCMethod)(void(*)(void))def->ml_meth)(self, cls, args, (size_t)nargs, kwnames);
}
#endif
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_CyFunctionType_slots[] = {
    {Py_tp_dealloc, (void *)__Pyx_CyFunction_dealloc},
    {Py_tp_repr, (void *)__Pyx_CyFunction_repr},
    {Py_tp_call, (void *)__Pyx_CyFunction_CallAsMethod},
    {Py_tp_traverse, (void *)__Pyx_CyFunction_traverse},
    {Py_tp_clear, (void *)__Pyx_CyFunction_clear},
    {Py_tp_methods, (void *)__pyx_CyFunction_methods},
    {Py_tp_members, (void *)__pyx_CyFunction_members},
    {Py_tp_getset, (void *)__pyx_CyFunction_getsets},
    {Py_tp_descr_get, (void *)__Pyx_PyMethod_New},
    {0, 0},
};
static PyType_Spec __pyx_CyFunctionType_spec = {
    __PYX_TYPE_MODULE_PREFIX "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
#ifdef Py_TPFLAGS_METHOD_DESCRIPTOR
    Py_TPFLAGS_METHOD_DESCRIPTOR |
#endif
#if (defined(_Py_TPFLAGS_HAVE_VECTORCALL) && CYTHON_METH_FASTCALL)
    _Py_TPFLAGS_HAVE_VECTORCALL |
#endif
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_BASETYPE,
    __pyx_CyFunctionType_slots
};
#else
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    __PYX_TYPE_MODULE_PREFIX "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
#if !CYTHON_METH_FASTCALL
    0,
#elif CYTHON_BACKPORT_VECTORCALL
    (printfunc)offsetof(__pyx_CyFunctionObject, func_vectorcall),
#else
    offsetof(PyCFunctionObject, vectorcall),
#endif
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
#ifdef Py_TPFLAGS_METHOD_DESCRIPTOR
    Py_TPFLAGS_METHOD_DESCRIPTOR |
#endif
#if defined(_Py_TPFLAGS_HAVE_VECTORCALL) && CYTHON_METH_FASTCALL
    _Py_TPFLAGS_HAVE_VECTORCALL |
#endif
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_BASETYPE,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_PyMethod_New,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
    0,
#endif
#if __PYX_NEED_TP_PRINT_SLOT
    0,
#endif
#if PY_VERSION_HEX >= 0x030C0000
    0,
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
    0,
#endif
};
#endif
static int __pyx_CyFunction_init(PyObject *module) {
#if CYTHON_USE_TYPE_SPECS
    __pyx_CyFunctionType = __Pyx_FetchCommonTypeFromSpec(module, &__pyx_CyFunctionType_spec, NULL);
#else
    CYTHON_UNUSED_VAR(module);
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
#endif
    if (unlikely(__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (unlikely(!m->defaults))
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    m->defaults_size = size;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* CythonFunction */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    PyObject *op = __Pyx_CyFunction_Init(
        PyObject_GC_New(__pyx_CyFunctionObject, __pyx_CyFunctionType),
        ml, flags, qualname, closure, module, globals, code
    );
    if (likely(op)) {
        PyObject_GC_Track(op);
    }
    return op;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    CYTHON_MAYBE_UNUSED_VAR(tstate);
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStrNoError(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        (void) PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}
#endif

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
#if PY_VERSION_HEX >= 0x030b00a6 && !CYTHON_COMPILING_IN_LIMITED_API
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__Pyx_PyCode_Replace_For_AddTraceback(PyObject *code, PyObject *scratch_dict,
                                                       PyObject *firstlineno, PyObject *name) {
    PyObject *replace = NULL;
    if (unlikely(PyDict_SetItemString(scratch_dict, "co_firstlineno", firstlineno))) return NULL;
    if (unlikely(PyDict_SetItemString(scratch_dict, "co_name", name))) return NULL;
    replace = PyObject_GetAttrString(code, "replace");
    if (likely(replace)) {
        PyObject *result;
        result = PyObject_Call(replace, __pyx_empty_tuple, scratch_dict);
        Py_DECREF(replace);
        return result;
    }
    PyErr_Clear();
    #if __PYX_LIMITED_VERSION_HEX < 0x030780000
    {
        PyObject *compiled = NULL, *result = NULL;
        if (unlikely(PyDict_SetItemString(scratch_dict, "code", code))) return NULL;
        if (unlikely(PyDict_SetItemString(scratch_dict, "type", (PyObject*)(&PyType_Type)))) return NULL;
        compiled = Py_CompileString(
            "out = type(code)(\n"
            "  code.co_argcount, code.co_kwonlyargcount, code.co_nlocals, code.co_stacksize,\n"
            "  code.co_flags, code.co_code, code.co_consts, code.co_names,\n"
            "  code.co_varnames, code.co_filename, co_name, co_firstlineno,\n"
            "  code.co_lnotab)\n", "<dummy>", Py_file_input);
        if (!compiled) return NULL;
        result = PyEval_EvalCode(compiled, scratch_dict, scratch_dict);
        Py_DECREF(compiled);
        if (!result) PyErr_Print();
        Py_DECREF(result);
        result = PyDict_GetItemString(scratch_dict, "out");
        if (result) Py_INCREF(result);
        return result;
    }
    #else
    return NULL;
    #endif
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyObject *code_object = NULL, *py_py_line = NULL, *py_funcname = NULL, *dict = NULL;
    PyObject *replace = NULL, *getframe = NULL, *frame = NULL;
    PyObject *exc_type, *exc_value, *exc_traceback;
    int success = 0;
    if (c_line) {
        (void) __pyx_cfilenm;
        (void) __Pyx_CLineForTraceback(__Pyx_PyThreadState_Current, c_line);
    }
    PyErr_Fetch(&exc_type, &exc_value, &exc_traceback);
    code_object = Py_CompileString("_getframe()", filename, Py_eval_input);
    if (unlikely(!code_object)) goto bad;
    py_py_line = PyLong_FromLong(py_line);
    if (unlikely(!py_py_line)) goto bad;
    py_funcname = PyUnicode_FromString(funcname);
    if (unlikely(!py_funcname)) goto bad;
    dict = PyDict_New();
    if (unlikely(!dict)) goto bad;
    {
        PyObject *old_code_object = code_object;
        code_object = __Pyx_PyCode_Replace_For_AddTraceback(code_object, dict, py_py_line, py_funcname);
        Py_DECREF(old_code_object);
    }
    if (unlikely(!code_object)) goto bad;
    getframe = PySys_GetObject("_getframe");
    if (unlikely(!getframe)) goto bad;
    if (unlikely(PyDict_SetItemString(dict, "_getframe", getframe))) goto bad;
    frame = PyEval_EvalCode(code_object, dict, dict);
    if (unlikely(!frame) || frame == Py_None) goto bad;
    success = 1;
  bad:
    PyErr_Restore(exc_type, exc_value, exc_traceback);
    Py_XDECREF(code_object);
    Py_XDECREF(py_py_line);
    Py_XDECREF(py_funcname);
    Py_XDECREF(dict);
    Py_XDECREF(replace);
    if (success) {
        PyTraceBack_Here(
            (struct _frame*)frame);
    }
    Py_XDECREF(frame);
}
#else
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = NULL;
    PyObject *py_funcname = NULL;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_srcfile = NULL;
    py_srcfile = PyString_FromString(filename);
    if (!py_srcfile) goto bad;
    #endif
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        funcname = PyUnicode_AsUTF8(py_funcname);
        if (!funcname) goto bad;
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        if (!py_funcname) goto bad;
        #endif
    }
    #if PY_MAJOR_VERSION < 3
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    #else
    py_code = PyCode_NewEmpty(filename, funcname, py_line);
    #endif
    Py_XDECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_funcname);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_srcfile);
    #endif
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject *ptype, *pvalue, *ptraceback;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) {
            /* If the code object creation fails, then we should clear the
               fetched exception references and propagate the new exception */
            Py_XDECREF(ptype);
            Py_XDECREF(pvalue);
            Py_XDECREF(ptraceback);
            goto bad;
        }
        __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}
#endif

#if PY_MAJOR_VERSION < 3
static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags) {
    __Pyx_TypeName obj_type_name;
    if (PyObject_CheckBuffer(obj)) return PyObject_GetBuffer(obj, view, flags);
        if (__Pyx_TypeCheck(obj, __pyx_array_type)) return __pyx_array_getbuffer(obj, view, flags);
        if (__Pyx_TypeCheck(obj, __pyx_memoryview_type)) return __pyx_memoryview_getbuffer(obj, view, flags);
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError,
                 "'" __Pyx_FMT_TYPENAME "' does not have the buffer interface",
                 obj_type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return -1;
}
static void __Pyx_ReleaseBuffer(Py_buffer *view) {
    PyObject *obj = view->obj;
    if (!obj) return;
    if (PyObject_CheckBuffer(obj)) {
        PyBuffer_Release(view);
        return;
    }
    if ((0)) {}
    view->obj = NULL;
    Py_DECREF(obj);
}
#endif


/* MemviewSliceIsContig */
static int
__pyx_memviewslice_is_contig(const __Pyx_memviewslice mvs, char order, int ndim)
{
    int i, index, step, start;
    Py_ssize_t itemsize = mvs.memview->view.itemsize;
    if (order == 'F') {
        step = 1;
        start = 0;
    } else {
        step = -1;
        start = ndim - 1;
    }
    for (i = 0; i < ndim; i++) {
        index = start + step * i;
        if (mvs.suboffsets[index] >= 0 || mvs.strides[index] != itemsize)
            return 0;
        itemsize *= mvs.shape[index];
    }
    return 1;
}

/* OverlappingSlices */
static void
__pyx_get_array_memory_extents(__Pyx_memviewslice *slice,
                               void **out_start, void **out_end,
                               int ndim, size_t itemsize)
{
    char *start, *end;
    int i;
    start = end = slice->data;
    for (i = 0; i < ndim; i++) {
        Py_ssize_t stride = slice->strides[i];
        Py_ssize_t extent = slice->shape[i];
        if (extent == 0) {
            *out_start = *out_end = start;
            return;
        } else {
            if (stride > 0)
                end += stride * (extent - 1);
            else
                start += stride * (extent - 1);
        }
    }
    *out_start = start;
    *out_end = end + itemsize;
}
static int
__pyx_slices_overlap(__Pyx_memviewslice *slice1,
                     __Pyx_memviewslice *slice2,
                     int ndim, size_t itemsize)
{
    void *start1, *end1, *start2, *end2;
    __pyx_get_array_memory_extents(slice1, &start1, &end1, ndim, itemsize);
    __pyx_get_array_memory_extents(slice2, &start2, &end2, ndim, itemsize);
    return (start1 < end2) && (start2 < end1);
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* IsLittleEndian */
static CYTHON_INLINE int __Pyx_Is_Little_Endian(void)
{
  union {
    uint32_t u32;
    uint8_t u8[4];
  } S;
  S.u32 = 0x01020304;
  return S.u8[0] == 4;
}

/* BufferFormatCheck */
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type) {
  stack[0].field = &ctx->root;
  stack[0].parent_offset = 0;
  ctx->root.type = type;
  ctx->root.name = "buffer dtype";
  ctx->root.offset = 0;
  ctx->head = stack;
  ctx->head->field = &ctx->root;
  ctx->fmt_offset = 0;
  ctx->head->parent_offset = 0;
  ctx->new_packmode = '@';
  ctx->enc_packmode = '@';
  ctx->new_count = 1;
  ctx->enc_count = 0;
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  ctx->is_valid_array = 0;
  ctx->struct_alignment = 0;
  while (type->typegroup == 'S') {
    ++ctx->head;
    ctx->head->field = type->fields;
    ctx->head->parent_offset = 0;
    type = type->fields->type;
  }
}
static int __Pyx_BufFmt_ParseNumber(const char** ts) {
    int count;
    const char* t = *ts;
    if (*t < '0' || *t > '9') {
      return -1;
    } else {
        count = *t++ - '0';
        while (*t >= '0' && *t <= '9') {
            count *= 10;
            count += *t++ - '0';
        }
    }
    *ts = t;
    return count;
}
static int __Pyx_BufFmt_ExpectNumber(const char **ts) {
    int number = __Pyx_BufFmt_ParseNumber(ts);
    if (number == -1)
        PyErr_Format(PyExc_ValueError,\
                     "Does not understand character buffer dtype format string ('%c')", **ts);
    return number;
}
static void __Pyx_BufFmt_RaiseUnexpectedChar(char ch) {
  PyErr_Format(PyExc_ValueError,
               "Unexpected format string character: '%c'", ch);
}
static const char* __Pyx_BufFmt_DescribeTypeChar(char ch, int is_complex) {
  switch (ch) {
    case '?': return "'bool'";
    case 'c': return "'char'";
    case 'b': return "'signed char'";
    case 'B': return "'unsigned char'";
    case 'h': return "'short'";
    case 'H': return "'unsigned short'";
    case 'i': return "'int'";
    case 'I': return "'unsigned int'";
    case 'l': return "'long'";
    case 'L': return "'unsigned long'";
    case 'q': return "'long long'";
    case 'Q': return "'unsigned long long'";
    case 'f': return (is_complex ? "'complex float'" : "'float'");
    case 'd': return (is_complex ? "'complex double'" : "'double'");
    case 'g': return (is_complex ? "'complex long double'" : "'long double'");
    case 'T': return "a struct";
    case 'O': return "Python object";
    case 'P': return "a pointer";
    case 's': case 'p': return "a string";
    case 0: return "end";
    default: return "unparsable format string";
  }
}
static size_t __Pyx_BufFmt_TypeCharToStandardSize(char ch, int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return 2;
    case 'i': case 'I': case 'l': case 'L': return 4;
    case 'q': case 'Q': return 8;
    case 'f': return (is_complex ? 8 : 4);
    case 'd': return (is_complex ? 16 : 8);
    case 'g': {
      PyErr_SetString(PyExc_ValueError, "Python does not define a standard format string size for long double ('g')..");
      return 0;
    }
    case 'O': case 'P': return sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static size_t __Pyx_BufFmt_TypeCharToNativeSize(char ch, int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(short);
    case 'i': case 'I': return sizeof(int);
    case 'l': case 'L': return sizeof(long);
    #ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(PY_LONG_LONG);
    #endif
    case 'f': return sizeof(float) * (is_complex ? 2 : 1);
    case 'd': return sizeof(double) * (is_complex ? 2 : 1);
    case 'g': return sizeof(long double) * (is_complex ? 2 : 1);
    case 'O': case 'P': return sizeof(void*);
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
typedef struct { char c; short x; } __Pyx_st_short;
typedef struct { char c; int x; } __Pyx_st_int;
typedef struct { char c; long x; } __Pyx_st_long;
typedef struct { char c; float x; } __Pyx_st_float;
typedef struct { char c; double x; } __Pyx_st_double;
typedef struct { char c; long double x; } __Pyx_st_longdouble;
typedef struct { char c; void *x; } __Pyx_st_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { char c; PY_LONG_LONG x; } __Pyx_st_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToAlignment(char ch, int is_complex) {
  CYTHON_UNUSED_VAR(is_complex);
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_st_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_st_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_st_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_st_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_st_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_st_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_st_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_st_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
/* These are for computing the padding at the end of the struct to align
   on the first member of the struct. This will probably the same as above,
   but we don't have any guarantees.
 */
typedef struct { short x; char c; } __Pyx_pad_short;
typedef struct { int x; char c; } __Pyx_pad_int;
typedef struct { long x; char c; } __Pyx_pad_long;
typedef struct { float x; char c; } __Pyx_pad_float;
typedef struct { double x; char c; } __Pyx_pad_double;
typedef struct { long double x; char c; } __Pyx_pad_longdouble;
typedef struct { void *x; char c; } __Pyx_pad_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { PY_LONG_LONG x; char c; } __Pyx_pad_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToPadding(char ch, int is_complex) {
  CYTHON_UNUSED_VAR(is_complex);
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_pad_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_pad_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_pad_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_pad_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_pad_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_pad_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_pad_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_pad_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static char __Pyx_BufFmt_TypeCharToGroup(char ch, int is_complex) {
  switch (ch) {
    case 'c':
        return 'H';
    case 'b': case 'h': case 'i':
    case 'l': case 'q': case 's': case 'p':
        return 'I';
    case '?': case 'B': case 'H': case 'I': case 'L': case 'Q':
        return 'U';
    case 'f': case 'd': case 'g':
        return (is_complex ? 'C' : 'R');
    case 'O':
        return 'O';
    case 'P':
        return 'P';
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
static void __Pyx_BufFmt_RaiseExpected(__Pyx_BufFmt_Context* ctx) {
  if (ctx->head == NULL || ctx->head->field == &ctx->root) {
    const char* expected;
    const char* quote;
    if (ctx->head == NULL) {
      expected = "end";
      quote = "";
    } else {
      expected = ctx->head->field->type->name;
      quote = "'";
    }
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected %s%s%s but got %s",
                 quote, expected, quote,
                 __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex));
  } else {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_StructField* parent = (ctx->head - 1)->field;
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected '%s' but got %s in '%s.%s'",
                 field->type->name, __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex),
                 parent->type->name, field->name);
  }
}
static int __Pyx_BufFmt_ProcessTypeChunk(__Pyx_BufFmt_Context* ctx) {
  char group;
  size_t size, offset, arraysize = 1;
  if (ctx->enc_type == 0) return 0;
  if (ctx->head->field->type->arraysize[0]) {
    int i, ndim = 0;
    if (ctx->enc_type == 's' || ctx->enc_type == 'p') {
        ctx->is_valid_array = ctx->head->field->type->ndim == 1;
        ndim = 1;
        if (ctx->enc_count != ctx->head->field->type->arraysize[0]) {
            PyErr_Format(PyExc_ValueError,
                         "Expected a dimension of size %zu, got %zu",
                         ctx->head->field->type->arraysize[0], ctx->enc_count);
            return -1;
        }
    }
    if (!ctx->is_valid_array) {
      PyErr_Format(PyExc_ValueError, "Expected %d dimensions, got %d",
                   ctx->head->field->type->ndim, ndim);
      return -1;
    }
    for (i = 0; i < ctx->head->field->type->ndim; i++) {
      arraysize *= ctx->head->field->type->arraysize[i];
    }
    ctx->is_valid_array = 0;
    ctx->enc_count = 1;
  }
  group = __Pyx_BufFmt_TypeCharToGroup(ctx->enc_type, ctx->is_complex);
  do {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_TypeInfo* type = field->type;
    if (ctx->enc_packmode == '@' || ctx->enc_packmode == '^') {
      size = __Pyx_BufFmt_TypeCharToNativeSize(ctx->enc_type, ctx->is_complex);
    } else {
      size = __Pyx_BufFmt_TypeCharToStandardSize(ctx->enc_type, ctx->is_complex);
    }
    if (ctx->enc_packmode == '@') {
      size_t align_at = __Pyx_BufFmt_TypeCharToAlignment(ctx->enc_type, ctx->is_complex);
      size_t align_mod_offset;
      if (align_at == 0) return -1;
      align_mod_offset = ctx->fmt_offset % align_at;
      if (align_mod_offset > 0) ctx->fmt_offset += align_at - align_mod_offset;
      if (ctx->struct_alignment == 0)
          ctx->struct_alignment = __Pyx_BufFmt_TypeCharToPadding(ctx->enc_type,
                                                                 ctx->is_complex);
    }
    if (type->size != size || type->typegroup != group) {
      if (type->typegroup == 'C' && type->fields != NULL) {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        ++ctx->head;
        ctx->head->field = type->fields;
        ctx->head->parent_offset = parent_offset;
        continue;
      }
      if ((type->typegroup == 'H' || group == 'H') && type->size == size) {
      } else {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
      }
    }
    offset = ctx->head->parent_offset + field->offset;
    if (ctx->fmt_offset != offset) {
      PyErr_Format(PyExc_ValueError,
                   "Buffer dtype mismatch; next field is at offset %" CYTHON_FORMAT_SSIZE_T "d but %" CYTHON_FORMAT_SSIZE_T "d expected",
                   (Py_ssize_t)ctx->fmt_offset, (Py_ssize_t)offset);
      return -1;
    }
    ctx->fmt_offset += size;
    if (arraysize)
      ctx->fmt_offset += (arraysize - 1) * size;
    --ctx->enc_count;
    while (1) {
      if (field == &ctx->root) {
        ctx->head = NULL;
        if (ctx->enc_count != 0) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
        }
        break;
      }
      ctx->head->field = ++field;
      if (field->type == NULL) {
        --ctx->head;
        field = ctx->head->field;
        continue;
      } else if (field->type->typegroup == 'S') {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        if (field->type->fields->type == NULL) continue;
        field = field->type->fields;
        ++ctx->head;
        ctx->head->field = field;
        ctx->head->parent_offset = parent_offset;
        break;
      } else {
        break;
      }
    }
  } while (ctx->enc_count);
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  return 0;
}
static int
__pyx_buffmt_parse_array(__Pyx_BufFmt_Context* ctx, const char** tsp)
{
    const char *ts = *tsp;
    int i = 0, number, ndim;
    ++ts;
    if (ctx->new_count != 1) {
        PyErr_SetString(PyExc_ValueError,
                        "Cannot handle repeated arrays in format string");
        return -1;
    }
    if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return -1;
    ndim = ctx->head->field->type->ndim;
    while (*ts && *ts != ')') {
        switch (*ts) {
            case ' ': case '\f': case '\r': case '\n': case '\t': case '\v':  continue;
            default:  break;
        }
        number = __Pyx_BufFmt_ExpectNumber(&ts);
        if (number == -1) return -1;
        if (i < ndim && (size_t) number != ctx->head->field->type->arraysize[i]) {
            PyErr_Format(PyExc_ValueError,
                        "Expected a dimension of size %zu, got %d",
                        ctx->head->field->type->arraysize[i], number);
            return -1;
        }
        if (*ts != ',' && *ts != ')') {
            PyErr_Format(PyExc_ValueError,
                                "Expected a comma in format string, got '%c'", *ts);
            return -1;
        }
        if (*ts == ',') ts++;
        i++;
    }
    if (i != ndim) {
        PyErr_Format(PyExc_ValueError, "Expected %d dimension(s), got %d",
                            ctx->head->field->type->ndim, i);
        return -1;
    }
    if (!*ts) {
        PyErr_SetString(PyExc_ValueError,
                        "Unexpected end of format string, expected ')'");
        return -1;
    }
    ctx->is_valid_array = 1;
    ctx->new_count = 1;
    *tsp = ++ts;
    return 0;
}
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts) {
  int got_Z = 0;
  while (1) {
    switch(*ts) {
      case 0:
        if (ctx->enc_type != 0 && ctx->head == NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        if (ctx->head != NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        return ts;
      case ' ':
      case '\r':
      case '\n':
        ++ts;
        break;
      case '<':
        if (!__Pyx_Is_Little_Endian()) {
          PyErr_SetString(PyExc_ValueError, "Little-endian buffer not supported on big-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '>':
      case '!':
        if (__Pyx_Is_Little_Endian()) {
          PyErr_SetString(PyExc_ValueError, "Big-endian buffer not supported on little-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '=':
      case '@':
      case '^':
        ctx->new_packmode = *ts++;
        break;
      case 'T':
        {
          const char* ts_after_sub;
          size_t i, struct_count = ctx->new_count;
          size_t struct_alignment = ctx->struct_alignment;
          ctx->new_count = 1;
          ++ts;
          if (*ts != '{') {
            PyErr_SetString(PyExc_ValueError, "Buffer acquisition: Expected '{' after 'T'");
            return NULL;
          }
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          ctx->enc_count = 0;
          ctx->struct_alignment = 0;
          ++ts;
          ts_after_sub = ts;
          for (i = 0; i != struct_count; ++i) {
            ts_after_sub = __Pyx_BufFmt_CheckString(ctx, ts);
            if (!ts_after_sub) return NULL;
          }
          ts = ts_after_sub;
          if (struct_alignment) ctx->struct_alignment = struct_alignment;
        }
        break;
      case '}':
        {
          size_t alignment = ctx->struct_alignment;
          ++ts;
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          if (alignment && ctx->fmt_offset % alignment) {
            ctx->fmt_offset += alignment - (ctx->fmt_offset % alignment);
          }
        }
        return ts;
      case 'x':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->fmt_offset += ctx->new_count;
        ctx->new_count = 1;
        ctx->enc_count = 0;
        ctx->enc_type = 0;
        ctx->enc_packmode = ctx->new_packmode;
        ++ts;
        break;
      case 'Z':
        got_Z = 1;
        ++ts;
        if (*ts != 'f' && *ts != 'd' && *ts != 'g') {
          __Pyx_BufFmt_RaiseUnexpectedChar('Z');
          return NULL;
        }
        CYTHON_FALLTHROUGH;
      case '?': case 'c': case 'b': case 'B': case 'h': case 'H': case 'i': case 'I':
      case 'l': case 'L': case 'q': case 'Q':
      case 'f': case 'd': case 'g':
      case 'O': case 'p':
        if ((ctx->enc_type == *ts) && (got_Z == ctx->is_complex) &&
            (ctx->enc_packmode == ctx->new_packmode) && (!ctx->is_valid_array)) {
          ctx->enc_count += ctx->new_count;
          ctx->new_count = 1;
          got_Z = 0;
          ++ts;
          break;
        }
        CYTHON_FALLTHROUGH;
      case 's':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->enc_count = ctx->new_count;
        ctx->enc_packmode = ctx->new_packmode;
        ctx->enc_type = *ts;
        ctx->is_complex = got_Z;
        ++ts;
        ctx->new_count = 1;
        got_Z = 0;
        break;
      case ':':
        ++ts;
        while(*ts != ':') ++ts;
        ++ts;
        break;
      case '(':
        if (__pyx_buffmt_parse_array(ctx, &ts) < 0) return NULL;
        break;
      default:
        {
          int number = __Pyx_BufFmt_ExpectNumber(&ts);
          if (number == -1) return NULL;
          ctx->new_count = (size_t)number;
        }
    }
  }
}

/* TypeInfoCompare */
  static int
__pyx_typeinfo_cmp(__Pyx_TypeInfo *a, __Pyx_TypeInfo *b)
{
    int i;
    if (!a || !b)
        return 0;
    if (a == b)
        return 1;
    if (a->size != b->size || a->typegroup != b->typegroup ||
            a->is_unsigned != b->is_unsigned || a->ndim != b->ndim) {
        if (a->typegroup == 'H' || b->typegroup == 'H') {
            return a->size == b->size;
        } else {
            return 0;
        }
    }
    if (a->ndim) {
        for (i = 0; i < a->ndim; i++)
            if (a->arraysize[i] != b->arraysize[i])
                return 0;
    }
    if (a->typegroup == 'S') {
        if (a->flags != b->flags)
            return 0;
        if (a->fields || b->fields) {
            if (!(a->fields && b->fields))
                return 0;
            for (i = 0; a->fields[i].type && b->fields[i].type; i++) {
                __Pyx_StructField *field_a = a->fields + i;
                __Pyx_StructField *field_b = b->fields + i;
                if (field_a->offset != field_b->offset ||
                    !__pyx_typeinfo_cmp(field_a->type, field_b->type))
                    return 0;
            }
            return !a->fields[i].type && !b->fields[i].type;
        }
    }
    return 1;
}

/* MemviewSliceValidateAndInit */
  static int
__pyx_check_strides(Py_buffer *buf, int dim, int ndim, int spec)
{
    if (buf->shape[dim] <= 1)
        return 1;
    if (buf->strides) {
        if (spec & __Pyx_MEMVIEW_CONTIG) {
            if (spec & (__Pyx_MEMVIEW_PTR|__Pyx_MEMVIEW_FULL)) {
                if (unlikely(buf->strides[dim] != sizeof(void *))) {
                    PyErr_Format(PyExc_ValueError,
                                 "Buffer is not indirectly contiguous "
                                 "in dimension %d.", dim);
                    goto fail;
                }
            } else if (unlikely(buf->strides[dim] != buf->itemsize)) {
                PyErr_SetString(PyExc_ValueError,
                                "Buffer and memoryview are not contiguous "
                                "in the same dimension.");
                goto fail;
            }
        }
        if (spec & __Pyx_MEMVIEW_FOLLOW) {
            Py_ssize_t stride = buf->strides[dim];
            if (stride < 0)
                stride = -stride;
            if (unlikely(stride < buf->itemsize)) {
                PyErr_SetString(PyExc_ValueError,
                                "Buffer and memoryview are not contiguous "
                                "in the same dimension.");
                goto fail;
            }
        }
    } else {
        if (unlikely(spec & __Pyx_MEMVIEW_CONTIG && dim != ndim - 1)) {
            PyErr_Format(PyExc_ValueError,
                         "C-contiguous buffer is not contiguous in "
                         "dimension %d", dim);
            goto fail;
        } else if (unlikely(spec & (__Pyx_MEMVIEW_PTR))) {
            PyErr_Format(PyExc_ValueError,
                         "C-contiguous buffer is not indirect in "
                         "dimension %d", dim);
            goto fail;
        } else if (unlikely(buf->suboffsets)) {
            PyErr_SetString(PyExc_ValueError,
                            "Buffer exposes suboffsets but no strides");
            goto fail;
        }
    }
    return 1;
fail:
    return 0;
}
static int
__pyx_check_suboffsets(Py_buffer *buf, int dim, int ndim, int spec)
{
    CYTHON_UNUSED_VAR(ndim);
    if (spec & __Pyx_MEMVIEW_DIRECT) {
        if (unlikely(buf->suboffsets && buf->suboffsets[dim] >= 0)) {
            PyErr_Format(PyExc_ValueError,
                         "Buffer not compatible with direct access "
                         "in dimension %d.", dim);
            goto fail;
        }
    }
    if (spec & __Pyx_MEMVIEW_PTR) {
        if (unlikely(!buf->suboffsets || (buf->suboffsets[dim] < 0))) {
            PyErr_Format(PyExc_ValueError,
                         "Buffer is not indirectly accessible "
                         "in dimension %d.", dim);
            goto fail;
        }
    }
    return 1;
fail:
    return 0;
}
static int
__pyx_verify_contig(Py_buffer *buf, int ndim, int c_or_f_flag)
{
    int i;
    if (c_or_f_flag & __Pyx_IS_F_CONTIG) {
        Py_ssize_t stride = 1;
        for (i = 0; i < ndim; i++) {
            if (unlikely(stride * buf->itemsize != buf->strides[i]  &&  buf->shape[i] > 1)) {
                PyErr_SetString(PyExc_ValueError,
                    "Buffer not fortran contiguous.");
                goto fail;
            }
            stride = stride * buf->shape[i];
        }
    } else if (c_or_f_flag & __Pyx_IS_C_CONTIG) {
        Py_ssize_t stride = 1;
        for (i = ndim - 1; i >- 1; i--) {
            if (unlikely(stride * buf->itemsize != buf->strides[i]  &&  buf->shape[i] > 1)) {
                PyErr_SetString(PyExc_ValueError,
                    "Buffer not C contiguous.");
                goto fail;
            }
            stride = stride * buf->shape[i];
        }
    }
    return 1;
fail:
    return 0;
}
static int __Pyx_ValidateAndInit_memviewslice(
                int *axes_specs,
                int c_or_f_flag,
                int buf_flags,
                int ndim,
                __Pyx_TypeInfo *dtype,
                __Pyx_BufFmt_StackElem stack[],
                __Pyx_memviewslice *memviewslice,
                PyObject *original_obj)
{
    struct __pyx_memoryview_obj *memview, *new_memview;
    __Pyx_RefNannyDeclarations
    Py_buffer *buf;
    int i, spec = 0, retval = -1;
    __Pyx_BufFmt_Context ctx;
    int from_memoryview = __pyx_memoryview_check(original_obj);
    __Pyx_RefNannySetupContext("ValidateAndInit_memviewslice", 0);
    if (from_memoryview && __pyx_typeinfo_cmp(dtype, ((struct __pyx_memoryview_obj *)
                                                            original_obj)->typeinfo)) {
        memview = (struct __pyx_memoryview_obj *) original_obj;
        new_memview = NULL;
    } else {
        memview = (struct __pyx_memoryview_obj *) __pyx_memoryview_new(
                                            original_obj, buf_flags, 0, dtype);
        new_memview = memview;
        if (unlikely(!memview))
            goto fail;
    }
    buf = &memview->view;
    if (unlikely(buf->ndim != ndim)) {
        PyErr_Format(PyExc_ValueError,
                "Buffer has wrong number of dimensions (expected %d, got %d)",
                ndim, buf->ndim);
        goto fail;
    }
    if (new_memview) {
        __Pyx_BufFmt_Init(&ctx, stack, dtype);
        if (unlikely(!__Pyx_BufFmt_CheckString(&ctx, buf->format))) goto fail;
    }
    if (unlikely((unsigned) buf->itemsize != dtype->size)) {
        PyErr_Format(PyExc_ValueError,
                     "Item size of buffer (%" CYTHON_FORMAT_SSIZE_T "u byte%s) "
                     "does not match size of '%s' (%" CYTHON_FORMAT_SSIZE_T "u byte%s)",
                     buf->itemsize,
                     (buf->itemsize > 1) ? "s" : "",
                     dtype->name,
                     dtype->size,
                     (dtype->size > 1) ? "s" : "");
        goto fail;
    }
    if (buf->len > 0) {
        for (i = 0; i < ndim; i++) {
            spec = axes_specs[i];
            if (unlikely(!__pyx_check_strides(buf, i, ndim, spec)))
                goto fail;
            if (unlikely(!__pyx_check_suboffsets(buf, i, ndim, spec)))
                goto fail;
        }
        if (unlikely(buf->strides && !__pyx_verify_contig(buf, ndim, c_or_f_flag)))
            goto fail;
    }
    if (unlikely(__Pyx_init_memviewslice(memview, ndim, memviewslice,
                                         new_memview != NULL) == -1)) {
        goto fail;
    }
    retval = 0;
    goto no_fail;
fail:
    Py_XDECREF(new_memview);
    retval = -1;
no_fail:
    __Pyx_RefNannyFinishContext();
    return retval;
}

/* ObjectToMemviewSlice */
  static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_ds_unsigned_long(PyObject *obj, int writable_flag) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, 0,
                                                 PyBUF_RECORDS_RO | writable_flag, 1,
                                                 &__Pyx_TypeInfo_unsigned_long, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

/* MemviewDtypeToObject */
  static CYTHON_INLINE PyObject *__pyx_memview_get_unsigned_long(const char *itemp) {
    return (PyObject *) __Pyx_PyInt_From_unsigned_long(*(unsigned long *) itemp);
}
static CYTHON_INLINE int __pyx_memview_set_unsigned_long(const char *itemp, PyObject *obj) {
    unsigned long value = __Pyx_PyInt_As_unsigned_long(obj);
    if (unlikely((value == (unsigned long)-1) && PyErr_Occurred()))
        return 0;
    *(unsigned long *) itemp = value;
    return 1;
}

/* ObjectToMemviewSlice */
  static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_ds_int(PyObject *obj, int writable_flag) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, 0,
                                                 PyBUF_RECORDS_RO | writable_flag, 1,
                                                 &__Pyx_TypeInfo_int, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

/* ObjectToMemviewSlice */
  static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_ds_nn_bool(PyObject *obj, int writable_flag) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, 0,
                                                 PyBUF_RECORDS_RO | writable_flag, 1,
                                                 &__Pyx_TypeInfo_nn_bool, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

/* MemviewDtypeToObject */
  static CYTHON_INLINE PyObject *__pyx_memview_get_nn_bool(const char *itemp) {
    return (PyObject *) __Pyx_PyBool_FromLong(*(bool *) itemp);
}
static CYTHON_INLINE int __pyx_memview_set_nn_bool(const char *itemp, PyObject *obj) {
    bool value = __Pyx_PyObject_IsTrue(obj);
    if (unlikely((value == ((bool)-1)) && PyErr_Occurred()))
        return 0;
    *(bool *) itemp = value;
    return 1;
}

/* MemviewDtypeToObject */
  static CYTHON_INLINE PyObject *__pyx_memview_get_int(const char *itemp) {
    return (PyObject *) __Pyx_PyInt_From_int(*(int *) itemp);
}
static CYTHON_INLINE int __pyx_memview_set_int(const char *itemp, PyObject *obj) {
    int value = __Pyx_PyInt_As_int(obj);
    if (unlikely((value == (int)-1) && PyErr_Occurred()))
        return 0;
    *(int *) itemp = value;
    return 1;
}

/* Declarations */
  #if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
  #if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabsf(b.real) >= fabsf(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                float r = b.imag / b.real;
                float s = (float)(1.0) / (b.real + b.imag * r);
                return __pyx_t_float_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            float r = b.real / b.imag;
            float s = (float)(1.0) / (b.imag + b.real * r);
            return __pyx_t_float_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            float denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_float_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_float(a, a);
                    case 3:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, a);
                    case 4:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if ((b.imag == 0) && (a.real >= 0)) {
                    z.real = powf(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2f(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_float(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

/* Declarations */
  #if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
  #if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabs(b.real) >= fabs(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                double r = b.imag / b.real;
                double s = (double)(1.0) / (b.real + b.imag * r);
                return __pyx_t_double_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            double r = b.real / b.imag;
            double s = (double)(1.0) / (b.imag + b.real * r);
            return __pyx_t_double_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            double denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_double_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_double(a, a);
                    case 3:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, a);
                    case 4:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if ((b.imag == 0) && (a.real >= 0)) {
                    z.real = pow(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_double(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

/* Declarations */
  #if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_long_double_complex __pyx_t_long_double_complex_from_parts(long double x, long double y) {
      return ::std::complex< long double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_long_double_complex __pyx_t_long_double_complex_from_parts(long double x, long double y) {
      return x + y*(__pyx_t_long_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_long_double_complex __pyx_t_long_double_complex_from_parts(long double x, long double y) {
      __pyx_t_long_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
  #if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
#else
    static CYTHON_INLINE int __Pyx_c_eq_long__double(__pyx_t_long_double_complex a, __pyx_t_long_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_sum_long__double(__pyx_t_long_double_complex a, __pyx_t_long_double_complex b) {
        __pyx_t_long_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_diff_long__double(__pyx_t_long_double_complex a, __pyx_t_long_double_complex b) {
        __pyx_t_long_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_prod_long__double(__pyx_t_long_double_complex a, __pyx_t_long_double_complex b) {
        __pyx_t_long_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_quot_long__double(__pyx_t_long_double_complex a, __pyx_t_long_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_long_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabsl(b.real) >= fabsl(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_long_double_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                long double r = b.imag / b.real;
                long double s = (long double)(1.0) / (b.real + b.imag * r);
                return __pyx_t_long_double_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            long double r = b.real / b.imag;
            long double s = (long double)(1.0) / (b.imag + b.real * r);
            return __pyx_t_long_double_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_quot_long__double(__pyx_t_long_double_complex a, __pyx_t_long_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_long_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            long double denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_long_double_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_neg_long__double(__pyx_t_long_double_complex a) {
        __pyx_t_long_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_long__double(__pyx_t_long_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_conj_long__double(__pyx_t_long_double_complex a) {
        __pyx_t_long_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE long double __Pyx_c_abs_long__double(__pyx_t_long_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtl(z.real*z.real + z.imag*z.imag);
          #else
            return hypotl(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_pow_long__double(__pyx_t_long_double_complex a, __pyx_t_long_double_complex b) {
            __pyx_t_long_double_complex z;
            long double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    long double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_long__double(a, a);
                    case 3:
                        z = __Pyx_c_prod_long__double(a, a);
                        return __Pyx_c_prod_long__double(z, a);
                    case 4:
                        z = __Pyx_c_prod_long__double(a, a);
                        return __Pyx_c_prod_long__double(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if ((b.imag == 0) && (a.real >= 0)) {
                    z.real = powl(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2l(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_long__double(a);
                theta = atan2l(a.imag, a.real);
            }
            lnr = logl(r);
            z_r = expl(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosl(z_theta);
            z.imag = z_r * sinl(z_theta);
            return z;
        }
    #endif
#endif

/* MemviewSliceCopyTemplate */
  static __Pyx_memviewslice
__pyx_memoryview_copy_new_contig(const __Pyx_memviewslice *from_mvs,
                                 const char *mode, int ndim,
                                 size_t sizeof_dtype, int contig_flag,
                                 int dtype_is_object)
{
    __Pyx_RefNannyDeclarations
    int i;
    __Pyx_memviewslice new_mvs = { 0, 0, { 0 }, { 0 }, { 0 } };
    struct __pyx_memoryview_obj *from_memview = from_mvs->memview;
    Py_buffer *buf = &from_memview->view;
    PyObject *shape_tuple = NULL;
    PyObject *temp_int = NULL;
    struct __pyx_array_obj *array_obj = NULL;
    struct __pyx_memoryview_obj *memview_obj = NULL;
    __Pyx_RefNannySetupContext("__pyx_memoryview_copy_new_contig", 0);
    for (i = 0; i < ndim; i++) {
        if (unlikely(from_mvs->suboffsets[i] >= 0)) {
            PyErr_Format(PyExc_ValueError, "Cannot copy memoryview slice with "
                                           "indirect dimensions (axis %d)", i);
            goto fail;
        }
    }
    shape_tuple = PyTuple_New(ndim);
    if (unlikely(!shape_tuple)) {
        goto fail;
    }
    __Pyx_GOTREF(shape_tuple);
    for(i = 0; i < ndim; i++) {
        temp_int = PyInt_FromSsize_t(from_mvs->shape[i]);
        if(unlikely(!temp_int)) {
            goto fail;
        } else {
            PyTuple_SET_ITEM(shape_tuple, i, temp_int);
            temp_int = NULL;
        }
    }
    array_obj = __pyx_array_new(shape_tuple, sizeof_dtype, buf->format, (char *) mode, NULL);
    if (unlikely(!array_obj)) {
        goto fail;
    }
    __Pyx_GOTREF(array_obj);
    memview_obj = (struct __pyx_memoryview_obj *) __pyx_memoryview_new(
                                    (PyObject *) array_obj, contig_flag,
                                    dtype_is_object,
                                    from_mvs->memview->typeinfo);
    if (unlikely(!memview_obj))
        goto fail;
    if (unlikely(__Pyx_init_memviewslice(memview_obj, ndim, &new_mvs, 1) < 0))
        goto fail;
    if (unlikely(__pyx_memoryview_copy_contents(*from_mvs, new_mvs, ndim, ndim,
                                                dtype_is_object) < 0))
        goto fail;
    goto no_fail;
fail:
    __Pyx_XDECREF(new_mvs.memview);
    new_mvs.memview = NULL;
    new_mvs.data = NULL;
no_fail:
    __Pyx_XDECREF(shape_tuple);
    __Pyx_XDECREF(temp_int);
    __Pyx_XDECREF(array_obj);
    __Pyx_RefNannyFinishContext();
    return new_mvs;
}

/* MemviewSliceInit */
  static int
__Pyx_init_memviewslice(struct __pyx_memoryview_obj *memview,
                        int ndim,
                        __Pyx_memviewslice *memviewslice,
                        int memview_is_new_reference)
{
    __Pyx_RefNannyDeclarations
    int i, retval=-1;
    Py_buffer *buf = &memview->view;
    __Pyx_RefNannySetupContext("init_memviewslice", 0);
    if (unlikely(memviewslice->memview || memviewslice->data)) {
        PyErr_SetString(PyExc_ValueError,
            "memviewslice is already initialized!");
        goto fail;
    }
    if (buf->strides) {
        for (i = 0; i < ndim; i++) {
            memviewslice->strides[i] = buf->strides[i];
        }
    } else {
        Py_ssize_t stride = buf->itemsize;
        for (i = ndim - 1; i >= 0; i--) {
            memviewslice->strides[i] = stride;
            stride *= buf->shape[i];
        }
    }
    for (i = 0; i < ndim; i++) {
        memviewslice->shape[i]   = buf->shape[i];
        if (buf->suboffsets) {
            memviewslice->suboffsets[i] = buf->suboffsets[i];
        } else {
            memviewslice->suboffsets[i] = -1;
        }
    }
    memviewslice->memview = memview;
    memviewslice->data = (char *)buf->buf;
    if (__pyx_add_acquisition_count(memview) == 0 && !memview_is_new_reference) {
        Py_INCREF(memview);
    }
    retval = 0;
    goto no_fail;
fail:
    memviewslice->memview = 0;
    memviewslice->data = 0;
    retval = -1;
no_fail:
    __Pyx_RefNannyFinishContext();
    return retval;
}
#ifndef Py_NO_RETURN
#define Py_NO_RETURN
#endif
static void __pyx_fatalerror(const char *fmt, ...) Py_NO_RETURN {
    va_list vargs;
    char msg[200];
#if PY_VERSION_HEX >= 0x030A0000 || defined(HAVE_STDARG_PROTOTYPES)
    va_start(vargs, fmt);
#else
    va_start(vargs);
#endif
    vsnprintf(msg, 200, fmt, vargs);
    va_end(vargs);
    Py_FatalError(msg);
}
static CYTHON_INLINE int
__pyx_add_acquisition_count_locked(__pyx_atomic_int_type *acquisition_count,
                                   PyThread_type_lock lock)
{
    int result;
    PyThread_acquire_lock(lock, 1);
    result = (*acquisition_count)++;
    PyThread_release_lock(lock);
    return result;
}
static CYTHON_INLINE int
__pyx_sub_acquisition_count_locked(__pyx_atomic_int_type *acquisition_count,
                                   PyThread_type_lock lock)
{
    int result;
    PyThread_acquire_lock(lock, 1);
    result = (*acquisition_count)--;
    PyThread_release_lock(lock);
    return result;
}
static CYTHON_INLINE void
__Pyx_INC_MEMVIEW(__Pyx_memviewslice *memslice, int have_gil, int lineno)
{
    __pyx_nonatomic_int_type old_acquisition_count;
    struct __pyx_memoryview_obj *memview = memslice->memview;
    if (unlikely(!memview || (PyObject *) memview == Py_None)) {
        return;
    }
    old_acquisition_count = __pyx_add_acquisition_count(memview);
    if (unlikely(old_acquisition_count <= 0)) {
        if (likely(old_acquisition_count == 0)) {
            if (have_gil) {
                Py_INCREF((PyObject *) memview);
            } else {
                PyGILState_STATE _gilstate = PyGILState_Ensure();
                Py_INCREF((PyObject *) memview);
                PyGILState_Release(_gilstate);
            }
        } else {
            __pyx_fatalerror("Acquisition count is %d (line %d)",
                             old_acquisition_count+1, lineno);
        }
    }
}
static CYTHON_INLINE void __Pyx_XCLEAR_MEMVIEW(__Pyx_memviewslice *memslice,
                                             int have_gil, int lineno) {
    __pyx_nonatomic_int_type old_acquisition_count;
    struct __pyx_memoryview_obj *memview = memslice->memview;
    if (unlikely(!memview || (PyObject *) memview == Py_None)) {
        memslice->memview = NULL;
        return;
    }
    old_acquisition_count = __pyx_sub_acquisition_count(memview);
    memslice->data = NULL;
    if (likely(old_acquisition_count > 1)) {
        memslice->memview = NULL;
    } else if (likely(old_acquisition_count == 1)) {
        if (have_gil) {
            Py_CLEAR(memslice->memview);
        } else {
            PyGILState_STATE _gilstate = PyGILState_Ensure();
            Py_CLEAR(memslice->memview);
            PyGILState_Release(_gilstate);
        }
    } else {
        __pyx_fatalerror("Acquisition count is %d (line %d)",
                         old_acquisition_count-1, lineno);
    }
}

/* CIntFromPy */
  static CYTHON_INLINE unsigned long __Pyx_PyInt_As_unsigned_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const unsigned long neg_one = (unsigned long) -1, const_zero = (unsigned long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(unsigned long) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(unsigned long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (unsigned long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(unsigned long, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(unsigned long) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned long) >= 2 * PyLong_SHIFT)) {
                                return (unsigned long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned long) >= 3 * PyLong_SHIFT)) {
                                return (unsigned long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned long) >= 4 * PyLong_SHIFT)) {
                                return (unsigned long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (unsigned long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(unsigned long) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(unsigned long) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(unsigned long, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(unsigned long) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned long) - 1 > 2 * PyLong_SHIFT)) {
                                return (unsigned long) (((unsigned long)-1)*(((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(unsigned long) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned long) - 1 > 2 * PyLong_SHIFT)) {
                                return (unsigned long) ((((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(unsigned long) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned long) - 1 > 3 * PyLong_SHIFT)) {
                                return (unsigned long) (((unsigned long)-1)*(((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned long) - 1 > 3 * PyLong_SHIFT)) {
                                return (unsigned long) ((((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(unsigned long) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned long) - 1 > 4 * PyLong_SHIFT)) {
                                return (unsigned long) (((unsigned long)-1)*(((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned long) - 1 > 4 * PyLong_SHIFT)) {
                                return (unsigned long) ((((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(unsigned long) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(unsigned long) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
            unsigned long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
#if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
#endif
            if (likely(v)) {
                int ret = -1;
#if PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                ret = _PyLong_AsByteArray((PyLongObject *)v,
                                           bytes, sizeof(val),
                                           is_little, !is_unsigned);
#else
                PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
                int bits, remaining_bits, is_negative = 0;
                long idigit;
                int chunk_size = (sizeof(long) < 8) ? 30 : 62;
                if (unlikely(!PyLong_CheckExact(v))) {
                    PyObject *tmp = v;
                    v = PyNumber_Long(v);
                    assert(PyLong_CheckExact(v));
                    Py_DECREF(tmp);
                    if (unlikely(!v)) return (unsigned long) -1;
                }
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                if (Py_SIZE(x) == 0)
                    return (unsigned long) 0;
                is_negative = Py_SIZE(x) < 0;
#else
                {
                    int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                    if (unlikely(result < 0))
                        return (unsigned long) -1;
                    is_negative = result == 1;
                }
#endif
                if (is_unsigned && unlikely(is_negative)) {
                    goto raise_neg_overflow;
                } else if (is_negative) {
                    stepval = PyNumber_Invert(v);
                    if (unlikely(!stepval))
                        return (unsigned long) -1;
                } else {
                    stepval = __Pyx_NewRef(v);
                }
                val = (unsigned long) 0;
                mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
                shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
                for (bits = 0; bits < (int) sizeof(unsigned long) * 8 - chunk_size; bits += chunk_size) {
                    PyObject *tmp, *digit;
                    digit = PyNumber_And(stepval, mask);
                    if (unlikely(!digit)) goto done;
                    idigit = PyLong_AsLong(digit);
                    Py_DECREF(digit);
                    if (unlikely(idigit < 0)) goto done;
                    tmp = PyNumber_Rshift(stepval, shift);
                    if (unlikely(!tmp)) goto done;
                    Py_DECREF(stepval); stepval = tmp;
                    val |= ((unsigned long) idigit) << bits;
                    #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                    if (Py_SIZE(stepval) == 0)
                        goto unpacking_done;
                    #endif
                }
                idigit = PyLong_AsLong(stepval);
                if (unlikely(idigit < 0)) goto done;
                remaining_bits = ((int) sizeof(unsigned long) * 8) - bits - (is_unsigned ? 0 : 1);
                if (unlikely(idigit >= (1L << remaining_bits)))
                    goto raise_overflow;
                val |= ((unsigned long) idigit) << bits;
            #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
            unpacking_done:
            #endif
                if (!is_unsigned) {
                    if (unlikely(val & (((unsigned long) 1) << (sizeof(unsigned long) * 8 - 1))))
                        goto raise_overflow;
                    if (is_negative)
                        val = ~val;
                }
                ret = 0;
            done:
                Py_XDECREF(shift);
                Py_XDECREF(mask);
                Py_XDECREF(stepval);
#endif
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
            return (unsigned long) -1;
        }
    } else {
        unsigned long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (unsigned long) -1;
        val = __Pyx_PyInt_As_unsigned_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to unsigned long");
    return (unsigned long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to unsigned long");
    return (unsigned long) -1;
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_long(unsigned long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const unsigned long neg_one = (unsigned long) -1, const_zero = (unsigned long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(unsigned long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        return _PyLong_FromByteArray(bytes, sizeof(unsigned long),
                                     little, !is_unsigned);
#else
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(unsigned long));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        if (!is_unsigned) {
            kwds = PyDict_New();
            if (!kwds) goto limited_bad;
            if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(Py_True))) goto limited_bad;
        }
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntFromPy */
  static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(int) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(int, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) >= 2 * PyLong_SHIFT)) {
                                return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) >= 3 * PyLong_SHIFT)) {
                                return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) >= 4 * PyLong_SHIFT)) {
                                return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(int) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(int) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(int, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(int) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                                return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                                return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                                return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                                return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                                return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                                return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(int) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(int) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
#if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
#endif
            if (likely(v)) {
                int ret = -1;
#if PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                ret = _PyLong_AsByteArray((PyLongObject *)v,
                                           bytes, sizeof(val),
                                           is_little, !is_unsigned);
#else
                PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
                int bits, remaining_bits, is_negative = 0;
                long idigit;
                int chunk_size = (sizeof(long) < 8) ? 30 : 62;
                if (unlikely(!PyLong_CheckExact(v))) {
                    PyObject *tmp = v;
                    v = PyNumber_Long(v);
                    assert(PyLong_CheckExact(v));
                    Py_DECREF(tmp);
                    if (unlikely(!v)) return (int) -1;
                }
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                if (Py_SIZE(x) == 0)
                    return (int) 0;
                is_negative = Py_SIZE(x) < 0;
#else
                {
                    int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                    if (unlikely(result < 0))
                        return (int) -1;
                    is_negative = result == 1;
                }
#endif
                if (is_unsigned && unlikely(is_negative)) {
                    goto raise_neg_overflow;
                } else if (is_negative) {
                    stepval = PyNumber_Invert(v);
                    if (unlikely(!stepval))
                        return (int) -1;
                } else {
                    stepval = __Pyx_NewRef(v);
                }
                val = (int) 0;
                mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
                shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
                for (bits = 0; bits < (int) sizeof(int) * 8 - chunk_size; bits += chunk_size) {
                    PyObject *tmp, *digit;
                    digit = PyNumber_And(stepval, mask);
                    if (unlikely(!digit)) goto done;
                    idigit = PyLong_AsLong(digit);
                    Py_DECREF(digit);
                    if (unlikely(idigit < 0)) goto done;
                    tmp = PyNumber_Rshift(stepval, shift);
                    if (unlikely(!tmp)) goto done;
                    Py_DECREF(stepval); stepval = tmp;
                    val |= ((int) idigit) << bits;
                    #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                    if (Py_SIZE(stepval) == 0)
                        goto unpacking_done;
                    #endif
                }
                idigit = PyLong_AsLong(stepval);
                if (unlikely(idigit < 0)) goto done;
                remaining_bits = ((int) sizeof(int) * 8) - bits - (is_unsigned ? 0 : 1);
                if (unlikely(idigit >= (1L << remaining_bits)))
                    goto raise_overflow;
                val |= ((int) idigit) << bits;
            #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
            unpacking_done:
            #endif
                if (!is_unsigned) {
                    if (unlikely(val & (((int) 1) << (sizeof(int) * 8 - 1))))
                        goto raise_overflow;
                    if (is_negative)
                        val = ~val;
                }
                ret = 0;
            done:
                Py_XDECREF(shift);
                Py_XDECREF(mask);
                Py_XDECREF(stepval);
#endif
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
  static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(long) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(long, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) >= 2 * PyLong_SHIFT)) {
                                return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) >= 3 * PyLong_SHIFT)) {
                                return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) >= 4 * PyLong_SHIFT)) {
                                return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(long) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(long) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(long, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(long) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                                return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                                return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                                return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                                return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                                return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                                return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(long) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(long) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
#if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
#endif
            if (likely(v)) {
                int ret = -1;
#if PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                ret = _PyLong_AsByteArray((PyLongObject *)v,
                                           bytes, sizeof(val),
                                           is_little, !is_unsigned);
#else
                PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
                int bits, remaining_bits, is_negative = 0;
                long idigit;
                int chunk_size = (sizeof(long) < 8) ? 30 : 62;
                if (unlikely(!PyLong_CheckExact(v))) {
                    PyObject *tmp = v;
                    v = PyNumber_Long(v);
                    assert(PyLong_CheckExact(v));
                    Py_DECREF(tmp);
                    if (unlikely(!v)) return (long) -1;
                }
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                if (Py_SIZE(x) == 0)
                    return (long) 0;
                is_negative = Py_SIZE(x) < 0;
#else
                {
                    int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                    if (unlikely(result < 0))
                        return (long) -1;
                    is_negative = result == 1;
                }
#endif
                if (is_unsigned && unlikely(is_negative)) {
                    goto raise_neg_overflow;
                } else if (is_negative) {
                    stepval = PyNumber_Invert(v);
                    if (unlikely(!stepval))
                        return (long) -1;
                } else {
                    stepval = __Pyx_NewRef(v);
                }
                val = (long) 0;
                mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
                shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
                for (bits = 0; bits < (int) sizeof(long) * 8 - chunk_size; bits += chunk_size) {
                    PyObject *tmp, *digit;
                    digit = PyNumber_And(stepval, mask);
                    if (unlikely(!digit)) goto done;
                    idigit = PyLong_AsLong(digit);
                    Py_DECREF(digit);
                    if (unlikely(idigit < 0)) goto done;
                    tmp = PyNumber_Rshift(stepval, shift);
                    if (unlikely(!tmp)) goto done;
                    Py_DECREF(stepval); stepval = tmp;
                    val |= ((long) idigit) << bits;
                    #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                    if (Py_SIZE(stepval) == 0)
                        goto unpacking_done;
                    #endif
                }
                idigit = PyLong_AsLong(stepval);
                if (unlikely(idigit < 0)) goto done;
                remaining_bits = ((int) sizeof(long) * 8) - bits - (is_unsigned ? 0 : 1);
                if (unlikely(idigit >= (1L << remaining_bits)))
                    goto raise_overflow;
                val |= ((long) idigit) << bits;
            #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
            unpacking_done:
            #endif
                if (!is_unsigned) {
                    if (unlikely(val & (((long) 1) << (sizeof(long) * 8 - 1))))
                        goto raise_overflow;
                    if (is_negative)
                        val = ~val;
                }
                ret = 0;
            done:
                Py_XDECREF(shift);
                Py_XDECREF(mask);
                Py_XDECREF(stepval);
#endif
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
#else
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(int));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        if (!is_unsigned) {
            kwds = PyDict_New();
            if (!kwds) goto limited_bad;
            if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(Py_True))) goto limited_bad;
        }
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
#else
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(long));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        if (!is_unsigned) {
            kwds = PyDict_New();
            if (!kwds) goto limited_bad;
            if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(Py_True))) goto limited_bad;
        }
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntFromPy */
  static CYTHON_INLINE char __Pyx_PyInt_As_char(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const char neg_one = (char) -1, const_zero = (char) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(char) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(char, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (char) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(char, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(char) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(char) >= 2 * PyLong_SHIFT)) {
                                return (char) (((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(char) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(char) >= 3 * PyLong_SHIFT)) {
                                return (char) (((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(char) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(char) >= 4 * PyLong_SHIFT)) {
                                return (char) (((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (char) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(char) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(char, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(char) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(char, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(char, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(char) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(char) - 1 > 2 * PyLong_SHIFT)) {
                                return (char) (((char)-1)*(((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(char) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(char) - 1 > 2 * PyLong_SHIFT)) {
                                return (char) ((((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(char) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(char) - 1 > 3 * PyLong_SHIFT)) {
                                return (char) (((char)-1)*(((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(char) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(char) - 1 > 3 * PyLong_SHIFT)) {
                                return (char) ((((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(char) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(char) - 1 > 4 * PyLong_SHIFT)) {
                                return (char) (((char)-1)*(((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(char) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(char) - 1 > 4 * PyLong_SHIFT)) {
                                return (char) ((((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(char) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(char, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(char) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(char, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
            char val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
#if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
#endif
            if (likely(v)) {
                int ret = -1;
#if PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                ret = _PyLong_AsByteArray((PyLongObject *)v,
                                           bytes, sizeof(val),
                                           is_little, !is_unsigned);
#else
                PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
                int bits, remaining_bits, is_negative = 0;
                long idigit;
                int chunk_size = (sizeof(long) < 8) ? 30 : 62;
                if (unlikely(!PyLong_CheckExact(v))) {
                    PyObject *tmp = v;
                    v = PyNumber_Long(v);
                    assert(PyLong_CheckExact(v));
                    Py_DECREF(tmp);
                    if (unlikely(!v)) return (char) -1;
                }
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                if (Py_SIZE(x) == 0)
                    return (char) 0;
                is_negative = Py_SIZE(x) < 0;
#else
                {
                    int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                    if (unlikely(result < 0))
                        return (char) -1;
                    is_negative = result == 1;
                }
#endif
                if (is_unsigned && unlikely(is_negative)) {
                    goto raise_neg_overflow;
                } else if (is_negative) {
                    stepval = PyNumber_Invert(v);
                    if (unlikely(!stepval))
                        return (char) -1;
                } else {
                    stepval = __Pyx_NewRef(v);
                }
                val = (char) 0;
                mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
                shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
                for (bits = 0; bits < (int) sizeof(char) * 8 - chunk_size; bits += chunk_size) {
                    PyObject *tmp, *digit;
                    digit = PyNumber_And(stepval, mask);
                    if (unlikely(!digit)) goto done;
                    idigit = PyLong_AsLong(digit);
                    Py_DECREF(digit);
                    if (unlikely(idigit < 0)) goto done;
                    tmp = PyNumber_Rshift(stepval, shift);
                    if (unlikely(!tmp)) goto done;
                    Py_DECREF(stepval); stepval = tmp;
                    val |= ((char) idigit) << bits;
                    #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                    if (Py_SIZE(stepval) == 0)
                        goto unpacking_done;
                    #endif
                }
                idigit = PyLong_AsLong(stepval);
                if (unlikely(idigit < 0)) goto done;
                remaining_bits = ((int) sizeof(char) * 8) - bits - (is_unsigned ? 0 : 1);
                if (unlikely(idigit >= (1L << remaining_bits)))
                    goto raise_overflow;
                val |= ((char) idigit) << bits;
            #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
            unpacking_done:
            #endif
                if (!is_unsigned) {
                    if (unlikely(val & (((char) 1) << (sizeof(char) * 8 - 1))))
                        goto raise_overflow;
                    if (is_negative)
                        val = ~val;
                }
                ret = 0;
            done:
                Py_XDECREF(shift);
                Py_XDECREF(mask);
                Py_XDECREF(stepval);
#endif
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
            return (char) -1;
        }
    } else {
        char val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (char) -1;
        val = __Pyx_PyInt_As_char(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to char");
    return (char) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to char");
    return (char) -1;
}

/* FormatTypeName */
  #if CYTHON_COMPILING_IN_LIMITED_API
static __Pyx_TypeName
__Pyx_PyType_GetName(PyTypeObject* tp)
{
    PyObject *name = __Pyx_PyObject_GetAttrStr((PyObject *)tp,
                                               __pyx_n_s_name_2);
    if (unlikely(name == NULL) || unlikely(!PyUnicode_Check(name))) {
        PyErr_Clear();
        Py_XDECREF(name);
        name = __Pyx_NewRef(__pyx_n_s__300);
    }
    return name;
}
#endif

/* CheckBinaryVersion */
  static unsigned long __Pyx_get_runtime_version(void) {
#if __PYX_LIMITED_VERSION_HEX >= 0x030B00A4
    return Py_Version & ~0xFFUL;
#else
    const char* rt_version = Py_GetVersion();
    unsigned long version = 0;
    unsigned long factor = 0x01000000UL;
    unsigned int digit = 0;
    int i = 0;
    while (factor) {
        while ('0' <= rt_version[i] && rt_version[i] <= '9') {
            digit = digit * 10 + (unsigned int) (rt_version[i] - '0');
            ++i;
        }
        version += factor * digit;
        if (rt_version[i] != '.')
            break;
        digit = 0;
        factor >>= 8;
        ++i;
    }
    return version;
#endif
}
static int __Pyx_check_binary_version(unsigned long ct_version, unsigned long rt_version, int allow_newer) {
    const unsigned long MAJOR_MINOR = 0xFFFF0000UL;
    if ((rt_version & MAJOR_MINOR) == (ct_version & MAJOR_MINOR))
        return 0;
    if (likely(allow_newer && (rt_version & MAJOR_MINOR) > (ct_version & MAJOR_MINOR)))
        return 1;
    {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compile time Python version %d.%d "
                      "of module '%.100s' "
                      "%s "
                      "runtime version %d.%d",
                       (int) (ct_version >> 24), (int) ((ct_version >> 16) & 0xFF),
                       __Pyx_MODULE_NAME,
                       (allow_newer) ? "was newer than" : "does not match",
                       (int) (rt_version >> 24), (int) ((rt_version >> 16) & 0xFF)
       );
        return PyErr_WarnEx(NULL, message, 1);
    }
}

/* InitStrings */
  #if PY_MAJOR_VERSION >= 3
static int __Pyx_InitString(__Pyx_StringTabEntry t, PyObject **str) {
    if (t.is_unicode | t.is_str) {
        if (t.intern) {
            *str = PyUnicode_InternFromString(t.s);
        } else if (t.encoding) {
            *str = PyUnicode_Decode(t.s, t.n - 1, t.encoding, NULL);
        } else {
            *str = PyUnicode_FromStringAndSize(t.s, t.n - 1);
        }
    } else {
        *str = PyBytes_FromStringAndSize(t.s, t.n - 1);
    }
    if (!*str)
        return -1;
    if (PyObject_Hash(*str) == -1)
        return -1;
    return 0;
}
#endif
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION >= 3
        __Pyx_InitString(*t, t->p);
        #else
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        #endif
        ++t;
    }
    return 0;
}

#include <string.h>
static CYTHON_INLINE Py_ssize_t __Pyx_ssize_strlen(const char *s) {
    size_t len = strlen(s);
    if (unlikely(len > (size_t) PY_SSIZE_T_MAX)) {
        PyErr_SetString(PyExc_OverflowError, "byte string is too long");
        return -1;
    }
    return (Py_ssize_t) len;
}
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    Py_ssize_t len = __Pyx_ssize_strlen(c_str);
    if (unlikely(len < 0)) return NULL;
    return __Pyx_PyUnicode_FromStringAndSize(c_str, len);
}
static CYTHON_INLINE PyObject* __Pyx_PyByteArray_FromString(const char* c_str) {
    Py_ssize_t len = __Pyx_ssize_strlen(c_str);
    if (unlikely(len < 0)) return NULL;
    return PyByteArray_FromStringAndSize(c_str, len);
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY && !CYTHON_COMPILING_IN_LIMITED_API) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
    __Pyx_TypeName result_type_name = __Pyx_PyType_GetName(Py_TYPE(result));
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type " __Pyx_FMT_TYPENAME ").  "
                "The ability to return an instance of a strict subclass of int is deprecated, "
                "and may be removed in a future version of Python.",
                result_type_name)) {
            __Pyx_DECREF_TypeName(result_type_name);
            Py_DECREF(result);
            return NULL;
        }
        __Pyx_DECREF_TypeName(result_type_name);
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type " __Pyx_FMT_TYPENAME ")",
                 type_name, type_name, result_type_name);
    __Pyx_DECREF_TypeName(result_type_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(__Pyx_PyLong_IsCompact(b))) {
        return __Pyx_PyLong_CompactValue(b);
    } else {
      const digit* digits = __Pyx_PyLong_Digits(b);
      const Py_ssize_t size = __Pyx_PyLong_SignedDigitCount(b);
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
#if PY_MAJOR_VERSION < 3
  } else if (likely(PyInt_CheckExact(o))) {
    return PyInt_AS_LONG(o);
#endif
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyInt_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


/* #### Code section: utility_code_pragmas_end ### */
#ifdef _MSC_VER
#pragma warning( pop )
#endif



/* #### Code section: end ### */
#endif /* Py_PYTHON_H */
